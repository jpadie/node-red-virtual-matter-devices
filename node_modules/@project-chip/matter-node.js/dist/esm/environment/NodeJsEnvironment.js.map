{
  "version": 3,
  "sources": ["../../../src/environment/NodeJsEnvironment.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Environment, StorageService, VariableService } from \"@project-chip/matter.js/environment\";\nimport { Format, Logger } from \"@project-chip/matter.js/log\";\nimport { Network } from \"@project-chip/matter.js/net\";\nimport { existsSync, readFileSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { ImplementationError } from \"../exports/common.js\";\nimport { NetworkNode } from \"../net/NetworkNode.js\";\nimport { StorageBackendDisk } from \"../storage/StorageBackendDisk.js\";\nimport { NodeJsActionTracer } from \"./NodeJsActionTracer.js\";\nimport { ProcessManager } from \"./ProcessManager.js\";\n\n/**\n * This is the default environment implementation for Node.js:\n *\n *   - Sets variables using rudimentary command line, environment and configuration file parsers.\n *\n *   - Processes UNIX-style signals and sets process exit codes via {@link ProcessManager}\n *\n *   - Creates a default storage pool using the loaded configuration.\n *\n * You can modify this behavior:\n *\n *   - Via configuration\n *\n *   - By modifying {@link Environment.default}\n *\n *   - By providing an {@link Environment} to your components other than {@link Environment.default}\n *\n * The settings are applied in this order (the higher numbers overwrite lower numbers):\n * 1. Some internal Defaults (mainly Loglevel and such)\n * 2. Config file\n * 3. Environment variables (MATTER_*)\n * 4. Command line parameters\n *\n * The following variables are defined by this class additionally to {@link Environment}:\n * * `environment` - Name of the environment, Default \"default\"\n * * `path.root` - Path considered as root for any files to store, Fallback: \".\", Default: APPDATA/.matter (Windows), HOME/.matter else (or .matter-<envname>)\n * * `path.config` - Path to config file, Default: \"config.json\"\n * * `trace.path` - Path of the trace file to write, Default: \"trace.jsonl\" relative to path.root\n * * `trace.enable` - Enable writing a trace file\n * * `storage.path` - Where to store storage files, Default: \"path.root\"\n * * `storage.clear` - Clear storage on start? Default: false\n * * `runtime.signals` - By default register SIGINT and SIGUSR2 (diag) handlers, set to false if not wanted\n * * `runtime.exitcode` - By default we set the process.exitcode to 0 (ok) or 1 (crash); set to false to disable\n * * `runtime.unhandlederrors` - By default we log unhandled errors to matter.js log; set to false to disable\n */\nexport function NodeJsEnvironment() {\n    const env = new Environment(\"default\");\n\n    loadVariables(env);\n    configureRuntime(env);\n    configureStorage(env);\n    configureNetwork(env);\n\n    // When no logger format is set, we still use the default, and the process is running in a TTY, use ANSI formatting\n    // If a user wants to change the log format he still can do after the environment was initialized (which should be\n    // first thing anyway)\n    if (!env.vars.has(\"logger.format\") && Logger.format === Format.PLAIN && process.stdin?.isTTY) {\n        env.vars.set(\"logger.format\", Format.ANSI);\n    }\n\n    NodeJsActionTracer.configure(env);\n\n    return env;\n}\n\nfunction loadVariables(env: Environment) {\n    const vars = env.vars;\n\n    // Install defaults\n    vars.addConfigStyle(getDefaults(vars));\n\n    // Preload environment and argv so we can use it to find config file\n    vars.addUnixEnvStyle(process.env);\n    vars.addArgvStyle(process.argv);\n\n    // Load config files\n    vars.addConfigStyle(loadConfigFile(vars));\n\n    // Reload environment and argv so they override config\n    vars.addUnixEnvStyle(process.env);\n    vars.addArgvStyle(process.argv);\n}\n\nfunction configureRuntime(env: Environment) {\n    const processManager = new ProcessManager(env);\n    env.set(ProcessManager, processManager);\n}\n\nfunction configureStorage(env: Environment) {\n    const service = env.get(StorageService);\n\n    env.vars.use(() => {\n        const location = env.vars.get(\"storage.path\", env.vars.get(\"path.root\", \".\"));\n        service.location = location;\n    });\n\n    service.factory = namespace =>\n        new StorageBackendDisk(resolve(service.location ?? \".\", namespace), env.vars.get(\"storage.clear\", false));\n}\n\nfunction configureNetwork(env: Environment) {\n    env.set(Network, new NetworkNode());\n}\n\nexport function loadConfigFile(vars: VariableService) {\n    const path = vars.get(\"path.config\", \"config.json\");\n\n    if (!existsSync(path)) {\n        return {};\n    }\n\n    let configJson;\n    try {\n        configJson = readFileSync(path).toString();\n    } catch (e) {\n        throw new ImplementationError(`Error reading configuration file ${path}: ${(e as Error).message}`);\n    }\n\n    let configVars;\n    try {\n        configVars = JSON.parse(configJson);\n    } catch (e) {\n        throw new ImplementationError(`Error parsing configuration file ${path}: ${(e as Error).message}`);\n    }\n\n    return configVars;\n}\n\nfunction getDefaultRoot(envName: string) {\n    let matterDir;\n    if (process.platform === \"win32\") {\n        matterDir = resolve(process.env.APPDATA ?? \".\", \"matter\");\n    } else {\n        matterDir = resolve(process.env.HOME ?? \".\", \".matter\");\n    }\n\n    if (envName !== \"default\") {\n        matterDir = `${matterDir}-${envName}`;\n    }\n\n    return matterDir;\n}\n\nexport function getDefaults(vars: VariableService) {\n    const envName = vars.get(\"environment\", \"default\");\n    const rootPath = vars.get(\"path.root\", getDefaultRoot(envName));\n    const configPath = resolve(rootPath, vars.get(\"path.config\", \"config.json\"));\n\n    return {\n        environment: envName,\n        path: {\n            root: rootPath,\n            config: configPath,\n        },\n        runtime: {\n            signals: true,\n            exitcode: true,\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
