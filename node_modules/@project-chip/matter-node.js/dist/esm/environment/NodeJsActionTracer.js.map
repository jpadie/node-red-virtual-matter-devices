{
  "version": 3,
  "sources": ["../../../src/environment/NodeJsActionTracer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ActionTracer } from \"@project-chip/matter.js/behavior/context\";\nimport { Environment } from \"@project-chip/matter.js/environment\";\nimport { MaybePromise, serialize } from \"@project-chip/matter.js/util\";\nimport { FileHandle, open } from \"fs/promises\";\nimport { resolve } from \"path\";\n\nexport class NodeJsActionTracer extends ActionTracer {\n    #path: string;\n    #output?: FileHandle;\n    #write?: MaybePromise<void>;\n\n    constructor(path: string) {\n        super();\n\n        this.#path = path;\n    }\n\n    static configure(env: Environment) {\n        env.vars.use(() => {\n            if (env.has(ActionTracer)) {\n                env.delete(env.get(ActionTracer).constructor as new () => ActionTracer);\n            }\n\n            if (!env.vars.boolean(\"trace.enable\")) {\n                return;\n            }\n\n            const path = resolve(env.vars.get(\"path.root\", \".\"), env.vars.get(\"trace.path\", \"trace.jsonl\"));\n\n            const tracer = new NodeJsActionTracer(path);\n            env.set(ActionTracer, tracer);\n            env.runtime.add(tracer);\n        });\n    }\n\n    [Symbol.asyncDispose]() {\n        MaybePromise.then(this.#write, () => this.#output?.close());\n    }\n\n    override record(action: ActionTracer.Action) {\n        const raw = {\n            ...action,\n            path: action.path?.toString(false),\n            mutations: action.mutations\n                ? action.mutations.map(m => ({ ...m, path: m.path.toString(false) }))\n                : undefined,\n        };\n        this.#write = MaybePromise.then(this.#write, () => this.#record(raw));\n    }\n\n    async #record(action: object) {\n        if (this.#output === undefined) {\n            this.#output = await open(this.#path, \"w\");\n        }\n        await this.#output.write(JSON.stringify(action, replacer));\n        await this.#output.write(\"\\n\");\n    }\n}\n\nfunction replacer(_key: string, value: any) {\n    if (typeof value === \"bigint\" || ArrayBuffer.isView(value)) {\n        return serialize(value);\n    }\n    return value;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,oBAAoB;AAE7B,SAAS,cAAc,iBAAiB;AACxC,SAAqB,YAAY;AACjC,SAAS,eAAe;AAEjB,MAAM,2BAA2B,aAAa;AAAA,EACjD;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,MAAc;AACtB,UAAM;AAEN,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,OAAO,UAAU,KAAkB;AAC/B,QAAI,KAAK,IAAI,MAAM;AACf,UAAI,IAAI,IAAI,YAAY,GAAG;AACvB,YAAI,OAAO,IAAI,IAAI,YAAY,EAAE,WAAqC;AAAA,MAC1E;AAEA,UAAI,CAAC,IAAI,KAAK,QAAQ,cAAc,GAAG;AACnC;AAAA,MACJ;AAEA,YAAM,OAAO,QAAQ,IAAI,KAAK,IAAI,aAAa,GAAG,GAAG,IAAI,KAAK,IAAI,cAAc,aAAa,CAAC;AAE9F,YAAM,SAAS,IAAI,mBAAmB,IAAI;AAC1C,UAAI,IAAI,cAAc,MAAM;AAC5B,UAAI,QAAQ,IAAI,MAAM;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA,EAEA,CAAC,OAAO,YAAY,IAAI;AACpB,iBAAa,KAAK,KAAK,QAAQ,MAAM,KAAK,SAAS,MAAM,CAAC;AAAA,EAC9D;AAAA,EAES,OAAO,QAA6B;AACzC,UAAM,MAAM;AAAA,MACR,GAAG;AAAA,MACH,MAAM,OAAO,MAAM,SAAS,KAAK;AAAA,MACjC,WAAW,OAAO,YACZ,OAAO,UAAU,IAAI,QAAM,EAAE,GAAG,GAAG,MAAM,EAAE,KAAK,SAAS,KAAK,EAAE,EAAE,IAClE;AAAA,IACV;AACA,SAAK,SAAS,aAAa,KAAK,KAAK,QAAQ,MAAM,KAAK,QAAQ,GAAG,CAAC;AAAA,EACxE;AAAA,EAEA,MAAM,QAAQ,QAAgB;AAC1B,QAAI,KAAK,YAAY,QAAW;AAC5B,WAAK,UAAU,MAAM,KAAK,KAAK,OAAO,GAAG;AAAA,IAC7C;AACA,UAAM,KAAK,QAAQ,MAAM,KAAK,UAAU,QAAQ,QAAQ,CAAC;AACzD,UAAM,KAAK,QAAQ,MAAM,IAAI;AAAA,EACjC;AACJ;AAEA,SAAS,SAAS,MAAc,OAAY;AACxC,MAAI,OAAO,UAAU,YAAY,YAAY,OAAO,KAAK,GAAG;AACxD,WAAO,UAAU,KAAK;AAAA,EAC1B;AACA,SAAO;AACX;",
  "names": []
}
