/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Environment, StorageService } from "@project-chip/matter.js/environment";
import { Format, Logger } from "@project-chip/matter.js/log";
import { Network } from "@project-chip/matter.js/net";
import { existsSync, readFileSync } from "fs";
import { resolve } from "path";
import { ImplementationError } from "../exports/common.js";
import { NetworkNode } from "../net/NetworkNode.js";
import { StorageBackendDisk } from "../storage/StorageBackendDisk.js";
import { NodeJsActionTracer } from "./NodeJsActionTracer.js";
import { ProcessManager } from "./ProcessManager.js";
function NodeJsEnvironment() {
  const env = new Environment("default");
  loadVariables(env);
  configureRuntime(env);
  configureStorage(env);
  configureNetwork(env);
  if (!env.vars.has("logger.format") && Logger.format === Format.PLAIN && process.stdin?.isTTY) {
    env.vars.set("logger.format", Format.ANSI);
  }
  NodeJsActionTracer.configure(env);
  return env;
}
function loadVariables(env) {
  const vars = env.vars;
  vars.addConfigStyle(getDefaults(vars));
  vars.addUnixEnvStyle(process.env);
  vars.addArgvStyle(process.argv);
  vars.addConfigStyle(loadConfigFile(vars));
  vars.addUnixEnvStyle(process.env);
  vars.addArgvStyle(process.argv);
}
function configureRuntime(env) {
  const processManager = new ProcessManager(env);
  env.set(ProcessManager, processManager);
}
function configureStorage(env) {
  const service = env.get(StorageService);
  env.vars.use(() => {
    const location = env.vars.get("storage.path", env.vars.get("path.root", "."));
    service.location = location;
  });
  service.factory = (namespace) => new StorageBackendDisk(resolve(service.location ?? ".", namespace), env.vars.get("storage.clear", false));
}
function configureNetwork(env) {
  env.set(Network, new NetworkNode());
}
function loadConfigFile(vars) {
  const path = vars.get("path.config", "config.json");
  if (!existsSync(path)) {
    return {};
  }
  let configJson;
  try {
    configJson = readFileSync(path).toString();
  } catch (e) {
    throw new ImplementationError(`Error reading configuration file ${path}: ${e.message}`);
  }
  let configVars;
  try {
    configVars = JSON.parse(configJson);
  } catch (e) {
    throw new ImplementationError(`Error parsing configuration file ${path}: ${e.message}`);
  }
  return configVars;
}
function getDefaultRoot(envName) {
  let matterDir;
  if (process.platform === "win32") {
    matterDir = resolve(process.env.APPDATA ?? ".", "matter");
  } else {
    matterDir = resolve(process.env.HOME ?? ".", ".matter");
  }
  if (envName !== "default") {
    matterDir = `${matterDir}-${envName}`;
  }
  return matterDir;
}
function getDefaults(vars) {
  const envName = vars.get("environment", "default");
  const rootPath = vars.get("path.root", getDefaultRoot(envName));
  const configPath = resolve(rootPath, vars.get("path.config", "config.json"));
  return {
    environment: envName,
    path: {
      root: rootPath,
      config: configPath
    },
    runtime: {
      signals: true,
      exitcode: true
    }
  };
}
export {
  NodeJsEnvironment,
  getDefaults,
  loadConfigFile
};
//# sourceMappingURL=NodeJsEnvironment.js.map
