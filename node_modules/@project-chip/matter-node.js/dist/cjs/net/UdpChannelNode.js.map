{
  "version": 3,
  "sources": ["../../../src/net/UdpChannelNode.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Diagnostic, Logger } from \"@project-chip/matter.js/log\";\nimport { MAX_UDP_MESSAGE_SIZE, NetworkError, UdpChannel, UdpChannelOptions } from \"@project-chip/matter.js/net\";\nimport { ByteArray } from \"@project-chip/matter.js/util\";\nimport * as dgram from \"dgram\";\nimport { NetworkNode } from \"./NetworkNode.js\";\n\nconst logger = Logger.get(\"UdpChannelNode\");\n\nfunction createDgramSocket(host: string | undefined, port: number | undefined, options: dgram.SocketOptions) {\n    const socket = dgram.createSocket(options);\n    return new Promise<dgram.Socket>((resolve, reject) => {\n        const handleBindError = (error: Error) => {\n            try {\n                socket.close();\n            } catch (error) {\n                logger.debug(\"Error on closing socket\", error);\n            }\n            reject(error);\n        };\n        socket.on(\"error\", handleBindError);\n        socket.bind(port, host, () => {\n            const { address: localHost, port: localPort } = socket.address();\n            logger.debug(\n                \"Socket created and bound \",\n                Diagnostic.dict({\n                    remoteAddress: `${host}:${port}`,\n                    localAddress: `${localHost}:${localPort}`,\n                }),\n            );\n            socket.removeListener(\"error\", handleBindError);\n            socket.on(\"error\", error => logger.error(error));\n            resolve(socket);\n        });\n    });\n}\n\nexport class UdpChannelNode implements UdpChannel {\n    static async create({\n        listeningPort,\n        type,\n        listeningAddress,\n        netInterface,\n        membershipAddresses,\n    }: UdpChannelOptions) {\n        const socketOptions: dgram.SocketOptions = { type, reuseAddr: true };\n        if (type === \"udp6\") {\n            socketOptions.ipv6Only = true;\n        }\n        const socket = await createDgramSocket(listeningAddress, listeningPort, socketOptions);\n        socket.setBroadcast(true);\n        let netInterfaceZone: string | undefined;\n        if (netInterface !== undefined) {\n            netInterfaceZone = NetworkNode.getNetInterfaceZoneIpv6(netInterface);\n            let multicastInterface: string | undefined;\n            if (type === \"udp4\") {\n                multicastInterface = NetworkNode.getMulticastInterfaceIpv4(netInterface);\n                if (multicastInterface === undefined) {\n                    throw new NetworkError(`No IPv4 addresses on interface: ${netInterface}`);\n                }\n            } else {\n                if (netInterfaceZone === undefined) {\n                    throw new NetworkError(`No IPv6 addresses on interface: ${netInterface}`);\n                }\n                multicastInterface = `::%${netInterfaceZone}`;\n            }\n            logger.debug(\n                \"Initialize multicast\",\n                Diagnostic.dict({\n                    address: `${multicastInterface}:${listeningPort}`,\n                    interface: netInterface,\n                    type: type,\n                }),\n            );\n            socket.setMulticastInterface(multicastInterface);\n        }\n        if (membershipAddresses !== undefined) {\n            const multicastInterfaces = NetworkNode.getMembershipMulticastInterfaces(netInterface, type === \"udp4\");\n            for (const address of membershipAddresses) {\n                for (const multicastInterface of multicastInterfaces) {\n                    try {\n                        socket.addMembership(address, multicastInterface);\n                    } catch (error) {\n                        logger.warn(\n                            `Error adding membership for address ${address}${\n                                multicastInterface ? ` with interface ${multicastInterface}` : \"\"\n                            }: ${error}`,\n                        );\n                    }\n                }\n            }\n        }\n        return new UdpChannelNode(socket, netInterfaceZone);\n    }\n\n    readonly maxPayloadSize = MAX_UDP_MESSAGE_SIZE;\n\n    constructor(\n        private readonly socket: dgram.Socket,\n        private readonly netInterface?: string,\n    ) {}\n\n    onData(listener: (netInterface: string, peerAddress: string, peerPort: number, data: ByteArray) => void) {\n        const messageListener = (data: ByteArray, { address, port }: dgram.RemoteInfo) => {\n            const netInterface = this.netInterface ?? NetworkNode.getNetInterfaceForIp(address);\n            if (netInterface === undefined) return;\n            listener(netInterface, address, port, data);\n        };\n\n        this.socket.on(\"message\", messageListener);\n        return {\n            close: async () => {\n                this.socket.removeListener(\"message\", messageListener);\n            },\n        };\n    }\n\n    async send(host: string, port: number, data: ByteArray) {\n        return new Promise<void>((resolve, reject) => {\n            this.socket.send(data, port, host, error => {\n                if (error !== null) {\n                    const netError = new NetworkError(error.message);\n                    netError.stack = error.stack;\n                    reject(netError);\n                    return;\n                }\n                resolve();\n            });\n        });\n    }\n\n    async close() {\n        try {\n            this.socket.close();\n        } catch (error) {\n            logger.debug(\"Error on closing socket\", error);\n        }\n    }\n\n    get port() {\n        return this.socket.address().port;\n    }\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
