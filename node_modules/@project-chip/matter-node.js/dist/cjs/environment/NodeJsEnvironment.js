"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NodeJsEnvironment_exports = {};
__export(NodeJsEnvironment_exports, {
  NodeJsEnvironment: () => NodeJsEnvironment,
  getDefaults: () => getDefaults,
  loadConfigFile: () => loadConfigFile
});
module.exports = __toCommonJS(NodeJsEnvironment_exports);
var import_environment = require("@project-chip/matter.js/environment");
var import_log = require("@project-chip/matter.js/log");
var import_net = require("@project-chip/matter.js/net");
var import_fs = require("fs");
var import_path = require("path");
var import_common = require("../exports/common.js");
var import_NetworkNode = require("../net/NetworkNode.js");
var import_StorageBackendDisk = require("../storage/StorageBackendDisk.js");
var import_NodeJsActionTracer = require("./NodeJsActionTracer.js");
var import_ProcessManager = require("./ProcessManager.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function NodeJsEnvironment() {
  const env = new import_environment.Environment("default");
  loadVariables(env);
  configureRuntime(env);
  configureStorage(env);
  configureNetwork(env);
  if (!env.vars.has("logger.format") && import_log.Logger.format === import_log.Format.PLAIN && process.stdin?.isTTY) {
    env.vars.set("logger.format", import_log.Format.ANSI);
  }
  import_NodeJsActionTracer.NodeJsActionTracer.configure(env);
  return env;
}
function loadVariables(env) {
  const vars = env.vars;
  vars.addConfigStyle(getDefaults(vars));
  vars.addUnixEnvStyle(process.env);
  vars.addArgvStyle(process.argv);
  vars.addConfigStyle(loadConfigFile(vars));
  vars.addUnixEnvStyle(process.env);
  vars.addArgvStyle(process.argv);
}
function configureRuntime(env) {
  const processManager = new import_ProcessManager.ProcessManager(env);
  env.set(import_ProcessManager.ProcessManager, processManager);
}
function configureStorage(env) {
  const service = env.get(import_environment.StorageService);
  env.vars.use(() => {
    const location = env.vars.get("storage.path", env.vars.get("path.root", "."));
    service.location = location;
  });
  service.factory = (namespace) => new import_StorageBackendDisk.StorageBackendDisk((0, import_path.resolve)(service.location ?? ".", namespace), env.vars.get("storage.clear", false));
}
function configureNetwork(env) {
  env.set(import_net.Network, new import_NetworkNode.NetworkNode());
}
function loadConfigFile(vars) {
  const path = vars.get("path.config", "config.json");
  if (!(0, import_fs.existsSync)(path)) {
    return {};
  }
  let configJson;
  try {
    configJson = (0, import_fs.readFileSync)(path).toString();
  } catch (e) {
    throw new import_common.ImplementationError(`Error reading configuration file ${path}: ${e.message}`);
  }
  let configVars;
  try {
    configVars = JSON.parse(configJson);
  } catch (e) {
    throw new import_common.ImplementationError(`Error parsing configuration file ${path}: ${e.message}`);
  }
  return configVars;
}
function getDefaultRoot(envName) {
  let matterDir;
  if (process.platform === "win32") {
    matterDir = (0, import_path.resolve)(process.env.APPDATA ?? ".", "matter");
  } else {
    matterDir = (0, import_path.resolve)(process.env.HOME ?? ".", ".matter");
  }
  if (envName !== "default") {
    matterDir = `${matterDir}-${envName}`;
  }
  return matterDir;
}
function getDefaults(vars) {
  const envName = vars.get("environment", "default");
  const rootPath = vars.get("path.root", getDefaultRoot(envName));
  const configPath = (0, import_path.resolve)(rootPath, vars.get("path.config", "config.json"));
  return {
    environment: envName,
    path: {
      root: rootPath,
      config: configPath
    },
    runtime: {
      signals: true,
      exitcode: true
    }
  };
}
//# sourceMappingURL=NodeJsEnvironment.js.map
