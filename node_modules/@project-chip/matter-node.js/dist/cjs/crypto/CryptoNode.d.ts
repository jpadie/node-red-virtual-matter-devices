/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Crypto, CryptoDsaEncoding, PrivateKey } from "@project-chip/matter.js/crypto";
import { ByteArray } from "@project-chip/matter.js/util";
import * as crypto from "crypto";
export declare class CryptoNode extends Crypto {
    encrypt(key: ByteArray, data: ByteArray, nonce: ByteArray, aad?: ByteArray): ByteArray;
    decrypt(key: ByteArray, data: ByteArray, nonce: ByteArray, aad?: ByteArray): ByteArray;
    getRandomData(length: number): ByteArray;
    ecdhGeneratePublicKey(): {
        publicKey: ByteArray;
        ecdh: any;
    };
    ecdhGeneratePublicKeyAndSecret(peerPublicKey: ByteArray): {
        publicKey: ByteArray;
        sharedSecret: ByteArray;
    };
    ecdhGenerateSecret(peerPublicKey: ByteArray, ecdh: crypto.ECDH): ByteArray;
    hash(data: ByteArray | ByteArray[]): ByteArray;
    pbkdf2(secret: ByteArray, salt: ByteArray, iteration: number, keyLength: number): Promise<ByteArray>;
    hkdf(secret: ByteArray, salt: ByteArray, info: ByteArray, length?: number): Promise<ByteArray>;
    hmac(key: ByteArray, data: ByteArray): ByteArray;
    sign(privateKey: JsonWebKey, data: ByteArray | ByteArray[], dsaEncoding?: CryptoDsaEncoding): ByteArray;
    verify(publicKey: JsonWebKey, data: ByteArray, signature: ByteArray, dsaEncoding?: CryptoDsaEncoding): void;
    createKeyPair(): PrivateKey;
}
//# sourceMappingURL=CryptoNode.d.ts.map