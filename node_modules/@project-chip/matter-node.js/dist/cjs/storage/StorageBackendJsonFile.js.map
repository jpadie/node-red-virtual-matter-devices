{
  "version": 3,
  "sources": ["../../../src/storage/StorageBackendJsonFile.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    fromJson,\n    StorageBackendMemory,\n    StorageError,\n    SupportedStorageTypes,\n    toJson,\n} from \"@project-chip/matter.js/storage\";\nimport { Time } from \"@project-chip/matter.js/time\";\nimport { readFile, writeFile } from \"fs/promises\";\n\nexport class StorageBackendJsonFile extends StorageBackendMemory {\n    /** We store changes after a value was set to the storage, but not more often than this setting (in ms). */\n    static commitDelay = 1000;\n    committed = Promise.resolve();\n\n    private readonly commitTimer = Time.getTimer(\"Storage commit\", StorageBackendJsonFile.commitDelay, () =>\n        this.commit(),\n    );\n    private closed = false;\n    private resolveCommitted?: () => void;\n\n    constructor(private readonly path: string) {\n        super();\n    }\n\n    static override async create(path: string) {\n        const storage = new this(path);\n        await storage.initialize();\n        return storage;\n    }\n\n    override async initialize() {\n        if (this.initialized) throw new StorageError(\"Storage already initialized!\");\n        super.initialize();\n        try {\n            this.store = this.fromJson(await readFile(this.path, \"utf-8\"));\n        } catch (error: any) {\n            // We accept that the file does not exist yet to initialize with an empty store.\n            if (error.code !== \"ENOENT\") {\n                throw error;\n            }\n        }\n        this.isInitialized = true;\n    }\n\n    private triggerCommit() {\n        if (!this.commitTimer.isRunning) {\n            this.committed = new Promise(resolve => {\n                this.resolveCommitted = resolve;\n            });\n            this.commitTimer.start();\n        }\n    }\n\n    override set(\n        contexts: string[],\n        keyOrValues: string | Record<string, SupportedStorageTypes>,\n        value?: SupportedStorageTypes,\n    ): void {\n        super.set(contexts, keyOrValues, value);\n        this.triggerCommit();\n    }\n\n    override delete(contexts: string[], key: string): void {\n        super.delete(contexts, key);\n        this.triggerCommit();\n    }\n\n    override clear(): void {\n        super.clear();\n        this.triggerCommit();\n    }\n\n    private async commit() {\n        if (!this.initialized || this.closed) return;\n        if (this.commitTimer.isRunning) {\n            this.commitTimer.stop();\n        }\n        try {\n            await writeFile(this.path, this.toJson(this.store), \"utf-8\");\n        } finally {\n            if (this.resolveCommitted !== undefined) {\n                this.resolveCommitted?.();\n            }\n        }\n    }\n\n    override async close() {\n        this.commitTimer.stop();\n        await this.commit();\n        super.close();\n        this.closed = true;\n        this.isInitialized = false;\n    }\n\n    private toJson(object: any): string {\n        return toJson(object, 1);\n    }\n\n    private fromJson(json: string): any {\n        return fromJson(json);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,qBAMO;AACP,kBAAqB;AACrB,sBAAoC;AAdpC;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,+BAA+B,oCAAqB;AAAA,EAW7D,YAA6B,MAAc;AACvC,UAAM;AADmB;AAAA,EAE7B;AAAA;AAAA,EAXA,OAAO,cAAc;AAAA,EACrB,YAAY,QAAQ,QAAQ;AAAA,EAEX,cAAc,iBAAK;AAAA,IAAS;AAAA,IAAkB,uBAAuB;AAAA,IAAa,MAC/F,KAAK,OAAO;AAAA,EAChB;AAAA,EACQ,SAAS;AAAA,EACT;AAAA,EAMR,aAAsB,OAAO,MAAc;AACvC,UAAM,UAAU,IAAI,KAAK,IAAI;AAC7B,UAAM,QAAQ,WAAW;AACzB,WAAO;AAAA,EACX;AAAA,EAEA,MAAe,aAAa;AACxB,QAAI,KAAK,YAAa,OAAM,IAAI,4BAAa,8BAA8B;AAC3E,UAAM,WAAW;AACjB,QAAI;AACA,WAAK,QAAQ,KAAK,SAAS,UAAM,0BAAS,KAAK,MAAM,OAAO,CAAC;AAAA,IACjE,SAAS,OAAY;AAEjB,UAAI,MAAM,SAAS,UAAU;AACzB,cAAM;AAAA,MACV;AAAA,IACJ;AACA,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEQ,gBAAgB;AACpB,QAAI,CAAC,KAAK,YAAY,WAAW;AAC7B,WAAK,YAAY,IAAI,QAAQ,aAAW;AACpC,aAAK,mBAAmB;AAAA,MAC5B,CAAC;AACD,WAAK,YAAY,MAAM;AAAA,IAC3B;AAAA,EACJ;AAAA,EAES,IACL,UACA,aACA,OACI;AACJ,UAAM,IAAI,UAAU,aAAa,KAAK;AACtC,SAAK,cAAc;AAAA,EACvB;AAAA,EAES,OAAO,UAAoB,KAAmB;AACnD,UAAM,OAAO,UAAU,GAAG;AAC1B,SAAK,cAAc;AAAA,EACvB;AAAA,EAES,QAAc;AACnB,UAAM,MAAM;AACZ,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,MAAc,SAAS;AACnB,QAAI,CAAC,KAAK,eAAe,KAAK,OAAQ;AACtC,QAAI,KAAK,YAAY,WAAW;AAC5B,WAAK,YAAY,KAAK;AAAA,IAC1B;AACA,QAAI;AACA,gBAAM,2BAAU,KAAK,MAAM,KAAK,OAAO,KAAK,KAAK,GAAG,OAAO;AAAA,IAC/D,UAAE;AACE,UAAI,KAAK,qBAAqB,QAAW;AACrC,aAAK,mBAAmB;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAe,QAAQ;AACnB,SAAK,YAAY,KAAK;AACtB,UAAM,KAAK,OAAO;AAClB,UAAM,MAAM;AACZ,SAAK,SAAS;AACd,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEQ,OAAO,QAAqB;AAChC,eAAO,uBAAO,QAAQ,CAAC;AAAA,EAC3B;AAAA,EAEQ,SAAS,MAAmB;AAChC,eAAO,yBAAS,IAAI;AAAA,EACxB;AACJ;",
  "names": []
}
