"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CommandLine_exports = {};
__export(CommandLine_exports, {
  commandExecutor: () => commandExecutor,
  getIntParameter: () => getIntParameter,
  getParameter: () => getParameter,
  hasParameter: () => hasParameter
});
module.exports = __toCommonJS(CommandLine_exports);
var import_common = require("@project-chip/matter.js/common");
var import_child_process = require("child_process");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const commandArguments = process.argv.slice(2);
function getParameter(name) {
  let markerIndex = commandArguments.indexOf(`-${name}`);
  if (markerIndex === -1) markerIndex = commandArguments.indexOf(`--${name}`);
  if (markerIndex === -1 || markerIndex + 1 === commandArguments.length) return void 0;
  return commandArguments[markerIndex + 1];
}
function hasParameter(name) {
  let markerIncluded = commandArguments.includes(`-${name}`);
  if (!markerIncluded) markerIncluded = commandArguments.includes(`--${name}`);
  return markerIncluded;
}
function getIntParameter(name) {
  const value = getParameter(name);
  if (value === void 0) return void 0;
  const intValue = parseInt(value, 10);
  if (isNaN(intValue)) throw new import_common.ValidationError(`Invalid value for parameter ${name}: ${value} is not a number`);
  return intValue;
}
function commandExecutor(scriptParamName) {
  const script = getParameter(scriptParamName);
  if (script === void 0) return void 0;
  return () => console.log(`${scriptParamName}: ${(0, import_child_process.execSync)(script).toString().slice(0, -1)}`);
}
//# sourceMappingURL=CommandLine.js.map
