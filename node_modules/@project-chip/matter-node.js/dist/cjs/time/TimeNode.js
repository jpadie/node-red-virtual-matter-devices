"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TimeNode_exports = {};
__export(TimeNode_exports, {
  TimeNode: () => TimeNode
});
module.exports = __toCommonJS(TimeNode_exports);
var import_common = require("@project-chip/matter.js/common");
var import_time = require("@project-chip/matter.js/time");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class TimerNode {
  constructor(name, intervalMs, callback, isPeriodic) {
    this.name = name;
    this.intervalMs = intervalMs;
    this.callback = callback;
    this.isPeriodic = isPeriodic;
    if (intervalMs < 0 || intervalMs > 2147483647) {
      throw new import_common.ImplementationError(
        `Invalid intervalMs: ${intervalMs}. The value must be between 0 and 32-bit maximum value (2147483647)`
      );
    }
  }
  #timerId;
  #utility = false;
  isRunning = false;
  get systemId() {
    return Number(this.#timerId);
  }
  get utility() {
    return this.#utility;
  }
  set utility(utility) {
    if (utility === this.#utility) {
      return;
    }
    if (utility) {
      this.#timerId?.unref();
    } else {
      this.#timerId?.ref();
    }
    this.#utility = utility;
  }
  start() {
    if (this.isRunning) this.stop();
    import_time.Time.register(this);
    this.isRunning = true;
    this.#timerId = (this.isPeriodic ? setInterval : setTimeout)(() => {
      if (!this.isPeriodic) {
        import_time.Time.unregister(this);
        this.isRunning = false;
      }
      this.callback();
    }, this.intervalMs);
    return this;
  }
  stop() {
    (this.isPeriodic ? clearInterval : clearTimeout)(this.#timerId);
    import_time.Time.unregister(this);
    this.isRunning = false;
    return this;
  }
}
class TimeNode extends import_time.Time {
  now() {
    return /* @__PURE__ */ new Date();
  }
  nowMs() {
    return this.now().getTime();
  }
  getTimer(name, durationMs, callback) {
    return new TimerNode(name, durationMs, callback, false);
  }
  getPeriodicTimer(name, intervalMs, callback) {
    return new TimerNode(name, intervalMs, callback, true);
  }
}
//# sourceMappingURL=TimeNode.js.map
