/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Diagnostic } from "../log/Diagnostic.js";
import { Storage } from "../storage/Storage.js";
import { StorageManager } from "../storage/StorageManager.js";
import { Environment } from "./Environment.js";
import { Environmental } from "./Environmental.js";
/**
 * Service adapter for the Matter.js storage API.
 */
export declare class StorageService {
    #private;
    constructor(environment: Environment, factory?: (namespace: string) => Storage);
    static [Environmental.create](environment: Environment): StorageService;
    /**
     * Open storage.  The storage is initialized but the caller must take ownership.
     *
     * @param namespace a unique namespace identifier such as a root node ID
     */
    open(namespace: string): Promise<StorageManager<Storage>>;
    /**
     * Install a factory for opening storage.  Without such a factory storage is unavailable.
     */
    set factory(factory: (namespace: string) => Storage);
    /**
     * The storage location.  Only used for diagnostic purposes.
     */
    get location(): string | undefined;
    set location(location: string | undefined);
    [Diagnostic.value](): (string | (Record<string, unknown> & Diagnostic))[];
}
//# sourceMappingURL=StorageService.d.ts.map