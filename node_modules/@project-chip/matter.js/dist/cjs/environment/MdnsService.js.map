{
  "version": 3,
  "sources": ["../../../src/environment/MdnsService.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Diagnostic } from \"../log/Diagnostic.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { MdnsBroadcaster } from \"../mdns/MdnsBroadcaster.js\";\nimport { MdnsScanner } from \"../mdns/MdnsScanner.js\";\nimport { Network } from \"../net/Network.js\";\nimport { Construction } from \"../util/Construction.js\";\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { Environment } from \"./Environment.js\";\nimport { Environmental } from \"./Environmental.js\";\nimport { VariableService } from \"./VariableService.js\";\n\nconst logger = Logger.get(\"MDNS\");\n\nexport class MdnsService {\n    #broadcaster?: MdnsBroadcaster;\n    #scanner?: MdnsScanner;\n    readonly #construction: Construction<MdnsService>;\n    readonly #enableIpv4: boolean;\n    readonly limitedToNetInterface?: string;\n\n    get enableIpv4() {\n        return this.#enableIpv4;\n    }\n\n    constructor(environment: Environment, options?: MdnsService.Options) {\n        environment.set(MdnsService, this);\n        environment.runtime.add(this);\n\n        const vars = environment.get(VariableService);\n        this.#enableIpv4 = vars.boolean(\"mdns.ipv4\") ?? options?.ipv4 ?? true;\n        this.limitedToNetInterface = vars.get(\"mdns.networkInterface\", options?.networkInterface);\n\n        this.#construction = Construction(this, async () => {\n            const network = environment.get(Network);\n\n            this.#broadcaster = await MdnsBroadcaster.create(network, {\n                enableIpv4: this.enableIpv4,\n                multicastInterface: this.limitedToNetInterface,\n            });\n\n            this.#scanner = await MdnsScanner.create(network, {\n                enableIpv4: this.enableIpv4,\n                netInterface: this.limitedToNetInterface,\n            });\n        });\n    }\n\n    static [Environmental.create](environment: Environment) {\n        return new this(environment);\n    }\n\n    createInstanceBroadcaster(port: number) {\n        return this.broadcaster.createInstanceBroadcaster(port);\n    }\n\n    get broadcaster() {\n        return this.#construction.assert(\"MDNS broadcaster\", this.#broadcaster);\n    }\n\n    get scanner() {\n        return this.#construction.assert(\"MDNS scanner\", this.#scanner);\n    }\n\n    get [Diagnostic.value]() {\n        return \"MDNS\";\n    }\n\n    get construction() {\n        return this.#construction;\n    }\n\n    async [Symbol.asyncDispose]() {\n        await this.#construction.close(async () => {\n            const broadcasterDisposal = MaybePromise.then(this.#broadcaster?.close(), undefined, e =>\n                logger.error(\"Error disposing of MDNS broadcaster\", e),\n            );\n\n            const scannerDisposal = MaybePromise.then(this.#scanner?.close(), undefined, e =>\n                logger.error(\"Error disposing of MDNS scanner\", e),\n            );\n\n            await Promise.all([broadcasterDisposal, scannerDisposal]);\n\n            this.#broadcaster = this.#scanner = undefined;\n        });\n    }\n}\n\nexport namespace MdnsService {\n    export interface Options {\n        networkInterface?: string;\n        ipv4?: boolean;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,wBAA2B;AAC3B,oBAAuB;AACvB,6BAAgC;AAChC,yBAA4B;AAC5B,qBAAwB;AACxB,0BAA6B;AAC7B,sBAA6B;AAE7B,2BAA8B;AAC9B,6BAAgC;AAfhC;AAAA;AAAA;AAAA;AAAA;AAiBA,MAAM,SAAS,qBAAO,IAAI,MAAM;AAEzB,MAAM,YAAY;AAAA,EACrB;AAAA,EACA;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EAET,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,YAAY,aAA0B,SAA+B;AACjE,gBAAY,IAAI,aAAa,IAAI;AACjC,gBAAY,QAAQ,IAAI,IAAI;AAE5B,UAAM,OAAO,YAAY,IAAI,sCAAe;AAC5C,SAAK,cAAc,KAAK,QAAQ,WAAW,KAAK,SAAS,QAAQ;AACjE,SAAK,wBAAwB,KAAK,IAAI,yBAAyB,SAAS,gBAAgB;AAExF,SAAK,oBAAgB,kCAAa,MAAM,YAAY;AAChD,YAAM,UAAU,YAAY,IAAI,sBAAO;AAEvC,WAAK,eAAe,MAAM,uCAAgB,OAAO,SAAS;AAAA,QACtD,YAAY,KAAK;AAAA,QACjB,oBAAoB,KAAK;AAAA,MAC7B,CAAC;AAED,WAAK,WAAW,MAAM,+BAAY,OAAO,SAAS;AAAA,QAC9C,YAAY,KAAK;AAAA,QACjB,cAAc,KAAK;AAAA,MACvB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EAEA,QAAQ,mCAAc,MAAM,EAAE,aAA0B;AACpD,WAAO,IAAI,KAAK,WAAW;AAAA,EAC/B;AAAA,EAEA,0BAA0B,MAAc;AACpC,WAAO,KAAK,YAAY,0BAA0B,IAAI;AAAA,EAC1D;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,cAAc,OAAO,oBAAoB,KAAK,YAAY;AAAA,EAC1E;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK,cAAc,OAAO,gBAAgB,KAAK,QAAQ;AAAA,EAClE;AAAA,EAEA,KAAK,6BAAW,KAAK,IAAI;AACrB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,OAAO,YAAY,IAAI;AAC1B,UAAM,KAAK,cAAc,MAAM,YAAY;AACvC,YAAM,sBAAsB,6BAAa;AAAA,QAAK,KAAK,cAAc,MAAM;AAAA,QAAG;AAAA,QAAW,OACjF,OAAO,MAAM,uCAAuC,CAAC;AAAA,MACzD;AAEA,YAAM,kBAAkB,6BAAa;AAAA,QAAK,KAAK,UAAU,MAAM;AAAA,QAAG;AAAA,QAAW,OACzE,OAAO,MAAM,mCAAmC,CAAC;AAAA,MACrD;AAEA,YAAM,QAAQ,IAAI,CAAC,qBAAqB,eAAe,CAAC;AAExD,WAAK,eAAe,KAAK,WAAW;AAAA,IACxC,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
