"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PaseMessages_exports = {};
__export(PaseMessages_exports, {
  TlvPasePake1: () => TlvPasePake1,
  TlvPasePake2: () => TlvPasePake2,
  TlvPasePake3: () => TlvPasePake3,
  TlvPbkdfParamRequest: () => TlvPbkdfParamRequest,
  TlvPbkdfParamResponse: () => TlvPbkdfParamResponse,
  TlvSessionParameters: () => TlvSessionParameters
});
module.exports = __toCommonJS(PaseMessages_exports);
var import_CryptoConstants = require("../../crypto/CryptoConstants.js");
var import_TlvBoolean = require("../../tlv/TlvBoolean.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_TlvObject = require("../../tlv/TlvObject.js");
var import_TlvString = require("../../tlv/TlvString.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const TlvSessionParameters = (0, import_TlvObject.TlvObject)({
  /** Maximum sleep interval of node when in idle mode. */
  idleIntervalMs: (0, import_TlvObject.TlvOptionalField)(1, import_TlvNumber.TlvUInt32),
  /** Maximum sleep interval of node when in active mode. */
  activeIntervalMs: (0, import_TlvObject.TlvOptionalField)(2, import_TlvNumber.TlvUInt32),
  /** Minimum amount of time the node SHOULD stay active after network activity. */
  activeThresholdMs: (0, import_TlvObject.TlvOptionalField)(3, import_TlvNumber.TlvUInt16),
  /** Data model revision. */
  dataModelRevision: (0, import_TlvObject.TlvOptionalField)(4, import_TlvNumber.TlvUInt16),
  /** Interaction model revision. */
  interactionModelRevision: (0, import_TlvObject.TlvOptionalField)(5, import_TlvNumber.TlvUInt16),
  /** Specification version. */
  specificationVersion: (0, import_TlvObject.TlvOptionalField)(6, import_TlvNumber.TlvUInt32),
  /** Maximum Paths pert Invoke */
  maxPathsPerInvoke: (0, import_TlvObject.TlvOptionalField)(7, import_TlvNumber.TlvUInt16)
});
const TlvPbkdfParamRequest = (0, import_TlvObject.TlvObject)({
  initiatorRandom: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvByteString.bound({ length: 32 })),
  initiatorSessionId: (0, import_TlvObject.TlvField)(2, import_TlvNumber.TlvUInt16),
  // Specs: range: 16bits
  passcodeId: (0, import_TlvObject.TlvField)(3, import_TlvNumber.TlvUInt16),
  // Specs: length: 16bits so min is 0x8000?
  hasPbkdfParameters: (0, import_TlvObject.TlvField)(4, import_TlvBoolean.TlvBoolean),
  initiatorSessionParams: (0, import_TlvObject.TlvOptionalField)(5, TlvSessionParameters)
});
const TlvPbkdfParamResponse = (0, import_TlvObject.TlvObject)({
  initiatorRandom: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvByteString.bound({ length: 32 })),
  responderRandom: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvByteString.bound({ length: 32 })),
  responderSessionId: (0, import_TlvObject.TlvField)(3, import_TlvNumber.TlvUInt16),
  pbkdfParameters: (0, import_TlvObject.TlvOptionalField)(
    4,
    (0, import_TlvObject.TlvObject)({
      iterations: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvUInt32),
      salt: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvByteString.bound({ minLength: 16, maxLength: 32 }))
    })
  ),
  responderSessionParams: (0, import_TlvObject.TlvOptionalField)(5, TlvSessionParameters)
});
const TlvPasePake1 = (0, import_TlvObject.TlvObject)({
  x: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvByteString.bound({ length: import_CryptoConstants.CRYPTO_PUBLIC_KEY_SIZE_BYTES }))
  // pA
});
const TlvPasePake2 = (0, import_TlvObject.TlvObject)({
  y: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvByteString.bound({ length: import_CryptoConstants.CRYPTO_PUBLIC_KEY_SIZE_BYTES })),
  // pB
  verifier: (0, import_TlvObject.TlvField)(2, import_TlvString.TlvByteString.bound({ length: import_CryptoConstants.CRYPTO_HASH_LEN_BYTES }))
  // cB
});
const TlvPasePake3 = (0, import_TlvObject.TlvObject)({
  verifier: (0, import_TlvObject.TlvField)(1, import_TlvString.TlvByteString.bound({ length: import_CryptoConstants.CRYPTO_HASH_LEN_BYTES }))
  // cA
});
//# sourceMappingURL=PaseMessages.js.map
