{
  "version": 3,
  "sources": ["../../../../src/session/pase/PaseClient.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterController } from \"../../MatterController.js\";\nimport { CommissioningOptions } from \"../../behavior/system/commissioning/CommissioningOptions.js\";\nimport { UnexpectedDataError } from \"../../common/MatterError.js\";\nimport { Crypto, ec } from \"../../crypto/Crypto.js\";\nimport { PbkdfParameters, Spake2p } from \"../../crypto/Spake2p.js\";\nimport { NodeId } from \"../../datatype/NodeId.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { MessageExchange } from \"../../protocol/MessageExchange.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport { DEFAULT_PASSCODE_ID, PaseClientMessenger, SPAKE_CONTEXT } from \"./PaseMessenger.js\";\n\nconst { numberToBytesBE } = ec;\n\nconst logger = Logger.get(\"PaseClient\");\n\nexport class PaseClient {\n    static async generatePakePasscodeVerifier(setupPinCode: number, pbkdfParameters: PbkdfParameters) {\n        const { w0, L } = await Spake2p.computeW0L(pbkdfParameters, setupPinCode);\n        return ByteArray.concat(numberToBytesBE(w0, 32), L);\n    }\n\n    static generateRandomPasscode() {\n        let passcode: number;\n        passcode = (Crypto.getRandomUInt32() % 99999998) + 1; // prevents 00000000 and 99999999\n        if (CommissioningOptions.FORBIDDEN_PASSCODES.includes(passcode)) {\n            passcode += 1; // With current forbidden passcode list can never collide\n        }\n        return passcode;\n    }\n\n    static generateRandomDiscriminator() {\n        return Crypto.getRandomUInt16() % 4096;\n    }\n\n    async pair(client: MatterController, exchange: MessageExchange<MatterController>, setupPin: number) {\n        const messenger = new PaseClientMessenger(exchange);\n        const initiatorRandom = Crypto.getRandom();\n        const initiatorSessionId = await client.getNextAvailableSessionId(); // Initiator Session Id\n\n        // Send pbkdfRequest and Read pbkdfResponse\n        const requestPayload = await messenger.sendPbkdfParamRequest({\n            initiatorRandom,\n            initiatorSessionId,\n            passcodeId: DEFAULT_PASSCODE_ID,\n            hasPbkdfParameters: false,\n            initiatorSessionParams: client.sessionParameters,\n        });\n        const {\n            responsePayload,\n            response: { pbkdfParameters, responderSessionId, responderSessionParams },\n        } = await messenger.readPbkdfParamResponse();\n        if (pbkdfParameters === undefined)\n            throw new UnexpectedDataError(\"Missing requested PbkdfParameters in the response.\");\n\n        // THis includes the Fallbacks for the session parameters overridden by what was sent by the device in PbkdfResponse\n        const sessionParameters = {\n            ...exchange.session.parameters,\n            ...(responderSessionParams ?? {}),\n        };\n\n        // Compute pake1 and read pake2\n        const { w0, w1 } = await Spake2p.computeW0W1(pbkdfParameters, setupPin);\n        const spake2p = Spake2p.create(Crypto.hash([SPAKE_CONTEXT, requestPayload, responsePayload]), w0);\n        const X = spake2p.computeX();\n        await messenger.sendPasePake1({ x: X });\n\n        // Process pack2 and send pake3\n        const { y: Y, verifier } = await messenger.readPasePake2();\n        const { Ke, hAY, hBX } = await spake2p.computeSecretAndVerifiersFromY(w1, X, Y);\n        if (!verifier.equals(hBX))\n            throw new UnexpectedDataError(\"Received incorrect key confirmation from the receiver.\");\n        await messenger.sendPasePake3({ verifier: hAY });\n\n        // All good! Creating the secure session\n        await messenger.waitForSuccess(\"Success after PASE Pake3\");\n        const secureSession = await client.sessionManager.createSecureSession({\n            sessionId: initiatorSessionId,\n            fabric: undefined,\n            peerNodeId: NodeId.UNSPECIFIED_NODE_ID,\n            peerSessionId: responderSessionId,\n            sharedSecret: Ke,\n            salt: new ByteArray(0),\n            isInitiator: true,\n            isResumption: false,\n            peerSessionParameters: sessionParameters,\n        });\n        await messenger.close();\n        logger.info(`Pase client: Paired successfully with ${messenger.getChannelName()}.`);\n\n        return secureSession;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,kCAAqC;AACrC,yBAAoC;AACpC,oBAA2B;AAC3B,qBAAyC;AACzC,oBAAuB;AACvB,oBAAuB;AAEvB,uBAA0B;AAC1B,2BAAwE;AAfxE;AAAA;AAAA;AAAA;AAAA;AAiBA,MAAM,EAAE,gBAAgB,IAAI;AAE5B,MAAM,SAAS,qBAAO,IAAI,YAAY;AAE/B,MAAM,WAAW;AAAA,EACpB,aAAa,6BAA6B,cAAsB,iBAAkC;AAC9F,UAAM,EAAE,IAAI,EAAE,IAAI,MAAM,uBAAQ,WAAW,iBAAiB,YAAY;AACxE,WAAO,2BAAU,OAAO,gBAAgB,IAAI,EAAE,GAAG,CAAC;AAAA,EACtD;AAAA,EAEA,OAAO,yBAAyB;AAC5B,QAAI;AACJ,eAAY,qBAAO,gBAAgB,IAAI,WAAY;AACnD,QAAI,iDAAqB,oBAAoB,SAAS,QAAQ,GAAG;AAC7D,kBAAY;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,8BAA8B;AACjC,WAAO,qBAAO,gBAAgB,IAAI;AAAA,EACtC;AAAA,EAEA,MAAM,KAAK,QAA0B,UAA6C,UAAkB;AAChG,UAAM,YAAY,IAAI,yCAAoB,QAAQ;AAClD,UAAM,kBAAkB,qBAAO,UAAU;AACzC,UAAM,qBAAqB,MAAM,OAAO,0BAA0B;AAGlE,UAAM,iBAAiB,MAAM,UAAU,sBAAsB;AAAA,MACzD;AAAA,MACA;AAAA,MACA,YAAY;AAAA,MACZ,oBAAoB;AAAA,MACpB,wBAAwB,OAAO;AAAA,IACnC,CAAC;AACD,UAAM;AAAA,MACF;AAAA,MACA,UAAU,EAAE,iBAAiB,oBAAoB,uBAAuB;AAAA,IAC5E,IAAI,MAAM,UAAU,uBAAuB;AAC3C,QAAI,oBAAoB;AACpB,YAAM,IAAI,uCAAoB,oDAAoD;AAGtF,UAAM,oBAAoB;AAAA,MACtB,GAAG,SAAS,QAAQ;AAAA,MACpB,GAAI,0BAA0B,CAAC;AAAA,IACnC;AAGA,UAAM,EAAE,IAAI,GAAG,IAAI,MAAM,uBAAQ,YAAY,iBAAiB,QAAQ;AACtE,UAAM,UAAU,uBAAQ,OAAO,qBAAO,KAAK,CAAC,oCAAe,gBAAgB,eAAe,CAAC,GAAG,EAAE;AAChG,UAAM,IAAI,QAAQ,SAAS;AAC3B,UAAM,UAAU,cAAc,EAAE,GAAG,EAAE,CAAC;AAGtC,UAAM,EAAE,GAAG,GAAG,SAAS,IAAI,MAAM,UAAU,cAAc;AACzD,UAAM,EAAE,IAAI,KAAK,IAAI,IAAI,MAAM,QAAQ,+BAA+B,IAAI,GAAG,CAAC;AAC9E,QAAI,CAAC,SAAS,OAAO,GAAG;AACpB,YAAM,IAAI,uCAAoB,wDAAwD;AAC1F,UAAM,UAAU,cAAc,EAAE,UAAU,IAAI,CAAC;AAG/C,UAAM,UAAU,eAAe,0BAA0B;AACzD,UAAM,gBAAgB,MAAM,OAAO,eAAe,oBAAoB;AAAA,MAClE,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,YAAY,qBAAO;AAAA,MACnB,eAAe;AAAA,MACf,cAAc;AAAA,MACd,MAAM,IAAI,2BAAU,CAAC;AAAA,MACrB,aAAa;AAAA,MACb,cAAc;AAAA,MACd,uBAAuB;AAAA,IAC3B,CAAC;AACD,UAAM,UAAU,MAAM;AACtB,WAAO,KAAK,yCAAyC,UAAU,eAAe,CAAC,GAAG;AAElF,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
