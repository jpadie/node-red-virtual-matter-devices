/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/** @see {@link MatterSpecification.v13.Core} § 4.12.8 */
export declare const TlvSessionParameters: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** Maximum sleep interval of node when in idle mode. */
    idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Maximum sleep interval of node when in active mode. */
    activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Minimum amount of time the node SHOULD stay active after network activity. */
    activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Data model revision. */
    dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Interaction model revision. */
    interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Specification version. */
    specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** Maximum Paths pert Invoke */
    maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.1.2 */
export declare const TlvPbkdfParamRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    initiatorSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
    passcodeId: import("../../tlv/TlvObject.js").FieldType<number>;
    hasPbkdfParameters: import("../../tlv/TlvObject.js").FieldType<boolean>;
    initiatorSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        /** Maximum sleep interval of node when in idle mode. */
        idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Maximum sleep interval of node when in active mode. */
        activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Minimum amount of time the node SHOULD stay active after network activity. */
        activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Data model revision. */
        dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Interaction model revision. */
        interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Specification version. */
        specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Maximum Paths pert Invoke */
        maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.1.2 */
export declare const TlvPbkdfParamResponse: import("../../tlv/TlvObject.js").ObjectSchema<{
    initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    responderRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
    pbkdfParameters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        iterations: import("../../tlv/TlvObject.js").FieldType<number>;
        salt: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    }>>;
    responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        /** Maximum sleep interval of node when in idle mode. */
        idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Maximum sleep interval of node when in active mode. */
        activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Minimum amount of time the node SHOULD stay active after network activity. */
        activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Data model revision. */
        dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Interaction model revision. */
        interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Specification version. */
        specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        /** Maximum Paths pert Invoke */
        maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.1.2 */
export declare const TlvPasePake1: import("../../tlv/TlvObject.js").ObjectSchema<{
    x: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.1.2 */
export declare const TlvPasePake2: import("../../tlv/TlvObject.js").ObjectSchema<{
    y: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    verifier: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.1.2 */
export declare const TlvPasePake3: import("../../tlv/TlvObject.js").ObjectSchema<{
    verifier: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
//# sourceMappingURL=PaseMessages.d.ts.map