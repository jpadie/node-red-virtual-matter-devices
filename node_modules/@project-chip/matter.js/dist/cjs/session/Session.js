"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Session_exports = {};
__export(Session_exports, {
  FALLBACK_DATAMODEL_REVISION: () => FALLBACK_DATAMODEL_REVISION,
  FALLBACK_INTERACTIONMODEL_REVISION: () => FALLBACK_INTERACTIONMODEL_REVISION,
  FALLBACK_MAX_PATHS_PER_INVOKE: () => FALLBACK_MAX_PATHS_PER_INVOKE,
  FALLBACK_SPECIFICATION_VERSION: () => FALLBACK_SPECIFICATION_VERSION,
  SESSION_ACTIVE_INTERVAL_MS: () => SESSION_ACTIVE_INTERVAL_MS,
  SESSION_ACTIVE_THRESHOLD_MS: () => SESSION_ACTIVE_THRESHOLD_MS,
  SESSION_IDLE_INTERVAL_MS: () => SESSION_IDLE_INTERVAL_MS,
  Session: () => Session
});
module.exports = __toCommonJS(Session_exports);
var import_Time = require("../time/Time.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const SESSION_ACTIVE_INTERVAL_MS = 300;
const SESSION_IDLE_INTERVAL_MS = 500;
const SESSION_ACTIVE_THRESHOLD_MS = 4e3;
const FALLBACK_DATAMODEL_REVISION = 17;
const FALLBACK_INTERACTIONMODEL_REVISION = 11;
const FALLBACK_SPECIFICATION_VERSION = 0;
const FALLBACK_MAX_PATHS_PER_INVOKE = 1;
class Session {
  timestamp = import_Time.Time.nowMs();
  activeTimestamp = 0;
  idleIntervalMs;
  activeIntervalMs;
  activeThresholdMs;
  dataModelRevision;
  interactionModelRevision;
  specificationVersion;
  maxPathsPerInvoke;
  closeCallback;
  messageCounter;
  messageReceptionState;
  constructor(args) {
    const {
      messageCounter,
      messageReceptionState,
      closeCallback,
      sessionParameters: {
        idleIntervalMs = SESSION_IDLE_INTERVAL_MS,
        activeIntervalMs = SESSION_ACTIVE_INTERVAL_MS,
        activeThresholdMs = SESSION_ACTIVE_THRESHOLD_MS,
        dataModelRevision = FALLBACK_DATAMODEL_REVISION,
        interactionModelRevision = FALLBACK_INTERACTIONMODEL_REVISION,
        specificationVersion = FALLBACK_SPECIFICATION_VERSION,
        maxPathsPerInvoke = FALLBACK_MAX_PATHS_PER_INVOKE
      } = {},
      setActiveTimestamp
    } = args;
    this.messageCounter = messageCounter;
    this.messageReceptionState = messageReceptionState;
    this.closeCallback = closeCallback;
    this.idleIntervalMs = idleIntervalMs;
    this.activeIntervalMs = activeIntervalMs;
    this.activeThresholdMs = activeThresholdMs;
    this.dataModelRevision = dataModelRevision;
    this.interactionModelRevision = interactionModelRevision;
    this.specificationVersion = specificationVersion;
    this.maxPathsPerInvoke = maxPathsPerInvoke;
    if (setActiveTimestamp) {
      this.activeTimestamp = this.timestamp;
    }
  }
  notifyActivity(messageReceived) {
    this.timestamp = import_Time.Time.nowMs();
    if (messageReceived) {
      this.activeTimestamp = this.timestamp;
    }
  }
  isPeerActive() {
    return import_Time.Time.nowMs() - this.activeTimestamp < this.activeThresholdMs;
  }
  getIncrementedMessageCounter() {
    return this.messageCounter.getIncrementedCounter();
  }
  updateMessageCounter(messageCounter, _sourceNodeId) {
    this.messageReceptionState.updateMessageCounter(messageCounter);
  }
  get parameters() {
    const {
      idleIntervalMs,
      activeIntervalMs,
      activeThresholdMs,
      dataModelRevision,
      interactionModelRevision,
      specificationVersion,
      maxPathsPerInvoke
    } = this;
    return {
      idleIntervalMs,
      activeIntervalMs,
      activeThresholdMs,
      dataModelRevision,
      interactionModelRevision,
      specificationVersion,
      maxPathsPerInvoke
    };
  }
}
//# sourceMappingURL=Session.js.map
