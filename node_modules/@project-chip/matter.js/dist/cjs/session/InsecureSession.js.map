{
  "version": 3,
  "sources": ["../../../src/session/InsecureSession.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DecodedMessage, DecodedPacket, Message, MessageCodec, Packet } from \"../codec/MessageCodec.js\";\nimport { MatterFlowError } from \"../common/MatterError.js\";\nimport { NodeId } from \"../datatype/NodeId.js\";\nimport { Fabric } from \"../fabric/Fabric.js\";\nimport { MessageCounter } from \"../protocol/MessageCounter.js\";\nimport { MessageReceptionStateUnencryptedWithRollover } from \"../protocol/MessageReceptionState.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { NoAssociatedFabricError } from \"./SecureSession.js\";\nimport { Session, SessionParameterOptions } from \"./Session.js\";\nimport { UNICAST_UNSECURE_SESSION_ID } from \"./SessionManager.js\";\n\nexport class InsecureSession<T> extends Session<T> {\n    readonly #initiatorNodeId: NodeId;\n    readonly closingAfterExchangeFinished = false;\n    readonly #context: T;\n    readonly supportsMRP = true;\n\n    constructor(args: {\n        context: T;\n        messageCounter: MessageCounter;\n        closeCallback: () => Promise<void>;\n        initiatorNodeId?: NodeId;\n        sessionParameters?: SessionParameterOptions;\n        isInitiator?: boolean;\n    }) {\n        const { context, initiatorNodeId, isInitiator } = args;\n        super({\n            ...args,\n            setActiveTimestamp: !isInitiator, // When we are the initiator we assume the node is in idle mode\n            messageReceptionState: new MessageReceptionStateUnencryptedWithRollover(),\n        });\n        this.#context = context;\n        this.#initiatorNodeId = initiatorNodeId ?? NodeId.randomOperationalNodeId();\n    }\n\n    get isSecure() {\n        return false;\n    }\n\n    get isPase() {\n        return false;\n    }\n\n    decode(packet: DecodedPacket): DecodedMessage {\n        return MessageCodec.decodePayload(packet);\n    }\n\n    encode(message: Message): Packet {\n        return MessageCodec.encodePayload(message);\n    }\n\n    get attestationChallengeKey(): ByteArray {\n        throw new MatterFlowError(\"Not supported on an unsecure session\");\n    }\n\n    setFabric(_fabric: Fabric): void {\n        throw new MatterFlowError(\"Not supported on an unsecure session\");\n    }\n\n    get name() {\n        return `insecure/${this.#initiatorNodeId}`;\n    }\n\n    get context() {\n        return this.#context;\n    }\n\n    get id(): number {\n        return UNICAST_UNSECURE_SESSION_ID;\n    }\n\n    get peerSessionId(): number {\n        return UNICAST_UNSECURE_SESSION_ID;\n    }\n\n    get nodeId() {\n        return this.#initiatorNodeId;\n    }\n\n    get peerNodeId() {\n        return undefined;\n    }\n\n    get associatedFabric(): Fabric {\n        throw new NoAssociatedFabricError(\"Session needs to be a secure session\");\n    }\n\n    async destroy() {\n        await this.end();\n    }\n\n    async end() {\n        await this.closeCallback?.();\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,0BAA6E;AAC7E,yBAAgC;AAChC,oBAAuB;AAGvB,mCAA6D;AAE7D,2BAAwC;AACxC,qBAAiD;AACjD,4BAA4C;AAf5C;AAAA;AAAA;AAAA;AAAA;AAiBO,MAAM,wBAA2B,uBAAW;AAAA,EACtC;AAAA,EACA,+BAA+B;AAAA,EAC/B;AAAA,EACA,cAAc;AAAA,EAEvB,YAAY,MAOT;AACC,UAAM,EAAE,SAAS,iBAAiB,YAAY,IAAI;AAClD,UAAM;AAAA,MACF,GAAG;AAAA,MACH,oBAAoB,CAAC;AAAA;AAAA,MACrB,uBAAuB,IAAI,0EAA6C;AAAA,IAC5E,CAAC;AACD,SAAK,WAAW;AAChB,SAAK,mBAAmB,mBAAmB,qBAAO,wBAAwB;AAAA,EAC9E;AAAA,EAEA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,SAAS;AACT,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,QAAuC;AAC1C,WAAO,iCAAa,cAAc,MAAM;AAAA,EAC5C;AAAA,EAEA,OAAO,SAA0B;AAC7B,WAAO,iCAAa,cAAc,OAAO;AAAA,EAC7C;AAAA,EAEA,IAAI,0BAAqC;AACrC,UAAM,IAAI,mCAAgB,sCAAsC;AAAA,EACpE;AAAA,EAEA,UAAU,SAAuB;AAC7B,UAAM,IAAI,mCAAgB,sCAAsC;AAAA,EACpE;AAAA,EAEA,IAAI,OAAO;AACP,WAAO,YAAY,KAAK,gBAAgB;AAAA,EAC5C;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,KAAa;AACb,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,gBAAwB;AACxB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,mBAA2B;AAC3B,UAAM,IAAI,6CAAwB,sCAAsC;AAAA,EAC5E;AAAA,EAEA,MAAM,UAAU;AACZ,UAAM,KAAK,IAAI;AAAA,EACnB;AAAA,EAEA,MAAM,MAAM;AACR,UAAM,KAAK,gBAAgB;AAAA,EAC/B;AACJ;",
  "names": []
}
