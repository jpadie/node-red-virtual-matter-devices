{
  "version": 3,
  "sources": ["../../../../src/session/case/CaseMessenger.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterFlowError } from \"../../common/MatterError.js\";\nimport { MatterController } from \"../../MatterController.js\";\nimport { MatterDevice } from \"../../MatterDevice.js\";\nimport { MessageType } from \"../../protocol/securechannel/SecureChannelMessages.js\";\nimport { SecureChannelMessenger } from \"../../protocol/securechannel/SecureChannelMessenger.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvCaseSigma1, TlvCaseSigma2, TlvCaseSigma2Resume, TlvCaseSigma3 } from \"./CaseMessages.js\";\n\nexport class CaseServerMessenger extends SecureChannelMessenger<MatterDevice> {\n    async readSigma1() {\n        const { payload } = await this.nextMessage(\"CASE Sigma1\", MessageType.Sigma1);\n        return { sigma1Bytes: payload, sigma1: TlvCaseSigma1.decode(payload) };\n    }\n\n    sendSigma2(sigma2: TypeFromSchema<typeof TlvCaseSigma2>) {\n        return this.send(sigma2, MessageType.Sigma2, TlvCaseSigma2);\n    }\n\n    sendSigma2Resume(sigma2Resume: TypeFromSchema<typeof TlvCaseSigma2Resume>) {\n        return this.send(sigma2Resume, MessageType.Sigma2Resume, TlvCaseSigma2Resume);\n    }\n\n    async readSigma3() {\n        const { payload } = await this.nextMessage(\"CASE Sigma3\", MessageType.Sigma3);\n        return { sigma3Bytes: payload, sigma3: TlvCaseSigma3.decode(payload) };\n    }\n}\n\nexport class CaseClientMessenger extends SecureChannelMessenger<MatterController> {\n    sendSigma1(sigma1: TypeFromSchema<typeof TlvCaseSigma1>) {\n        return this.send(sigma1, MessageType.Sigma1, TlvCaseSigma1);\n    }\n\n    async readSigma2() {\n        const {\n            payload,\n            payloadHeader: { messageType },\n        } = await this.nextMessage(\"CASE Sigma2 or Sigma2Resume\");\n        switch (messageType) {\n            case MessageType.Sigma2:\n                return { sigma2Bytes: payload, sigma2: TlvCaseSigma2.decode(payload) };\n            case MessageType.Sigma2Resume:\n                return { sigma2Resume: TlvCaseSigma2Resume.decode(payload) };\n            default:\n                throw new MatterFlowError(\n                    `Received unexpected message type while expecting CASE Sigma2: ${messageType}, expected: ${MessageType.Sigma2} or ${MessageType.Sigma2Resume}`,\n                );\n        }\n    }\n\n    sendSigma3(sigma3: TypeFromSchema<typeof TlvCaseSigma3>) {\n        return this.send(sigma3, MessageType.Sigma3, TlvCaseSigma3);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAgC;AAGhC,mCAA4B;AAC5B,oCAAuC;AAEvC,0BAAiF;AAZjF;AAAA;AAAA;AAAA;AAAA;AAcO,MAAM,4BAA4B,qDAAqC;AAAA,EAC1E,MAAM,aAAa;AACf,UAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,YAAY,eAAe,yCAAY,MAAM;AAC5E,WAAO,EAAE,aAAa,SAAS,QAAQ,kCAAc,OAAO,OAAO,EAAE;AAAA,EACzE;AAAA,EAEA,WAAW,QAA8C;AACrD,WAAO,KAAK,KAAK,QAAQ,yCAAY,QAAQ,iCAAa;AAAA,EAC9D;AAAA,EAEA,iBAAiB,cAA0D;AACvE,WAAO,KAAK,KAAK,cAAc,yCAAY,cAAc,uCAAmB;AAAA,EAChF;AAAA,EAEA,MAAM,aAAa;AACf,UAAM,EAAE,QAAQ,IAAI,MAAM,KAAK,YAAY,eAAe,yCAAY,MAAM;AAC5E,WAAO,EAAE,aAAa,SAAS,QAAQ,kCAAc,OAAO,OAAO,EAAE;AAAA,EACzE;AACJ;AAEO,MAAM,4BAA4B,qDAAyC;AAAA,EAC9E,WAAW,QAA8C;AACrD,WAAO,KAAK,KAAK,QAAQ,yCAAY,QAAQ,iCAAa;AAAA,EAC9D;AAAA,EAEA,MAAM,aAAa;AACf,UAAM;AAAA,MACF;AAAA,MACA,eAAe,EAAE,YAAY;AAAA,IACjC,IAAI,MAAM,KAAK,YAAY,6BAA6B;AACxD,YAAQ,aAAa;AAAA,MACjB,KAAK,yCAAY;AACb,eAAO,EAAE,aAAa,SAAS,QAAQ,kCAAc,OAAO,OAAO,EAAE;AAAA,MACzE,KAAK,yCAAY;AACb,eAAO,EAAE,cAAc,wCAAoB,OAAO,OAAO,EAAE;AAAA,MAC/D;AACI,cAAM,IAAI;AAAA,UACN,iEAAiE,WAAW,eAAe,yCAAY,MAAM,OAAO,yCAAY,YAAY;AAAA,QAChJ;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,WAAW,QAA8C;AACrD,WAAO,KAAK,KAAK,QAAQ,yCAAY,QAAQ,iCAAa;AAAA,EAC9D;AACJ;",
  "names": []
}
