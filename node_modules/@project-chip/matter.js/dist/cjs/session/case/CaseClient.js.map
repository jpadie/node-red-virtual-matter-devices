{
  "version": 3,
  "sources": ["../../../../src/session/case/CaseClient.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterController } from \"../../MatterController.js\";\nimport { TlvIntermediateCertificate, TlvOperationalCertificate } from \"../../certificate/CertificateManager.js\";\nimport { UnexpectedDataError } from \"../../common/MatterError.js\";\nimport { Crypto } from \"../../crypto/Crypto.js\";\nimport { PublicKey } from \"../../crypto/Key.js\";\nimport { NodeId } from \"../../datatype/NodeId.js\";\nimport { Fabric } from \"../../fabric/Fabric.js\";\nimport { Diagnostic } from \"../../log/Diagnostic.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { MessageExchange } from \"../../protocol/MessageExchange.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport {\n    KDFSR1_KEY_INFO,\n    KDFSR2_INFO,\n    KDFSR2_KEY_INFO,\n    KDFSR3_INFO,\n    RESUME1_MIC_NONCE,\n    RESUME2_MIC_NONCE,\n    TBE_DATA2_NONCE,\n    TBE_DATA3_NONCE,\n    TlvEncryptedDataSigma2,\n    TlvEncryptedDataSigma3,\n    TlvSignedData,\n} from \"./CaseMessages.js\";\nimport { CaseClientMessenger } from \"./CaseMessenger.js\";\n\nconst logger = Logger.get(\"CaseClient\");\n\nexport class CaseClient {\n    async pair(\n        client: MatterController,\n        exchange: MessageExchange<MatterController>,\n        fabric: Fabric,\n        peerNodeId: NodeId,\n    ) {\n        const messenger = new CaseClientMessenger(exchange);\n\n        // Generate pairing info\n        const initiatorRandom = Crypto.getRandom();\n        const initiatorSessionId = await client.getNextAvailableSessionId(); // Initiator Session Id\n        const { operationalIdentityProtectionKey, operationalCert: nodeOpCert, intermediateCACert } = fabric;\n        const { publicKey: initiatorEcdhPublicKey, ecdh } = Crypto.ecdhGeneratePublicKey();\n\n        // Send sigma1\n        let sigma1Bytes;\n        let resumptionRecord = client.findResumptionRecordByNodeId(peerNodeId);\n        if (resumptionRecord !== undefined) {\n            const { sharedSecret, resumptionId } = resumptionRecord;\n            const resumeKey = await Crypto.hkdf(\n                sharedSecret,\n                ByteArray.concat(initiatorRandom, resumptionId),\n                KDFSR1_KEY_INFO,\n            );\n            const initiatorResumeMic = Crypto.encrypt(resumeKey, new ByteArray(0), RESUME1_MIC_NONCE);\n            sigma1Bytes = await messenger.sendSigma1({\n                initiatorSessionId,\n                destinationId: fabric.getDestinationId(peerNodeId, initiatorRandom),\n                initiatorEcdhPublicKey,\n                initiatorRandom,\n                resumptionId,\n                initiatorResumeMic,\n                initiatorSessionParams: client.sessionParameters,\n            });\n        } else {\n            sigma1Bytes = await messenger.sendSigma1({\n                initiatorSessionId,\n                destinationId: fabric.getDestinationId(peerNodeId, initiatorRandom),\n                initiatorEcdhPublicKey,\n                initiatorRandom,\n                initiatorSessionParams: client.sessionParameters,\n            });\n        }\n\n        let secureSession;\n        const { sigma2Bytes, sigma2, sigma2Resume } = await messenger.readSigma2();\n        if (sigma2Resume !== undefined) {\n            // Process sigma2 resume\n            if (resumptionRecord === undefined) throw new UnexpectedDataError(\"Received an unexpected sigma2Resume.\");\n            const { sharedSecret, fabric, sessionParameters: resumptionSessionParams } = resumptionRecord;\n            const { responderSessionId: peerSessionId, resumptionId, resumeMic } = sigma2Resume;\n\n            // We use the Fallbacks for the session parameters overridden by our stored ones from the resumption record\n            const sessionParameters = {\n                ...exchange.session.parameters,\n                ...(resumptionSessionParams ?? {}),\n            };\n\n            const resumeSalt = ByteArray.concat(initiatorRandom, resumptionId);\n            const resumeKey = await Crypto.hkdf(sharedSecret, resumeSalt, KDFSR2_KEY_INFO);\n            Crypto.decrypt(resumeKey, resumeMic, RESUME2_MIC_NONCE);\n\n            const secureSessionSalt = ByteArray.concat(initiatorRandom, resumptionRecord.resumptionId);\n            secureSession = await client.sessionManager.createSecureSession({\n                sessionId: initiatorSessionId,\n                fabric,\n                peerNodeId,\n                peerSessionId,\n                sharedSecret,\n                salt: secureSessionSalt,\n                isInitiator: true,\n                isResumption: true,\n                peerSessionParameters: sessionParameters,\n            });\n            await messenger.sendSuccess();\n            logger.info(\n                `Case client: session resumed with ${messenger.getChannelName()} and parameters`,\n                Diagnostic.dict(secureSession.parameters),\n            );\n\n            resumptionRecord.resumptionId = resumptionId; /* update resumptionId */\n            resumptionRecord.sessionParameters = secureSession.parameters; /* update mrpParams */\n        } else {\n            // Process sigma2\n            const {\n                responderEcdhPublicKey: peerEcdhPublicKey,\n                encrypted: peerEncrypted,\n                responderRandom,\n                responderSessionId: peerSessionId,\n                responderSessionParams,\n            } = sigma2;\n            // We use the Fallbacks for the session parameters overridden by what was sent by the device in Sigma2\n            const sessionParameters = {\n                ...exchange.session.parameters,\n                ...(responderSessionParams ?? {}),\n            };\n            const sharedSecret = Crypto.ecdhGenerateSecret(peerEcdhPublicKey, ecdh);\n            const sigma2Salt = ByteArray.concat(\n                operationalIdentityProtectionKey,\n                responderRandom,\n                peerEcdhPublicKey,\n                Crypto.hash(sigma1Bytes),\n            );\n            const sigma2Key = await Crypto.hkdf(sharedSecret, sigma2Salt, KDFSR2_INFO);\n            const peerEncryptedData = Crypto.decrypt(sigma2Key, peerEncrypted, TBE_DATA2_NONCE);\n            const {\n                nodeOpCert: peerNewOpCert,\n                intermediateCACert: peerIntermediateCACert,\n                signature: peerSignature,\n                resumptionId: peerResumptionId,\n            } = TlvEncryptedDataSigma2.decode(peerEncryptedData);\n            const peerSignatureData = TlvSignedData.encode({\n                nodeOpCert: peerNewOpCert,\n                intermediateCACert: peerIntermediateCACert,\n                ecdhPublicKey: peerEcdhPublicKey,\n                peerEcdhPublicKey: initiatorEcdhPublicKey,\n            });\n            const {\n                ellipticCurvePublicKey: peerPublicKey,\n                subject: { fabricId: peerFabricIdNOCert, nodeId: peerNodeIdNOCert },\n            } = TlvOperationalCertificate.decode(peerNewOpCert);\n\n            Crypto.verify(PublicKey(peerPublicKey), peerSignatureData, peerSignature);\n\n            if (peerNodeIdNOCert !== peerNodeId) {\n                throw new UnexpectedDataError(\n                    \"The node ID in the peer certificate doesn't match the expected peer node ID\",\n                );\n            }\n            if (peerNodeIdNOCert !== peerNodeId) {\n                throw new UnexpectedDataError(\n                    \"The node ID in the peer certificate doesn't match the expected peer node ID\",\n                );\n            }\n            if (peerFabricIdNOCert !== fabric.fabricId) {\n                throw new UnexpectedDataError(\n                    \"The fabric ID in the peer certificate doesn't match the expected fabric ID\",\n                );\n            }\n            if (peerIntermediateCACert !== undefined) {\n                const {\n                    subject: { fabricId: peerFabricIdIcaCert },\n                } = TlvIntermediateCertificate.decode(peerIntermediateCACert);\n\n                if (peerFabricIdIcaCert !== fabric.fabricId) {\n                    throw new UnexpectedDataError(\n                        \"The fabric ID in the peer intermediate CA certificate doesn't match the expected fabric ID\",\n                    );\n                }\n            }\n            fabric.verifyCredentials(peerNewOpCert, peerIntermediateCACert);\n\n            // Generate and send sigma3\n            const sigma3Salt = ByteArray.concat(\n                operationalIdentityProtectionKey,\n                Crypto.hash([sigma1Bytes, sigma2Bytes]),\n            );\n            const sigma3Key = await Crypto.hkdf(sharedSecret, sigma3Salt, KDFSR3_INFO);\n            const signatureData = TlvSignedData.encode({\n                nodeOpCert,\n                intermediateCACert,\n                ecdhPublicKey: initiatorEcdhPublicKey,\n                peerEcdhPublicKey,\n            });\n            const signature = fabric.sign(signatureData);\n            const encryptedData = TlvEncryptedDataSigma3.encode({ nodeOpCert, intermediateCACert, signature });\n            const encrypted = Crypto.encrypt(sigma3Key, encryptedData, TBE_DATA3_NONCE);\n            const sigma3Bytes = await messenger.sendSigma3({ encrypted });\n            await messenger.waitForSuccess(\"Success after CASE Sigma3\");\n\n            // All good! Create secure session\n            const secureSessionSalt = ByteArray.concat(\n                operationalIdentityProtectionKey,\n                Crypto.hash([sigma1Bytes, sigma2Bytes, sigma3Bytes]),\n            );\n            secureSession = await client.sessionManager.createSecureSession({\n                sessionId: initiatorSessionId,\n                fabric,\n                peerNodeId,\n                peerSessionId,\n                sharedSecret,\n                salt: secureSessionSalt,\n                isInitiator: true,\n                isResumption: false,\n                peerSessionParameters: sessionParameters,\n            });\n            logger.info(\n                `Case client: Paired successfully with ${messenger.getChannelName()} and parameters`,\n                Diagnostic.dict(secureSession.parameters),\n            );\n            resumptionRecord = {\n                fabric,\n                peerNodeId,\n                sharedSecret,\n                resumptionId: peerResumptionId,\n                sessionParameters: secureSession.parameters,\n            };\n        }\n\n        await messenger.close();\n        await client.saveResumptionRecord(resumptionRecord);\n\n        return secureSession;\n    }\n}\n"],
  "mappings": "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",
  "names": ["fabric"]
}
