{
  "version": 3,
  "sources": ["../../src/PaseCommissioner.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    CommissioningControllerOptions,\n    ControllerEnvironmentOptions,\n    NodeCommissioningOptions,\n} from \"./CommissioningController.js\";\nimport { MatterController } from \"./MatterController.js\";\nimport { RootCertificateManager } from \"./certificate/RootCertificateManager.js\";\nimport { ImplementationError } from \"./common/MatterError.js\";\nimport { CommissionableDevice, CommissionableDeviceIdentifiers, DiscoveryData, Scanner } from \"./common/Scanner.js\";\nimport { NodeId } from \"./datatype/NodeId.js\";\nimport { Environment } from \"./environment/Environment.js\";\nimport { MdnsService } from \"./environment/MdnsService.js\";\nimport { FabricJsonObject } from \"./fabric/Fabric.js\";\nimport { Logger } from \"./log/Logger.js\";\nimport { MdnsScanner } from \"./mdns/MdnsScanner.js\";\nimport { Network } from \"./net/Network.js\";\nimport { UdpInterface } from \"./net/UdpInterface.js\";\nimport { ControllerDiscovery } from \"./protocol/ControllerDiscovery.js\";\nimport { TypeFromPartialBitSchema } from \"./schema/BitmapSchema.js\";\nimport { DiscoveryCapabilitiesBitmap } from \"./schema/PairingCodeSchema.js\";\n\nconst logger = new Logger(\"PaseCommissioner\");\n\ntype PaseCommissionerOptions = Omit<CommissioningControllerOptions, \"environment\"> & {\n    /** The environment for the controller. */\n    environment: ControllerEnvironmentOptions;\n\n    /** The root certificate data for the controller. */\n    rootCertificateData: RootCertificateManager.Data;\n\n    /** The fabric data of the controller. */\n    fabricData: FabricJsonObject;\n};\n\n/**\n * This represents a lightweight commissioner that can be used to start the commissioning process to commission\n * devices into an existing controller fabric. Once the initial commissioning process is completed, it uses a callback\n * to all to complete the commissioning process.\n */\nexport class PaseCommissioner {\n    private readonly environment: Environment;\n    private controllerInstance?: MatterController;\n\n    /**\n     * Creates a new CommissioningController instance\n     *\n     * @param options The options for the CommissioningController\n     */\n    constructor(private readonly options: PaseCommissionerOptions) {\n        if (options.environment === undefined) {\n            throw new ImplementationError(\"You need to prove an environment for the commissioner.\");\n        }\n        const { environment } = options.environment;\n        this.environment = environment;\n    }\n\n    get nodeId() {\n        return this.controllerInstance?.nodeId;\n    }\n\n    assertControllerIsStarted(errorText?: string) {\n        if (this.controllerInstance === undefined) {\n            throw new ImplementationError(\n                errorText ?? \"Controller instance not yet started. Please call start() first.\",\n            );\n        }\n        return this.controllerInstance;\n    }\n\n    /** Internal method to initialize a MatterController instance. */\n    private async initializeController() {\n        if (this.controllerInstance !== undefined) {\n            return this.controllerInstance;\n        }\n\n        const { localPort, listeningAddressIpv4, listeningAddressIpv6, rootCertificateData, fabricData } = this.options;\n\n        let mdnsScanner: MdnsScanner | undefined;\n        let ipv4Disabled = false;\n        let netInterfaceIpv4: UdpInterface | undefined;\n        let netInterfaceIpv6: UdpInterface | undefined;\n\n        try {\n            const mdnsService = await this.environment.load(MdnsService);\n            ipv4Disabled = !mdnsService.enableIpv4;\n            mdnsScanner = mdnsService.scanner;\n            if (!ipv4Disabled) {\n                netInterfaceIpv4 = await UdpInterface.create(Network.get(), \"udp4\", localPort, listeningAddressIpv4);\n            }\n            netInterfaceIpv6 = await UdpInterface.create(Network.get(), \"udp6\", localPort, listeningAddressIpv6);\n        } catch {\n            logger.debug(\"No networking available, using only BLE\");\n        }\n\n        return await MatterController.createAsPaseCommissioner({\n            rootCertificateData,\n            fabricData,\n            netInterfaceIpv4,\n            netInterfaceIpv6,\n            mdnsScanner,\n        });\n    }\n\n    /**\n     * Commissions/Pairs a new device into the controller fabric. The method returns the NodeId of the commissioned node.\n     *\n     * Use the connectNodeAfterCommissioning callback to implement an own logic to do the operative device discovery and\n     * to complete the commissioning process.\n     * Return true when the commissioning process is completed successfully, false on error.\n     */\n    async commissionNode(\n        nodeOptions: NodeCommissioningOptions,\n        completeCommissioningCallback: (peerNodeId: NodeId, discoveryData?: DiscoveryData) => Promise<boolean>,\n    ) {\n        const controller = this.assertControllerIsStarted();\n\n        return await controller.commission(nodeOptions, completeCommissioningCallback);\n    }\n\n    /** Disconnects all connected nodes and Closes the network connections and other resources of the controller. */\n    async close() {\n        await this.controllerInstance?.close();\n        this.controllerInstance = undefined;\n    }\n\n    /** Initialize the controller. */\n    async start() {\n        const runtime = this.environment.runtime;\n        runtime.add(this);\n        if (this.controllerInstance === undefined) {\n            this.controllerInstance = await this.initializeController();\n        }\n    }\n\n    cancelCommissionableDeviceDiscovery(\n        identifierData: CommissionableDeviceIdentifiers,\n        discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>,\n    ) {\n        const controller = this.assertControllerIsStarted();\n        controller\n            .collectScanners(discoveryCapabilities)\n            .forEach((scanner: Scanner) =>\n                ControllerDiscovery.cancelCommissionableDeviceDiscovery(scanner, identifierData),\n            );\n    }\n\n    async discoverCommissionableDevices(\n        identifierData: CommissionableDeviceIdentifiers,\n        discoveryCapabilities?: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap>,\n        discoveredCallback?: (device: CommissionableDevice) => void,\n        timeoutSeconds = 900,\n    ) {\n        const controller = this.assertControllerIsStarted();\n        return await ControllerDiscovery.discoverCommissionableDevices(\n            controller.collectScanners(discoveryCapabilities),\n            timeoutSeconds,\n            identifierData,\n            discoveredCallback,\n        );\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,8BAAiC;AAEjC,yBAAoC;AAIpC,yBAA4B;AAE5B,oBAAuB;AAEvB,qBAAwB;AACxB,0BAA6B;AAC7B,iCAAoC;AAtBpC;AAAA;AAAA;AAAA;AAAA;AA0BA,MAAM,SAAS,IAAI,qBAAO,kBAAkB;AAkBrC,MAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS1B,YAA6B,SAAkC;AAAlC;AACzB,QAAI,QAAQ,gBAAgB,QAAW;AACnC,YAAM,IAAI,uCAAoB,wDAAwD;AAAA,IAC1F;AACA,UAAM,EAAE,YAAY,IAAI,QAAQ;AAChC,SAAK,cAAc;AAAA,EACvB;AAAA,EAdiB;AAAA,EACT;AAAA,EAeR,IAAI,SAAS;AACT,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAAA,EAEA,0BAA0B,WAAoB;AAC1C,QAAI,KAAK,uBAAuB,QAAW;AACvC,YAAM,IAAI;AAAA,QACN,aAAa;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,MAAc,uBAAuB;AACjC,QAAI,KAAK,uBAAuB,QAAW;AACvC,aAAO,KAAK;AAAA,IAChB;AAEA,UAAM,EAAE,WAAW,sBAAsB,sBAAsB,qBAAqB,WAAW,IAAI,KAAK;AAExG,QAAI;AACJ,QAAI,eAAe;AACnB,QAAI;AACJ,QAAI;AAEJ,QAAI;AACA,YAAM,cAAc,MAAM,KAAK,YAAY,KAAK,8BAAW;AAC3D,qBAAe,CAAC,YAAY;AAC5B,oBAAc,YAAY;AAC1B,UAAI,CAAC,cAAc;AACf,2BAAmB,MAAM,iCAAa,OAAO,uBAAQ,IAAI,GAAG,QAAQ,WAAW,oBAAoB;AAAA,MACvG;AACA,yBAAmB,MAAM,iCAAa,OAAO,uBAAQ,IAAI,GAAG,QAAQ,WAAW,oBAAoB;AAAA,IACvG,QAAQ;AACJ,aAAO,MAAM,yCAAyC;AAAA,IAC1D;AAEA,WAAO,MAAM,yCAAiB,yBAAyB;AAAA,MACnD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,eACF,aACA,+BACF;AACE,UAAM,aAAa,KAAK,0BAA0B;AAElD,WAAO,MAAM,WAAW,WAAW,aAAa,6BAA6B;AAAA,EACjF;AAAA;AAAA,EAGA,MAAM,QAAQ;AACV,UAAM,KAAK,oBAAoB,MAAM;AACrC,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA,EAGA,MAAM,QAAQ;AACV,UAAM,UAAU,KAAK,YAAY;AACjC,YAAQ,IAAI,IAAI;AAChB,QAAI,KAAK,uBAAuB,QAAW;AACvC,WAAK,qBAAqB,MAAM,KAAK,qBAAqB;AAAA,IAC9D;AAAA,EACJ;AAAA,EAEA,oCACI,gBACA,uBACF;AACE,UAAM,aAAa,KAAK,0BAA0B;AAClD,eACK,gBAAgB,qBAAqB,EACrC;AAAA,MAAQ,CAAC,YACN,+CAAoB,oCAAoC,SAAS,cAAc;AAAA,IACnF;AAAA,EACR;AAAA,EAEA,MAAM,8BACF,gBACA,uBACA,oBACA,iBAAiB,KACnB;AACE,UAAM,aAAa,KAAK,0BAA0B;AAClD,WAAO,MAAM,+CAAoB;AAAA,MAC7B,WAAW,gBAAgB,qBAAqB;AAAA,MAChD;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
