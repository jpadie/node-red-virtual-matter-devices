{
  "version": 3,
  "sources": ["../../../src/endpoint/EndpointVariableService.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Behavior } from \"../behavior/Behavior.js\";\nimport { Environment } from \"../environment/Environment.js\";\nimport { Environmental } from \"../environment/Environmental.js\";\nimport { VariableService } from \"../environment/VariableService.js\";\nimport { isObject } from \"../util/Type.js\";\nimport { Endpoint } from \"./Endpoint.js\";\n\nconst NODE_SUBKEY = \"nodes\";\nconst BEHAVIOR_SUBKEY = \"behaviors\";\nconst PART_SUBKEY = \"parts\";\n\n/**\n * Endpoint environmental configuration management.\n *\n * This class extracts behavior state properties from environment variables managed by {@link VariableService}.\n *\n * You can configure endpoints using this convention:\n *\n *   - Configure nodes with `nodes.<node id>` subkey\n *\n *   - Configure endpoints with `<owner subkey>.parts.<endpoint id>` subkey\n *\n *   - Configure endpoint behaviors with `<endpoint subkey>.<behavior id>.<property name>` subkey\n *\n * Additionally you may configure behaviors globally (regardless of endpoint) using the `<behavior id>.<property name>`\n * subkey.  Endpoint-specific configuration overrides this value.\n *\n * Environmental configuration overrides values supplied in {@link Endpoint.Configuration}.\n *\n * This effectively makes all state values configuration.  It is settable via command line, system environment variable\n * or configuration file.\n *\n * For example, to set the vendor name for all nodes:\n *\n * ```bash\n *   export MATTER_BEHAVIORS_BASICINFORMATION_VENDORNAME=\"My Vendor Name\"\n * ```\n *\n * Or, to configure a light as on by default:\n *\n * ```bash\n *   export MATTER_NODES_NODE1_PARTS_LIGHT_ONOFF_ONOFF=1\n * ```\n *\n * Perhaps better would be to implement the previous two examples using a configuration file:\n *\n * ```json\n *   {\n *     \"behaviors\": {\n *       \"basicInformation\": {\n *         \"vendorName\": \"My Vendor Name\"\n *       }\n *     },\n *\n *     \"nodes\": {\n *       \"node1\": {\n *         \"parts\": {\n *           \"light\": {\n *             \"onOff\": {\n *               \"onOff\": true\n *             }\n *           }\n *         }\n *       }\n *     }\n *   }\n * ```\n *\n * Matter.js automatically expands dotted names so a more compact configuration option is:\n *\n * ```json\n * {\n *   \"behaviors.basicInformation.vendorName\": \"My Vendor Name\",\n *   \"nodes.node1.parts.light.onOff.OnOff\": true,\n * }\n * ```\n */\nexport class EndpointVariableService {\n    #env: Environment;\n    #varsForEndpoint = new WeakMap<Endpoint, VariableService.Map>();\n    #varsForBehavior = new WeakMap<Behavior.Type, VariableService.Map>();\n\n    constructor(env: Environment) {\n        this.#env = env;\n    }\n\n    static [Environmental.create](env: Environment) {\n        const service = new EndpointVariableService(env);\n        env.set(EndpointVariableService, service);\n        return service;\n    }\n\n    /**\n     * Access the variable map for an instance of a behavior.\n     */\n    forBehaviorInstance(endpoint: Endpoint, type: Behavior.Type) {\n        const forAll = this.forBehaviorType(type);\n        const forThisEndpoint = this.forEndpoint(endpoint);\n        const forThis = forThisEndpoint[type.id] ?? forThisEndpoint[type.id.toLowerCase()];\n        if (isObject(forThis)) {\n            return { ...forAll, ...forThis };\n        }\n        return forAll;\n    }\n\n    /**\n     * Access the variable map for an endpoint.\n     */\n    forEndpoint(endpoint: Endpoint): VariableService.Map {\n        // We can't load variables until ID is assigned\n        if (!endpoint.lifecycle.hasId) {\n            return {};\n        }\n\n        // Get cached value\n        let vars = this.#varsForEndpoint.get(endpoint);\n        if (vars !== undefined) {\n            return vars;\n        }\n\n        // Load environment variables.  For nodes these come from VariableService; for endpoints we look within the\n        // \"part\" subkey of the parent\n        let envVars;\n        if (endpoint.owner === undefined) {\n            envVars = this.#env.vars.get(`${NODE_SUBKEY}.${endpoint.id}`);\n        } else if (!endpoint.lifecycle.isInstalled) {\n            // We can't load variables if the endpoint is not installed\n            return {};\n        } else {\n            const partVars = this.forEndpoint(endpoint.owner)[PART_SUBKEY];\n            if (isObject(partVars)) {\n                envVars = partVars[endpoint.id];\n            }\n        }\n\n        // If environment variables is an object there are variables defined.  Otherwise we treat as an empty set\n        if (isObject(envVars)) {\n            vars = envVars;\n        } else {\n            vars = {};\n        }\n\n        // Cache the value\n        this.#varsForEndpoint.set(endpoint, vars);\n\n        return vars;\n    }\n\n    /**\n     * Access the variable mape for a type of behavior.\n     */\n    forBehaviorType(type: Behavior.Type) {\n        // Get cached value\n        let vars = this.#varsForBehavior.get(type);\n        if (vars !== undefined) {\n            return vars;\n        }\n\n        // Load environment variables\n        const envVars = this.#env.vars.get(`${BEHAVIOR_SUBKEY}.${type.id}`) as VariableService.Value;\n        if (isObject(envVars)) {\n            vars = envVars;\n        } else {\n            vars = {};\n        }\n\n        // Cache the value\n        this.#varsForBehavior.set(type, vars);\n\n        return vars;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,2BAA8B;AAE9B,kBAAyB;AAVzB;AAAA;AAAA;AAAA;AAAA;AAaA,MAAM,cAAc;AACpB,MAAM,kBAAkB;AACxB,MAAM,cAAc;AAoEb,MAAM,wBAAwB;AAAA,EACjC;AAAA,EACA,mBAAmB,oBAAI,QAAuC;AAAA,EAC9D,mBAAmB,oBAAI,QAA4C;AAAA,EAEnE,YAAY,KAAkB;AAC1B,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,QAAQ,mCAAc,MAAM,EAAE,KAAkB;AAC5C,UAAM,UAAU,IAAI,wBAAwB,GAAG;AAC/C,QAAI,IAAI,yBAAyB,OAAO;AACxC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,UAAoB,MAAqB;AACzD,UAAM,SAAS,KAAK,gBAAgB,IAAI;AACxC,UAAM,kBAAkB,KAAK,YAAY,QAAQ;AACjD,UAAM,UAAU,gBAAgB,KAAK,EAAE,KAAK,gBAAgB,KAAK,GAAG,YAAY,CAAC;AACjF,YAAI,sBAAS,OAAO,GAAG;AACnB,aAAO,EAAE,GAAG,QAAQ,GAAG,QAAQ;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAyC;AAEjD,QAAI,CAAC,SAAS,UAAU,OAAO;AAC3B,aAAO,CAAC;AAAA,IACZ;AAGA,QAAI,OAAO,KAAK,iBAAiB,IAAI,QAAQ;AAC7C,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAIA,QAAI;AACJ,QAAI,SAAS,UAAU,QAAW;AAC9B,gBAAU,KAAK,KAAK,KAAK,IAAI,GAAG,WAAW,IAAI,SAAS,EAAE,EAAE;AAAA,IAChE,WAAW,CAAC,SAAS,UAAU,aAAa;AAExC,aAAO,CAAC;AAAA,IACZ,OAAO;AACH,YAAM,WAAW,KAAK,YAAY,SAAS,KAAK,EAAE,WAAW;AAC7D,cAAI,sBAAS,QAAQ,GAAG;AACpB,kBAAU,SAAS,SAAS,EAAE;AAAA,MAClC;AAAA,IACJ;AAGA,YAAI,sBAAS,OAAO,GAAG;AACnB,aAAO;AAAA,IACX,OAAO;AACH,aAAO,CAAC;AAAA,IACZ;AAGA,SAAK,iBAAiB,IAAI,UAAU,IAAI;AAExC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,MAAqB;AAEjC,QAAI,OAAO,KAAK,iBAAiB,IAAI,IAAI;AACzC,QAAI,SAAS,QAAW;AACpB,aAAO;AAAA,IACX;AAGA,UAAM,UAAU,KAAK,KAAK,KAAK,IAAI,GAAG,eAAe,IAAI,KAAK,EAAE,EAAE;AAClE,YAAI,sBAAS,OAAO,GAAG;AACnB,aAAO;AAAA,IACX,OAAO;AACH,aAAO,CAAC;AAAA,IACZ;AAGA,SAAK,iBAAiB,IAAI,MAAM,IAAI;AAEpC,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
