{
  "version": 3,
  "sources": ["../../../../src/endpoint/properties/SupportedBehaviors.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Behavior } from \"../../behavior/Behavior.js\";\nimport { DescriptorBehavior } from \"../../behavior/definitions/descriptor/DescriptorBehavior.js\";\nimport { ImplementationError } from \"../../common/MatterError.js\";\nimport { camelize } from \"../../util/String.js\";\n\n/**\n * A set of behaviors an endpoint supports.\n */\nexport type SupportedBehaviors = Record<string, Behavior.Type>;\n\n/**\n * Create SupportedBehaviors from a list of behavior types.\n */\nexport function SupportedBehaviors<const T extends SupportedBehaviors.List>(...types: T) {\n    const result = {} as SupportedBehaviors;\n\n    addBehaviors(result, types);\n\n    return result as SupportedBehaviors.MapOf<T>;\n}\n\n/**\n * Utility functions and definitions for modifying lists of clusters.\n */\nexport namespace SupportedBehaviors {\n    export type List = readonly Behavior.Type[];\n\n    /**\n     * Create a new list with additional behaviors, replacing any previous\n     * behavior for the same cluster.  Replacement updates the set of supported\n     * cluster features.\n     *\n     * Note: Functional equivalent of With<> but you can't have a method named\n     * \"with\" in a namespace.\n     */\n    export function extend<const BehaviorsT extends SupportedBehaviors, const NewBehaviorsT extends List>(\n        currentTypes: BehaviorsT,\n        newTypes: NewBehaviorsT,\n    ) {\n        const result = { ...currentTypes } as SupportedBehaviors;\n\n        addBehaviors(result, newTypes);\n\n        return result as unknown as With<BehaviorsT, NewBehaviorsT>;\n    }\n\n    /**\n     * Add or replace behaviors.\n     */\n    export type With<CurrentT extends SupportedBehaviors, NewT extends List> = Omit<CurrentT, NewT[number][\"id\"]> &\n        MapOf<NewT>;\n\n    /**\n     * Convert a List to BehaviorTypes.\n     */\n    export type MapOf<T extends List> = T extends readonly [infer F extends Behavior.Type]\n        ? { readonly [K in F[\"id\"]]: F }\n        : T extends readonly [infer F extends Behavior.Type, ...infer R extends List]\n          ? { readonly [K in F[\"id\"]]: F } & MapOf<R>\n          : {};\n\n    /**\n     * Properties of an endpoint contributed by listed behaviors.\n     */\n    export type EndpointProperties<SB extends SupportedBehaviors> = {\n        readonly [K in keyof SB]: InstanceType<SB[K]>;\n    };\n\n    /**\n     * Compound state for all behaviors.\n     */\n    export type StateOf<SB extends SupportedBehaviors> = {\n        [K in keyof SB]: Behavior.StateOf<SB[K]>;\n    } & {\n        descriptor: Behavior.StateOf<typeof DescriptorBehavior>;\n    };\n\n    /**\n     * Compound events for all behaviors.\n     */\n    export type EventsOf<SB extends SupportedBehaviors> = {\n        [K in keyof SB]: Behavior.EventsOf<SB[K]>;\n    };\n\n    /**\n     * Input version of {@link StateOf}.\n     */\n    export type InputStateOf<SB extends SupportedBehaviors> = {\n        [K in keyof SB]?: Behavior.InputStateOf<SB[K]>;\n    } & {\n        descriptor?: Behavior.InputStateOf<typeof DescriptorBehavior>;\n    };\n\n    /**\n     * Patch input version of {@link StateOf}.\n     */\n    export type StatePatchOf<SB extends SupportedBehaviors> = {\n        [K in keyof SB]?: Behavior.PatchStateOf<SB[K]>;\n    } & {\n        descriptor?: Behavior.PatchStateOf<typeof DescriptorBehavior>;\n    };\n}\n\nfunction addBehaviors(target: SupportedBehaviors, types: SupportedBehaviors.List) {\n    for (const type of types) {\n        if (typeof type.id !== \"string\") {\n            throw new ImplementationError(\"Behavior type has no ID\");\n        }\n        target[camelize(type.id)] = type;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,yBAAoC;AACpC,oBAAyB;AATzB;AAAA;AAAA;AAAA;AAAA;AAmBO,SAAS,sBAA+D,OAAU;AACrF,QAAM,SAAS,CAAC;AAEhB,eAAa,QAAQ,KAAK;AAE1B,SAAO;AACX;AAAA,CAKO,CAAUA,wBAAV;AAWI,WAAS,OACZ,cACA,UACF;AACE,UAAM,SAAS,EAAE,GAAG,aAAa;AAEjC,iBAAa,QAAQ,QAAQ;AAE7B,WAAO;AAAA,EACX;AATO,EAAAA,oBAAS;AAAA,GAXH;AA+EjB,SAAS,aAAa,QAA4B,OAAgC;AAC9E,aAAW,QAAQ,OAAO;AACtB,QAAI,OAAO,KAAK,OAAO,UAAU;AAC7B,YAAM,IAAI,uCAAoB,yBAAyB;AAAA,IAC3D;AACA,eAAO,wBAAS,KAAK,EAAE,CAAC,IAAI;AAAA,EAChC;AACJ;",
  "names": ["SupportedBehaviors"]
}
