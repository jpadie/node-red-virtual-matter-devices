/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableSet, ObservableSet } from "../../util/Set.js";
import { Agent } from "../Agent.js";
import { Endpoint } from "../Endpoint.js";
import { EndpointType } from "../type/EndpointType.js";
/**
 * Manages parent-child relationship between endpoints.
 *
 * You can manipulate child parts using {@link MutableSet} interface.
 *
 * Notifications of structural change bubble via {@link Endpoint.lifecycle.changed}.
 */
export declare class Parts implements MutableSet<Endpoint, Endpoint | Agent>, ObservableSet<Endpoint> {
    #private;
    constructor(endpoint: Endpoint);
    add(child: Endpoint.Definition | Agent): Endpoint<EndpointType.Empty> | undefined;
    delete(child: Endpoint | Agent): boolean;
    clear(): void;
    get(id: string): Endpoint<EndpointType.Empty> | undefined;
    require(id: string): Endpoint<EndpointType.Empty>;
    has(identity: string | Endpoint | Agent): boolean;
    indexOf(child: Endpoint | Agent): number;
    get added(): import("../../util/Observable.js").Observable<[Endpoint<EndpointType.Empty>], void>;
    get deleted(): import("../../util/Observable.js").Observable<[Endpoint<EndpointType.Empty>], void>;
    get size(): number;
    [Symbol.iterator](): IterableIterator<Endpoint<EndpointType.Empty>>;
    /**
     * Confirm availability of an ID amongst the endpoint's children.
     */
    assertIdAvailable(id: string, endpoint: Endpoint): void;
    /**
     * Initialize all uninitialized Parts.
     *
     * Invoked automatically by the owner after behaviors initialize.
     */
    initialize(): import("../../util/Promises.js").MaybePromise;
    /**
     * Soft-reset all parts.  Invoked automatically by the owner on reset.
     */
    reset(): Promise<void>;
    /**
     * Destroy all parts.  Invoked automatically by the owner on destroy.
     */
    close(): Promise<void>;
}
//# sourceMappingURL=Parts.d.ts.map