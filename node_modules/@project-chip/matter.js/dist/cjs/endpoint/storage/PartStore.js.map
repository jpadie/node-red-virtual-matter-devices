{
  "version": 3,
  "sources": ["../../../../src/endpoint/storage/PartStore.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Val } from \"../../behavior/state/Val.js\";\nimport type { Datasource } from \"../../behavior/state/managed/Datasource.js\";\nimport type { Endpoint } from \"../../device/Endpoint.js\";\n\n/**\n * Persistence backing for an {@link Endpoint}.\n *\n * This is the interface a {@link Endpoint} uses for reading and writing non-volatile values.\n */\nexport interface PartStore {\n    /**\n     * Description used in diagnostic messages.\n     */\n    toString(): string;\n\n    /**\n     * Currently persisted values, keyed by {@link Behavior.id} then property name.\n     */\n    initialValues: Record<string, Val.Struct>;\n\n    /**\n     * Patch values.  Keyed by {@link Behavior.id} then property name.\n     *\n     * See {@link Datasource.Store.set} for the patch semantics the individual structs use.\n     */\n    set(values: Record<string, Val.Struct | undefined>): Promise<void>;\n\n    /**\n     * Remove all persisted information for the {@link Endpoint}\n     */\n    delete(): Promise<void>;\n\n    /**\n     * Obtain a {@link Datasource.Store} for a behavior.\n     */\n    storeForBehavior(behaviorId: string): Datasource.Store;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
