/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OperationalStateServer as BaseOperationalStateServer } from "../../../behavior/definitions/operational-state/OperationalStateServer.js";
import { MicrowaveOvenModeServer as BaseMicrowaveOvenModeServer } from "../../../behavior/definitions/microwave-oven-mode/MicrowaveOvenModeServer.js";
import { MicrowaveOvenControlServer as BaseMicrowaveOvenControlServer } from "../../../behavior/definitions/microwave-oven-control/MicrowaveOvenControlServer.js";
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import { FanControlServer as BaseFanControlServer } from "../../../behavior/definitions/fan-control/FanControlServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { Identity } from "../../../util/Type.js";
/**
 * This defines conformance to the Microwave Oven device type.
 *
 * A Microwave Oven is a device with the primary function of heating foods and beverages using a magnetron.
 *
 * MicrowaveOvenDevice requires MicrowaveOvenControl cluster but MicrowaveOvenControl is not added by default because
 * you must select the features your device supports. You can add manually using MicrowaveOvenDevice.with().
 *
 * @see {@link MatterSpecification.v13.Device} ยง 13.11
 */
export interface MicrowaveOvenDevice extends Identity<typeof MicrowaveOvenDeviceDefinition> {
}
export declare namespace MicrowaveOvenRequirements {
    /**
     * The OperationalState cluster is required by the Matter specification.
     *
     * This version of {@link OperationalStateServer} is specialized per the specification.
     */
    const OperationalStateServer: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ElementModifier.WithAlterations<import("../../../cluster/export.js").OperationalState.Cluster, {
        readonly attributes: {
            readonly countdownTime: {
                readonly optional: false;
            };
        };
    }>, typeof BaseOperationalStateServer, import("../../../behavior/definitions/operational-state/OperationalStateInterface.js").OperationalStateInterface>;
    /**
     * The MicrowaveOvenMode cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link MicrowaveOvenModeServer} for convenience.
     */
    const MicrowaveOvenModeServer: typeof BaseMicrowaveOvenModeServer;
    /**
     * The MicrowaveOvenControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link MicrowaveOvenControlServer} for convenience.
     */
    const MicrowaveOvenControlServer: typeof BaseMicrowaveOvenControlServer;
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The FanControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FanControlServer} for convenience.
     */
    const FanControlServer: typeof BaseFanControlServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OperationalState: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ElementModifier.WithAlterations<import("../../../cluster/export.js").OperationalState.Cluster, {
                readonly attributes: {
                    readonly countdownTime: {
                        readonly optional: false;
                    };
                };
            }>, typeof BaseOperationalStateServer, import("../../../behavior/definitions/operational-state/OperationalStateInterface.js").OperationalStateInterface>;
            MicrowaveOvenMode: typeof BaseMicrowaveOvenModeServer;
            MicrowaveOvenControl: typeof BaseMicrowaveOvenControlServer;
        };
        optional: {
            Identify: typeof BaseIdentifyServer;
            FanControl: typeof BaseFanControlServer;
        };
    };
}
export declare const MicrowaveOvenDeviceDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "MicrowaveOven";
    readonly deviceType: 121;
    readonly deviceRevision: 1;
    readonly requirements: typeof MicrowaveOvenRequirements;
    readonly behaviors: {
        readonly operationalState: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ElementModifier.WithAlterations<import("../../../cluster/export.js").OperationalState.Cluster, {
            readonly attributes: {
                readonly countdownTime: {
                    readonly optional: false;
                };
            };
        }>, typeof BaseOperationalStateServer, import("../../../behavior/definitions/operational-state/OperationalStateInterface.js").OperationalStateInterface>;
    } & {
        readonly microwaveOvenMode: typeof BaseMicrowaveOvenModeServer;
    };
}>, {
    readonly operationalState: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ElementModifier.WithAlterations<import("../../../cluster/export.js").OperationalState.Cluster, {
        readonly attributes: {
            readonly countdownTime: {
                readonly optional: false;
            };
        };
    }>, typeof BaseOperationalStateServer, import("../../../behavior/definitions/operational-state/OperationalStateInterface.js").OperationalStateInterface>;
} & {
    readonly microwaveOvenMode: typeof BaseMicrowaveOvenModeServer;
}>;
export declare const MicrowaveOvenDevice: MicrowaveOvenDevice;
//# sourceMappingURL=MicrowaveOvenDevice.d.ts.map