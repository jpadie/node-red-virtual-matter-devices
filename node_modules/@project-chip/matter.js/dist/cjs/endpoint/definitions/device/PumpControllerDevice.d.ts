/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { Identity } from "../../../util/Type.js";
/**
 * A Pump Controller device is capable of configuring and controlling a Pump device.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 6.5
 */
export interface PumpControllerDevice extends Identity<typeof PumpControllerDeviceDefinition> {
}
export declare namespace PumpControllerRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The Binding cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link BindingBehavior} for convenience.
     */
    const BindingBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Binding.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.
     */
    const OnOffBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OnOff.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
    /**
     * The PumpConfigurationAndControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link PumpConfigurationAndControlBehavior} for convenience.
     */
    const PumpConfigurationAndControlBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 512;
        readonly name: "PumpConfigurationAndControl";
        readonly revision: 4;
        readonly features: {
            readonly constantPressure: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly compensatedPressure: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly constantFlow: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly constantSpeed: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly constantTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly automatic: import("../../../schema/BitmapSchema.js").BitFlag;
            readonly localOperation: import("../../../schema/BitmapSchema.js").BitFlag;
        };
        readonly attributes: {
            readonly maxPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            readonly maxSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            readonly maxFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            readonly pumpStatus: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                deviceFault: import("../../../schema/BitmapSchema.js").BitFlag;
                supplyFault: import("../../../schema/BitmapSchema.js").BitFlag;
                speedLow: import("../../../schema/BitmapSchema.js").BitFlag;
                speedHigh: import("../../../schema/BitmapSchema.js").BitFlag;
                localOverride: import("../../../schema/BitmapSchema.js").BitFlag;
                running: import("../../../schema/BitmapSchema.js").BitFlag;
                remotePressure: import("../../../schema/BitmapSchema.js").BitFlag;
                remoteFlow: import("../../../schema/BitmapSchema.js").BitFlag;
                remoteTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
            }>, any>;
            readonly effectiveOperationMode: import("../../../cluster/Cluster.js").Attribute<import("../../../cluster/export.js").PumpConfigurationAndControl.OperationMode, any>;
            readonly effectiveControlMode: import("../../../cluster/Cluster.js").Attribute<import("../../../cluster/export.js").PumpConfigurationAndControl.ControlMode, any>;
            readonly capacity: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
            readonly speed: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
            readonly lifetimeRunningHours: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly power: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
            readonly lifetimeEnergyConsumed: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly operationMode: import("../../../cluster/Cluster.js").WritableAttribute<import("../../../cluster/export.js").PumpConfigurationAndControl.OperationMode, any>;
            readonly controlMode: import("../../../cluster/Cluster.js").OptionalWritableAttribute<import("../../../cluster/export.js").PumpConfigurationAndControl.ControlMode, any>;
        };
        readonly events: {
            readonly supplyVoltageLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly supplyVoltageHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly powerMissingPhase: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly systemPressureLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly systemPressureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly dryRunning: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly motorTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly pumpMotorFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly electronicTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly pumpBlocked: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly sensorFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly electronicNonFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly electronicFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly generalFault: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly leakage: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly airDetection: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
            readonly turbineOperation: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly constantPressure: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly automatic: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly maxConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly minCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly maxCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly minConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly maxConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly minConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly maxConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly minConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                    readonly maxConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly compensatedPressure: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly constantSpeed: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly constantFlow: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly constantTemperature: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly minConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly constantPressure: false;
                readonly compensatedPressure: false;
                readonly constantFlow: false;
                readonly constantSpeed: false;
                readonly constantTemperature: false;
            };
            readonly component: false;
        }];
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.
     */
    const IdentifyBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Identify.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>;
    /**
     * The Groups cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.
     */
    const GroupsBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Groups.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>;
    /**
     * The LevelControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.
     */
    const LevelControlBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").LevelControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.
     */
    const ScenesManagementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ScenesManagement.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>;
    /**
     * The TemperatureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureMeasurementBehavior} for convenience.
     */
    const TemperatureMeasurementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").TemperatureMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The PressureMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link PressureMeasurementBehavior} for convenience.
     */
    const PressureMeasurementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").PressureMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The FlowMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link FlowMeasurementBehavior} for convenience.
     */
    const FlowMeasurementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").FlowMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        mandatory: {
            Binding: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Binding.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
            OnOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OnOff.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
            PumpConfigurationAndControl: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 512;
                readonly name: "PumpConfigurationAndControl";
                readonly revision: 4;
                readonly features: {
                    readonly constantPressure: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly compensatedPressure: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly constantFlow: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly constantSpeed: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly constantTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly automatic: import("../../../schema/BitmapSchema.js").BitFlag;
                    readonly localOperation: import("../../../schema/BitmapSchema.js").BitFlag;
                };
                readonly attributes: {
                    readonly maxPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly maxFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                    readonly pumpStatus: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        deviceFault: import("../../../schema/BitmapSchema.js").BitFlag;
                        supplyFault: import("../../../schema/BitmapSchema.js").BitFlag;
                        speedLow: import("../../../schema/BitmapSchema.js").BitFlag;
                        speedHigh: import("../../../schema/BitmapSchema.js").BitFlag;
                        localOverride: import("../../../schema/BitmapSchema.js").BitFlag;
                        running: import("../../../schema/BitmapSchema.js").BitFlag;
                        remotePressure: import("../../../schema/BitmapSchema.js").BitFlag;
                        remoteFlow: import("../../../schema/BitmapSchema.js").BitFlag;
                        remoteTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>, any>;
                    readonly effectiveOperationMode: import("../../../cluster/Cluster.js").Attribute<import("../../../cluster/export.js").PumpConfigurationAndControl.OperationMode, any>;
                    readonly effectiveControlMode: import("../../../cluster/Cluster.js").Attribute<import("../../../cluster/export.js").PumpConfigurationAndControl.ControlMode, any>;
                    readonly capacity: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                    readonly speed: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                    readonly lifetimeRunningHours: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
                    readonly power: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                    readonly lifetimeEnergyConsumed: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
                    readonly operationMode: import("../../../cluster/Cluster.js").WritableAttribute<import("../../../cluster/export.js").PumpConfigurationAndControl.OperationMode, any>;
                    readonly controlMode: import("../../../cluster/Cluster.js").OptionalWritableAttribute<import("../../../cluster/export.js").PumpConfigurationAndControl.ControlMode, any>;
                };
                readonly events: {
                    readonly supplyVoltageLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly supplyVoltageHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly powerMissingPhase: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly systemPressureLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly systemPressureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly dryRunning: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly motorTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly pumpMotorFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly electronicTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly pumpBlocked: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly sensorFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly electronicNonFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly electronicFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly generalFault: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly leakage: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly airDetection: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                    readonly turbineOperation: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
                };
                readonly extensions: readonly [{
                    readonly flags: {
                        readonly constantPressure: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                            readonly maxConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly automatic: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly maxConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly minCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly maxCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly minConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly maxConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly minConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly maxConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly minConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                            readonly maxConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly compensatedPressure: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                            readonly maxCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly constantSpeed: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                            readonly maxConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly constantFlow: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                            readonly maxConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly constantTemperature: true;
                    };
                    readonly component: {
                        readonly attributes: {
                            readonly minConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                            readonly maxConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                        };
                    };
                }, {
                    readonly flags: {
                        readonly constantPressure: false;
                        readonly compensatedPressure: false;
                        readonly constantFlow: false;
                        readonly constantSpeed: false;
                        readonly constantTemperature: false;
                    };
                    readonly component: false;
                }];
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
        };
        optional: {
            Identify: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Identify.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>;
            Groups: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Groups.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>;
            LevelControl: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").LevelControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>;
            ScenesManagement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ScenesManagement.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>;
            TemperatureMeasurement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").TemperatureMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
            PressureMeasurement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").PressureMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
            FlowMeasurement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").FlowMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
        };
    };
}
export declare const PumpControllerDeviceDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "PumpController";
    readonly deviceType: 772;
    readonly deviceRevision: 3;
    readonly requirements: typeof PumpControllerRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const PumpControllerDevice: PumpControllerDevice;
//# sourceMappingURL=PumpControllerDevice.d.ts.map