"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PumpControllerDevice_exports = {};
__export(PumpControllerDevice_exports, {
  PumpControllerDevice: () => PumpControllerDevice,
  PumpControllerDeviceDefinition: () => PumpControllerDeviceDefinition,
  PumpControllerRequirements: () => PumpControllerRequirements
});
module.exports = __toCommonJS(PumpControllerDevice_exports);
var import_IdentifyServer = require("../../../behavior/definitions/identify/IdentifyServer.js");
var import_BindingBehavior = require("../../../behavior/definitions/binding/BindingBehavior.js");
var import_OnOffBehavior = require("../../../behavior/definitions/on-off/OnOffBehavior.js");
var import_PumpConfigurationAndControlBehavior = require("../../../behavior/definitions/pump-configuration-and-control/PumpConfigurationAndControlBehavior.js");
var import_IdentifyBehavior = require("../../../behavior/definitions/identify/IdentifyBehavior.js");
var import_GroupsBehavior = require("../../../behavior/definitions/groups/GroupsBehavior.js");
var import_LevelControlBehavior = require("../../../behavior/definitions/level-control/LevelControlBehavior.js");
var import_ScenesManagementBehavior = require("../../../behavior/definitions/scenes-management/ScenesManagementBehavior.js");
var import_TemperatureMeasurementBehavior = require("../../../behavior/definitions/temperature-measurement/TemperatureMeasurementBehavior.js");
var import_PressureMeasurementBehavior = require("../../../behavior/definitions/pressure-measurement/PressureMeasurementBehavior.js");
var import_FlowMeasurementBehavior = require("../../../behavior/definitions/flow-measurement/FlowMeasurementBehavior.js");
var import_MutableEndpoint = require("../../type/MutableEndpoint.js");
var import_SupportedBehaviors = require("../../properties/SupportedBehaviors.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var PumpControllerRequirements;
((PumpControllerRequirements2) => {
  PumpControllerRequirements2.IdentifyServer = import_IdentifyServer.IdentifyServer;
  PumpControllerRequirements2.BindingBehavior = import_BindingBehavior.BindingBehavior;
  PumpControllerRequirements2.OnOffBehavior = import_OnOffBehavior.OnOffBehavior;
  PumpControllerRequirements2.PumpConfigurationAndControlBehavior = import_PumpConfigurationAndControlBehavior.PumpConfigurationAndControlBehavior;
  PumpControllerRequirements2.IdentifyBehavior = import_IdentifyBehavior.IdentifyBehavior;
  PumpControllerRequirements2.GroupsBehavior = import_GroupsBehavior.GroupsBehavior;
  PumpControllerRequirements2.LevelControlBehavior = import_LevelControlBehavior.LevelControlBehavior;
  PumpControllerRequirements2.ScenesManagementBehavior = import_ScenesManagementBehavior.ScenesManagementBehavior;
  PumpControllerRequirements2.TemperatureMeasurementBehavior = import_TemperatureMeasurementBehavior.TemperatureMeasurementBehavior;
  PumpControllerRequirements2.PressureMeasurementBehavior = import_PressureMeasurementBehavior.PressureMeasurementBehavior;
  PumpControllerRequirements2.FlowMeasurementBehavior = import_FlowMeasurementBehavior.FlowMeasurementBehavior;
  PumpControllerRequirements2.server = { mandatory: { Identify: PumpControllerRequirements2.IdentifyServer } };
  PumpControllerRequirements2.client = {
    mandatory: {
      Binding: PumpControllerRequirements2.BindingBehavior,
      OnOff: PumpControllerRequirements2.OnOffBehavior,
      PumpConfigurationAndControl: PumpControllerRequirements2.PumpConfigurationAndControlBehavior
    },
    optional: {
      Identify: PumpControllerRequirements2.IdentifyBehavior,
      Groups: PumpControllerRequirements2.GroupsBehavior,
      LevelControl: PumpControllerRequirements2.LevelControlBehavior,
      ScenesManagement: PumpControllerRequirements2.ScenesManagementBehavior,
      TemperatureMeasurement: PumpControllerRequirements2.TemperatureMeasurementBehavior,
      PressureMeasurement: PumpControllerRequirements2.PressureMeasurementBehavior,
      FlowMeasurement: PumpControllerRequirements2.FlowMeasurementBehavior
    }
  };
})(PumpControllerRequirements || (PumpControllerRequirements = {}));
const PumpControllerDeviceDefinition = (0, import_MutableEndpoint.MutableEndpoint)({
  name: "PumpController",
  deviceType: 772,
  deviceRevision: 3,
  requirements: PumpControllerRequirements,
  behaviors: (0, import_SupportedBehaviors.SupportedBehaviors)(PumpControllerRequirements.server.mandatory.Identify)
});
const PumpControllerDevice = PumpControllerDeviceDefinition;
//# sourceMappingURL=PumpControllerDevice.js.map
