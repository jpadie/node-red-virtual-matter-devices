{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/ColorDimmerSwitchDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { IdentifyBehavior as BaseIdentifyBehavior } from \"../../../behavior/definitions/identify/IdentifyBehavior.js\";\nimport { OnOffBehavior as BaseOnOffBehavior } from \"../../../behavior/definitions/on-off/OnOffBehavior.js\";\nimport {\n    LevelControlBehavior as BaseLevelControlBehavior\n} from \"../../../behavior/definitions/level-control/LevelControlBehavior.js\";\nimport {\n    ColorControlBehavior as BaseColorControlBehavior\n} from \"../../../behavior/definitions/color-control/ColorControlBehavior.js\";\nimport { GroupsBehavior as BaseGroupsBehavior } from \"../../../behavior/definitions/groups/GroupsBehavior.js\";\nimport {\n    ScenesManagementBehavior as BaseScenesManagementBehavior\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Color Dimmer Switch is a controller device that, when bound to a lighting device such as an Extended Color Light,\n * is capable of being used to adjust the color of the light being emitted.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 6.3\n */\nexport interface ColorDimmerSwitchDevice extends Identity<typeof ColorDimmerSwitchDeviceDefinition> {}\n\nexport namespace ColorDimmerSwitchRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.\n     */\n    export const IdentifyBehavior = BaseIdentifyBehavior;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.\n     */\n    export const OnOffBehavior = BaseOnOffBehavior;\n\n    /**\n     * The LevelControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.\n     */\n    export const LevelControlBehavior = BaseLevelControlBehavior;\n\n    /**\n     * The ColorControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ColorControlBehavior} for convenience.\n     */\n    export const ColorControlBehavior = BaseColorControlBehavior;\n\n    /**\n     * The Groups cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.\n     */\n    export const GroupsBehavior = BaseGroupsBehavior;\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.\n     */\n    export const ScenesManagementBehavior = BaseScenesManagementBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = { mandatory: { Identify: IdentifyServer } };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = {\n        mandatory: {\n            Identify: IdentifyBehavior,\n            OnOff: OnOffBehavior,\n            LevelControl: LevelControlBehavior,\n            ColorControl: ColorControlBehavior\n        },\n\n        optional: { Groups: GroupsBehavior, ScenesManagement: ScenesManagementBehavior }\n    };\n}\n\nexport const ColorDimmerSwitchDeviceDefinition = MutableEndpoint({\n    name: \"ColorDimmerSwitch\",\n    deviceType: 0x105,\n    deviceRevision: 3,\n    requirements: ColorDimmerSwitchRequirements,\n    behaviors: SupportedBehaviors(ColorDimmerSwitchRequirements.server.mandatory.Identify)\n});\n\nexport const ColorDimmerSwitchDevice: ColorDimmerSwitchDevice = ColorDimmerSwitchDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAAqD;AACrD,8BAAyD;AACzD,2BAAmD;AACnD,kCAEO;AACP,kCAEO;AACP,4BAAqD;AACrD,sCAEO;AACP,6BAAgC;AAChC,gCAAmC;AAtBnC;AAAA;AAAA;AAAA;AAAA;AAiCO,IAAU;AAAA,CAAV,CAAUA,mCAAV;AAMI,EAAMA,+BAAA,iBAAiB,sBAAAC;AAOvB,EAAMD,+BAAA,mBAAmB,wBAAAE;AAOzB,EAAMF,+BAAA,gBAAgB,qBAAAG;AAOtB,EAAMH,+BAAA,uBAAuB,4BAAAI;AAO7B,EAAMJ,+BAAA,uBAAuB,4BAAAK;AAO7B,EAAML,+BAAA,iBAAiB,sBAAAM;AAOvB,EAAMN,+BAAA,2BAA2B,gCAAAO;AAKjC,EAAMP,+BAAA,SAAS,EAAE,WAAW,EAAE,UAAUA,+BAAA,eAAe,EAAE;AAKzD,EAAMA,+BAAA,SAAS;AAAA,IAClB,WAAW;AAAA,MACP,UAAUA,+BAAA;AAAA,MACV,OAAOA,+BAAA;AAAA,MACP,cAAcA,+BAAA;AAAA,MACd,cAAcA,+BAAA;AAAA,IAClB;AAAA,IAEA,UAAU,EAAE,QAAQA,+BAAA,gBAAgB,kBAAkBA,+BAAA,yBAAyB;AAAA,EACnF;AAAA,GAnEa;AAsEV,MAAM,wCAAoC,wCAAgB;AAAA,EAC7D,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW,8CAAmB,8BAA8B,OAAO,UAAU,QAAQ;AACzF,CAAC;AAEM,MAAM,0BAAmD;",
  "names": ["ColorDimmerSwitchRequirements", "BaseIdentifyServer", "BaseIdentifyBehavior", "BaseOnOffBehavior", "BaseLevelControlBehavior", "BaseColorControlBehavior", "BaseGroupsBehavior", "BaseScenesManagementBehavior"]
}
