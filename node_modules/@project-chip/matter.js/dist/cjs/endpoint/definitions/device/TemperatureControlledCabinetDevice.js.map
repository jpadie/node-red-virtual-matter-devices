{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/TemperatureControlledCabinetDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport {\n    TemperatureControlServer as BaseTemperatureControlServer\n} from \"../../../behavior/definitions/temperature-control/TemperatureControlServer.js\";\nimport {\n    TemperatureMeasurementServer as BaseTemperatureMeasurementServer\n} from \"../../../behavior/definitions/temperature-measurement/TemperatureMeasurementServer.js\";\nimport {\n    RefrigeratorAndTemperatureControlledCabinetModeServer as BaseRefrigeratorAndTemperatureControlledCabinetModeServer\n} from \"../../../behavior/definitions/refrigerator-and-temperature-controlled-cabinet-mode/RefrigeratorAndTemperatureControlledCabinetModeServer.js\";\nimport { OvenModeServer as BaseOvenModeServer } from \"../../../behavior/definitions/oven-mode/OvenModeServer.js\";\nimport {\n    OvenCavityOperationalStateServer as BaseOvenCavityOperationalStateServer\n} from \"../../../behavior/definitions/oven-cavity-operational-state/OvenCavityOperationalStateServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Temperature Controlled Cabinet only exists composed as part of another device type. It represents a single cabinet\n * that is capable of having its temperature controlled. Such a cabinet may be chilling or freezing food, for example\n * as part of a refrigerator, freezer, wine chiller, or other similar device. Equally, such a cabinet may be warming or\n * heating food, for example as part of an oven, range, or similar device.\n *\n * TemperatureControlledCabinetDevice requires TemperatureControl cluster but TemperatureControl is not added by\n * default because you must select the features your device supports. You can add manually using\n * TemperatureControlledCabinetDevice.with().\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 13.4\n */\nexport interface TemperatureControlledCabinetDevice extends Identity<typeof TemperatureControlledCabinetDeviceDefinition> {}\n\nexport namespace TemperatureControlledCabinetRequirements {\n    /**\n     * The TemperatureControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TemperatureControlServer} for convenience.\n     */\n    export const TemperatureControlServer = BaseTemperatureControlServer;\n\n    /**\n     * The TemperatureMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.\n     */\n    export const TemperatureMeasurementServer = BaseTemperatureMeasurementServer;\n\n    /**\n     * The RefrigeratorAndTemperatureControlledCabinetMode cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation\n     * {@link RefrigeratorAndTemperatureControlledCabinetModeServer} for convenience.\n     */\n    export const RefrigeratorAndTemperatureControlledCabinetModeServer = BaseRefrigeratorAndTemperatureControlledCabinetModeServer;\n\n    /**\n     * The OvenMode cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OvenModeServer} for convenience.\n     */\n    export const OvenModeServer = BaseOvenModeServer;\n\n    /**\n     * The OvenCavityOperationalState cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OvenCavityOperationalStateServer} for convenience.\n     */\n    export const OvenCavityOperationalStateServer = BaseOvenCavityOperationalStateServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: { TemperatureControl: TemperatureControlServer },\n\n        optional: {\n            TemperatureMeasurement: TemperatureMeasurementServer,\n            RefrigeratorAndTemperatureControlledCabinetMode: RefrigeratorAndTemperatureControlledCabinetModeServer,\n            OvenMode: OvenModeServer,\n            OvenCavityOperationalState: OvenCavityOperationalStateServer\n        }\n    };\n}\n\nexport const TemperatureControlledCabinetDeviceDefinition = MutableEndpoint({\n    name: \"TemperatureControlledCabinet\",\n    deviceType: 0x71,\n    deviceRevision: 2,\n    requirements: TemperatureControlledCabinetRequirements,\n    behaviors: SupportedBehaviors()\n});\n\nexport const TemperatureControlledCabinetDevice: TemperatureControlledCabinetDevice = TemperatureControlledCabinetDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,sCAEO;AACP,0CAEO;AACP,mEAEO;AACP,4BAAqD;AACrD,8CAEO;AACP,6BAAgC;AAChC,gCAAmC;AAtBnC;AAAA;AAAA;AAAA;AAAA;AAuCO,IAAU;AAAA,CAAV,CAAUA,8CAAV;AAMI,EAAMA,0CAAA,2BAA2B,gCAAAC;AAOjC,EAAMD,0CAAA,+BAA+B,oCAAAE;AAQrC,EAAMF,0CAAA,wDAAwD,6DAAAG;AAO9D,EAAMH,0CAAA,iBAAiB,sBAAAI;AAOvB,EAAMJ,0CAAA,mCAAmC,wCAAAK;AAKzC,EAAML,0CAAA,SAAS;AAAA,IAClB,WAAW,EAAE,oBAAoBA,0CAAA,yBAAyB;AAAA,IAE1D,UAAU;AAAA,MACN,wBAAwBA,0CAAA;AAAA,MACxB,iDAAiDA,0CAAA;AAAA,MACjD,UAAUA,0CAAA;AAAA,MACV,4BAA4BA,0CAAA;AAAA,IAChC;AAAA,EACJ;AAAA,GAjDa;AAoDV,MAAM,mDAA+C,wCAAgB;AAAA,EACxE,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW,8CAAmB;AAClC,CAAC;AAEM,MAAM,qCAAyE;",
  "names": ["TemperatureControlledCabinetRequirements", "BaseTemperatureControlServer", "BaseTemperatureMeasurementServer", "BaseRefrigeratorAndTemperatureControlledCabinetModeServer", "BaseOvenModeServer", "BaseOvenCavityOperationalStateServer"]
}
