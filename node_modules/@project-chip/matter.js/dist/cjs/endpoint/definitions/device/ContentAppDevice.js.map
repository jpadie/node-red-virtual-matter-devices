{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/ContentAppDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport {\n    KeypadInputServer as BaseKeypadInputServer\n} from \"../../../behavior/definitions/keypad-input/KeypadInputServer.js\";\nimport {\n    ApplicationLauncherServer as BaseApplicationLauncherServer\n} from \"../../../behavior/definitions/application-launcher/ApplicationLauncherServer.js\";\nimport {\n    ApplicationBasicServer as BaseApplicationBasicServer\n} from \"../../../behavior/definitions/application-basic/ApplicationBasicServer.js\";\nimport { BindingServer as BaseBindingServer } from \"../../../behavior/definitions/binding/BindingServer.js\";\nimport { ChannelServer as BaseChannelServer } from \"../../../behavior/definitions/channel/ChannelServer.js\";\nimport {\n    TargetNavigatorServer as BaseTargetNavigatorServer\n} from \"../../../behavior/definitions/target-navigator/TargetNavigatorServer.js\";\nimport {\n    MediaPlaybackServer as BaseMediaPlaybackServer\n} from \"../../../behavior/definitions/media-playback/MediaPlaybackServer.js\";\nimport {\n    ContentLauncherServer as BaseContentLauncherServer\n} from \"../../../behavior/definitions/content-launcher/ContentLauncherServer.js\";\nimport {\n    AccountLoginServer as BaseAccountLoginServer\n} from \"../../../behavior/definitions/account-login/AccountLoginServer.js\";\nimport {\n    ContentAppObserverBehavior as BaseContentAppObserverBehavior\n} from \"../../../behavior/definitions/content-app-observer/ContentAppObserverBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * This defines conformance to the Content App device type.\n *\n * A Content App is usually an application built by a Content Provider. A Casting Video Player with a Content App\n * Platform is able to launch Content Apps and represent these apps as separate endpoints.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 10.5\n */\nexport interface ContentAppDevice extends Identity<typeof ContentAppDeviceDefinition> {}\n\nexport namespace ContentAppRequirements {\n    /**\n     * The KeypadInput cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link KeypadInputServer} for convenience.\n     */\n    export const KeypadInputServer = BaseKeypadInputServer;\n\n    /**\n     * The ApplicationLauncher cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ApplicationLauncherServer} for convenience.\n     */\n    export const ApplicationLauncherServer = BaseApplicationLauncherServer;\n\n    /**\n     * The ApplicationBasic cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ApplicationBasicServer} for convenience.\n     */\n    export const ApplicationBasicServer = BaseApplicationBasicServer;\n\n    /**\n     * The Binding cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link BindingServer} for convenience.\n     */\n    export const BindingServer = BaseBindingServer;\n\n    /**\n     * The Channel cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ChannelServer} for convenience.\n     */\n    export const ChannelServer = BaseChannelServer;\n\n    /**\n     * The TargetNavigator cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TargetNavigatorServer} for convenience.\n     */\n    export const TargetNavigatorServer = BaseTargetNavigatorServer;\n\n    /**\n     * The MediaPlayback cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link MediaPlaybackServer} for convenience.\n     */\n    export const MediaPlaybackServer = BaseMediaPlaybackServer;\n\n    /**\n     * The ContentLauncher cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ContentLauncherServer} for convenience.\n     */\n    export const ContentLauncherServer = BaseContentLauncherServer;\n\n    /**\n     * The AccountLogin cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link AccountLoginServer} for convenience.\n     */\n    export const AccountLoginServer = BaseAccountLoginServer;\n\n    /**\n     * The ContentAppObserver cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ContentAppObserverBehavior} for convenience.\n     */\n    export const ContentAppObserverBehavior = BaseContentAppObserverBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: {\n            KeypadInput: KeypadInputServer,\n            ApplicationLauncher: ApplicationLauncherServer,\n            ApplicationBasic: ApplicationBasicServer\n        },\n\n        optional: {\n            Binding: BindingServer,\n            Channel: ChannelServer,\n            TargetNavigator: TargetNavigatorServer,\n            MediaPlayback: MediaPlaybackServer,\n            ContentLauncher: ContentLauncherServer,\n            AccountLogin: AccountLoginServer\n        }\n    };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = { optional: { ContentAppObserver: ContentAppObserverBehavior }, mandatory: {} };\n}\n\nexport const ContentAppDeviceDefinition = MutableEndpoint({\n    name: \"ContentApp\",\n    deviceType: 0x24,\n    deviceRevision: 2,\n    requirements: ContentAppRequirements,\n    behaviors: SupportedBehaviors(\n        ContentAppRequirements.server.mandatory.KeypadInput,\n        ContentAppRequirements.server.mandatory.ApplicationLauncher,\n        ContentAppRequirements.server.mandatory.ApplicationBasic\n    )\n});\n\nexport const ContentAppDevice: ContentAppDevice = ContentAppDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,+BAEO;AACP,uCAEO;AACP,oCAEO;AACP,2BAAmD;AACnD,2BAAmD;AACnD,mCAEO;AACP,iCAEO;AACP,mCAEO;AACP,gCAEO;AACP,wCAEO;AACP,6BAAgC;AAChC,gCAAmC;AAnCnC;AAAA;AAAA;AAAA;AAAA;AAgDO,IAAU;AAAA,CAAV,CAAUA,4BAAV;AAMI,EAAMA,wBAAA,oBAAoB,yBAAAC;AAO1B,EAAMD,wBAAA,4BAA4B,iCAAAE;AAOlC,EAAMF,wBAAA,yBAAyB,8BAAAG;AAO/B,EAAMH,wBAAA,gBAAgB,qBAAAI;AAOtB,EAAMJ,wBAAA,gBAAgB,qBAAAK;AAOtB,EAAML,wBAAA,wBAAwB,6BAAAM;AAO9B,EAAMN,wBAAA,sBAAsB,2BAAAO;AAO5B,EAAMP,wBAAA,wBAAwB,6BAAAQ;AAO9B,EAAMR,wBAAA,qBAAqB,0BAAAS;AAO3B,EAAMT,wBAAA,6BAA6B,kCAAAU;AAKnC,EAAMV,wBAAA,SAAS;AAAA,IAClB,WAAW;AAAA,MACP,aAAaA,wBAAA;AAAA,MACb,qBAAqBA,wBAAA;AAAA,MACrB,kBAAkBA,wBAAA;AAAA,IACtB;AAAA,IAEA,UAAU;AAAA,MACN,SAASA,wBAAA;AAAA,MACT,SAASA,wBAAA;AAAA,MACT,iBAAiBA,wBAAA;AAAA,MACjB,eAAeA,wBAAA;AAAA,MACf,iBAAiBA,wBAAA;AAAA,MACjB,cAAcA,wBAAA;AAAA,IAClB;AAAA,EACJ;AAKO,EAAMA,wBAAA,SAAS,EAAE,UAAU,EAAE,oBAAoBA,wBAAA,2BAA2B,GAAG,WAAW,CAAC,EAAE;AAAA,GA9FvF;AAiGV,MAAM,iCAA6B,wCAAgB;AAAA,EACtD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW;AAAA,IACP,uBAAuB,OAAO,UAAU;AAAA,IACxC,uBAAuB,OAAO,UAAU;AAAA,IACxC,uBAAuB,OAAO,UAAU;AAAA,EAC5C;AACJ,CAAC;AAEM,MAAM,mBAAqC;",
  "names": ["ContentAppRequirements", "BaseKeypadInputServer", "BaseApplicationLauncherServer", "BaseApplicationBasicServer", "BaseBindingServer", "BaseChannelServer", "BaseTargetNavigatorServer", "BaseMediaPlaybackServer", "BaseContentLauncherServer", "BaseAccountLoginServer", "BaseContentAppObserverBehavior"]
}
