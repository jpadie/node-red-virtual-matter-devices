{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/DimmablePlugInUnitDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { GroupsServer as BaseGroupsServer } from \"../../../behavior/definitions/groups/GroupsServer.js\";\nimport { OnOffServer as BaseOnOffServer } from \"../../../behavior/definitions/on-off/OnOffServer.js\";\nimport {\n    LevelControlServer as BaseLevelControlServer\n} from \"../../../behavior/definitions/level-control/LevelControlServer.js\";\nimport {\n    ScenesManagementServer as BaseScenesManagementServer\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementServer.js\";\nimport {\n    OccupancySensingBehavior as BaseOccupancySensingBehavior\n} from \"../../../behavior/definitions/occupancy-sensing/OccupancySensingBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Dimmable Plug-In Unit is a device that provides power to another device that is plugged into it, and is capable of\n * being switched on or off and have its level adjusted. The Dimmable Plug-in Unit is typically used to control a\n * conventional non-communicating light through its mains connection using phase cutting.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 5.2\n */\nexport interface DimmablePlugInUnitDevice extends Identity<typeof DimmablePlugInUnitDeviceDefinition> {}\n\nexport namespace DimmablePlugInUnitRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * This version of {@link IdentifyServer} is specialized per the specification.\n     */\n    export const IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });\n\n    /**\n     * The Groups cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsServer} for convenience.\n     */\n    export const GroupsServer = BaseGroupsServer;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * This version of {@link OnOffServer} is specialized per the specification.\n     */\n    export const OnOffServer = BaseOnOffServer.with(\"Lighting\");\n\n    /**\n     * The LevelControl cluster is required by the Matter specification.\n     *\n     * This version of {@link LevelControlServer} is specialized per the specification.\n     */\n    export const LevelControlServer = BaseLevelControlServer\n        .with(\"OnOff\", \"Lighting\")\n        .alter({\n            attributes: {\n                currentLevel: { min: 1, max: 254 },\n                minLevel: { default: 1, min: 1, max: 2 },\n                maxLevel: { default: 254, min: 254, max: 255 }\n            }\n        });\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.\n     */\n    export const ScenesManagementServer = BaseScenesManagementServer;\n\n    /**\n     * The OccupancySensing cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.\n     */\n    export const OccupancySensingBehavior = BaseOccupancySensingBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: {\n            Identify: IdentifyServer,\n            Groups: GroupsServer,\n            OnOff: OnOffServer,\n            LevelControl: LevelControlServer\n        },\n\n        optional: { ScenesManagement: ScenesManagementServer }\n    };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = { optional: { OccupancySensing: OccupancySensingBehavior }, mandatory: {} };\n}\n\nexport const DimmablePlugInUnitDeviceDefinition = MutableEndpoint({\n    name: \"DimmablePlugInUnit\",\n    deviceType: 0x10b,\n    deviceRevision: 4,\n    requirements: DimmablePlugInUnitRequirements,\n\n    behaviors: SupportedBehaviors(\n        DimmablePlugInUnitRequirements.server.mandatory.Identify,\n        DimmablePlugInUnitRequirements.server.mandatory.Groups,\n        DimmablePlugInUnitRequirements.server.mandatory.OnOff,\n        DimmablePlugInUnitRequirements.server.mandatory.LevelControl\n    )\n});\n\nexport const DimmablePlugInUnitDevice: DimmablePlugInUnitDevice = DimmablePlugInUnitDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAAqD;AACrD,0BAAiD;AACjD,yBAA+C;AAC/C,gCAEO;AACP,oCAEO;AACP,sCAEO;AACP,6BAAgC;AAChC,gCAAmC;AArBnC;AAAA;AAAA;AAAA;AAAA;AAiCO,IAAU;AAAA,CAAV,CAAUA,oCAAV;AAMI,EAAMA,gCAAA,iBAAiB,sBAAAC,eAAmB,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,MAAM,EAAE,EAAE,CAAC;AAOpG,EAAMD,gCAAA,eAAe,oBAAAE;AAOrB,EAAMF,gCAAA,cAAc,mBAAAG,YAAgB,KAAK,UAAU;AAOnD,EAAMH,gCAAA,qBAAqB,0BAAAI,mBAC7B,KAAK,SAAS,UAAU,EACxB,MAAM;AAAA,IACH,YAAY;AAAA,MACR,cAAc,EAAE,KAAK,GAAG,KAAK,IAAI;AAAA,MACjC,UAAU,EAAE,SAAS,GAAG,KAAK,GAAG,KAAK,EAAE;AAAA,MACvC,UAAU,EAAE,SAAS,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IACjD;AAAA,EACJ,CAAC;AAOE,EAAMJ,gCAAA,yBAAyB,8BAAAK;AAO/B,EAAML,gCAAA,2BAA2B,gCAAAM;AAKjC,EAAMN,gCAAA,SAAS;AAAA,IAClB,WAAW;AAAA,MACP,UAAUA,gCAAA;AAAA,MACV,QAAQA,gCAAA;AAAA,MACR,OAAOA,gCAAA;AAAA,MACP,cAAcA,gCAAA;AAAA,IAClB;AAAA,IAEA,UAAU,EAAE,kBAAkBA,gCAAA,uBAAuB;AAAA,EACzD;AAKO,EAAMA,gCAAA,SAAS,EAAE,UAAU,EAAE,kBAAkBA,gCAAA,yBAAyB,GAAG,WAAW,CAAC,EAAE;AAAA,GApEnF;AAuEV,MAAM,yCAAqC,wCAAgB;AAAA,EAC9D,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EAEd,eAAW;AAAA,IACP,+BAA+B,OAAO,UAAU;AAAA,IAChD,+BAA+B,OAAO,UAAU;AAAA,IAChD,+BAA+B,OAAO,UAAU;AAAA,IAChD,+BAA+B,OAAO,UAAU;AAAA,EACpD;AACJ,CAAC;AAEM,MAAM,2BAAqD;",
  "names": ["DimmablePlugInUnitRequirements", "BaseIdentifyServer", "BaseGroupsServer", "BaseOnOffServer", "BaseLevelControlServer", "BaseScenesManagementServer", "BaseOccupancySensingBehavior"]
}
