{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/OccupancySensorDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport {\n    OccupancySensingServer as BaseOccupancySensingServer\n} from \"../../../behavior/definitions/occupancy-sensing/OccupancySensingServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * An Occupancy Sensor is a measurement and sensing device that is capable of measuring and reporting the occupancy\n * state in a designated area.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 7.3\n */\nexport interface OccupancySensorDevice extends Identity<typeof OccupancySensorDeviceDefinition> {}\n\nexport namespace OccupancySensorRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The OccupancySensing cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OccupancySensingServer} for convenience.\n     */\n    export const OccupancySensingServer = BaseOccupancySensingServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = { mandatory: { Identify: IdentifyServer, OccupancySensing: OccupancySensingServer } };\n}\n\nexport const OccupancySensorDeviceDefinition = MutableEndpoint({\n    name: \"OccupancySensor\",\n    deviceType: 0x107,\n    deviceRevision: 3,\n    requirements: OccupancySensorRequirements,\n    behaviors: SupportedBehaviors(\n        OccupancySensorRequirements.server.mandatory.Identify,\n        OccupancySensorRequirements.server.mandatory.OccupancySensing\n    )\n});\n\nexport const OccupancySensorDevice: OccupancySensorDevice = OccupancySensorDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAAqD;AACrD,oCAEO;AACP,6BAAgC;AAChC,gCAAmC;AAbnC;AAAA;AAAA;AAAA;AAAA;AAwBO,IAAU;AAAA,CAAV,CAAUA,iCAAV;AAMI,EAAMA,6BAAA,iBAAiB,sBAAAC;AAOvB,EAAMD,6BAAA,yBAAyB,8BAAAE;AAK/B,EAAMF,6BAAA,SAAS,EAAE,WAAW,EAAE,UAAUA,6BAAA,gBAAgB,kBAAkBA,6BAAA,uBAAuB,EAAE;AAAA,GAlB7F;AAqBV,MAAM,sCAAkC,wCAAgB;AAAA,EAC3D,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW;AAAA,IACP,4BAA4B,OAAO,UAAU;AAAA,IAC7C,4BAA4B,OAAO,UAAU;AAAA,EACjD;AACJ,CAAC;AAEM,MAAM,wBAA+C;",
  "names": ["OccupancySensorRequirements", "BaseIdentifyServer", "BaseOccupancySensingServer"]
}
