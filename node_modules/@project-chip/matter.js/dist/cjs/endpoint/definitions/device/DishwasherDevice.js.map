{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/DishwasherDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport {\n    OperationalStateServer as BaseOperationalStateServer\n} from \"../../../behavior/definitions/operational-state/OperationalStateServer.js\";\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { OnOffServer as BaseOnOffServer } from \"../../../behavior/definitions/on-off/OnOffServer.js\";\nimport {\n    TemperatureControlServer as BaseTemperatureControlServer\n} from \"../../../behavior/definitions/temperature-control/TemperatureControlServer.js\";\nimport {\n    DishwasherModeServer as BaseDishwasherModeServer\n} from \"../../../behavior/definitions/dishwasher-mode/DishwasherModeServer.js\";\nimport {\n    DishwasherAlarmServer as BaseDishwasherAlarmServer\n} from \"../../../behavior/definitions/dishwasher-alarm/DishwasherAlarmServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A dishwasher is a device that is generally installed in residential homes and is capable of washing dishes, cutlery,\n * and other items associate with food preparation and consumption. The device can be permanently installed or portable\n * and can have variety of filling and draining methods.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 13.5\n */\nexport interface DishwasherDevice extends Identity<typeof DishwasherDeviceDefinition> {}\n\nexport namespace DishwasherRequirements {\n    /**\n     * The OperationalState cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OperationalStateServer} for convenience.\n     */\n    export const OperationalStateServer = BaseOperationalStateServer;\n\n    /**\n     * The Identify cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The OnOff cluster is optional per the Matter specification.\n     *\n     * This version of {@link OnOffServer} is specialized per the specification.\n     */\n    export const OnOffServer = BaseOnOffServer.with(\"DeadFrontBehavior\");\n\n    /**\n     * The TemperatureControl cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TemperatureControlServer} for convenience.\n     */\n    export const TemperatureControlServer = BaseTemperatureControlServer;\n\n    /**\n     * The DishwasherMode cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link DishwasherModeServer} for convenience.\n     */\n    export const DishwasherModeServer = BaseDishwasherModeServer;\n\n    /**\n     * The DishwasherAlarm cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link DishwasherAlarmServer} for convenience.\n     */\n    export const DishwasherAlarmServer = BaseDishwasherAlarmServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: { OperationalState: OperationalStateServer },\n\n        optional: {\n            Identify: IdentifyServer,\n            OnOff: OnOffServer,\n            TemperatureControl: TemperatureControlServer,\n            DishwasherMode: DishwasherModeServer,\n            DishwasherAlarm: DishwasherAlarmServer\n        }\n    };\n}\n\nexport const DishwasherDeviceDefinition = MutableEndpoint({\n    name: \"Dishwasher\",\n    deviceType: 0x75,\n    deviceRevision: 1,\n    requirements: DishwasherRequirements,\n    behaviors: SupportedBehaviors(DishwasherRequirements.server.mandatory.OperationalState)\n});\n\nexport const DishwasherDevice: DishwasherDevice = DishwasherDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,oCAEO;AACP,4BAAqD;AACrD,yBAA+C;AAC/C,sCAEO;AACP,kCAEO;AACP,mCAEO;AACP,6BAAgC;AAChC,gCAAmC;AAvBnC;AAAA;AAAA;AAAA;AAAA;AAmCO,IAAU;AAAA,CAAV,CAAUA,4BAAV;AAMI,EAAMA,wBAAA,yBAAyB,8BAAAC;AAO/B,EAAMD,wBAAA,iBAAiB,sBAAAE;AAOvB,EAAMF,wBAAA,cAAc,mBAAAG,YAAgB,KAAK,mBAAmB;AAO5D,EAAMH,wBAAA,2BAA2B,gCAAAI;AAOjC,EAAMJ,wBAAA,uBAAuB,4BAAAK;AAO7B,EAAML,wBAAA,wBAAwB,6BAAAM;AAK9B,EAAMN,wBAAA,SAAS;AAAA,IAClB,WAAW,EAAE,kBAAkBA,wBAAA,uBAAuB;AAAA,IAEtD,UAAU;AAAA,MACN,UAAUA,wBAAA;AAAA,MACV,OAAOA,wBAAA;AAAA,MACP,oBAAoBA,wBAAA;AAAA,MACpB,gBAAgBA,wBAAA;AAAA,MAChB,iBAAiBA,wBAAA;AAAA,IACrB;AAAA,EACJ;AAAA,GAxDa;AA2DV,MAAM,iCAA6B,wCAAgB;AAAA,EACtD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW,8CAAmB,uBAAuB,OAAO,UAAU,gBAAgB;AAC1F,CAAC;AAEM,MAAM,mBAAqC;",
  "names": ["DishwasherRequirements", "BaseOperationalStateServer", "BaseIdentifyServer", "BaseOnOffServer", "BaseTemperatureControlServer", "BaseDishwasherModeServer", "BaseDishwasherAlarmServer"]
}
