{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/OnOffSensorDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { IdentifyBehavior as BaseIdentifyBehavior } from \"../../../behavior/definitions/identify/IdentifyBehavior.js\";\nimport { OnOffBehavior as BaseOnOffBehavior } from \"../../../behavior/definitions/on-off/OnOffBehavior.js\";\nimport { GroupsBehavior as BaseGroupsBehavior } from \"../../../behavior/definitions/groups/GroupsBehavior.js\";\nimport {\n    ScenesManagementBehavior as BaseScenesManagementBehavior\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementBehavior.js\";\nimport {\n    LevelControlBehavior as BaseLevelControlBehavior\n} from \"../../../behavior/definitions/level-control/LevelControlBehavior.js\";\nimport {\n    ColorControlBehavior as BaseColorControlBehavior\n} from \"../../../behavior/definitions/color-control/ColorControlBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * An On/Off Sensor is a measurement and sensing device that, when bound to a lighting device such as a Dimmable Light,\n * is capable of being used to switch the device on or off.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 7.8\n */\nexport interface OnOffSensorDevice extends Identity<typeof OnOffSensorDeviceDefinition> {}\n\nexport namespace OnOffSensorRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.\n     */\n    export const IdentifyBehavior = BaseIdentifyBehavior;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.\n     */\n    export const OnOffBehavior = BaseOnOffBehavior;\n\n    /**\n     * The Groups cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.\n     */\n    export const GroupsBehavior = BaseGroupsBehavior;\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.\n     */\n    export const ScenesManagementBehavior = BaseScenesManagementBehavior;\n\n    /**\n     * The LevelControl cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.\n     */\n    export const LevelControlBehavior = BaseLevelControlBehavior;\n\n    /**\n     * The ColorControl cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ColorControlBehavior} for convenience.\n     */\n    export const ColorControlBehavior = BaseColorControlBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = { mandatory: { Identify: IdentifyServer } };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = {\n        mandatory: { Identify: IdentifyBehavior, OnOff: OnOffBehavior },\n\n        optional: {\n            Groups: GroupsBehavior,\n            ScenesManagement: ScenesManagementBehavior,\n            LevelControl: LevelControlBehavior,\n            ColorControl: ColorControlBehavior\n        }\n    };\n}\n\nexport const OnOffSensorDeviceDefinition = MutableEndpoint({\n    name: \"OnOffSensor\",\n    deviceType: 0x850,\n    deviceRevision: 3,\n    requirements: OnOffSensorRequirements,\n    behaviors: SupportedBehaviors(OnOffSensorRequirements.server.mandatory.Identify)\n});\n\nexport const OnOffSensorDevice: OnOffSensorDevice = OnOffSensorDeviceDefinition;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAAqD;AACrD,8BAAyD;AACzD,2BAAmD;AACnD,4BAAqD;AACrD,sCAEO;AACP,kCAEO;AACP,kCAEO;AACP,6BAAgC;AAChC,gCAAmC;AAtBnC;AAAA;AAAA;AAAA;AAAA;AAiCO,IAAU;AAAA,CAAV,CAAUA,6BAAV;AAMI,EAAMA,yBAAA,iBAAiB,sBAAAC;AAOvB,EAAMD,yBAAA,mBAAmB,wBAAAE;AAOzB,EAAMF,yBAAA,gBAAgB,qBAAAG;AAOtB,EAAMH,yBAAA,iBAAiB,sBAAAI;AAOvB,EAAMJ,yBAAA,2BAA2B,gCAAAK;AAOjC,EAAML,yBAAA,uBAAuB,4BAAAM;AAO7B,EAAMN,yBAAA,uBAAuB,4BAAAO;AAK7B,EAAMP,yBAAA,SAAS,EAAE,WAAW,EAAE,UAAUA,yBAAA,eAAe,EAAE;AAKzD,EAAMA,yBAAA,SAAS;AAAA,IAClB,WAAW,EAAE,UAAUA,yBAAA,kBAAkB,OAAOA,yBAAA,cAAc;AAAA,IAE9D,UAAU;AAAA,MACN,QAAQA,yBAAA;AAAA,MACR,kBAAkBA,yBAAA;AAAA,MAClB,cAAcA,yBAAA;AAAA,MACd,cAAcA,yBAAA;AAAA,IAClB;AAAA,EACJ;AAAA,GAnEa;AAsEV,MAAM,kCAA8B,wCAAgB;AAAA,EACvD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,eAAW,8CAAmB,wBAAwB,OAAO,UAAU,QAAQ;AACnF,CAAC;AAEM,MAAM,oBAAuC;",
  "names": ["OnOffSensorRequirements", "BaseIdentifyServer", "BaseIdentifyBehavior", "BaseOnOffBehavior", "BaseGroupsBehavior", "BaseScenesManagementBehavior", "BaseLevelControlBehavior", "BaseColorControlBehavior"]
}
