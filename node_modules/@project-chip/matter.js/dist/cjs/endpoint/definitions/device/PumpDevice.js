"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PumpDevice_exports = {};
__export(PumpDevice_exports, {
  PumpDevice: () => PumpDevice,
  PumpDeviceDefinition: () => PumpDeviceDefinition,
  PumpRequirements: () => PumpRequirements
});
module.exports = __toCommonJS(PumpDevice_exports);
var import_OnOffServer = require("../../../behavior/definitions/on-off/OnOffServer.js");
var import_PumpConfigurationAndControlServer = require("../../../behavior/definitions/pump-configuration-and-control/PumpConfigurationAndControlServer.js");
var import_IdentifyServer = require("../../../behavior/definitions/identify/IdentifyServer.js");
var import_LevelControlServer = require("../../../behavior/definitions/level-control/LevelControlServer.js");
var import_GroupsServer = require("../../../behavior/definitions/groups/GroupsServer.js");
var import_ScenesManagementServer = require("../../../behavior/definitions/scenes-management/ScenesManagementServer.js");
var import_TemperatureMeasurementServer = require("../../../behavior/definitions/temperature-measurement/TemperatureMeasurementServer.js");
var import_PressureMeasurementServer = require("../../../behavior/definitions/pressure-measurement/PressureMeasurementServer.js");
var import_FlowMeasurementServer = require("../../../behavior/definitions/flow-measurement/FlowMeasurementServer.js");
var import_TemperatureMeasurementBehavior = require("../../../behavior/definitions/temperature-measurement/TemperatureMeasurementBehavior.js");
var import_PressureMeasurementBehavior = require("../../../behavior/definitions/pressure-measurement/PressureMeasurementBehavior.js");
var import_FlowMeasurementBehavior = require("../../../behavior/definitions/flow-measurement/FlowMeasurementBehavior.js");
var import_OccupancySensingBehavior = require("../../../behavior/definitions/occupancy-sensing/OccupancySensingBehavior.js");
var import_MutableEndpoint = require("../../type/MutableEndpoint.js");
var import_SupportedBehaviors = require("../../properties/SupportedBehaviors.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var PumpRequirements;
((PumpRequirements2) => {
  PumpRequirements2.OnOffServer = import_OnOffServer.OnOffServer;
  PumpRequirements2.PumpConfigurationAndControlServer = import_PumpConfigurationAndControlServer.PumpConfigurationAndControlServer;
  PumpRequirements2.IdentifyServer = import_IdentifyServer.IdentifyServer;
  PumpRequirements2.LevelControlServer = import_LevelControlServer.LevelControlServer;
  PumpRequirements2.GroupsServer = import_GroupsServer.GroupsServer;
  PumpRequirements2.ScenesManagementServer = import_ScenesManagementServer.ScenesManagementServer;
  PumpRequirements2.TemperatureMeasurementServer = import_TemperatureMeasurementServer.TemperatureMeasurementServer;
  PumpRequirements2.PressureMeasurementServer = import_PressureMeasurementServer.PressureMeasurementServer;
  PumpRequirements2.FlowMeasurementServer = import_FlowMeasurementServer.FlowMeasurementServer;
  PumpRequirements2.TemperatureMeasurementBehavior = import_TemperatureMeasurementBehavior.TemperatureMeasurementBehavior;
  PumpRequirements2.PressureMeasurementBehavior = import_PressureMeasurementBehavior.PressureMeasurementBehavior;
  PumpRequirements2.FlowMeasurementBehavior = import_FlowMeasurementBehavior.FlowMeasurementBehavior;
  PumpRequirements2.OccupancySensingBehavior = import_OccupancySensingBehavior.OccupancySensingBehavior;
  PumpRequirements2.server = {
    mandatory: {
      OnOff: PumpRequirements2.OnOffServer,
      PumpConfigurationAndControl: PumpRequirements2.PumpConfigurationAndControlServer,
      Identify: PumpRequirements2.IdentifyServer
    },
    optional: {
      LevelControl: PumpRequirements2.LevelControlServer,
      Groups: PumpRequirements2.GroupsServer,
      ScenesManagement: PumpRequirements2.ScenesManagementServer,
      TemperatureMeasurement: PumpRequirements2.TemperatureMeasurementServer,
      PressureMeasurement: PumpRequirements2.PressureMeasurementServer,
      FlowMeasurement: PumpRequirements2.FlowMeasurementServer
    }
  };
  PumpRequirements2.client = {
    optional: {
      TemperatureMeasurement: PumpRequirements2.TemperatureMeasurementBehavior,
      PressureMeasurement: PumpRequirements2.PressureMeasurementBehavior,
      FlowMeasurement: PumpRequirements2.FlowMeasurementBehavior,
      OccupancySensing: PumpRequirements2.OccupancySensingBehavior
    },
    mandatory: {}
  };
})(PumpRequirements || (PumpRequirements = {}));
const PumpDeviceDefinition = (0, import_MutableEndpoint.MutableEndpoint)({
  name: "Pump",
  deviceType: 771,
  deviceRevision: 3,
  requirements: PumpRequirements,
  behaviors: (0, import_SupportedBehaviors.SupportedBehaviors)(PumpRequirements.server.mandatory.OnOff, PumpRequirements.server.mandatory.Identify)
});
const PumpDevice = PumpDeviceDefinition;
//# sourceMappingURL=PumpDevice.js.map
