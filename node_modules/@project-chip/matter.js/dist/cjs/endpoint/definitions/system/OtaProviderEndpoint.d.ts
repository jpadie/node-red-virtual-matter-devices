/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OtaSoftwareUpdateProviderServer as BaseOtaSoftwareUpdateProviderServer } from "../../../behavior/definitions/ota-software-update-provider/OtaSoftwareUpdateProviderServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { DeviceClasses } from "../../../device/DeviceTypes.js";
import { Identity } from "../../../util/Type.js";
/**
 * An OTA Provider is a node that is capable of providing an OTA software update to other nodes on the same fabric.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 2.4
 */
export interface OtaProviderEndpoint extends Identity<typeof OtaProviderEndpointDefinition> {
}
export declare namespace OtaProviderRequirements {
    /**
     * The OtaSoftwareUpdateProvider cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OtaSoftwareUpdateProviderServer} for convenience.
     */
    const OtaSoftwareUpdateProviderServer: typeof BaseOtaSoftwareUpdateProviderServer;
    /**
     * The OtaSoftwareUpdateRequestor cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OtaSoftwareUpdateRequestorBehavior} for convenience.
     */
    const OtaSoftwareUpdateRequestorBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OtaSoftwareUpdateRequestor.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/ota-software-update-requestor/OtaSoftwareUpdateRequestorInterface.js").OtaSoftwareUpdateRequestorInterface>, import("../../../behavior/definitions/ota-software-update-requestor/OtaSoftwareUpdateRequestorInterface.js").OtaSoftwareUpdateRequestorInterface>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OtaSoftwareUpdateProvider: typeof BaseOtaSoftwareUpdateProviderServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        optional: {
            OtaSoftwareUpdateRequestor: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OtaSoftwareUpdateRequestor.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/ota-software-update-requestor/OtaSoftwareUpdateRequestorInterface.js").OtaSoftwareUpdateRequestorInterface>, import("../../../behavior/definitions/ota-software-update-requestor/OtaSoftwareUpdateRequestorInterface.js").OtaSoftwareUpdateRequestorInterface>;
        };
        mandatory: {};
    };
}
export declare const OtaProviderEndpointDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "OtaProvider";
    readonly deviceType: 20;
    readonly deviceRevision: 1;
    readonly deviceClass: DeviceClasses.Utility;
    readonly requirements: typeof OtaProviderRequirements;
    readonly behaviors: {
        readonly otaSoftwareUpdateProvider: typeof BaseOtaSoftwareUpdateProviderServer;
    };
}>, {
    readonly otaSoftwareUpdateProvider: typeof BaseOtaSoftwareUpdateProviderServer;
}>;
export declare const OtaProviderEndpoint: OtaProviderEndpoint;
//# sourceMappingURL=OtaProviderEndpoint.d.ts.map