/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OtaSoftwareUpdateRequestorServer as BaseOtaSoftwareUpdateRequestorServer } from "../../../behavior/definitions/ota-software-update-requestor/OtaSoftwareUpdateRequestorServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { DeviceClasses } from "../../../device/DeviceTypes.js";
import { Identity } from "../../../util/Type.js";
/**
 * An OTA Requestor is a device that is capable of receiving an OTA software update.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 2.3
 */
export interface OtaRequestorEndpoint extends Identity<typeof OtaRequestorEndpointDefinition> {
}
export declare namespace OtaRequestorRequirements {
    /**
     * The OtaSoftwareUpdateRequestor cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OtaSoftwareUpdateRequestorServer} for convenience.
     */
    const OtaSoftwareUpdateRequestorServer: typeof BaseOtaSoftwareUpdateRequestorServer;
    /**
     * The OtaSoftwareUpdateProvider cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OtaSoftwareUpdateProviderBehavior} for convenience.
     */
    const OtaSoftwareUpdateProviderBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OtaSoftwareUpdateProvider.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/ota-software-update-provider/OtaSoftwareUpdateProviderInterface.js").OtaSoftwareUpdateProviderInterface>, import("../../../behavior/definitions/ota-software-update-provider/OtaSoftwareUpdateProviderInterface.js").OtaSoftwareUpdateProviderInterface>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OtaSoftwareUpdateRequestor: typeof BaseOtaSoftwareUpdateRequestorServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        mandatory: {
            OtaSoftwareUpdateProvider: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OtaSoftwareUpdateProvider.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/ota-software-update-provider/OtaSoftwareUpdateProviderInterface.js").OtaSoftwareUpdateProviderInterface>, import("../../../behavior/definitions/ota-software-update-provider/OtaSoftwareUpdateProviderInterface.js").OtaSoftwareUpdateProviderInterface>;
        };
    };
}
export declare const OtaRequestorEndpointDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "OtaRequestor";
    readonly deviceType: 18;
    readonly deviceRevision: 1;
    readonly deviceClass: DeviceClasses.Utility;
    readonly requirements: typeof OtaRequestorRequirements;
    readonly behaviors: {
        readonly otaSoftwareUpdateRequestor: typeof BaseOtaSoftwareUpdateRequestorServer;
    };
}>, {
    readonly otaSoftwareUpdateRequestor: typeof BaseOtaSoftwareUpdateRequestorServer;
}>;
export declare const OtaRequestorEndpoint: OtaRequestorEndpoint;
//# sourceMappingURL=OtaRequestorEndpoint.d.ts.map