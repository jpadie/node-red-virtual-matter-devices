"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UdpChannelFake_exports = {};
__export(UdpChannelFake_exports, {
  UdpChannelFake: () => UdpChannelFake
});
module.exports = __toCommonJS(UdpChannelFake_exports);
var import_Network = require("../Network.js");
var import_UdpChannel = require("../UdpChannel.js");
var import_SimulatedNetwork = require("./SimulatedNetwork.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class UdpChannelFake {
  constructor(localAddress, listeningAddress, listeningPort) {
    this.localAddress = localAddress;
    this.listeningAddress = listeningAddress;
    this.listeningPort = listeningPort ?? 1024 + Math.floor(Math.random() * 64511);
  }
  static async create(network, { listeningAddress, listeningPort, netInterface, type }) {
    const { ipV4, ipV6 } = network.getIpMac(netInterface ?? import_SimulatedNetwork.FAKE_INTERFACE_NAME);
    const localAddress = type === "udp4" ? ipV4[0] : ipV6[0] ?? ipV4[0];
    if (localAddress === void 0) {
      throw new import_Network.NetworkError("No matching IP on the specified interface");
    }
    return new UdpChannelFake(localAddress, listeningAddress, listeningPort);
  }
  netListeners = new Array();
  simulatedNetwork = import_SimulatedNetwork.SimulatedNetwork.get();
  listeningPort;
  maxPayloadSize = import_UdpChannel.MAX_UDP_MESSAGE_SIZE;
  onData(listener) {
    const netListener = this.simulatedNetwork.onUdpData(this.listeningAddress, this.listeningPort, listener);
    this.netListeners.push(netListener);
    return netListener;
  }
  async send(host, port, data) {
    this.simulatedNetwork.sendUdp(this.localAddress, this.listeningPort, host, port, data);
  }
  async close() {
    for (const netListener of this.netListeners) {
      await netListener.close();
    }
    this.netListeners.length = 0;
  }
  async [Symbol.asyncDispose]() {
    return this.close();
  }
  get port() {
    return this.listeningPort;
  }
}
//# sourceMappingURL=UdpChannelFake.js.map
