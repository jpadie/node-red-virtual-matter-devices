/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Listener } from "../../common/TransportInterface.js";
import { ByteArray } from "../../util/ByteArray.js";
import { UdpChannel, UdpChannelOptions } from "../UdpChannel.js";
import { NetworkFake } from "./NetworkFake.js";
export declare class UdpChannelFake implements UdpChannel {
    private readonly localAddress;
    private readonly listeningAddress;
    static create(network: NetworkFake, { listeningAddress, listeningPort, netInterface, type }: UdpChannelOptions): Promise<UdpChannelFake>;
    private readonly netListeners;
    private readonly simulatedNetwork;
    private readonly listeningPort;
    readonly maxPayloadSize: number;
    constructor(localAddress: string, listeningAddress: string | undefined, listeningPort?: number);
    onData(listener: (netInterface: string, peerAddress: string, peerPort: number, data: ByteArray) => void): Listener;
    send(host: string, port: number, data: ByteArray): Promise<void>;
    close(): Promise<void>;
    [Symbol.asyncDispose](): Promise<void>;
    get port(): number;
}
//# sourceMappingURL=UdpChannelFake.d.ts.map