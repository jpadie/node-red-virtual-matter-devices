/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Channel, ChannelType } from "../common/Channel.js";
import { ServerAddress } from "../common/ServerAddress.js";
import { Listener } from "../common/TransportInterface.js";
import { ByteArray } from "../util/ByteArray.js";
import { NetInterface } from "./NetInterface.js";
import { Network } from "./Network.js";
import { UdpChannel } from "./UdpChannel.js";
export declare class UdpInterface implements NetInterface {
    private readonly server;
    static create(network: Network, type: "udp4" | "udp6", port?: number, host?: string, netInterface?: string): Promise<UdpInterface>;
    constructor(server: UdpChannel);
    openChannel(address: ServerAddress): Promise<UdpConnection>;
    onData(listener: (channel: Channel<ByteArray>, messageBytes: ByteArray) => void): Listener;
    get port(): number;
    close(): Promise<void>;
}
declare class UdpConnection implements Channel<ByteArray> {
    private readonly server;
    private readonly peerAddress;
    private readonly peerPort;
    readonly isReliable = false;
    readonly type = ChannelType.UDP;
    constructor(server: UdpChannel, peerAddress: string, peerPort: number);
    get maxPayloadSize(): number;
    send(data: ByteArray): Promise<void>;
    get name(): string;
    close(): Promise<void>;
}
export {};
//# sourceMappingURL=UdpInterface.d.ts.map