{
  "version": 3,
  "sources": ["../../../src/util/String.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function capitalize<T extends string>(text: T) {\n    return (text[0].toUpperCase() + text.slice(1)) as Capitalize<T>;\n}\n\n/**\n * Converts identifiers of the form \"foo-bar\", \"foo_bar\", \"foo bar\", \"foo*bar\",\n * \"fooBar\" or \"FOOBar\" into \"fooBar\" or \"FooBar\".\n */\nexport function camelize(name: string, upperFirst = false) {\n    const pieces = new Array<string>();\n    let pieceStart = 0,\n        sawUpper = false,\n        sawLower = false,\n        i = 0;\n\n    function addPiece(to: number) {\n        if (pieceStart < to) pieces.push(name.slice(pieceStart, to));\n        sawLower = sawUpper = false;\n    }\n\n    for (; i < name.length; i++) {\n        if (name[i] >= \"A\" && name[i] <= \"Z\") {\n            if (sawLower) {\n                addPiece(i);\n                pieceStart = i;\n            }\n            sawUpper = true;\n            continue;\n        }\n\n        if (name[i] >= \"a\" && name[i] <= \"z\") {\n            if (!sawLower) {\n                if (sawUpper) {\n                    addPiece(i - 1);\n                    pieceStart = i - 1;\n                }\n            }\n            sawLower = true;\n            continue;\n        }\n\n        addPiece(i);\n\n        if ((name[i] >= \"0\" && name[i] <= \"9\") || name[i] === \"$\") {\n            pieces.push(name[i]);\n        }\n\n        pieceStart = i + 1;\n        continue;\n    }\n    addPiece(i);\n\n    let didFirst = false;\n    let result = pieces\n        .map(piece => {\n            let firstChar = piece[0];\n            if (upperFirst || didFirst) {\n                firstChar = firstChar.toUpperCase();\n            } else {\n                firstChar = firstChar.toLowerCase();\n                didFirst = true;\n            }\n            return `${firstChar}${piece.slice(1).toLowerCase()}`;\n        })\n        .join(\"\");\n\n    // Special case so \"100ths\" doesn't become \"100Ths\" which is formally correct but goofy\n    result = result.replace(/(\\d+)Ths/i, \"$1ths\");\n\n    return result;\n}\n\n/**\n * Converts an identifier from CamelCase to snake_case.\n */\nexport function decamelize(name: string, separator = \"-\") {\n    const result = Array<string>();\n    let needSeparator = false;\n    for (const c of name) {\n        if (c >= \"A\" && c <= \"Z\") {\n            if (needSeparator) {\n                result.push(separator);\n                needSeparator = false;\n            }\n            result.push(c.toLowerCase());\n        } else {\n            result.push(c);\n            needSeparator = true;\n        }\n    }\n    return result.join(\"\");\n}\n\n/**\n * Like JSON.stringify but targets well-formed JS and is slightly more readable.\n */\nexport function serialize(value: any) {\n    const visited = new Set();\n\n    function asValidKey(key: string) {\n        if (key.match(/[a-z_$][a-z_$0-9]*/i)) {\n            return key;\n        }\n        return JSON.stringify(key);\n    }\n\n    function serializeOne(value: any): string | undefined {\n        if (value === undefined) {\n            return;\n        }\n        if (value === null) {\n            return \"null\";\n        }\n        if (value[serialize.SERIALIZE]) {\n            return value[serialize.SERIALIZE]();\n        }\n        if (typeof value === \"function\") {\n            return;\n        }\n        if (typeof value === \"bigint\" || value instanceof BigInt) {\n            return value.toString();\n        }\n        if (typeof value === \"number\" || value instanceof Number) {\n            return value.toString();\n        }\n        if (typeof value === \"string\" || value instanceof String) {\n            return JSON.stringify(value);\n        }\n        if (typeof value === \"boolean\") {\n            return value ? \"true\" : \"false\";\n        }\n        if (ArrayBuffer.isView(value)) {\n            const dv = new DataView(value.buffer, value.byteOffset, value.byteLength);\n            const bytes = Array<string>();\n            for (let i = 0; i < dv.byteLength; i++) {\n                bytes.push(dv.getUint8(i).toString(16).padStart(2, \"0\"));\n            }\n            return bytes.join(\"\");\n        }\n\n        // Composite objects after this\n        if (visited.has(value)) {\n            return;\n        }\n        if (value.toJSON) {\n            value = JSON.parse(JSON.stringify(value));\n        }\n\n        try {\n            visited.add(value);\n\n            if (Array.isArray(value)) {\n                if (value.length) {\n                    return `[ ${value.map(serializeOne).join(\", \")} ]`;\n                }\n                return \"[]\";\n            }\n\n            const entries = Object.entries(value)\n                .map(([k, v]) => [k, serializeOne(v)])\n                .filter(([_k, v]) => v !== undefined)\n                .map(([k, v]) => `${asValidKey(k ?? \"\")}: ${v}`);\n\n            if (!entries.length) {\n                return \"{}\";\n            }\n\n            return `{ ${entries.join(\", \")} }`;\n        } finally {\n            visited.delete(value);\n        }\n    }\n\n    return serializeOne(value);\n}\n\nexport namespace serialize {\n    /**\n     * Custom serialization function key.\n     */\n    export const SERIALIZE = Symbol(\"SERIALIZE\");\n\n    /**\n     * Mark a value as serialized so the serializer just uses its string\n     * representation.\n     */\n    export function asIs(value: any) {\n        if (typeof value === \"string\") {\n            value = new String(value);\n        }\n        if (value !== undefined && value !== null) {\n            value[SERIALIZE] = function () {\n                return this.toString();\n            };\n        }\n        return value;\n    }\n\n    /**\n     * Test whether a value serializes as a structure or a primitive.\n     */\n    export function isPrimitive(value: any) {\n        if (\n            value === undefined ||\n            value === null ||\n            value instanceof Date ||\n            ArrayBuffer.isView(value) ||\n            value[SERIALIZE]\n        ) {\n            return true;\n        }\n\n        if (Array.isArray(value)) {\n            return false;\n        }\n\n        return typeof value !== \"object\";\n    }\n}\n\n/**\n * Create a human readable version of a list of items.\n */\nexport function describeList(setType: \"and\" | \"or\", ...entries: string[]) {\n    const text = Array<string>();\n\n    if (entries.length === 1) {\n        return entries[0];\n    }\n\n    for (let i = 0; i < entries.length; i++) {\n        if (i === entries.length - 1) {\n            text.push(setType, entries[i]);\n        } else if (i === entries.length - 2) {\n            text.push(entries[i]);\n        } else {\n            text.push(`${entries[i]},`);\n        }\n    }\n\n    return text.join(\" \");\n}\n"],
  "mappings": "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",
  "names": ["value", "serialize"]
}
