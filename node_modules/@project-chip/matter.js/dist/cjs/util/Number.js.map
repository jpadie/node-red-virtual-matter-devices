{
  "version": 3,
  "sources": ["../../../src/util/Number.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const UINT8_MAX = 0xff;\nexport const UINT16_MAX = 0xffff;\nexport const UINT24_MAX = 0xffffff;\nexport const UINT32_MAX = 0xffffffff;\nexport const UINT64_MAX = BigInt(\"18446744073709551615\");\n\nexport const INT8_MIN = -128;\nexport const INT16_MIN = -32768;\nexport const INT32_MIN = -2147483648;\nexport const INT64_MIN = BigInt(\"-9223372036854775808\");\nexport const INT8_MAX = 127;\nexport const INT16_MAX = 32767;\nexport const INT32_MAX = 2147483647;\nexport const INT64_MAX = BigInt(\"9223372036854775807\");\n\nexport const FLOAT32_MIN = -340282346638528859811704183484516925440.0;\nexport const FLOAT32_MAX = 340282346638528859811704183484516925440.0;\n\nexport function toNumber(value: bigint | number): number {\n    return typeof value === \"bigint\" ? Number(value) : value;\n}\n\nexport function toBigInt(value: bigint | number): bigint {\n    return typeof value === \"number\" ? BigInt(value) : value;\n}\n\nexport function minValue<T extends bigint | number>(a: T | undefined, b: T | undefined) {\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    return a < b ? a : b;\n}\n\nexport function maxValue<T extends bigint | number>(a: T | undefined, b: T | undefined) {\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    return a > b ? a : b;\n}\n\n/**\n * Convert a number or bigint to a hex string of a valid \"even\" hex length\n */\nexport function toHex(value: number | bigint) {\n    const hex = value.toString(16);\n    return hex.length % 2 === 0 ? hex : `0${hex}`;\n}\n\n/**\n * Makes sure a value is within min and max. It sets the value to min or max in case it is below or above the range.\n */\nexport function cropValueRange(value: number, min: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Adds a value to another value and wraps around on the min and max values.\n */\nexport function addValueWithOverflow(value: number, add: number, min: number, max: number): number {\n    const newValue = value + add;\n    if (newValue < min) {\n        return newValue + max + 1;\n    } else if (newValue > max) {\n        return newValue - max - 1;\n    }\n    return newValue;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO,MAAM,YAAY;AAClB,MAAM,aAAa;AACnB,MAAM,aAAa;AACnB,MAAM,aAAa;AACnB,MAAM,aAAa,OAAO,sBAAsB;AAEhD,MAAM,WAAW;AACjB,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB,MAAM,YAAY,OAAO,sBAAsB;AAC/C,MAAM,WAAW;AACjB,MAAM,YAAY;AAClB,MAAM,YAAY;AAClB,MAAM,YAAY,OAAO,qBAAqB;AAE9C,MAAM,cAAc;AACpB,MAAM,cAAc;AAEpB,SAAS,SAAS,OAAgC;AACrD,SAAO,OAAO,UAAU,WAAW,OAAO,KAAK,IAAI;AACvD;AAEO,SAAS,SAAS,OAAgC;AACrD,SAAO,OAAO,UAAU,WAAW,OAAO,KAAK,IAAI;AACvD;AAEO,SAAS,SAAoC,GAAkB,GAAkB;AACpF,MAAI,MAAM,OAAW,QAAO;AAC5B,MAAI,MAAM,OAAW,QAAO;AAC5B,SAAO,IAAI,IAAI,IAAI;AACvB;AAEO,SAAS,SAAoC,GAAkB,GAAkB;AACpF,MAAI,MAAM,OAAW,QAAO;AAC5B,MAAI,MAAM,OAAW,QAAO;AAC5B,SAAO,IAAI,IAAI,IAAI;AACvB;AAKO,SAAS,MAAM,OAAwB;AAC1C,QAAM,MAAM,MAAM,SAAS,EAAE;AAC7B,SAAO,IAAI,SAAS,MAAM,IAAI,MAAM,IAAI,GAAG;AAC/C;AAKO,SAAS,eAAe,OAAe,KAAa,KAAqB;AAC5E,SAAO,KAAK,IAAI,KAAK,IAAI,OAAO,GAAG,GAAG,GAAG;AAC7C;AAKO,SAAS,qBAAqB,OAAe,KAAa,KAAa,KAAqB;AAC/F,QAAM,WAAW,QAAQ;AACzB,MAAI,WAAW,KAAK;AAChB,WAAO,WAAW,MAAM;AAAA,EAC5B,WAAW,WAAW,KAAK;AACvB,WAAO,WAAW,MAAM;AAAA,EAC5B;AACA,SAAO;AACX;",
  "names": []
}
