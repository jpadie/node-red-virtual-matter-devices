{
  "version": 3,
  "sources": ["../../../src/util/ByteArray.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\n\ndeclare global {\n    interface Uint8Array {\n        /** Displays as a hex string. */\n        toHex(): string;\n\n        /** Displays as a hex string. */\n        toBase64(): string;\n\n        /** Gets a {@link DataView} on this array. */\n        getDataView(): DataView;\n\n        /** Tests the deep equality of the two arrays. */\n        equals(other: Uint8Array): boolean;\n    }\n\n    interface Uint8ArrayConstructor {\n        /** Gets an {@link ByteArray} from an hex string. */\n        fromHex(hexString: string): ByteArray;\n\n        /** Gets an {@link ByteArray} from a base64 string. */\n        fromBase64(hexString: string): ByteArray;\n\n        /** Gets an {@link ByteArray} from a UTF-8 string. */\n        fromString(string: string): ByteArray;\n\n        /** Concats {@link ByteArray}s. */\n        concat(...arrays: Uint8Array[]): Uint8Array;\n    }\n}\n\nUint8Array.prototype.toHex = function () {\n    const hexArray = new Array<string>();\n    hexArray.length = this.length;\n    this.forEach(byte => hexArray.push(byte.toString(16).padStart(2, \"0\")));\n    return hexArray.join(\"\");\n};\n\nUint8Array.prototype.toBase64 = function () {\n    let result = \"\";\n    this.forEach(byte => (result += String.fromCharCode(byte)));\n    return btoa(result);\n};\n\nUint8Array.prototype.getDataView = function () {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength);\n};\n\nUint8Array.prototype.equals = function (other: Uint8Array) {\n    if (other.length !== this.length) return false;\n    return this.every((value, index) => other[index] === value);\n};\n\nUint8Array.fromHex = function (hexString: string) {\n    if (hexString.length === 0) return new ByteArray(0);\n    if (hexString.length % 2 !== 0) throw new UnexpectedDataError(\"Hex string should have an even length.\");\n    const bytes = hexString.match(/.{1,2}/g)?.map(byteHex => parseInt(byteHex, 16));\n    if (bytes === undefined) throw new UnexpectedDataError(\"Failed to parse the hex string.\");\n    return ByteArray.from(bytes);\n};\n\nUint8Array.fromBase64 = function (base64String: string) {\n    const raw = atob(base64String);\n    let result = \"\";\n    for (let i = 0; i < raw.length; i++) {\n        const hex = raw.charCodeAt(i).toString(16);\n        result += hex.length === 2 ? hex : \"0\" + hex;\n    }\n    return this.fromHex(result);\n};\n\nUint8Array.fromString = function (string: string) {\n    return new TextEncoder().encode(string);\n};\n\nUint8Array.concat = function (...arrays: Uint8Array[]): Uint8Array {\n    let length = 0;\n    arrays.forEach(array => (length += array.length));\n    const result = new Uint8Array(length);\n    let offset = 0;\n    arrays.forEach(array => {\n        result.set(array, offset);\n        offset += array.length;\n    });\n    return result;\n};\n\n/** Array of bytes, alias of {@link Uint8Array}. */\nexport type ByteArray = Uint8Array;\nexport const ByteArray = Uint8Array;\n\nexport enum Endian {\n    Little,\n    Big,\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAoC;AANpC;AAAA;AAAA;AAAA;AAAA;AAsCA,WAAW,UAAU,QAAQ,WAAY;AACrC,QAAM,WAAW,IAAI,MAAc;AACnC,WAAS,SAAS,KAAK;AACvB,OAAK,QAAQ,UAAQ,SAAS,KAAK,KAAK,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,CAAC;AACtE,SAAO,SAAS,KAAK,EAAE;AAC3B;AAEA,WAAW,UAAU,WAAW,WAAY;AACxC,MAAI,SAAS;AACb,OAAK,QAAQ,UAAS,UAAU,OAAO,aAAa,IAAI,CAAE;AAC1D,SAAO,KAAK,MAAM;AACtB;AAEA,WAAW,UAAU,cAAc,WAAY;AAC3C,SAAO,IAAI,SAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AACrE;AAEA,WAAW,UAAU,SAAS,SAAU,OAAmB;AACvD,MAAI,MAAM,WAAW,KAAK,OAAQ,QAAO;AACzC,SAAO,KAAK,MAAM,CAAC,OAAO,UAAU,MAAM,KAAK,MAAM,KAAK;AAC9D;AAEA,WAAW,UAAU,SAAU,WAAmB;AAC9C,MAAI,UAAU,WAAW,EAAG,QAAO,IAAI,UAAU,CAAC;AAClD,MAAI,UAAU,SAAS,MAAM,EAAG,OAAM,IAAI,uCAAoB,wCAAwC;AACtG,QAAM,QAAQ,UAAU,MAAM,SAAS,GAAG,IAAI,aAAW,SAAS,SAAS,EAAE,CAAC;AAC9E,MAAI,UAAU,OAAW,OAAM,IAAI,uCAAoB,iCAAiC;AACxF,SAAO,UAAU,KAAK,KAAK;AAC/B;AAEA,WAAW,aAAa,SAAU,cAAsB;AACpD,QAAM,MAAM,KAAK,YAAY;AAC7B,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,UAAM,MAAM,IAAI,WAAW,CAAC,EAAE,SAAS,EAAE;AACzC,cAAU,IAAI,WAAW,IAAI,MAAM,MAAM;AAAA,EAC7C;AACA,SAAO,KAAK,QAAQ,MAAM;AAC9B;AAEA,WAAW,aAAa,SAAU,QAAgB;AAC9C,SAAO,IAAI,YAAY,EAAE,OAAO,MAAM;AAC1C;AAEA,WAAW,SAAS,YAAa,QAAkC;AAC/D,MAAI,SAAS;AACb,SAAO,QAAQ,WAAU,UAAU,MAAM,MAAO;AAChD,QAAM,SAAS,IAAI,WAAW,MAAM;AACpC,MAAI,SAAS;AACb,SAAO,QAAQ,WAAS;AACpB,WAAO,IAAI,OAAO,MAAM;AACxB,cAAU,MAAM;AAAA,EACpB,CAAC;AACD,SAAO;AACX;AAIO,MAAM,YAAY;AAElB,IAAK,SAAL,kBAAKA,YAAL;AACH,EAAAA,gBAAA;AACA,EAAAA,gBAAA;AAFQ,SAAAA;AAAA,GAAA;",
  "names": ["Endian"]
}
