{
  "version": 3,
  "sources": ["../../../src/util/DeepCopy.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Create a deep copy of a data structure.\n *\n * Only copies enumerable properties.  Handles typed arrays and graphs.\n */\nexport function deepCopy<T>(value: T): T {\n    let clones: undefined | Map<unknown, unknown>;\n\n    function copy(value: unknown) {\n        if (typeof value === \"object\") {\n            if (value === null) {\n                return null;\n            }\n\n            let clone = clones?.get(value);\n            if (clone) {\n                return clone;\n            }\n\n            if (Array.isArray(value)) {\n                clone = value.map(copy);\n            } else if (ArrayBuffer.isView(value)) {\n                const ViewType = value.constructor as new (buffer: ArrayBuffer) => unknown;\n                clone = new ViewType(value.buffer.slice(value.byteOffset, value.byteOffset + value.byteLength));\n            } else {\n                clone = Object.fromEntries(Object.entries(value).map(([k, v]) => [k, copy(v)]));\n            }\n\n            if (!clones) {\n                clones = new Map();\n            }\n            clones.set(value, clone);\n\n            return clone;\n        }\n\n        return value;\n    }\n\n    return copy(value) as T;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWO,SAAS,SAAY,OAAa;AACrC,MAAI;AAEJ,WAAS,KAAKA,QAAgB;AAC1B,QAAI,OAAOA,WAAU,UAAU;AAC3B,UAAIA,WAAU,MAAM;AAChB,eAAO;AAAA,MACX;AAEA,UAAI,QAAQ,QAAQ,IAAIA,MAAK;AAC7B,UAAI,OAAO;AACP,eAAO;AAAA,MACX;AAEA,UAAI,MAAM,QAAQA,MAAK,GAAG;AACtB,gBAAQA,OAAM,IAAI,IAAI;AAAA,MAC1B,WAAW,YAAY,OAAOA,MAAK,GAAG;AAClC,cAAM,WAAWA,OAAM;AACvB,gBAAQ,IAAI,SAASA,OAAM,OAAO,MAAMA,OAAM,YAAYA,OAAM,aAAaA,OAAM,UAAU,CAAC;AAAA,MAClG,OAAO;AACH,gBAAQ,OAAO,YAAY,OAAO,QAAQA,MAAK,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAAA,MAClF;AAEA,UAAI,CAAC,QAAQ;AACT,iBAAS,oBAAI,IAAI;AAAA,MACrB;AACA,aAAO,IAAIA,QAAO,KAAK;AAEvB,aAAO;AAAA,IACX;AAEA,WAAOA;AAAA,EACX;AAEA,SAAO,KAAK,KAAK;AACrB;",
  "names": ["value"]
}
