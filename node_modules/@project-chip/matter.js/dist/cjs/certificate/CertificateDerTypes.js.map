{
  "version": 3,
  "sources": ["../../../src/certificate/CertificateDerTypes.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BitByteArray,\n    ContextTagged,\n    ContextTaggedBytes,\n    DatatypeOverride,\n    DerCodec,\n    DerObject,\n    DerType,\n    ObjectId,\n} from \"../codec/DerCodec.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { CertificateError } from \"./CertificateManager.js\";\n\nexport namespace X962 {\n    export const PublicKeyEcPrime256v1 = (key: ByteArray) => ({\n        type: {\n            algorithm: ObjectId(\"2A8648CE3D0201\") /* EC Public Key */,\n            curve: ObjectId(\"2A8648CE3D030107\") /* Curve P256_V1 */,\n        },\n        bytes: BitByteArray(key),\n    });\n    export const EcdsaWithSHA256 = DerObject(\"2A8648CE3D040302\");\n}\n\nexport const SHA256_CMS = DerObject(\"608648016503040201\"); // 2.16.840.1.101.3.4.2.1\n\nexport namespace X509 {\n    export const SubjectKeyIdentifier = (identifier: ByteArray) =>\n        DerObject(\"551d0e\", { value: DerCodec.encode(identifier) });\n    export const AuthorityKeyIdentifier = (identifier: ByteArray) =>\n        DerObject(\"551d23\", { value: DerCodec.encode({ id: ContextTaggedBytes(0, identifier) }) });\n    export const BasicConstraints = (constraints: any) => {\n        const toEncode = { ...constraints };\n        if (toEncode?.isCa === false) {\n            // This is the default value, so we can remove it according to\n            // https://datatracker.ietf.org/doc/html/rfc5280#appendix-B\n            delete toEncode.isCa;\n        }\n        return DerObject(\"551d13\", { critical: true, value: DerCodec.encode(toEncode) });\n    };\n    export const ExtendedKeyUsage = (values: number[] | undefined) => {\n        if (values === undefined) {\n            return undefined;\n        }\n        const data = {} as any;\n        values.forEach(value => {\n            switch (value) {\n                case 1: // server Auth\n                    data.serverAuth = ObjectId(\"2b06010505070301\");\n                    break;\n                case 2: // client Auth\n                    data.clientAuth = ObjectId(\"2b06010505070302\");\n                    break;\n                case 3: // Code Signing\n                    data.codeSigning = ObjectId(\"2b06010505070303\");\n                    break;\n                case 4: // Email Protection\n                    data.emailProtection = ObjectId(\"2b06010505070304\");\n                    break;\n                case 5: // Time Stamping\n                    data.timeStamping = ObjectId(\"2b06010505070308\");\n                    break;\n                case 6: // OCSP Signing\n                    data.ocspSigning = ObjectId(\"2b06010505070309\");\n                    break;\n                default:\n                    throw new CertificateError(`Unsupported extended key usage value ${value}`);\n            }\n        });\n        return DerObject(\"551d25\", {\n            critical: true,\n            value: DerCodec.encode(data),\n        });\n    };\n    export const KeyUsage = (value: number) => {\n        return DerObject(\"551d0f\", {\n            critical: true,\n            value: DerCodec.encode(DatatypeOverride(DerType.BitString, value)),\n        });\n    };\n}\n\nexport namespace Pkcs7 {\n    export const Data = (data: any) => DerObject(\"2A864886F70D010701\", { value: ContextTagged(0, data) });\n    export const SignedData = (data: any) => DerObject(\"2a864886f70d010702\", { value: ContextTagged(0, data) });\n}\n\nexport namespace X520 {\n    export const NON_WELL_DEFINED_DATE = new Date(\"9999-12-31 23:59:59Z\");\n\n    /**\n     * Generator function to create a specific ASN string field for a DN with the OID base 2.5.4.*.\n     * The returned function takes the value of the string and returns the ASN.1 DER object. Optionally the string\n     * can be encoded as a Printable String which adjusts the OID accordingly..\n     */\n    const GenericString_X520 =\n        (id: number) =>\n        (data: string, asPrintedString = false) => {\n            let value: any = data;\n            if (asPrintedString) {\n                value = DatatypeOverride(DerType.PrintableString, value);\n            }\n            return [DerObject(`5504${id.toString(16).padStart(2, \"0\")}`, { value })];\n        };\n\n    /** commonName = ASN.1 OID 2.5.4.3 */\n    export const CommonName = GenericString_X520(3);\n    /** surName = ASN.1 OID 2.5.4.4 */\n    export const SurName = GenericString_X520(4);\n    /** serialNumber = ASN.1 OID 2.5.4.5 */\n    export const SerialNumber = GenericString_X520(5);\n    /** countryName = ASN.1 OID 2.5.4.6 */\n    export const CountryName = GenericString_X520(6);\n    /** localityName = ASN.1 OID 2.5.4.7 */\n    export const LocalityName = GenericString_X520(7);\n    /** stateOrProvinceName = ASN.1 OID 2.5.4.8 */\n    export const StateOrProvinceName = GenericString_X520(8);\n    /** organizationName = ASN.1 OID 2.5.4.10 */\n    export const OrganisationName = GenericString_X520(10);\n    /** organizationalUnitName = ASN.1 OID 2.5.4.11 */\n    export const OrganizationalUnitName = GenericString_X520(11);\n    /** title = ASN.1 OID 2.5.4.12 */\n    export const Title = GenericString_X520(12);\n    /** name = ASN.1 OID 2.5.4.41 */\n    export const Name = GenericString_X520(41);\n    /** givenName = ASN.1 OID 2.5.4.42 */\n    export const GivenName = GenericString_X520(42);\n    /** initials = ASN.1 OID 2.5.4.43 */\n    export const Initials = GenericString_X520(43);\n    /** generationQualifier = ASN.1 OID 2.5.4.44 */\n    export const GenerationQualifier = GenericString_X520(44);\n    /** dnQualifier = ASN.1 OID 2.5.4.46 */\n    export const DnQualifier = GenericString_X520(46);\n    /** pseudonym = ASN.1 OID 2.5.4.65 */\n    export const Pseudonym = GenericString_X520(65);\n    /** domain-component = ASN.1 OID 0.9.2342.19200300.100.1.25, IA5String */\n    export const DomainComponent = (value: string) => [\n        DerObject(\"06092A864886F70D010901\", { value: DatatypeOverride(DerType.IA5String, value) }),\n    ];\n}\n"],
  "mappings": "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",
  "names": ["X962", "X509", "Pkcs7", "X520"]
}
