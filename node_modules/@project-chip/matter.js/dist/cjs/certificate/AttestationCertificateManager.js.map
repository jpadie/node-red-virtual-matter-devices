{
  "version": 3,
  "sources": ["../../../src/certificate/AttestationCertificateManager.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Crypto } from \"../crypto/Crypto.js\";\nimport { PrivateKey } from \"../crypto/Key.js\";\nimport { VendorId } from \"../datatype/VendorId.js\";\nimport { Time } from \"../time/Time.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { CertificateManager, jsToMatterDate } from \"./CertificateManager.js\";\nimport {\n    TestCert_PAA_NoVID_PrivateKey,\n    TestCert_PAA_NoVID_PublicKey,\n    TestCert_PAA_NoVID_SKID,\n} from \"./ChipPAAuthorities.js\";\n\nimport { toHex } from \"../util/Number.js\";\n\nfunction getPaiCommonName(vendorId: VendorId, productId?: number) {\n    return `node-matter Dev PAI 0x${vendorId.toString(16).toUpperCase()} ${\n        productId === undefined ? \"no PID\" : `0x${productId.toString(16).toUpperCase()}`\n    }`;\n}\n\nfunction getDacCommonName(vendorId: VendorId, productId: number) {\n    return `node-matter Dev DAC 0x${vendorId.toString(16).toUpperCase()}/0x${productId.toString(16).toUpperCase()}`;\n}\n\nfunction getPaaCommonName() {\n    // Do not change this because we use the official Matter Test PAA and the certificate uses this name!\n    return \"Matter Test PAA\";\n}\n\nexport class AttestationCertificateManager {\n    private paaCertId = BigInt(0);\n\n    // We use the official PAA cert for now because else pairing with Chip tool do not work because\n    // only this one is the Certificate store\n    private readonly paaKeyPair = PrivateKey(TestCert_PAA_NoVID_PrivateKey, {\n        publicKey: TestCert_PAA_NoVID_PublicKey,\n    });\n    private readonly paaKeyIdentifier = TestCert_PAA_NoVID_SKID;\n    private readonly paiCertId = BigInt(1);\n    private readonly paiKeyPair = Crypto.createKeyPair();\n    private readonly paiKeyIdentifier = Crypto.hash(this.paiKeyPair.publicKey).slice(0, 20);\n    private readonly paiCertBytes;\n    private nextCertificateId = 2;\n\n    constructor(private readonly vendorId: VendorId) {\n        this.paiCertBytes = this.generatePAICert(vendorId);\n    }\n\n    getPAICert() {\n        return this.paiCertBytes;\n    }\n\n    getDACert(productId: number) {\n        const dacKeyPair = Crypto.createKeyPair();\n        return {\n            keyPair: dacKeyPair,\n            dac: this.generateDaCert(dacKeyPair.publicKey, this.vendorId, productId),\n        };\n    }\n\n    // Method unused for now because we use the official Matter Test PAA, but is functional\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    private generatePAACert(vendorId?: VendorId) {\n        const now = Time.get().now();\n        const unsignedCertificate = {\n            serialNumber: ByteArray.fromHex(toHex(this.paaCertId)),\n            signatureAlgorithm: 1 /* EcdsaWithSHA256 */,\n            publicKeyAlgorithm: 1 /* EC */,\n            ellipticCurveIdentifier: 1 /* P256v1 */,\n            issuer: {\n                commonName: getPaaCommonName(),\n                vendorId: vendorId,\n            },\n            notBefore: jsToMatterDate(now, -1),\n            notAfter: jsToMatterDate(now, 10),\n            subject: {\n                commonName: getPaaCommonName(),\n                vendorId: vendorId,\n            },\n            ellipticCurvePublicKey: this.paaKeyPair.publicKey,\n            extensions: {\n                basicConstraints: {\n                    isCa: true,\n                    pathLen: 1,\n                },\n                keyUsage: {\n                    keyCertSign: true,\n                    cRLSign: true,\n                },\n                subjectKeyIdentifier: this.paaKeyIdentifier,\n                authorityKeyIdentifier: this.paaKeyIdentifier,\n            },\n        };\n        return CertificateManager.productAttestationAuthorityCertToAsn1(unsignedCertificate, this.paaKeyPair);\n    }\n\n    private generatePAICert(vendorId: VendorId, productId?: number) {\n        const now = Time.get().now();\n        const unsignedCertificate = {\n            serialNumber: ByteArray.fromHex(toHex(this.paiCertId)),\n            signatureAlgorithm: 1 /* EcdsaWithSHA256 */,\n            publicKeyAlgorithm: 1 /* EC */,\n            ellipticCurveIdentifier: 1 /* P256v1 */,\n            issuer: {\n                commonName: getPaaCommonName(),\n            },\n            notBefore: jsToMatterDate(now, -1),\n            notAfter: jsToMatterDate(now, 10),\n            subject: {\n                commonName: getPaiCommonName(vendorId, productId),\n                vendorId: vendorId,\n                productId: productId,\n            },\n            ellipticCurvePublicKey: this.paiKeyPair.publicKey,\n            extensions: {\n                basicConstraints: {\n                    isCa: true,\n                    pathLen: 0,\n                },\n                keyUsage: {\n                    keyCertSign: true,\n                    cRLSign: true,\n                },\n                subjectKeyIdentifier: this.paiKeyIdentifier,\n                authorityKeyIdentifier: this.paaKeyIdentifier,\n            },\n        };\n        return CertificateManager.productAttestationIntermediateCertToAsn1(unsignedCertificate, this.paaKeyPair);\n    }\n\n    generateDaCert(publicKey: ByteArray, vendorId: VendorId, productId: number) {\n        const now = Time.get().now();\n        const certId = this.nextCertificateId++;\n        const unsignedCertificate = {\n            serialNumber: ByteArray.fromHex(toHex(certId)),\n            signatureAlgorithm: 1 /* EcdsaWithSHA256 */,\n            publicKeyAlgorithm: 1 /* EC */,\n            ellipticCurveIdentifier: 1 /* P256v1 */,\n            notBefore: jsToMatterDate(now, -1),\n            notAfter: jsToMatterDate(now, 10),\n            issuer: {\n                commonName: getPaiCommonName(vendorId),\n                vendorId: vendorId,\n            },\n            subject: {\n                commonName: getDacCommonName(vendorId, productId),\n                vendorId: vendorId,\n                productId: productId,\n            },\n            ellipticCurvePublicKey: publicKey,\n            extensions: {\n                basicConstraints: {\n                    isCa: false,\n                },\n                keyUsage: {\n                    digitalSignature: true,\n                },\n                subjectKeyIdentifier: Crypto.hash(publicKey).slice(0, 20),\n                authorityKeyIdentifier: this.paiKeyIdentifier,\n            },\n        };\n        return CertificateManager.deviceAttestationCertToAsn1(unsignedCertificate, this.paiKeyPair);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
