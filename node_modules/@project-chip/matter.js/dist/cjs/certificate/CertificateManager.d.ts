/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterError } from "../common/MatterError.js";
import { Key } from "../crypto/Key.js";
import { CaseAuthenticatedTag } from "../datatype/CaseAuthenticatedTag.js";
import { FabricId } from "../datatype/FabricId.js";
import { NodeId } from "../datatype/NodeId.js";
import { VendorId } from "../datatype/VendorId.js";
import { BitFlag, TypeFromPartialBitSchema } from "../schema/BitmapSchema.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
import { ByteArray } from "../util/ByteArray.js";
export declare class CertificateError extends MatterError {
}
export declare function matterToJsDate(date: number): Date;
export declare function jsToMatterDate(date: Date, addYears?: number): number;
/** matter-node-id = ASN.1 OID 1.3.6.1.4.1.37244.1.1 */
export declare const NodeId_Matter: (value: NodeId) => any[];
/** matter-firmware-signing-id = ASN.1 OID 1.3.6.1.4.1.37244.1.2 */
export declare const FirmwareSigningId_Matter: (value: number) => any[];
/** matter-icac-id = ASN.1 OID 1.3.6.1.4.1.37244.1.3 */
export declare const IcacId_Matter: (value: number | bigint) => any[];
/** matter-rcac-id = ASN.1 OID 1.3.6.1.4.1.37244.1.4 */
export declare const RcacId_Matter: (value: number | bigint) => any[];
/** matter-fabric-id = ASN.1 OID 1.3.6.1.4.1.37244.1.5 */
export declare const FabricId_Matter: (value: FabricId) => any[];
/** matter-noc-cat = ASN.1 OID 1.3.6.1.4.1.37244.1.6 */
export declare const NocCat_Matter: (value: number) => any[];
/** matter-oid-vid = ASN.1 OID 1.3.6.1.4.1.37244.2.1 */
export declare const VendorId_Matter: (value: VendorId) => any[];
/** matter-oid-pid = ASN.1 OID 1.3.6.1.4.1.37244.2.2 */
export declare const ProductId_Matter: (value: number) => any[];
declare const ExtensionKeyUsageBitmap: {
    digitalSignature: BitFlag;
    nonRepudiation: BitFlag;
    keyEncipherment: BitFlag;
    dataEncipherment: BitFlag;
    keyAgreement: BitFlag;
    keyCertSign: BitFlag;
    cRLSign: BitFlag;
    encipherOnly: BitFlag;
    decipherOnly: BitFlag;
};
export declare const TlvRootCertificate: import("../tlv/TlvObject.js").ObjectSchemaWithMaxSize<{
    serialNumber: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    signatureAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    issuer: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        nodeId: import("../tlv/TlvObject.js").OptionalFieldType<NodeId>;
        firmwareSigningId: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        icacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        rcacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        fabricId: import("../tlv/TlvObject.js").OptionalFieldType<FabricId>;
        caseAuthenticatedTags: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<CaseAuthenticatedTag[]>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    notBefore: import("../tlv/TlvObject.js").FieldType<number>;
    notAfter: import("../tlv/TlvObject.js").FieldType<number>;
    subject: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        rcacId: import("../tlv/TlvObject.js").FieldType<number | bigint>;
        fabricId: import("../tlv/TlvObject.js").OptionalFieldType<FabricId>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    publicKeyAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurveIdentifier: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurvePublicKey: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    extensions: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        basicConstraints: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            isCa: import("../tlv/TlvObject.js").FieldType<boolean>;
            pathLen: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
        keyUsage: import("../tlv/TlvObject.js").FieldType<TypeFromPartialBitSchema<{
            digitalSignature: BitFlag;
            nonRepudiation: BitFlag;
            keyEncipherment: BitFlag;
            dataEncipherment: BitFlag;
            keyAgreement: BitFlag;
            keyCertSign: BitFlag;
            cRLSign: BitFlag;
            encipherOnly: BitFlag;
            decipherOnly: BitFlag;
        }>>;
        extendedKeyUsage: import("../tlv/TlvObject.js").OptionalFieldType<number[]>;
        subjectKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        authorityKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        futureExtension: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<Uint8Array[]>;
    }>>;
    signature: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
export declare const TlvOperationalCertificate: import("../tlv/TlvObject.js").ObjectSchemaWithMaxSize<{
    serialNumber: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    signatureAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    issuer: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        nodeId: import("../tlv/TlvObject.js").OptionalFieldType<NodeId>;
        firmwareSigningId: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        icacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        rcacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        fabricId: import("../tlv/TlvObject.js").OptionalFieldType<FabricId>;
        caseAuthenticatedTags: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<CaseAuthenticatedTag[]>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    notBefore: import("../tlv/TlvObject.js").FieldType<number>;
    notAfter: import("../tlv/TlvObject.js").FieldType<number>;
    subject: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        nodeId: import("../tlv/TlvObject.js").FieldType<NodeId>;
        fabricId: import("../tlv/TlvObject.js").FieldType<FabricId>;
        caseAuthenticatedTags: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<CaseAuthenticatedTag[]>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    publicKeyAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurveIdentifier: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurvePublicKey: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    extensions: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        basicConstraints: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            isCa: import("../tlv/TlvObject.js").FieldType<boolean>;
            pathLen: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
        keyUsage: import("../tlv/TlvObject.js").FieldType<TypeFromPartialBitSchema<{
            digitalSignature: BitFlag;
            nonRepudiation: BitFlag;
            keyEncipherment: BitFlag;
            dataEncipherment: BitFlag;
            keyAgreement: BitFlag;
            keyCertSign: BitFlag;
            cRLSign: BitFlag;
            encipherOnly: BitFlag;
            decipherOnly: BitFlag;
        }>>;
        extendedKeyUsage: import("../tlv/TlvObject.js").OptionalFieldType<number[]>;
        subjectKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        authorityKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        futureExtension: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<Uint8Array[]>;
    }>>;
    signature: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
export declare const TlvIntermediateCertificate: import("../tlv/TlvObject.js").ObjectSchemaWithMaxSize<{
    serialNumber: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    signatureAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    issuer: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        nodeId: import("../tlv/TlvObject.js").OptionalFieldType<NodeId>;
        firmwareSigningId: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        icacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        rcacId: import("../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        fabricId: import("../tlv/TlvObject.js").OptionalFieldType<FabricId>;
        caseAuthenticatedTags: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<CaseAuthenticatedTag[]>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    notBefore: import("../tlv/TlvObject.js").FieldType<number>;
    notAfter: import("../tlv/TlvObject.js").FieldType<number>;
    subject: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        icacId: import("../tlv/TlvObject.js").FieldType<number | bigint>;
        fabricId: import("../tlv/TlvObject.js").OptionalFieldType<FabricId>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    publicKeyAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurveIdentifier: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurvePublicKey: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    extensions: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        basicConstraints: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            isCa: import("../tlv/TlvObject.js").FieldType<boolean>;
            pathLen: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
        keyUsage: import("../tlv/TlvObject.js").FieldType<TypeFromPartialBitSchema<{
            digitalSignature: BitFlag;
            nonRepudiation: BitFlag;
            keyEncipherment: BitFlag;
            dataEncipherment: BitFlag;
            keyAgreement: BitFlag;
            keyCertSign: BitFlag;
            cRLSign: BitFlag;
            encipherOnly: BitFlag;
            decipherOnly: BitFlag;
        }>>;
        extendedKeyUsage: import("../tlv/TlvObject.js").OptionalFieldType<number[]>;
        subjectKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        authorityKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        futureExtension: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<Uint8Array[]>;
    }>>;
    signature: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
declare const TlvBaseCertificate: import("../tlv/TlvObject.js").ObjectSchemaWithMaxSize<{
    serialNumber: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    signatureAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    issuer: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    notBefore: import("../tlv/TlvObject.js").FieldType<number>;
    notAfter: import("../tlv/TlvObject.js").FieldType<number>;
    subject: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        commonName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNum: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        title: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        name: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenName: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initials: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifier: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonym: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        domainComponent: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    } & {
        commonNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        sureNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        serialNumPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        countryNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        localityNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        stateOrProvinceNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        orgUnitNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        titlePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        namePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        givenNamePs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        initialsPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        genQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        dnQualifierPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
        pseudonymPs: import("../tlv/TlvObject.js").OptionalFieldType<string>;
    }>>;
    publicKeyAlgorithm: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurveIdentifier: import("../tlv/TlvObject.js").FieldType<number>;
    ellipticCurvePublicKey: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
    extensions: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
        basicConstraints: import("../tlv/TlvObject.js").FieldType<import("../tlv/TlvObject.js").TypeFromFields<{
            isCa: import("../tlv/TlvObject.js").FieldType<boolean>;
            pathLen: import("../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
        keyUsage: import("../tlv/TlvObject.js").FieldType<TypeFromPartialBitSchema<{
            digitalSignature: BitFlag;
            nonRepudiation: BitFlag;
            keyEncipherment: BitFlag;
            dataEncipherment: BitFlag;
            keyAgreement: BitFlag;
            keyCertSign: BitFlag;
            cRLSign: BitFlag;
            encipherOnly: BitFlag;
            decipherOnly: BitFlag;
        }>>;
        extendedKeyUsage: import("../tlv/TlvObject.js").OptionalFieldType<number[]>;
        subjectKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        authorityKeyIdentifier: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
        futureExtension: import("../tlv/TlvObject.js").OptionalRepeatedFieldType<Uint8Array[]>;
    }>>;
    signature: import("../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
interface AttestationCertificateBase {
    serialNumber: ByteArray;
    signatureAlgorithm: number;
    issuer: {};
    notBefore: number;
    notAfter: number;
    subject: {};
    publicKeyAlgorithm: number;
    ellipticCurveIdentifier: number;
    ellipticCurvePublicKey: ByteArray;
    extensions: {
        basicConstraints: {
            isCa: boolean;
            pathLen?: number;
        };
        keyUsage: TypeFromPartialBitSchema<typeof ExtensionKeyUsageBitmap>;
        extendedKeyUsage?: number[];
        subjectKeyIdentifier: ByteArray;
        authorityKeyIdentifier: ByteArray;
        futureExtension?: ByteArray[];
    };
    signature: ByteArray;
}
export interface DeviceAttestationCertificate extends AttestationCertificateBase {
    issuer: {
        commonName: string;
        productId?: number;
        vendorId: VendorId;
    };
    subject: {
        commonName: string;
        productId: number;
        vendorId: VendorId;
    };
}
export interface ProductAttestationIntermediateCertificate extends AttestationCertificateBase {
    issuer: {
        commonName: string;
        vendorId?: VendorId;
    };
    subject: {
        commonName: string;
        productId?: number;
        vendorId: VendorId;
    };
}
export interface ProductAttestationAuthorityCertificate extends AttestationCertificateBase {
    issuer: {
        commonName: string;
        vendorId?: VendorId;
    };
    subject: {
        commonName: string;
        vendorId?: VendorId;
    };
}
export declare const TlvCertificationDeclaration: import("../tlv/TlvObject.js").ObjectSchema<{
    formatVersion: import("../tlv/TlvObject.js").FieldType<number>;
    vendorId: import("../tlv/TlvObject.js").FieldType<VendorId>;
    produceIdArray: import("../tlv/TlvObject.js").FieldType<number[]>;
    deviceTypeId: import("../tlv/TlvObject.js").FieldType<number>;
    certificateId: import("../tlv/TlvObject.js").FieldType<string>;
    securityLevel: import("../tlv/TlvObject.js").FieldType<number>;
    securityInformation: import("../tlv/TlvObject.js").FieldType<number>;
    versionNumber: import("../tlv/TlvObject.js").FieldType<number>;
    certificationType: import("../tlv/TlvObject.js").FieldType<number>;
    dacOriginVendorId: import("../tlv/TlvObject.js").OptionalFieldType<VendorId>;
    dacOriginProductId: import("../tlv/TlvObject.js").OptionalFieldType<number>;
    authorizedPaaList: import("../tlv/TlvObject.js").OptionalFieldType<Uint8Array[]>;
}>;
export type BaseCertificate = TypeFromSchema<typeof TlvBaseCertificate>;
export type RootCertificate = TypeFromSchema<typeof TlvRootCertificate>;
export type IntermediateCertificate = TypeFromSchema<typeof TlvIntermediateCertificate>;
export type OperationalCertificate = TypeFromSchema<typeof TlvOperationalCertificate>;
export type Unsigned<Type> = {
    [Property in keyof Type as Exclude<Property, "signature">]: Type[Property];
};
export declare class CertificateManager {
    #private;
    static rootCertToAsn1(cert: Unsigned<RootCertificate>): Uint8Array;
    static intermediateCaCertToAsn1(cert: Unsigned<IntermediateCertificate>): Uint8Array;
    static nodeOperationalCertToAsn1(cert: Unsigned<OperationalCertificate>): Uint8Array;
    static deviceAttestationCertToAsn1(cert: Unsigned<DeviceAttestationCertificate>, key: Key): Uint8Array;
    static productAttestationIntermediateCertToAsn1(cert: Unsigned<ProductAttestationIntermediateCertificate>, key: Key): Uint8Array;
    static productAttestationAuthorityCertToAsn1(cert: Unsigned<ProductAttestationAuthorityCertificate>, key: Key): Uint8Array;
    static CertificationDeclarationToAsn1(eContent: ByteArray, subjectKeyIdentifier: ByteArray, privateKey: JsonWebKey): Uint8Array;
    /**
     * Validate general requirements a Matter certificate fields must fulfill.
     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} §6.5.x
     */
    static validateGeneralCertificateFields(cert: RootCertificate | OperationalCertificate | IntermediateCertificate): void;
    /**
     * Verify requirements a Matter Root certificate must fulfill.
     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} §6.5.x
     */
    static verifyRootCertificate(rootCert: RootCertificate): void;
    /**
     * Verify requirements a Matter Node Operational certificate must fulfill.
     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} §6.5.x
     */
    static verifyNodeOperationalCertificate(rootOrIcaCert: RootCertificate | IntermediateCertificate, nocCert: OperationalCertificate): void;
    /**
     * Verify requirements a Matter Intermediate CA certificate must fulfill.
     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} §6.5.x
     */
    static verifyIntermediateCaCertificate(rootCert: RootCertificate, icaCert: IntermediateCertificate): void;
    static createCertificateSigningRequest(key: Key): Uint8Array;
    static getPublicKeyFromCsr(csr: ByteArray): Uint8Array;
}
export {};
//# sourceMappingURL=CertificateManager.d.ts.map