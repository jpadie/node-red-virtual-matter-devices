{
  "version": 3,
  "sources": ["../../../src/certificate/CertificateManager.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BitByteArray,\n    BYTES_KEY,\n    ContextTagged,\n    ContextTaggedBytes,\n    DatatypeOverride,\n    DerCodec,\n    DerObject,\n    DerType,\n    ELEMENTS_KEY,\n    OBJECT_ID_KEY,\n    RawBytes,\n} from \"../codec/DerCodec.js\";\nimport { ImplementationError, MatterError } from \"../common/MatterError.js\";\nimport { Crypto } from \"../crypto/Crypto.js\";\nimport { Key, PublicKey } from \"../crypto/Key.js\";\nimport { CaseAuthenticatedTag, TlvCaseAuthenticatedTag } from \"../datatype/CaseAuthenticatedTag.js\";\nimport { FabricId, TlvFabricId } from \"../datatype/FabricId.js\";\nimport { NodeId, TlvNodeId } from \"../datatype/NodeId.js\";\nimport { TlvVendorId, VendorId } from \"../datatype/VendorId.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { BitFlag, BitmapSchema, TypeFromPartialBitSchema } from \"../schema/BitmapSchema.js\";\nimport { Time } from \"../time/Time.js\";\nimport { TlvArray } from \"../tlv/TlvArray.js\";\nimport { TlvBoolean } from \"../tlv/TlvBoolean.js\";\nimport { TlvBitmap, TlvUInt16, TlvUInt32, TlvUInt64, TlvUInt8 } from \"../tlv/TlvNumber.js\";\nimport {\n    TlvField,\n    TlvObject,\n    TlvObjectWithMaxSize,\n    TlvOptionalField,\n    TlvOptionalRepeatedField,\n    TlvTaggedList,\n} from \"../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../tlv/TlvSchema.js\";\nimport { TlvByteString, TlvString } from \"../tlv/TlvString.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { Pkcs7, SHA256_CMS, X509, X520, X962 } from \"./CertificateDerTypes.js\";\n\nconst logger = Logger.get(\"CertificateManager\");\n\nexport class CertificateError extends MatterError {}\n\nconst YEAR_S = 365 * 24 * 60 * 60;\nconst EPOCH_OFFSET_S = 10957 * 24 * 60 * 60;\n\n/**\n * Matter specific Certificate Sizes\n * @see {@link MatterSpecification.v13.Core} 6.1.3.\n */\nconst MAX_DER_CERTIFICATE_SIZE = 600;\nconst MAX_TLV_CERTIFICATE_SIZE = 400;\n\n// TODO replace usage of Date by abstraction\n\nexport function matterToJsDate(date: number) {\n    return date === 0 ? X520.NON_WELL_DEFINED_DATE : new Date((date + EPOCH_OFFSET_S) * 1000);\n}\n\nexport function jsToMatterDate(date: Date, addYears = 0) {\n    return date.getTime() === X520.NON_WELL_DEFINED_DATE.getTime()\n        ? 0\n        : Math.floor(date.getTime() / 1000) - EPOCH_OFFSET_S + addYears * YEAR_S;\n}\n\nfunction intTo16Chars(value: bigint | number) {\n    const byteArray = new ByteArray(8);\n    const dataView = byteArray.getDataView();\n    dataView.setBigUint64(0, typeof value === \"bigint\" ? value : BigInt(value));\n    return byteArray.toHex().toUpperCase();\n}\n\nfunction uInt16To8Chars(value: number) {\n    const byteArray = new ByteArray(4);\n    const dataView = byteArray.getDataView();\n    dataView.setUint32(0, value);\n    return byteArray.toHex().toUpperCase();\n}\n\nfunction uInt16To4Chars(value: number) {\n    const byteArray = new ByteArray(2);\n    const dataView = byteArray.getDataView();\n    dataView.setUint16(0, value);\n    return byteArray.toHex().toUpperCase();\n}\n\n/**\n * Matter specific ASN.1 OIDs\n * @see {@link MatterSpecification.v12.Core} Appendix E\n */\n\n/**\n * Generator function to create a specific ASN field for a Matter OpCert DN with the OID base 1.3.6.1.4.1.37244.1.*.\n * The returned function takes the value and returns the ASN.1 DER object.\n */\nconst GenericMatterOpCertObject =\n    <T>(id: number, valueConverter?: (value: T) => string) =>\n    (value: T) => [\n        DerObject(`2b0601040182a27c01${id.toString(16).padStart(2, \"0\")}`, {\n            value: (valueConverter ?? intTo16Chars)(value as any),\n        }),\n    ];\n\n/**\n * Generator function to create a specific ASN field for a Matter AttCert DN with the OID base 1.3.6.1.4.1.37244.2.*.\n * The returned function takes the value and returns the ASN.1 DER object.\n */\nconst GenericMatterAttCertObject =\n    <T>(id: number, valueConverter?: (value: T) => string) =>\n    (value: T) => [\n        DerObject(`2b0601040182a27c02${id.toString(16).padStart(2, \"0\")}`, {\n            value: (valueConverter ?? intTo16Chars)(value as any),\n        }),\n    ];\n\n/** matter-node-id = ASN.1 OID 1.3.6.1.4.1.37244.1.1 */\nexport const NodeId_Matter = GenericMatterOpCertObject<NodeId>(1);\n\n/** matter-firmware-signing-id = ASN.1 OID 1.3.6.1.4.1.37244.1.2 */\nexport const FirmwareSigningId_Matter = GenericMatterOpCertObject<number>(2);\n\n/** matter-icac-id = ASN.1 OID 1.3.6.1.4.1.37244.1.3 */\nexport const IcacId_Matter = GenericMatterOpCertObject<bigint | number>(3);\n\n/** matter-rcac-id = ASN.1 OID 1.3.6.1.4.1.37244.1.4 */\nexport const RcacId_Matter = GenericMatterOpCertObject<bigint | number>(4);\n\n/** matter-fabric-id = ASN.1 OID 1.3.6.1.4.1.37244.1.5 */\nexport const FabricId_Matter = GenericMatterOpCertObject<FabricId>(5);\n\n/** matter-noc-cat = ASN.1 OID 1.3.6.1.4.1.37244.1.6 */\nexport const NocCat_Matter = GenericMatterOpCertObject<number>(6, uInt16To8Chars);\n\n/** matter-oid-vid = ASN.1 OID 1.3.6.1.4.1.37244.2.1 */\nexport const VendorId_Matter = GenericMatterAttCertObject<VendorId>(1, uInt16To4Chars);\n\n/** matter-oid-pid = ASN.1 OID 1.3.6.1.4.1.37244.2.2 */\nexport const ProductId_Matter = GenericMatterAttCertObject<number>(2, uInt16To4Chars);\n\n/** All defined Matter fields for subject and issuer that we always allow optionally to be encoded */\nconst AllowedSubjectAndIssuerMatterFields = {\n    nodeId: TlvOptionalField(17, TlvNodeId),\n    firmwareSigningId: TlvOptionalField(18, TlvUInt32),\n    icacId: TlvOptionalField(19, TlvUInt64),\n    rcacId: TlvOptionalField(20, TlvUInt64),\n    fabricId: TlvOptionalField(21, TlvFabricId),\n    caseAuthenticatedTags: TlvOptionalRepeatedField(22, TlvCaseAuthenticatedTag, { maxLength: 3 }),\n};\n\n/**\n * TLV schema for a generic subject or issuer field in a certificate. We handle all fields as optional here for the TLV\n * parsing and check required fields in the logic to make sure we return the correct errors.\n */\nconst TlvGenericMatterSubjectOrIssuerTaggedList = <T>(matterFields: T) => {\n    const fields = {\n        // Standard DNs\n        commonName: TlvOptionalField(1, TlvString),\n        sureName: TlvOptionalField(2, TlvString),\n        serialNum: TlvOptionalField(3, TlvString),\n        countryName: TlvOptionalField(4, TlvString),\n        localityName: TlvOptionalField(5, TlvString),\n        stateOrProvinceName: TlvOptionalField(6, TlvString),\n        orgName: TlvOptionalField(7, TlvString),\n        orgUnitName: TlvOptionalField(8, TlvString),\n        title: TlvOptionalField(9, TlvString),\n        name: TlvOptionalField(10, TlvString),\n        givenName: TlvOptionalField(11, TlvString),\n        initials: TlvOptionalField(12, TlvString),\n        genQualifier: TlvOptionalField(13, TlvString),\n        dnQualifier: TlvOptionalField(14, TlvString),\n        pseudonym: TlvOptionalField(15, TlvString),\n        domainComponent: TlvOptionalField(16, TlvString),\n\n        // Matter specific DNs\n        ...matterFields,\n\n        // Standard DNs when encoded as Printable String\n        commonNamePs: TlvOptionalField(129, TlvString),\n        sureNamePs: TlvOptionalField(130, TlvString),\n        serialNumPs: TlvOptionalField(131, TlvString),\n        countryNamePs: TlvOptionalField(132, TlvString),\n        localityNamePs: TlvOptionalField(133, TlvString),\n        stateOrProvinceNamePs: TlvOptionalField(134, TlvString),\n        orgNamePs: TlvOptionalField(135, TlvString),\n        orgUnitNamePs: TlvOptionalField(136, TlvString),\n        titlePs: TlvOptionalField(137, TlvString),\n        namePs: TlvOptionalField(138, TlvString),\n        givenNamePs: TlvOptionalField(139, TlvString),\n        initialsPs: TlvOptionalField(140, TlvString),\n        genQualifierPs: TlvOptionalField(141, TlvString),\n        dnQualifierPs: TlvOptionalField(142, TlvString),\n        pseudonymPs: TlvOptionalField(143, TlvString),\n    };\n    return TlvTaggedList(fields);\n};\n\nconst ExtensionKeyUsageBitmap = {\n    digitalSignature: BitFlag(0),\n    nonRepudiation: BitFlag(1),\n    keyEncipherment: BitFlag(2),\n    dataEncipherment: BitFlag(3),\n    keyAgreement: BitFlag(4),\n    keyCertSign: BitFlag(5),\n    cRLSign: BitFlag(6),\n    encipherOnly: BitFlag(7),\n    decipherOnly: BitFlag(8),\n};\nconst ExtensionKeyUsageSchema = BitmapSchema(ExtensionKeyUsageBitmap);\n\n/**\n * This generator enhances the generic Matter Certificate definition by allowing to override the subject and issuer\n * fields. The overriding serves two needs:\n * 1. to make some fields mandatory for the Tlv parsing and definition for the typescript types\n * 2. have typing guidance when generating certificates ourself in code\n *\n * On Tlv definition level also all not specified allowed Matter Fields are optionally allowed and are decoded,\n * re-encoded into Tlv and also encoded into ASN if the certificate is converted. Just the typing system do not know\n * about them.\n */\nconst BaseMatterCertificate = <S, I>(matterFields?: { subject?: S; issuer?: I }) =>\n    TlvObjectWithMaxSize(\n        {\n            serialNumber: TlvField(1, TlvByteString.bound({ maxLength: 20 })),\n            signatureAlgorithm: TlvField(2, TlvUInt8),\n            issuer: TlvField(\n                3,\n                TlvGenericMatterSubjectOrIssuerTaggedList<I>({\n                    ...AllowedSubjectAndIssuerMatterFields,\n                    ...(matterFields?.issuer ?? {}),\n                } as I),\n            ),\n            notBefore: TlvField(4, TlvUInt32),\n            notAfter: TlvField(5, TlvUInt32),\n            subject: TlvField(\n                6,\n                TlvGenericMatterSubjectOrIssuerTaggedList<S>({\n                    ...AllowedSubjectAndIssuerMatterFields,\n                    ...(matterFields?.subject ?? {}),\n                } as S),\n            ),\n            publicKeyAlgorithm: TlvField(7, TlvUInt8),\n            ellipticCurveIdentifier: TlvField(8, TlvUInt8),\n            ellipticCurvePublicKey: TlvField(9, TlvByteString),\n            extensions: TlvField(\n                10,\n                TlvTaggedList({\n                    basicConstraints: TlvField(\n                        1,\n                        TlvObject({\n                            isCa: TlvField(1, TlvBoolean),\n                            pathLen: TlvOptionalField(2, TlvUInt8),\n                        }),\n                    ),\n                    keyUsage: TlvField(2, TlvBitmap(TlvUInt16, ExtensionKeyUsageBitmap)),\n                    extendedKeyUsage: TlvOptionalField(3, TlvArray(TlvUInt8)),\n                    subjectKeyIdentifier: TlvField(4, TlvByteString.bound({ length: 20 })),\n                    authorityKeyIdentifier: TlvField(5, TlvByteString.bound({ length: 20 })),\n                    futureExtension: TlvOptionalRepeatedField(6, TlvByteString),\n                }),\n            ),\n            signature: TlvField(11, TlvByteString),\n        },\n        MAX_TLV_CERTIFICATE_SIZE,\n    );\n\nexport const TlvRootCertificate = BaseMatterCertificate({\n    subject: {\n        rcacId: TlvField(20, TlvUInt64),\n        fabricId: TlvOptionalField(21, TlvFabricId),\n    },\n    issuer: AllowedSubjectAndIssuerMatterFields,\n});\n\nexport const TlvOperationalCertificate = BaseMatterCertificate({\n    subject: {\n        nodeId: TlvField(17, TlvNodeId),\n        fabricId: TlvField(21, TlvFabricId),\n        caseAuthenticatedTags: TlvOptionalRepeatedField(22, TlvCaseAuthenticatedTag, { maxLength: 3 }),\n    },\n    issuer: AllowedSubjectAndIssuerMatterFields,\n});\n\nexport const TlvIntermediateCertificate = BaseMatterCertificate({\n    subject: {\n        icacId: TlvField(19, TlvUInt64),\n        fabricId: TlvOptionalField(21, TlvFabricId),\n    },\n    issuer: AllowedSubjectAndIssuerMatterFields,\n});\n\nconst TlvBaseCertificate = BaseMatterCertificate();\n\ninterface AttestationCertificateBase {\n    serialNumber: ByteArray;\n    signatureAlgorithm: number;\n    issuer: {};\n    notBefore: number;\n    notAfter: number;\n    subject: {};\n    publicKeyAlgorithm: number;\n    ellipticCurveIdentifier: number;\n    ellipticCurvePublicKey: ByteArray;\n    extensions: {\n        basicConstraints: {\n            isCa: boolean;\n            pathLen?: number;\n        };\n        keyUsage: TypeFromPartialBitSchema<typeof ExtensionKeyUsageBitmap>;\n        extendedKeyUsage?: number[];\n        subjectKeyIdentifier: ByteArray;\n        authorityKeyIdentifier: ByteArray;\n        futureExtension?: ByteArray[];\n    };\n    signature: ByteArray;\n}\n\nexport interface DeviceAttestationCertificate extends AttestationCertificateBase {\n    issuer: {\n        commonName: string;\n        productId?: number;\n        vendorId: VendorId;\n    };\n    subject: {\n        commonName: string;\n        productId: number;\n        vendorId: VendorId;\n    };\n}\n\nexport interface ProductAttestationIntermediateCertificate extends AttestationCertificateBase {\n    issuer: {\n        commonName: string;\n        vendorId?: VendorId;\n    };\n    subject: {\n        commonName: string;\n        productId?: number;\n        vendorId: VendorId;\n    };\n}\n\nexport interface ProductAttestationAuthorityCertificate extends AttestationCertificateBase {\n    issuer: {\n        commonName: string;\n        vendorId?: VendorId;\n    };\n    subject: {\n        commonName: string;\n        vendorId?: VendorId;\n    };\n}\n\nexport const TlvCertificationDeclaration = TlvObject({\n    formatVersion: TlvField(0, TlvUInt16),\n    vendorId: TlvField(1, TlvVendorId),\n    produceIdArray: TlvField(2, TlvArray(TlvUInt16, { minLength: 1, maxLength: 100 })),\n    deviceTypeId: TlvField(3, TlvUInt32),\n    certificateId: TlvField(4, TlvString.bound({ length: 19 })),\n    securityLevel: TlvField(5, TlvUInt8),\n    securityInformation: TlvField(6, TlvUInt16),\n    versionNumber: TlvField(7, TlvUInt16),\n    certificationType: TlvField(8, TlvUInt8),\n    dacOriginVendorId: TlvOptionalField(9, TlvVendorId),\n    dacOriginProductId: TlvOptionalField(10, TlvUInt16),\n    authorizedPaaList: TlvOptionalField(\n        11,\n        TlvArray(TlvByteString.bound({ length: 20 }), { minLength: 1, maxLength: 10 }),\n    ),\n});\n\nexport type BaseCertificate = TypeFromSchema<typeof TlvBaseCertificate>;\nexport type RootCertificate = TypeFromSchema<typeof TlvRootCertificate>;\nexport type IntermediateCertificate = TypeFromSchema<typeof TlvIntermediateCertificate>;\nexport type OperationalCertificate = TypeFromSchema<typeof TlvOperationalCertificate>;\nexport type Unsigned<Type> = { [Property in keyof Type as Exclude<Property, \"signature\">]: Type[Property] };\n\n/**\n * Preserve order of keys from original subject and also copy potential custom elements\n * @param data\n */\nfunction subjectOrIssuerToAsn1(data: { [field: string]: any }) {\n    const asn = {} as { [field: string]: any[] };\n    Object.entries(data).forEach(([key, value]) => {\n        if (value === undefined) {\n            return;\n        }\n        switch (key) {\n            case \"commonName\":\n                asn.commonName = X520.CommonName(value as string);\n                break;\n            case \"sureName\":\n                asn.sureName = X520.SurName(value as string);\n                break;\n            case \"serialNum\":\n                asn.serialNum = X520.SerialNumber(value as string);\n                break;\n            case \"countryName\":\n                asn.countryName = X520.CountryName(value as string);\n                break;\n            case \"localityName\":\n                asn.localityName = X520.LocalityName(value as string);\n                break;\n            case \"stateOrProvinceName\":\n                asn.stateOrProvinceName = X520.StateOrProvinceName(value as string);\n                break;\n            case \"orgName\":\n                asn.orgName = X520.OrganisationName(value as string);\n                break;\n            case \"orgUnitName\":\n                asn.orgUnitName = X520.OrganizationalUnitName(value as string);\n                break;\n            case \"title\":\n                asn.title = X520.Title(value as string);\n                break;\n            case \"name\":\n                asn.name = X520.Name(value as string);\n                break;\n            case \"givenName\":\n                asn.givenName = X520.GivenName(value as string);\n                break;\n            case \"initials\":\n                asn.initials = X520.Initials(value as string);\n                break;\n            case \"genQualifier\":\n                asn.genQualifier = X520.GenerationQualifier(value as string);\n                break;\n            case \"dnQualifier\":\n                asn.dnQualifier = X520.DnQualifier(value as string);\n                break;\n            case \"pseudonym\":\n                asn.pseudonym = X520.Pseudonym(value as string);\n                break;\n            case \"domainComponent\":\n                asn.domainComponent = X520.DomainComponent(value as string);\n                break;\n            case \"nodeId\":\n                asn.nodeId = NodeId_Matter(value as NodeId);\n                break;\n            case \"firmwareSigningId\":\n                asn.firmwareSigningId = FirmwareSigningId_Matter(value as number);\n                break;\n            case \"icacId\":\n                asn.icacId = IcacId_Matter(value as number | bigint);\n                break;\n            case \"rcacId\":\n                asn.rcacId = RcacId_Matter(value as number | bigint);\n                break;\n            case \"fabricId\":\n                asn.fabricId = FabricId_Matter(value as FabricId);\n                break;\n            case \"caseAuthenticatedTags\":\n                // In theory if someone mixes multiple caseAuthenticatedTag fields with other fields we currently would\n                // code them in ASN.1 as fields at the first position from the original data which might fail\n                // certificate validation. Changing this would require to change Tlv decoding, so lets try that way for now.\n                const caseAuthenticatedTags = value as CaseAuthenticatedTag[];\n                CaseAuthenticatedTag.validateNocTagList(caseAuthenticatedTags);\n\n                const cat0 = caseAuthenticatedTags[0];\n                const cat1 = caseAuthenticatedTags[1];\n                const cat2 = caseAuthenticatedTags[2];\n                if (cat0 !== undefined) {\n                    asn.caseAuthenticatedTag0 = NocCat_Matter(cat0);\n                }\n                if (cat1 !== undefined) {\n                    asn.caseAuthenticatedTag1 = NocCat_Matter(cat1);\n                }\n                if (cat2 !== undefined) {\n                    asn.caseAuthenticatedTag2 = NocCat_Matter(cat2);\n                }\n                break;\n            case \"vendorId\": // Only relevant for ASN.1 encoding of DAC/PAA/PAI certificates\n                asn.vendorId = VendorId_Matter(value as VendorId);\n                break;\n            case \"productId\": // Only relevant for ASN.1 encoding of DAC/PAA/PAI certificates\n                asn.productId = ProductId_Matter(value as number);\n                break;\n            case \"commonNamePs\":\n                asn.commonNamePs = X520.CommonName(value as string, true);\n                break;\n            case \"sureNamePs\":\n                asn.sureNamePs = X520.SurName(value as string, true);\n                break;\n            case \"serialNumPs\":\n                asn.serialNumPs = X520.SerialNumber(value as string, true);\n                break;\n            case \"countryNamePs\":\n                asn.countryNamePs = X520.CountryName(value as string, true);\n                break;\n            case \"localityNamePs\":\n                asn.localityNamePs = X520.LocalityName(value as string, true);\n                break;\n            case \"stateOrProvinceNamePs\":\n                asn.stateOrProvinceNamePs = X520.StateOrProvinceName(value as string, true);\n                break;\n            case \"orgNamePs\":\n                asn.orgNamePs = X520.OrganisationName(value as string, true);\n                break;\n            case \"orgUnitNamePs\":\n                asn.orgUnitNamePs = X520.OrganizationalUnitName(value as string, true);\n                break;\n            case \"titlePs\":\n                asn.titlePs = X520.Title(value as string, true);\n                break;\n            case \"namePs\":\n                asn.namePs = X520.Name(value as string, true);\n                break;\n            case \"givenNamePs\":\n                asn.givenNamePs = X520.GivenName(value as string, true);\n                break;\n            case \"initialsPs\":\n                asn.initialsPs = X520.Initials(value as string, true);\n                break;\n            case \"genQualifierPs\":\n                asn.genQualifierPs = X520.GenerationQualifier(value as string, true);\n                break;\n            case \"dnQualifierPs\":\n                asn.dnQualifierPs = X520.DnQualifier(value as string, true);\n                break;\n            case \"pseudonymPs\":\n                asn.pseudonymPs = X520.Pseudonym(value as string, true);\n                break;\n        }\n    });\n    return asn;\n}\n\nfunction extensionsToAsn1(extensions: BaseCertificate[\"extensions\"]) {\n    const asn = {} as { [field: string]: any[] | any };\n    Object.entries(extensions).forEach(([key, value]) => {\n        if (value === undefined) {\n            return;\n        }\n        switch (key) {\n            case \"basicConstraints\":\n                asn.basicConstraints = X509.BasicConstraints(value);\n                break;\n            case \"keyUsage\":\n                asn.keyUsage = X509.KeyUsage(\n                    ExtensionKeyUsageSchema.encode(value as TypeFromPartialBitSchema<typeof ExtensionKeyUsageBitmap>),\n                );\n                break;\n            case \"extendedKeyUsage\":\n                asn.extendedKeyUsage = X509.ExtendedKeyUsage(value as number[] | undefined);\n                break;\n            case \"subjectKeyIdentifier\":\n                asn.subjectKeyIdentifier = X509.SubjectKeyIdentifier(value as ByteArray);\n                break;\n            case \"authorityKeyIdentifier\":\n                asn.authorityKeyIdentifier = X509.AuthorityKeyIdentifier(value as ByteArray);\n                break;\n            case \"futureExtension\":\n                asn.futureExtension = RawBytes(ByteArray.concat(...((value as ByteArray[] | undefined) ?? [])));\n                break;\n        }\n    });\n    return asn;\n}\n\nexport class CertificateManager {\n    static #assertCertificateDerSize(certBytes: ByteArray) {\n        if (certBytes.length > MAX_DER_CERTIFICATE_SIZE) {\n            throw new ImplementationError(\n                `Certificate to generate is too big: ${certBytes.length} bytes instead of max ${MAX_DER_CERTIFICATE_SIZE} bytes`,\n            );\n        }\n    }\n\n    static #genericBuildAsn1Structure({\n        serialNumber,\n        notBefore,\n        notAfter,\n        issuer,\n        subject,\n        ellipticCurvePublicKey,\n        extensions,\n    }: Unsigned<BaseCertificate>) {\n        const {\n            basicConstraints: { isCa, pathLen },\n        } = extensions;\n        if (!isCa && pathLen !== undefined) {\n            throw new CertificateError(\"Path length must be undefined for non-CA certificates.\");\n        }\n        return {\n            version: ContextTagged(0, 2), // v3\n            serialNumber: DatatypeOverride(DerType.Integer, serialNumber),\n            signatureAlgorithm: X962.EcdsaWithSHA256,\n            issuer: subjectOrIssuerToAsn1(issuer),\n            validity: {\n                notBefore: matterToJsDate(notBefore),\n                notAfter: matterToJsDate(notAfter),\n            },\n            subject: subjectOrIssuerToAsn1(subject),\n            publicKey: X962.PublicKeyEcPrime256v1(ellipticCurvePublicKey),\n            extensions: ContextTagged(3, extensionsToAsn1(extensions)),\n        };\n    }\n\n    static #genericCertToAsn1(cert: Unsigned<BaseCertificate>) {\n        const certBytes = DerCodec.encode(this.#genericBuildAsn1Structure(cert));\n        this.#assertCertificateDerSize(certBytes);\n        return certBytes;\n    }\n\n    static rootCertToAsn1(cert: Unsigned<RootCertificate>) {\n        const {\n            extensions: {\n                basicConstraints: { isCa },\n            },\n        } = cert;\n        if (!isCa) {\n            throw new CertificateError(\"Root certificate must be a CA.\");\n        }\n        return this.#genericCertToAsn1(cert);\n    }\n\n    static intermediateCaCertToAsn1(cert: Unsigned<IntermediateCertificate>) {\n        const {\n            extensions: {\n                basicConstraints: { isCa },\n            },\n        } = cert;\n        if (!isCa) {\n            throw new CertificateError(\"Intermediate certificate must be a CA.\");\n        }\n        return this.#genericCertToAsn1(cert);\n    }\n\n    static nodeOperationalCertToAsn1(cert: Unsigned<OperationalCertificate>) {\n        const {\n            issuer: { icacId, rcacId },\n            extensions: {\n                basicConstraints: { isCa },\n            },\n        } = cert;\n        if (icacId === undefined && rcacId === undefined) {\n            throw new CertificateError(\"Issuer RCAC or ICAC ID must be defined for an operational certificate.\");\n        }\n        if (isCa) {\n            throw new CertificateError(\"Node operational certificate must not be a CA.\");\n        }\n\n        return this.#genericCertToAsn1(cert);\n    }\n\n    static deviceAttestationCertToAsn1(cert: Unsigned<DeviceAttestationCertificate>, key: Key) {\n        const certificate = this.#genericBuildAsn1Structure(cert);\n        const certBytes = DerCodec.encode({\n            certificate,\n            signAlgorithm: X962.EcdsaWithSHA256,\n            signature: BitByteArray(Crypto.sign(key, DerCodec.encode(certificate), \"der\")),\n        });\n        this.#assertCertificateDerSize(certBytes);\n        return certBytes;\n    }\n\n    static productAttestationIntermediateCertToAsn1(\n        cert: Unsigned<ProductAttestationIntermediateCertificate>,\n        key: Key,\n    ) {\n        const certificate = this.#genericBuildAsn1Structure(cert);\n        const certBytes = DerCodec.encode({\n            certificate,\n            signAlgorithm: X962.EcdsaWithSHA256,\n            signature: BitByteArray(Crypto.sign(key, DerCodec.encode(certificate), \"der\")),\n        });\n        this.#assertCertificateDerSize(certBytes);\n        return certBytes;\n    }\n\n    static productAttestationAuthorityCertToAsn1(cert: Unsigned<ProductAttestationAuthorityCertificate>, key: Key) {\n        const certificate = this.#genericBuildAsn1Structure(cert);\n        const certBytes = DerCodec.encode({\n            certificate,\n            signAlgorithm: X962.EcdsaWithSHA256,\n            signature: BitByteArray(Crypto.sign(key, DerCodec.encode(certificate), \"der\")),\n        });\n        this.#assertCertificateDerSize(certBytes);\n        return certBytes;\n    }\n\n    static CertificationDeclarationToAsn1(\n        eContent: ByteArray,\n        subjectKeyIdentifier: ByteArray,\n        privateKey: JsonWebKey,\n    ) {\n        const certificate = {\n            version: 3,\n            digestAlgorithm: [SHA256_CMS],\n            encapContentInfo: Pkcs7.Data(eContent),\n            signerInfo: [\n                {\n                    version: 3,\n                    subjectKeyIdentifier: ContextTaggedBytes(0, subjectKeyIdentifier),\n                    digestAlgorithm: SHA256_CMS,\n                    signatureAlgorithm: X962.EcdsaWithSHA256,\n                    signature: Crypto.sign(privateKey, eContent, \"der\"),\n                },\n            ],\n        };\n\n        const certBytes = DerCodec.encode(Pkcs7.SignedData(certificate));\n        this.#assertCertificateDerSize(certBytes);\n        return certBytes;\n    }\n\n    /**\n     * Validate general requirements a Matter certificate fields must fulfill.\n     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} \u00A76.5.x\n     */\n    static validateGeneralCertificateFields(cert: RootCertificate | OperationalCertificate | IntermediateCertificate) {\n        if (cert.serialNumber.length > 20)\n            throw new CertificateError(\n                `Serial number must not be longer then 20 octets. Current serial number has ${cert.serialNumber.length} octets.`,\n            );\n\n        if (cert.signatureAlgorithm !== 1) {\n            // ecdsa-with-sha256\n            throw new CertificateError(`Unsupported signature algorithm: ${cert.signatureAlgorithm}`);\n        }\n\n        if (cert.publicKeyAlgorithm !== 1) {\n            // ec-pub-key\n            throw new CertificateError(`Unsupported public key algorithm: ${cert.publicKeyAlgorithm}`);\n        }\n\n        if (cert.ellipticCurveIdentifier !== 1) {\n            // prime256v1\n            throw new CertificateError(`Unsupported elliptic curve identifier: ${cert.ellipticCurveIdentifier}`);\n        }\n\n        // All implementations SHALL reject Matter certificates with more than 5 RDNs in a single DN.\n        if (Object.keys(cert.subject).length > 5) {\n            throw new CertificateError(`Certificate subject must not contain more than 5 RDNs.`);\n        }\n        if (Object.keys(cert.issuer).length > 5) {\n            throw new CertificateError(`Certificate issuer must not contain more than 5 RDNs.`);\n        }\n\n        // notBefore date should be already reached, notAfter is not checked right now\n        // TODO: implement real checks when we add \"Last known Good UTC time\"\n        if (cert.notBefore * 1000 > Time.nowMs()) {\n            logger.warn(`Certificate notBefore date is in the future: ${cert.notBefore * 1000} vs ${Time.nowMs()}`);\n            /*throw new CertificateError(\n                `Certificate notBefore date is in the future: ${cert.notBefore * 1000} vs ${Time.nowMs()}`,\n            );*/\n        }\n    }\n\n    /**\n     * Verify requirements a Matter Root certificate must fulfill.\n     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} \u00A76.5.x\n     */\n    static verifyRootCertificate(rootCert: RootCertificate) {\n        CertificateManager.validateGeneralCertificateFields(rootCert);\n\n        // The subject DN SHALL NOT encode any matter-node-id attribute.\n        if (\"nodeId\" in rootCert.subject) {\n            throw new CertificateError(`Root certificate must not contain a nodeId.`);\n        }\n\n        // The subject DN MAY encode at most one matter-fabric-id attribute.\n        if (rootCert.subject.fabricId !== undefined) {\n            if (Array.isArray(rootCert.subject.fabricId)) {\n                throw new CertificateError(\n                    `Invalid fabricId in NoC certificate: ${Logger.toJSON(rootCert.subject.fabricId)}`,\n                );\n            }\n            // If present, the matter-fabric-id attribute\u2019s value SHALL NOT be 0\n            if (rootCert.subject.fabricId === FabricId(0)) {\n                throw new CertificateError(\n                    `Invalid fabricId in NoC certificate: ${Logger.toJSON(rootCert.subject.fabricId)}`,\n                );\n            }\n        }\n\n        // The subject DN SHALL NOT encode any matter-icac-id attribute.\n        if (\"icacId\" in rootCert.subject) {\n            throw new CertificateError(`Root certificate must not contain an icacId.`);\n        }\n\n        // The subject DN SHALL encode exactly one matter-rcac-id attribute.\n        if (rootCert.subject.rcacId === undefined || Array.isArray(rootCert.subject.rcacId)) {\n            throw new CertificateError(`Invalid rcacId in Root certificate: ${Logger.toJSON(rootCert.subject.rcacId)}`);\n        }\n\n        // The subject DN SHALL NOT encode any matter-noc-cat attribute.\n        if (\"caseAuthenticatedTags\" in rootCert.subject) {\n            throw new CertificateError(`Root certificate must not contain a caseAuthenticatedTags.`);\n        }\n\n        // The basic constraints extension SHALL be encoded with is-ca set to true.\n        if (rootCert.extensions.basicConstraints.isCa !== true) {\n            throw new CertificateError(`Root certificate must have isCa set to true.`);\n        }\n\n        // The key usage extension SHALL be encoded with exactly two flags: keyCertSign (0x0020) and CRLSign (0x0040).\n        // Formally the check should be the following line but Amazon uses a wrong Root cert which also has\n        // digitalCertificate set, so we just check the the two needed are set and ignore additionally set parameters.\n        //if (ExtensionKeyUsageSchema.encode(rootCert.extensions.keyUsage) !== 0x0060) {\n        if (!rootCert.extensions.keyUsage.keyCertSign || !rootCert.extensions.keyUsage.cRLSign) {\n            throw new CertificateError(`Root certificate keyUsage must have keyCertSign and CRLSign set.`);\n        }\n\n        // The extended key usage extension SHALL NOT be present.\n        if (rootCert.extensions.extendedKeyUsage !== undefined) {\n            throw new CertificateError(`Root certificate must not have extendedKeyUsage set.`);\n        }\n\n        // The subject key identifier extension SHALL be present and 160 bit long.\n        if (rootCert.extensions.subjectKeyIdentifier === undefined) {\n            throw new CertificateError(`Root certificate must have subjectKeyIdentifier set.`);\n        }\n        if (rootCert.extensions.subjectKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Root certificate subjectKeyIdentifier must be 160 bit.`);\n        }\n\n        // The authority key identifier extension SHALL be present and 160 bit long.\n        if (rootCert.extensions.authorityKeyIdentifier === undefined) {\n            throw new CertificateError(`Root certificate must have authorityKeyIdentifier set.`);\n        }\n        if (rootCert.extensions.authorityKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Root certificate authorityKeyIdentifier must be 160 bit.`);\n        }\n\n        // The authority key identifier extension SHALL be equal to the subject key identifier extension.\n        if (!rootCert.extensions.authorityKeyIdentifier.equals(rootCert.extensions.subjectKeyIdentifier)) {\n            throw new CertificateError(\n                `Root certificate authorityKeyIdentifier must be equal to subjectKeyIdentifier.`,\n            );\n        }\n\n        Crypto.verify(PublicKey(rootCert.ellipticCurvePublicKey), this.rootCertToAsn1(rootCert), rootCert.signature);\n    }\n\n    /**\n     * Verify requirements a Matter Node Operational certificate must fulfill.\n     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} \u00A76.5.x\n     */\n    static verifyNodeOperationalCertificate(\n        rootOrIcaCert: RootCertificate | IntermediateCertificate,\n        nocCert: OperationalCertificate,\n    ) {\n        CertificateManager.validateGeneralCertificateFields(nocCert);\n\n        // The subject DN SHALL encode exactly one matter-node-id attribute.\n        if (nocCert.subject.nodeId === undefined || Array.isArray(nocCert.subject.nodeId)) {\n            throw new CertificateError(`Invalid nodeId in NoC certificate: ${Logger.toJSON(nocCert.subject.nodeId)}`);\n        }\n        // The matter-node-id attribute\u2019s value SHALL be in the Operational Node ID\n        if (!NodeId.isOperationalNodeId(nocCert.subject.nodeId)) {\n            throw new CertificateError(`Invalid nodeId in NoC certificate: ${Logger.toJSON(nocCert.subject.nodeId)}`);\n        }\n\n        // The subject DN SHALL encode exactly one matter-fabric-id attribute.\n        if (nocCert.subject.fabricId === undefined || Array.isArray(nocCert.subject.fabricId)) {\n            throw new CertificateError(\n                `Invalid fabricId in NoC certificate: ${Logger.toJSON(nocCert.subject.fabricId)}`,\n            );\n        }\n        // The matter-fabric-id attribute\u2019s value SHALL NOT be 0\n        if (nocCert.subject.fabricId === FabricId(0)) {\n            throw new CertificateError(\n                `Invalid fabricId in NoC certificate: ${Logger.toJSON(nocCert.subject.fabricId)}`,\n            );\n        }\n\n        // The subject DN SHALL NOT encode any matter-icac-id attribute.\n        if (\"icacId\" in nocCert.subject) {\n            throw new CertificateError(`Noc certificate must not contain an icacId.`);\n        }\n\n        // The subject DN SHALL NOT encode any matter-rcac-id attribute.\n        if (\"rcacId\" in nocCert.subject) {\n            throw new CertificateError(`Noc certificate must not contain an rcacId.`);\n        }\n\n        // The subject DN MAY encode at most three matter-noc-cat attributes.\n        if (nocCert.subject.caseAuthenticatedTags !== undefined) {\n            CaseAuthenticatedTag.validateNocTagList(nocCert.subject.caseAuthenticatedTags); // throws ValidationError\n        }\n\n        // When any matter-fabric-id attributes are present in either the Matter Root CA Certificate or the Matter ICA\n        // Certificate, the value SHALL match the one present in the Matter Node Operational Certificate (NOC) within\n        // the same certificate chain.\n        if (\n            rootOrIcaCert.subject.fabricId !== undefined &&\n            rootOrIcaCert.subject.fabricId !== nocCert.subject.fabricId\n        ) {\n            throw new CertificateError(\n                `FabricId in NoC certificate does not match the fabricId in the parent certificate. ${Logger.toJSON(\n                    rootOrIcaCert.subject.fabricId,\n                )} !== ${Logger.toJSON(nocCert.subject.fabricId)}`,\n            );\n        }\n\n        // The basic constraints extension SHALL be encoded with is-ca set to false.\n        if (nocCert.extensions.basicConstraints.isCa) {\n            throw new CertificateError(`Noc certificate must not have isCa set to true.`);\n        }\n\n        // The key usage extension SHALL be encoded with exactly two flags: keyCertSign (0x0020) and CRLSign (0x0040).\n        // Formally the check should be the following line but Amazon uses a wrong Root cert which also has\n        // digitalCertificate set, so we just check the the two needed are set and ignore additionally set parameters.\n        //if (ExtensionKeyUsageSchema.encode(nocCert.extensions.keyUsage) !== 1) {\n        if (!nocCert.extensions.keyUsage.digitalSignature) {\n            throw new CertificateError(`Noc certificate must have keyUsage set to digitalSignature.`);\n        }\n\n        // The extended key usage extension SHALL be encoded with exactly two key-purpose-id values: serverAuth and clientAuth.\n        if (\n            nocCert.extensions.extendedKeyUsage === undefined ||\n            (!nocCert.extensions.extendedKeyUsage.includes(1) && !nocCert.extensions.extendedKeyUsage.includes(2))\n        ) {\n            throw new CertificateError(\n                `Noc certificate must have extendedKeyUsage with serverAuth and clientAuth: ${Logger.toJSON(nocCert.extensions.extendedKeyUsage)}`,\n            );\n        }\n\n        // The subject key identifier extension SHALL be present and 160 bit long.\n        if (nocCert.extensions.subjectKeyIdentifier === undefined) {\n            throw new CertificateError(`Noc certificate must have subjectKeyIdentifier set.`);\n        }\n        if (nocCert.extensions.subjectKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Noc certificate subjectKeyIdentifier must be 160 bit.`);\n        }\n\n        // The authority key identifier extension SHALL be present and 160 bit long.\n        if (nocCert.extensions.authorityKeyIdentifier === undefined) {\n            throw new CertificateError(`Noc certificate must have authorityKeyIdentifier set.`);\n        }\n        if (nocCert.extensions.authorityKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Noc certificate authorityKeyIdentifier must be 160 bit.`);\n        }\n\n        // Validate authority key identifier against subject key identifier\n        if (!nocCert.extensions.authorityKeyIdentifier.equals(rootOrIcaCert.extensions.subjectKeyIdentifier)) {\n            throw new CertificateError(\n                `Noc certificate authorityKeyIdentifier must be equal to Root/Ica subjectKeyIdentifier.`,\n            );\n        }\n\n        Crypto.verify(\n            PublicKey(rootOrIcaCert.ellipticCurvePublicKey),\n            this.nodeOperationalCertToAsn1(nocCert),\n            nocCert.signature,\n        );\n    }\n\n    /**\n     * Verify requirements a Matter Intermediate CA certificate must fulfill.\n     * Rules for this are listed in @see {@link MatterSpecification.v12.Core} \u00A76.5.x\n     */\n    static verifyIntermediateCaCertificate(rootCert: RootCertificate, icaCert: IntermediateCertificate) {\n        CertificateManager.validateGeneralCertificateFields(icaCert);\n\n        // The subject DN SHALL NOT encode any matter-node-id attribute.\n        if (\"nodeId\" in icaCert.subject) {\n            throw new CertificateError(`Ica certificate must not contain a nodeId.`);\n        }\n\n        // The subject DN MAY encode at most one matter-fabric-id attribute.\n        if (icaCert.subject.fabricId !== undefined) {\n            if (Array.isArray(icaCert.subject.fabricId)) {\n                throw new CertificateError(\n                    `Invalid fabricId in NoC certificate: ${Logger.toJSON(icaCert.subject.fabricId)}`,\n                );\n            }\n            // If present, the matter-fabric-id attribute\u2019s value SHALL NOT be 0\n            if (icaCert.subject.fabricId === FabricId(0)) {\n                throw new CertificateError(\n                    `Invalid fabricId in NoC certificate: ${Logger.toJSON(icaCert.subject.fabricId)}`,\n                );\n            }\n            // If present on root certificate fabric-id needs to match with Ica fabric Id\n            if (rootCert.subject.fabricId !== icaCert.subject.fabricId) {\n                throw new CertificateError(\n                    `FabricId in Ica certificate does not match the fabricId in the parent certificate. ${Logger.toJSON(\n                        rootCert.subject.fabricId,\n                    )} !== ${Logger.toJSON(icaCert.subject.fabricId)}`,\n                );\n            }\n        }\n\n        // The subject DN SHALL encode exactly one matter-icac-id attribute.\n        if (icaCert.subject.icacId === undefined || Array.isArray(icaCert.subject.icacId)) {\n            throw new CertificateError(`Invalid icacId in Ica certificate: ${Logger.toJSON(icaCert.subject.icacId)}`);\n        }\n\n        // The subject DN SHALL NOT encode any matter-rcac-id attribute.\n        if (\"rcacId\" in icaCert.subject) {\n            throw new CertificateError(`Ica certificate must not contain an rcacId.`);\n        }\n\n        // The subject DN SHALL NOT encode any matter-noc-cat attribute.\n        if (\"caseAuthenticatedTags\" in icaCert.subject) {\n            throw new CertificateError(`Ica certificate must not contain a caseAuthenticatedTags.`);\n        }\n\n        // When any matter-fabric-id attributes are present in either the Matter Root CA Certificate or the Matter ICA\n        // Certificate, the value SHALL match the one present in the Matter Node Operational Certificate (NOC) within\n        // the same certificate chain.\n        if (rootCert.subject.fabricId !== icaCert.subject.fabricId) {\n            throw new CertificateError(\n                `FabricId in Ica certificate does not match the fabricId in the parent certificate. ${Logger.toJSON(\n                    rootCert.subject.fabricId,\n                )} !== ${Logger.toJSON(icaCert.subject.fabricId)}`,\n            );\n        }\n\n        // Verify the certificate chain by checking rcac ids in subject and issuer\n        if (rootCert.subject.rcacId !== icaCert.issuer.rcacId) {\n            throw new CertificateError(\n                `RcacId in Ica certificate does not match the rcacId in the parent certificate. ${Logger.toJSON(\n                    rootCert.subject.rcacId,\n                )} !== ${Logger.toJSON(icaCert.issuer.rcacId)}`,\n            );\n        }\n\n        // The basic constraints extension SHALL be encoded with is-ca set to true.\n        if (!icaCert.extensions.basicConstraints.isCa) {\n            throw new CertificateError(`Ica certificate must have isCa set to true.`);\n        }\n\n        // The key usage extension SHALL be encoded with exactly two flags: keyCertSign (0x0020) and CRLSign (0x0040).\n        // Formally the check should be the following line but Amazon uses a wrong Root cert which also has\n        // digitalCertificate set, so we just check the the two needed are set and ignore additionally set parameters.\n        //if (ExtensionKeyUsageSchema.encode(icaCert.extensions.keyUsage) !== 0x0060) {\n        if (!icaCert.extensions.keyUsage.keyCertSign || !icaCert.extensions.keyUsage.cRLSign) {\n            throw new CertificateError(`Ica certificate must have keyUsage set to keyCertSign and CRLSign.`);\n        }\n\n        // The extended key usage extension SHALL NOT be present.\n        if (icaCert.extensions.extendedKeyUsage !== undefined) {\n            throw new CertificateError(`Ica certificate must not have extendedKeyUsage set.`);\n        }\n\n        // The subject key identifier extension SHALL be present and 160 bit long.\n        if (icaCert.extensions.subjectKeyIdentifier === undefined) {\n            throw new CertificateError(`Ica certificate must have subjectKeyIdentifier set.`);\n        }\n        if (icaCert.extensions.subjectKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Ica certificate subjectKeyIdentifier must be 160 bit.`);\n        }\n\n        // The authority key identifier extension SHALL be present and 160 bit long.\n        if (icaCert.extensions.authorityKeyIdentifier === undefined) {\n            throw new CertificateError(`Ica certificate must have authorityKeyIdentifier set.`);\n        }\n        if (icaCert.extensions.authorityKeyIdentifier.length !== 20) {\n            throw new CertificateError(`Ica certificate authorityKeyIdentifier must be 160 bit.`);\n        }\n\n        // Validate authority key identifier against subject key identifier\n        if (!icaCert.extensions.authorityKeyIdentifier.equals(rootCert.extensions.subjectKeyIdentifier)) {\n            throw new CertificateError(\n                `Ica certificate authorityKeyIdentifier must be equal to root cert subjectKeyIdentifier.`,\n            );\n        }\n\n        Crypto.verify(\n            PublicKey(rootCert.ellipticCurvePublicKey),\n            this.intermediateCaCertToAsn1(icaCert),\n            icaCert.signature,\n        );\n    }\n\n    static createCertificateSigningRequest(key: Key) {\n        const request = {\n            version: 0,\n            subject: { organization: X520.OrganisationName(\"CSR\") },\n            publicKey: X962.PublicKeyEcPrime256v1(key.publicKey),\n            endSignedBytes: ContextTagged(0),\n        };\n\n        return DerCodec.encode({\n            request,\n            signAlgorithm: X962.EcdsaWithSHA256,\n            signature: BitByteArray(Crypto.sign(key, DerCodec.encode(request), \"der\")),\n        });\n    }\n\n    static getPublicKeyFromCsr(csr: ByteArray) {\n        const { [ELEMENTS_KEY]: rootElements } = DerCodec.decode(csr);\n        if (rootElements?.length !== 3) throw new CertificateError(\"Invalid CSR data\");\n        const [requestNode, signAlgorithmNode, signatureNode] = rootElements;\n\n        // Extract the public key\n        const { [ELEMENTS_KEY]: requestElements } = requestNode;\n        if (requestElements?.length !== 4) throw new CertificateError(\"Invalid CSR data\");\n        const [versionNode, _subjectNode, publicKeyNode] = requestElements;\n        const requestVersion = versionNode[BYTES_KEY][0];\n        if (requestVersion !== 0) throw new CertificateError(`Unsupported request version${requestVersion}`);\n        // TODO: verify subject = { OrganisationName: \"CSR\" }\n\n        const { [ELEMENTS_KEY]: publicKeyElements } = publicKeyNode;\n        if (publicKeyElements?.length !== 2) throw new CertificateError(\"Invalid CSR data\");\n        const [_publicKeyTypeNode, publicKeyBytesNode] = publicKeyElements;\n        // TODO: verify publicKey algorithm\n        const publicKey = publicKeyBytesNode[BYTES_KEY];\n\n        // Verify the CSR signature\n        if (!X962.EcdsaWithSHA256[OBJECT_ID_KEY][BYTES_KEY].equals(signAlgorithmNode[ELEMENTS_KEY]?.[0]?.[BYTES_KEY]))\n            throw new CertificateError(\"Unsupported signature type\");\n        Crypto.verify(PublicKey(publicKey), DerCodec.encode(requestNode), signatureNode[BYTES_KEY], \"der\");\n\n        return publicKey;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
