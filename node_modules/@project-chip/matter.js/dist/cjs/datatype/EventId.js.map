{
  "version": 3,
  "sources": ["../../../src/datatype/EventId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\n\n/**\n * An EVent ID is a 32 bit number and indicates an event defined in a cluster specification.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.18.2.17\n */\nexport type EventId = Branded<number, \"EventId\">;\n\nexport function EventId(eventId: number, validate = true): EventId {\n    if (!validate) {\n        return eventId as EventId;\n    }\n    const { typeSuffix } = Mei.fromMei(eventId);\n    if (typeSuffix >= 0x00 && typeSuffix <= 0xff) {\n        return eventId as EventId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid event ID: ${eventId}`);\n}\n\nexport namespace EventId {\n    export const isValid = validatorOf(EventId);\n}\n\n/** Tlv schema for an Event Id. */\nexport const TlvEventId = new TlvWrapper<EventId, number>(\n    TlvUInt32,\n    eventId => eventId,\n    value => EventId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,6BAAwD;AACxD,uBAA0B;AAC1B,wBAA2B;AAE3B,8CAAoB;AAVpB;AAAA;AAAA;AAAA;AAAA;AAmBO,SAAS,QAAQ,SAAiB,WAAW,MAAe;AAC/D,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,QAAM,EAAE,WAAW,IAAI,4CAAI,QAAQ,OAAO;AAC1C,MAAI,cAAc,KAAQ,cAAc,KAAM;AAC1C,WAAO;AAAA,EACX;AACA,QAAM,IAAI,kDAA2B,qBAAqB,OAAO,EAAE;AACvE;AAAA,CAEO,CAAUA,aAAV;AACI,EAAMA,SAAA,cAAU,oCAAYA,QAAO;AAAA,GAD7B;AAKV,MAAM,aAAa,IAAI;AAAA,EAC1B;AAAA,EACA,aAAW;AAAA,EACX,WAAS,QAAQ,OAAO,KAAK;AAAA;AACjC;",
  "names": ["EventId"]
}
