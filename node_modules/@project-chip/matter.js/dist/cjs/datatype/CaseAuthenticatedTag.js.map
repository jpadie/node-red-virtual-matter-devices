{
  "version": 3,
  "sources": ["../../../src/datatype/CaseAuthenticatedTag.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\n\n/**\n * A CASE Authenticated Tag (CAT) is a special subject distinguished name within the Operational Certificate.\n *\n * @see {@link MatterSpecification.v12.Core} \u00A7 6.6.2.1.2.\n */\nexport type CaseAuthenticatedTag = Branded<number, \"CaseAuthenticatedTag\">;\n\nexport function CaseAuthenticatedTag(id: number): CaseAuthenticatedTag {\n    if ((id & 0xffff) === 0) {\n        throw new ValidationOutOfBoundsError(\"CaseAuthenticatedTag version number must not be 0.\");\n    }\n    return id as CaseAuthenticatedTag;\n}\n\nexport namespace CaseAuthenticatedTag {\n    export const getIdentifyValue = (tag: CaseAuthenticatedTag) => tag >>> 16;\n\n    export const getVersion = (tag: CaseAuthenticatedTag) => tag & 0xffff;\n\n    export const increaseVersion = (tag: CaseAuthenticatedTag) => {\n        const version = getVersion(tag);\n        if (version === 0xffff) {\n            throw new ValidationOutOfBoundsError(\"CaseAuthenticatedTag version number must not exceed 0xffff.\");\n        }\n        return CaseAuthenticatedTag(tag + 1);\n    };\n\n    export const validateNocTagList = (tags: CaseAuthenticatedTag[]) => {\n        if (tags.length > 3) {\n            throw new ValidationOutOfBoundsError(`Too many CaseAuthenticatedTags (${tags.length}).`);\n        }\n        // Get only the tags: upper 16 bits are identifier value, lower 16 bits are tag version\n        const tagIdentifierValues = new Set<number>(tags.map(cat => CaseAuthenticatedTag.getIdentifyValue(cat)));\n        if (tagIdentifierValues.size !== tags.length) {\n            throw new ValidationOutOfBoundsError(\"CASEAuthenticatedTags field contains duplicate identifier values.\");\n        }\n    };\n}\n\n/** Tlv schema for an CASE Authenticated Tag. */\nclass TlvCaseAuthenticatedTagSchema extends TlvWrapper<CaseAuthenticatedTag, number> {\n    constructor() {\n        super(\n            TlvUInt32,\n            caseAuthenticatedTag => caseAuthenticatedTag,\n            value => CaseAuthenticatedTag(value),\n        );\n    }\n\n    override validate(value: CaseAuthenticatedTag) {\n        super.validate(value);\n\n        // verify that lower 16 bit are not 0\n        if ((value & 0xffff) === 0) {\n            throw new ValidationOutOfBoundsError(\"CaseAuthenticatedTag version number must not be 0.\");\n        }\n    }\n}\n\nexport const TlvCaseAuthenticatedTag = new TlvCaseAuthenticatedTagSchema();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,6BAA2C;AAC3C,uBAA0B;AAC1B,wBAA2B;AAR3B;AAAA;AAAA;AAAA;AAAA;AAkBO,SAAS,qBAAqB,IAAkC;AACnE,OAAK,KAAK,WAAY,GAAG;AACrB,UAAM,IAAI,kDAA2B,oDAAoD;AAAA,EAC7F;AACA,SAAO;AACX;AAAA,CAEO,CAAUA,0BAAV;AACI,EAAMA,sBAAA,mBAAmB,CAAC,QAA8B,QAAQ;AAEhE,EAAMA,sBAAA,aAAa,CAAC,QAA8B,MAAM;AAExD,EAAMA,sBAAA,kBAAkB,CAAC,QAA8B;AAC1D,UAAM,cAAUA,sBAAA,YAAW,GAAG;AAC9B,QAAI,YAAY,OAAQ;AACpB,YAAM,IAAI,kDAA2B,6DAA6D;AAAA,IACtG;AACA,WAAOA,sBAAqB,MAAM,CAAC;AAAA,EACvC;AAEO,EAAMA,sBAAA,qBAAqB,CAAC,SAAiC;AAChE,QAAI,KAAK,SAAS,GAAG;AACjB,YAAM,IAAI,kDAA2B,mCAAmC,KAAK,MAAM,IAAI;AAAA,IAC3F;AAEA,UAAM,sBAAsB,IAAI,IAAY,KAAK,IAAI,SAAOA,sBAAqB,iBAAiB,GAAG,CAAC,CAAC;AACvG,QAAI,oBAAoB,SAAS,KAAK,QAAQ;AAC1C,YAAM,IAAI,kDAA2B,mEAAmE;AAAA,IAC5G;AAAA,EACJ;AAAA,GAtBa;AA0BjB,MAAM,sCAAsC,6BAAyC;AAAA,EACjF,cAAc;AACV;AAAA,MACI;AAAA,MACA,0BAAwB;AAAA,MACxB,WAAS,qBAAqB,KAAK;AAAA,IACvC;AAAA,EACJ;AAAA,EAES,SAAS,OAA6B;AAC3C,UAAM,SAAS,KAAK;AAGpB,SAAK,QAAQ,WAAY,GAAG;AACxB,YAAM,IAAI,kDAA2B,oDAAoD;AAAA,IAC7F;AAAA,EACJ;AACJ;AAEO,MAAM,0BAA0B,IAAI,8BAA8B;",
  "names": ["CaseAuthenticatedTag"]
}
