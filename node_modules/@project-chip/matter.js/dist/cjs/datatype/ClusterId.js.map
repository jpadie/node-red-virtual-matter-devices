{
  "version": 3,
  "sources": ["../../../src/datatype/ClusterId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationError, ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\nimport { VendorId } from \"./VendorId.js\";\n\n/**\n * A Cluster Identifier is a 32 bit number and SHALL reference a single cluster specification and\n * SHALL define conformance to that specification.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.10\n */\nexport type ClusterId = Branded<number, \"ClusterId\">;\n\nexport function ClusterId(clusterId: number, validate = true): ClusterId {\n    if (!validate) {\n        return clusterId as ClusterId;\n    }\n    const { vendorPrefix, typeSuffix } = Mei.fromMei(clusterId);\n    if (\n        (typeSuffix >= 0 && typeSuffix <= 0x7fff && vendorPrefix === 0) || // Standard cluster\n        (typeSuffix >= 0xfc00 && typeSuffix <= 0xfffe && vendorPrefix !== 0) // Manufacturer specific cluster\n    ) {\n        return clusterId as ClusterId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid cluster ID: ${clusterId}`);\n}\n\nexport namespace ClusterId {\n    export const isVendorSpecific = (clusterId: ClusterId): boolean => {\n        try {\n            const { vendorPrefix } = Mei.fromMei(clusterId);\n            return vendorPrefix !== 0;\n        } catch (e) {\n            ValidationError.accept(e);\n            return false;\n        }\n    };\n\n    export const isValid = validatorOf(ClusterId);\n\n    export const buildVendorSpecific = (vendorPrefix: VendorId, clusterSuffix: number) => {\n        return ClusterId(Mei.asMei(vendorPrefix, clusterSuffix));\n    };\n}\n\n/** Tlv schema for a cluster Id. */\nexport const TlvClusterId = new TlvWrapper<ClusterId, number>(\n    TlvUInt32,\n    clusterId => clusterId,\n    value => ClusterId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,6BAAyE;AACzE,uBAA0B;AAC1B,wBAA2B;AAE3B,8CAAoB;AAVpB;AAAA;AAAA;AAAA;AAAA;AAqBO,SAAS,UAAU,WAAmB,WAAW,MAAiB;AACrE,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,QAAM,EAAE,cAAc,WAAW,IAAI,4CAAI,QAAQ,SAAS;AAC1D,MACK,cAAc,KAAK,cAAc,SAAU,iBAAiB;AAAA,EAC5D,cAAc,SAAU,cAAc,SAAU,iBAAiB,GACpE;AACE,WAAO;AAAA,EACX;AACA,QAAM,IAAI,kDAA2B,uBAAuB,SAAS,EAAE;AAC3E;AAAA,CAEO,CAAUA,eAAV;AACI,EAAMA,WAAA,mBAAmB,CAAC,cAAkC;AAC/D,QAAI;AACA,YAAM,EAAE,aAAa,IAAI,4CAAI,QAAQ,SAAS;AAC9C,aAAO,iBAAiB;AAAA,IAC5B,SAAS,GAAG;AACR,6CAAgB,OAAO,CAAC;AACxB,aAAO;AAAA,IACX;AAAA,EACJ;AAEO,EAAMA,WAAA,cAAU,oCAAYA,UAAS;AAErC,EAAMA,WAAA,sBAAsB,CAAC,cAAwB,kBAA0B;AAClF,WAAOA,WAAU,4CAAI,MAAM,cAAc,aAAa,CAAC;AAAA,EAC3D;AAAA,GAfa;AAmBV,MAAM,eAAe,IAAI;AAAA,EAC5B;AAAA,EACA,eAAa;AAAA,EACb,WAAS,UAAU,OAAO,KAAK;AAAA;AACnC;",
  "names": ["ClusterId"]
}
