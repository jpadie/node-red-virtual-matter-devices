{
  "version": 3,
  "sources": ["../../../src/tlv/TlvBoolean.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\nimport { ValidationDatatypeMismatchError } from \"../common/ValidationError.js\";\nimport { TlvTag, TlvType, TlvTypeLength } from \"./TlvCodec.js\";\nimport { TlvReader, TlvSchema, TlvWriter } from \"./TlvSchema.js\";\n\n/**\n * Schema to encode a boolean in TLV.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 A.11.3\n */\nexport class BooleanSchema extends TlvSchema<boolean> {\n    override encodeTlvInternal(writer: TlvWriter, value: boolean, tag?: TlvTag): void {\n        writer.writeTag({ type: TlvType.Boolean, value }, tag);\n    }\n\n    override decodeTlvInternalValue(_reader: TlvReader, typeLength: TlvTypeLength) {\n        if (typeLength.type !== TlvType.Boolean) throw new UnexpectedDataError(`Unexpected type ${typeLength.type}.`);\n        return typeLength.value;\n    }\n\n    override validate(value: boolean): void {\n        if (typeof value !== \"boolean\")\n            throw new ValidationDatatypeMismatchError(`Expected boolean, got ${typeof value}.`);\n    }\n}\n\n/** Boolean TLV schema. */\nexport const TlvBoolean = new BooleanSchema();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAoC;AACpC,6BAAgD;AAChD,sBAA+C;AAC/C,uBAAgD;AAThD;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,sBAAsB,2BAAmB;AAAA,EACzC,kBAAkB,QAAmB,OAAgB,KAAoB;AAC9E,WAAO,SAAS,EAAE,MAAM,wBAAQ,SAAS,MAAM,GAAG,GAAG;AAAA,EACzD;AAAA,EAES,uBAAuB,SAAoB,YAA2B;AAC3E,QAAI,WAAW,SAAS,wBAAQ,QAAS,OAAM,IAAI,uCAAoB,mBAAmB,WAAW,IAAI,GAAG;AAC5G,WAAO,WAAW;AAAA,EACtB;AAAA,EAES,SAAS,OAAsB;AACpC,QAAI,OAAO,UAAU;AACjB,YAAM,IAAI,uDAAgC,yBAAyB,OAAO,KAAK,GAAG;AAAA,EAC1F;AACJ;AAGO,MAAM,aAAa,IAAI,cAAc;",
  "names": []
}
