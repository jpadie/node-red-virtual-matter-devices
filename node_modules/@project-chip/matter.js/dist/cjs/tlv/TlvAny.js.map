{
  "version": 3,
  "sources": ["../../../src/tlv/TlvAny.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\nimport { ValidationDatatypeMismatchError } from \"../common/ValidationError.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { TlvCodec, TlvTag, TlvType, TlvTypeLength } from \"./TlvCodec.js\";\nimport { TlvArrayReader, TlvElement, TlvReader, TlvSchema, TlvStream, TlvWriter } from \"./TlvSchema.js\";\n\nexport class AnySchema extends TlvSchema<TlvStream> {\n    getEncodedByteLength(tlvStream: TlvStream): number {\n        let byteLength = 0;\n        tlvStream.forEach(({ tag, typeLength, value }) => {\n            switch (typeLength.type) {\n                case TlvType.Null:\n                case TlvType.Boolean:\n                case TlvType.Array:\n                case TlvType.Structure:\n                case TlvType.List:\n                case TlvType.EndOfContainer:\n                    byteLength += TlvCodec.getTagByteLength(tag);\n                    break;\n                case TlvType.UnsignedInt:\n                case TlvType.SignedInt:\n                case TlvType.Float:\n                case TlvType.Utf8String:\n                case TlvType.ByteString:\n                    byteLength += TlvCodec.getTagByteLength(tag);\n                    byteLength += TlvCodec.getPrimitiveByteLength(typeLength, value);\n                    break;\n            }\n        });\n        return byteLength;\n    }\n\n    override encodeTlvInternal(writer: TlvWriter, tlvStream: TlvStream, tagAssigned?: TlvTag): void {\n        tlvStream.forEach(({ tag, typeLength, value }) => {\n            if (tagAssigned !== undefined) {\n                // Assign the tag to the 1st TLV element in the stream\n                tag = tagAssigned;\n                tagAssigned = undefined;\n            }\n            switch (typeLength.type) {\n                case TlvType.Null:\n                case TlvType.Boolean:\n                case TlvType.Array:\n                case TlvType.Structure:\n                case TlvType.List:\n                case TlvType.EndOfContainer:\n                    writer.writeTag(typeLength, tagAssigned ?? tag);\n                    break;\n                case TlvType.UnsignedInt:\n                case TlvType.SignedInt:\n                case TlvType.Float:\n                case TlvType.Utf8String:\n                case TlvType.ByteString:\n                    writer.writeTag(typeLength, tagAssigned ?? tag);\n                    writer.writePrimitive(typeLength, value);\n                    break;\n            }\n        });\n    }\n\n    override decodeTlvInternalValue(reader: TlvReader, typeLength: TlvTypeLength): TlvStream {\n        return this.decodeTlvValueRec(reader, typeLength, new Array<TlvElement<any>>());\n    }\n\n    decodeTlvValueRec(reader: TlvReader, typeLength: TlvTypeLength, tlvStream: TlvStream, tag?: TlvTag) {\n        switch (typeLength.type) {\n            case TlvType.Null:\n                tlvStream.push({ tag, typeLength, value: null });\n                break;\n            case TlvType.Boolean:\n            case TlvType.UnsignedInt:\n            case TlvType.SignedInt:\n            case TlvType.Float:\n            case TlvType.Utf8String:\n            case TlvType.ByteString:\n                tlvStream.push({ tag, typeLength, value: reader.readPrimitive(typeLength) });\n                break;\n            case TlvType.Array:\n            case TlvType.Structure:\n            case TlvType.List:\n                tlvStream.push({ tag, typeLength });\n                while (true) {\n                    const { tag: elementTag, typeLength: typeLengthElement } = reader.readTagType();\n                    this.decodeTlvValueRec(reader, typeLengthElement, tlvStream, elementTag);\n                    if (typeLengthElement.type === TlvType.EndOfContainer) break;\n                }\n                break;\n            case TlvType.EndOfContainer:\n                tlvStream.push({ tag, typeLength });\n                break;\n        }\n        return tlvStream;\n    }\n\n    override validate(tlvStream: TlvStream): void {\n        if (!Array.isArray(tlvStream))\n            throw new ValidationDatatypeMismatchError(`Expected TlvStream, got ${typeof tlvStream}.`);\n        tlvStream.forEach(({ typeLength }) => {\n            if (!typeLength || typeof typeLength !== \"object\")\n                throw new ValidationDatatypeMismatchError(\n                    `Expected typeLength properties in TlvStream, got ${typeof typeLength}.`,\n                );\n            if (typeof typeLength.type !== \"number\")\n                throw new ValidationDatatypeMismatchError(\n                    `Expected typeLength.type as number in TlvStream, got ${typeof typeLength.type}.`,\n                );\n        });\n    }\n\n    decodeAnyTlvStream(encoded: TlvStream) {\n        if (encoded.length === 0) {\n            return undefined;\n        }\n        const reader = new TlvArrayReader(encoded);\n        const result = this.decodeGenericElement(reader);\n        const nextElement = reader.readTagType();\n        if (nextElement !== undefined) {\n            throw new UnexpectedDataError(`Unexpected data left after parsing all data: ${Logger.toJSON(nextElement)}`);\n        }\n        return result;\n    }\n\n    decodeGenericElement(reader: TlvArrayReader, preReadElement?: TlvElement<any>, allowTag = false) {\n        while (true) {\n            const element = preReadElement ?? reader.readTagType();\n            const {\n                tag,\n                typeLength: { type },\n            } = element;\n\n            switch (type) {\n                case TlvType.Null:\n                case TlvType.Boolean:\n                case TlvType.UnsignedInt:\n                case TlvType.SignedInt:\n                case TlvType.Float:\n                case TlvType.Utf8String:\n                case TlvType.ByteString: {\n                    if (tag !== undefined && !allowTag) {\n                        throw new UnexpectedDataError(\n                            `Tag detected or invalid length for a native type: ${Logger.toJSON(element)}`,\n                        );\n                    }\n                    return reader.readPrimitive(element.typeLength);\n                }\n                case TlvType.Array:\n                case TlvType.List: {\n                    return this.decodeGenericArrayOrList(reader);\n                }\n                case TlvType.Structure: {\n                    return this.decodeGenericStructure(reader);\n                }\n                default:\n                    throw new UnexpectedDataError(`Unknown type: ${type}`);\n            }\n        }\n    }\n\n    decodeGenericArrayOrList(reader: TlvArrayReader) {\n        const result = new Array<any>();\n        while (true) {\n            const element = reader.readTagType();\n            const {\n                tag,\n                typeLength: { type },\n            } = element;\n            if (type === TlvType.EndOfContainer) break;\n            if (tag !== undefined) {\n                throw new UnexpectedDataError(\n                    `Tag detected or invalid length for a native type: ${Logger.toJSON(element)}`,\n                );\n            }\n            result.push(this.decodeGenericElement(reader, element));\n        }\n        return result;\n    }\n\n    decodeGenericStructure(reader: TlvArrayReader) {\n        const result: { [key: string]: any } = {};\n        while (true) {\n            const element = reader.readTagType();\n            const {\n                tag,\n                typeLength: { type },\n            } = element;\n            if (type === TlvType.EndOfContainer) break;\n            if (tag === undefined || tag.id === undefined) {\n                throw new UnexpectedDataError(\n                    `Tag not detected or invalid length for a structure: ${Logger.toJSON(element)}`,\n                );\n            }\n            result[tag.id] = this.decodeGenericElement(reader, element, true);\n        }\n        return result;\n    }\n}\n\nexport const TlvAny = new AnySchema();\n"],
  "mappings": "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",
  "names": []
}
