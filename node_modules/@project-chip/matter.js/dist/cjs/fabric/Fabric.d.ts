/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Cluster } from "../cluster/Cluster.js";
import { GroupKeyManagement } from "../cluster/definitions/GroupKeyManagementCluster.js";
import { MatterError } from "../common/MatterError.js";
import { BinaryKeyPair, Key, PrivateKey } from "../crypto/Key.js";
import { FabricId } from "../datatype/FabricId.js";
import { FabricIndex } from "../datatype/FabricIndex.js";
import { NodeId } from "../datatype/NodeId.js";
import { VendorId } from "../datatype/VendorId.js";
import { SecureSession } from "../session/SecureSession.js";
import { SupportedStorageTypes } from "../storage/StringifyTools.js";
import { ByteArray } from "../util/ByteArray.js";
import { MaybePromise } from "../util/Promises.js";
export declare class PublicKeyError extends MatterError {
}
export type FabricJsonObject = {
    fabricIndex: FabricIndex;
    fabricId: FabricId;
    nodeId: NodeId;
    rootNodeId: NodeId;
    operationalId: ByteArray;
    rootPublicKey: ByteArray;
    keyPair: BinaryKeyPair;
    rootVendorId: VendorId;
    rootCert: ByteArray;
    identityProtectionKey: ByteArray;
    operationalIdentityProtectionKey: ByteArray;
    intermediateCACert: ByteArray | undefined;
    operationalCert: ByteArray;
    label: string;
    scopedClusterData: Map<number, Map<string, SupportedStorageTypes>>;
};
export type ExposedFabricInformation = {
    fabricIndex: FabricIndex;
    fabricId: FabricId;
    nodeId: NodeId;
    rootNodeId: NodeId;
    rootVendorId: VendorId;
    label: string;
};
export declare class Fabric {
    #private;
    readonly fabricIndex: FabricIndex;
    readonly fabricId: FabricId;
    readonly nodeId: NodeId;
    readonly rootNodeId: NodeId;
    readonly operationalId: ByteArray;
    readonly rootPublicKey: ByteArray;
    readonly rootVendorId: VendorId;
    readonly rootCert: ByteArray;
    readonly identityProtectionKey: ByteArray;
    readonly operationalIdentityProtectionKey: ByteArray;
    readonly intermediateCACert: ByteArray | undefined;
    readonly operationalCert: ByteArray;
    label: string;
    constructor(fabricIndex: FabricIndex, fabricId: FabricId, nodeId: NodeId, rootNodeId: NodeId, operationalId: ByteArray, rootPublicKey: ByteArray, keyPair: Key, rootVendorId: VendorId, rootCert: ByteArray, identityProtectionKey: ByteArray, operationalIdentityProtectionKey: ByteArray, intermediateCACert: ByteArray | undefined, operationalCert: ByteArray, label: string, scopedClusterData?: Map<number, Map<string, SupportedStorageTypes>>);
    toStorageObject(): FabricJsonObject;
    static createFromStorageObject(fabricObject: FabricJsonObject): Fabric;
    setLabel(label: string): Promise<void>;
    get publicKey(): Uint8Array;
    sign(data: ByteArray): Uint8Array;
    verifyCredentials(operationalCert: ByteArray, intermediateCACert?: ByteArray): void;
    matchesFabricIdAndRootPublicKey(fabricId: FabricId, rootPublicKey: ByteArray): boolean;
    matchesKeyPair(keyPair: Key): boolean;
    getDestinationId(nodeId: NodeId, random: ByteArray): Uint8Array;
    addSession(session: SecureSession<any>): void;
    removeSession(session: SecureSession<any>): void;
    addRemoveCallback(callback: () => MaybePromise<void>): void;
    deleteRemoveCallback(callback: () => MaybePromise<void>): void;
    set persistCallback(callback: (isUpdate?: boolean) => MaybePromise<void>);
    remove(currentSessionId?: number): Promise<void>;
    persist(isUpdate?: boolean): MaybePromise<void> | undefined;
    getScopedClusterDataValue<T>(cluster: Cluster<any, any, any, any, any>, clusterDataKey: string): T | undefined;
    setScopedClusterDataValue<T>(cluster: Cluster<any, any, any, any, any>, clusterDataKey: string, value: T): MaybePromise<void> | undefined;
    deleteScopedClusterDataValue(cluster: Cluster<any, any, any, any, any>, clusterDataKey: string): MaybePromise<void>;
    hasScopedClusterDataValue(cluster: Cluster<any, any, any, any, any>, clusterDataKey: string): any;
    deleteScopedClusterData(cluster: Cluster<any, any, any, any, any>): MaybePromise<void> | undefined;
    getScopedClusterDataKeys(cluster: Cluster<any, any, any, any, any>): string[];
    getGroupKeySet(groupKeySetId: number): import("../tlv/TlvObject.js").TypeFromFields<{
        groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
        groupKeySecurityPolicy: import("../tlv/TlvObject.js").FieldType<GroupKeyManagement.GroupKeySecurityPolicy>;
        epochKey0: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime0: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        epochKey1: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime1: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        epochKey2: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime2: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        groupKeyMulticastPolicy: import("../tlv/TlvObject.js").OptionalFieldType<GroupKeyManagement.GroupKeyMulticastPolicy>;
    }> | undefined;
    private getGroupSetForIpk;
    getAllGroupKeySets(): import("../tlv/TlvObject.js").TypeFromFields<{
        groupKeySetId: import("../tlv/TlvObject.js").FieldType<number>;
        groupKeySecurityPolicy: import("../tlv/TlvObject.js").FieldType<GroupKeyManagement.GroupKeySecurityPolicy>;
        epochKey0: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime0: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        epochKey1: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime1: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        epochKey2: import("../tlv/TlvObject.js").FieldType<Uint8Array | null>;
        epochStartTime2: import("../tlv/TlvObject.js").FieldType<number | bigint | null>;
        groupKeyMulticastPolicy: import("../tlv/TlvObject.js").OptionalFieldType<GroupKeyManagement.GroupKeyMulticastPolicy>;
    }>[];
    get externalInformation(): ExposedFabricInformation;
}
export declare class FabricBuilder {
    #private;
    get publicKey(): Uint8Array;
    get fabricIndex(): FabricIndex | undefined;
    createCertificateSigningRequest(): Uint8Array;
    setRootCert(rootCert: ByteArray): this;
    get rootCert(): Uint8Array | undefined;
    hasRootCert(): boolean;
    setOperationalCert(operationalCert: ByteArray, intermediateCACert?: ByteArray): this;
    setRootVendorId(rootVendorId: VendorId): this;
    setRootNodeId(rootNodeId: NodeId): this;
    setIdentityProtectionKey(key: ByteArray): this;
    initializeFromFabricForUpdate(fabric: Fabric): void;
    matchesToFabric(fabric: Fabric): boolean;
    get nodeId(): NodeId | undefined;
    get fabricId(): FabricId | undefined;
    get keyPair(): PrivateKey;
    build(fabricIndex: FabricIndex): Promise<Fabric>;
}
//# sourceMappingURL=Fabric.d.ts.map