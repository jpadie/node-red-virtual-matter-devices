{
  "version": 3,
  "sources": ["../../../src/fabric/FabricManager.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InternalError, MatterError, MatterFlowError } from \"../common/MatterError.js\";\nimport { Key } from \"../crypto/Key.js\";\nimport { FabricIndex } from \"../datatype/FabricIndex.js\";\nimport { StorageContext } from \"../storage/StorageContext.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { Observable } from \"../util/Observable.js\";\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { Fabric, FabricJsonObject } from \"./Fabric.js\";\n\n/** Specific Error for when a fabric is not found. */\nexport class FabricNotFoundError extends MatterError {}\nexport class FabricTableFullError extends MatterError {}\n\nexport enum FabricAction {\n    Added,\n    Removed,\n    Updated,\n}\n\nexport class FabricManager {\n    #nextFabricIndex = 1;\n    readonly #fabrics = new Map<FabricIndex, Fabric>();\n    #initializationDone = false;\n    #fabricStorage: StorageContext;\n    #events = {\n        added: Observable<[fabric: Fabric]>(),\n        updated: Observable<[fabric: Fabric]>(),\n        deleted: Observable<[fabric: Fabric]>(),\n        failsafeClosed: Observable<[]>(),\n    };\n\n    constructor(fabricStorage: StorageContext) {\n        this.#fabricStorage = fabricStorage;\n    }\n\n    async initFromStorage() {\n        const fabrics = await this.#fabricStorage.get<FabricJsonObject[]>(\"fabrics\", []);\n        fabrics.forEach(fabric => this.addFabric(Fabric.createFromStorageObject(fabric)));\n        this.#nextFabricIndex = await this.#fabricStorage.get(\"nextFabricIndex\", this.#nextFabricIndex);\n        this.#initializationDone = true;\n    }\n\n    get events() {\n        return this.#events;\n    }\n\n    getNextFabricIndex() {\n        for (let i = 0; i < 254; i++) {\n            const fabricIndex = this.#nextFabricIndex++;\n            if (this.#nextFabricIndex > 254) this.#nextFabricIndex = 1;\n            if (!this.#fabrics.has(FabricIndex(fabricIndex))) {\n                return FabricIndex(fabricIndex);\n            }\n        }\n        throw new FabricTableFullError(\"No free fabric index available.\");\n    }\n\n    persistFabrics(): MaybePromise<void> {\n        const storeResult = this.#fabricStorage.set(\n            \"fabrics\",\n            Array.from(this.#fabrics.values()).map(fabric => fabric.toStorageObject()),\n        );\n        if (MaybePromise.is(storeResult)) {\n            return storeResult.then(() => this.#fabricStorage.set(\"nextFabricIndex\", this.#nextFabricIndex));\n        }\n        return this.#fabricStorage.set(\"nextFabricIndex\", this.#nextFabricIndex);\n    }\n\n    addFabric(fabric: Fabric) {\n        const { fabricIndex } = fabric;\n        if (this.#fabrics.has(fabricIndex)) {\n            throw new MatterFlowError(`Fabric with index ${fabricIndex} already exists.`);\n        }\n        this.#fabrics.set(fabricIndex, fabric);\n        fabric.addRemoveCallback(async () => this.removeFabric(fabricIndex));\n        fabric.persistCallback = (isUpdate = true) => {\n            const persistResult = this.persistFabrics();\n            return MaybePromise.then(persistResult, () => {\n                if (isUpdate) {\n                    this.#events.updated.emit(fabric); // Assume Fabric got updated when persist callback is called\n                }\n            });\n        };\n        if (this.#initializationDone) {\n            this.#events.added.emit(fabric);\n        }\n    }\n\n    async removeFabric(fabricIndex: FabricIndex) {\n        const fabric = this.#fabrics.get(fabricIndex);\n        if (fabric === undefined)\n            throw new FabricNotFoundError(\n                `Fabric with index ${fabricIndex} cannot be removed because it does not exist.`,\n            );\n        this.#fabrics.delete(fabricIndex);\n        await this.persistFabrics();\n        this.#events.deleted.emit(fabric);\n    }\n\n    getFabrics() {\n        return Array.from(this.#fabrics.values());\n    }\n\n    findFabricFromDestinationId(destinationId: ByteArray, initiatorRandom: ByteArray) {\n        for (const fabric of this.#fabrics.values()) {\n            const candidateDestinationId = fabric.getDestinationId(fabric.nodeId, initiatorRandom);\n            if (!candidateDestinationId.equals(destinationId)) continue;\n            return fabric;\n        }\n\n        throw new InternalError(\"Fabric cannot be found from destinationId\");\n    }\n\n    findByKeypair(keypair: Key) {\n        for (const fabric of this.#fabrics.values()) {\n            if (fabric.matchesKeyPair(keypair)) {\n                return fabric;\n            }\n        }\n        return undefined;\n    }\n\n    async updateFabric(fabric: Fabric) {\n        const { fabricIndex } = fabric;\n        if (!this.#fabrics.has(fabricIndex)) {\n            throw new FabricNotFoundError(\n                `Fabric with index ${fabricIndex} cannot be updated because it does not exist.`,\n            );\n        }\n        this.#fabrics.set(fabricIndex, fabric);\n        await this.persistFabrics();\n        this.#events.updated.emit(fabric);\n    }\n\n    async revokeFabric(fabricIndex: FabricIndex) {\n        const fabric = this.#fabrics.get(fabricIndex);\n        if (fabric === undefined) {\n            throw new MatterFlowError(`Fabric with index ${fabricIndex} does not exist to revoke.`);\n        }\n        await fabric.remove();\n    }\n}\n"],
  "mappings": "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",
  "names": ["FabricAction"]
}
