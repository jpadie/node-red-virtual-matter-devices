"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Time_exports = {};
__export(Time_exports, {
  Time: () => Time
});
module.exports = __toCommonJS(Time_exports);
var import_MatterError = require("../common/MatterError.js");
var import_Diagnostic = require("../log/Diagnostic.js");
var import_DiagnosticSource = require("../log/DiagnosticSource.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const registry = /* @__PURE__ */ new Set();
class Time {
  static get = () => DefaultTime;
  static now = () => Time.get().now();
  static nowMs = () => Time.get().nowMs();
  static getTimer = (name, durationMs, callback) => Time.get().getTimer(name, durationMs, callback);
  static getPeriodicTimer = (name, intervalMs, callback) => Time.get().getPeriodicTimer(name, intervalMs, callback);
  static sleep = async (name, durationMs) => new Promise((resolve) => Time.get().getTimer(name, durationMs, resolve).start());
  static register(timer) {
    timer.elapsed = import_Diagnostic.Diagnostic.elapsed();
    registry.add(timer);
  }
  static unregister(timer) {
    registry.delete(timer);
  }
}
const DefaultTime = new class extends Time {
  now() {
    return /* @__PURE__ */ new Date();
  }
  nowMs() {
    return this.now().getTime();
  }
  getTimer() {
    throw new import_MatterError.NoProviderError("Default time provider does not implement timers");
  }
  getPeriodicTimer() {
    return this.getTimer();
  }
}();
if (typeof MatterHooks !== "undefined") {
  MatterHooks.timeSetup?.(Time);
}
import_DiagnosticSource.DiagnosticSource.add({
  get [import_Diagnostic.Diagnostic.value]() {
    return import_Diagnostic.Diagnostic.node("\u23F1", "Timers", {
      children: [...registry].map((timer) => [
        timer.name,
        import_Diagnostic.Diagnostic.dict({
          periodic: timer.isPeriodic,
          interval: import_Diagnostic.Diagnostic.interval(timer.intervalMs),
          system: timer.systemId,
          elapsed: timer.elapsed
        })
      ])
    });
  }
});
//# sourceMappingURL=Time.js.map
