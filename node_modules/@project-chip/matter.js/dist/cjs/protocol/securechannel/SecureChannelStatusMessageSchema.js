"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SecureChannelStatusMessageSchema_exports = {};
__export(SecureChannelStatusMessageSchema_exports, {
  SecureChannelStatusMessageSchema: () => SecureChannelStatusMessageSchema,
  TlvSecureChannelStatusMessage: () => TlvSecureChannelStatusMessage
});
module.exports = __toCommonJS(SecureChannelStatusMessageSchema_exports);
var import_Schema = require("../../schema/Schema.js");
var import_ByteArray = require("../../util/ByteArray.js");
var import_DataReader = require("../../util/DataReader.js");
var import_DataWriter = require("../../util/DataWriter.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class SecureChannelStatusMessageSchema extends import_Schema.Schema {
  encodeInternal({ generalStatus, protocolId, protocolStatus, protocolData }) {
    const writer = new import_DataWriter.DataWriter(import_ByteArray.Endian.Little);
    writer.writeUInt16(generalStatus);
    writer.writeUInt32(protocolId);
    writer.writeUInt16(protocolStatus);
    if (protocolData !== void 0 && protocolData.length > 0) {
      writer.writeByteArray(protocolData);
    }
    return writer.toByteArray();
  }
  decodeInternal(bytes) {
    const reader = new import_DataReader.DataReader(bytes, import_ByteArray.Endian.Little);
    const generalStatus = reader.readUInt16();
    const protocolId = reader.readUInt32();
    const protocolStatus = reader.readUInt16();
    const remainingBytes = reader.getRemainingBytesCount() > 0 ? reader.getRemainingBytes() : void 0;
    return { generalStatus, protocolId, protocolStatus, remainingBytes };
  }
}
const TlvSecureChannelStatusMessage = new SecureChannelStatusMessageSchema();
//# sourceMappingURL=SecureChannelStatusMessageSchema.js.map
