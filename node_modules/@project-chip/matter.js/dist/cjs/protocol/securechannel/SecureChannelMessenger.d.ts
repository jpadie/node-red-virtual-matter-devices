/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Message } from "../../codec/MessageCodec.js";
import { MatterError } from "../../common/MatterError.js";
import { MessageExchange } from "../../protocol/MessageExchange.js";
import { TlvSchema } from "../../tlv/TlvSchema.js";
import { GeneralStatusCode, ProtocolStatusCode } from "./SecureChannelMessages.js";
/** Error base Class for all errors related to the status response messages. */
export declare class ChannelStatusResponseError extends MatterError {
    readonly generalStatusCode: GeneralStatusCode;
    readonly protocolStatusCode: ProtocolStatusCode;
    constructor(message: string, generalStatusCode: GeneralStatusCode, protocolStatusCode: ProtocolStatusCode);
}
export declare class SecureChannelMessenger<ContextT> {
    protected readonly exchange: MessageExchange<ContextT>;
    constructor(exchange: MessageExchange<ContextT>);
    nextMessage(expectedMessageInfo: string, expectedMessageType?: number): Promise<Message>;
    nextMessageDecoded<T>(expectedMessageType: number, schema: TlvSchema<T>, expectedMessageInfo: string): Promise<T>;
    waitForSuccess(expectedMessageInfo: string): Promise<void>;
    send<T>(message: T, type: number, schema: TlvSchema<T>): Promise<Uint8Array>;
    sendError(code: ProtocolStatusCode): Promise<void>;
    sendSuccess(): Promise<void>;
    sendCloseSession(): Promise<void>;
    getChannelName(): string;
    close(): Promise<void>;
    private sendStatusReport;
    protected throwIfErrorStatusReport(message: Message, logHint?: string): void;
}
//# sourceMappingURL=SecureChannelMessenger.d.ts.map