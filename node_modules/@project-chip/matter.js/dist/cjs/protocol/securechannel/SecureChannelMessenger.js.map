{
  "version": 3,
  "sources": ["../../../../src/protocol/securechannel/SecureChannelMessenger.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Message } from \"../../codec/MessageCodec.js\";\nimport { MatterError, UnexpectedDataError } from \"../../common/MatterError.js\";\nimport { MessageExchange } from \"../../protocol/MessageExchange.js\";\nimport { TlvSchema } from \"../../tlv/TlvSchema.js\";\nimport {\n    GeneralStatusCode,\n    MessageType,\n    ProtocolStatusCode,\n    SECURE_CHANNEL_PROTOCOL_ID,\n} from \"./SecureChannelMessages.js\";\nimport { TlvSecureChannelStatusMessage } from \"./SecureChannelStatusMessageSchema.js\";\n\n/** Error base Class for all errors related to the status response messages. */\nexport class ChannelStatusResponseError extends MatterError {\n    public constructor(\n        message: string,\n        public readonly generalStatusCode: GeneralStatusCode,\n        public readonly protocolStatusCode: ProtocolStatusCode,\n    ) {\n        super(`(${generalStatusCode}/${protocolStatusCode}) ${message}`);\n    }\n}\n\nexport class SecureChannelMessenger<ContextT> {\n    constructor(protected readonly exchange: MessageExchange<ContextT>) {}\n\n    async nextMessage(expectedMessageInfo: string, expectedMessageType?: number) {\n        const message = await this.exchange.nextMessage();\n        const messageType = message.payloadHeader.messageType;\n        this.throwIfErrorStatusReport(message, expectedMessageInfo);\n        if (expectedMessageType !== undefined && messageType !== expectedMessageType)\n            throw new UnexpectedDataError(\n                `Received unexpected message type: ${messageType}, expected: ${expectedMessageType} (${expectedMessageInfo})`,\n            );\n        return message;\n    }\n\n    async nextMessageDecoded<T>(expectedMessageType: number, schema: TlvSchema<T>, expectedMessageInfo: string) {\n        return schema.decode((await this.nextMessage(expectedMessageInfo, expectedMessageType)).payload);\n    }\n\n    async waitForSuccess(expectedMessageInfo: string) {\n        // If the status is not Success, this would throw an Error.\n        await this.nextMessage(expectedMessageInfo, MessageType.StatusReport);\n    }\n\n    async send<T>(message: T, type: number, schema: TlvSchema<T>) {\n        const payload = schema.encode(message);\n        await this.exchange.send(type, payload);\n        return payload;\n    }\n\n    sendError(code: ProtocolStatusCode) {\n        return this.sendStatusReport(GeneralStatusCode.Failure, code);\n    }\n\n    sendSuccess() {\n        return this.sendStatusReport(GeneralStatusCode.Success, ProtocolStatusCode.Success);\n    }\n\n    sendCloseSession() {\n        return this.sendStatusReport(GeneralStatusCode.Success, ProtocolStatusCode.CloseSession, false);\n    }\n\n    getChannelName() {\n        return this.exchange.channel.channel.name;\n    }\n\n    async close() {\n        await this.exchange.close();\n    }\n\n    private async sendStatusReport(\n        generalStatus: GeneralStatusCode,\n        protocolStatus: ProtocolStatusCode,\n        requiresAck?: boolean,\n    ) {\n        await this.exchange.send(\n            MessageType.StatusReport,\n            TlvSecureChannelStatusMessage.encode({\n                generalStatus,\n                protocolId: SECURE_CHANNEL_PROTOCOL_ID,\n                protocolStatus,\n            }),\n            { requiresAck },\n        );\n    }\n\n    protected throwIfErrorStatusReport(message: Message, logHint?: string) {\n        const {\n            payloadHeader: { messageType },\n            payload,\n        } = message;\n        if (messageType !== MessageType.StatusReport) return;\n\n        const { generalStatus, protocolId, protocolStatus } = TlvSecureChannelStatusMessage.decode(payload);\n        if (generalStatus !== GeneralStatusCode.Success) {\n            throw new ChannelStatusResponseError(\n                `Received general error status for protocol ${protocolId}${logHint ? ` (${logHint})` : \"\"}`,\n                generalStatus,\n                protocolStatus,\n            );\n        }\n        if (protocolStatus !== ProtocolStatusCode.Success) {\n            throw new ChannelStatusResponseError(\n                `Received general success status, but protocol status is not Success${logHint ? ` (${logHint})` : \"\"}`,\n                generalStatus,\n                protocolStatus,\n            );\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,yBAAiD;AAGjD,mCAKO;AACP,8CAA8C;AAhB9C;AAAA;AAAA;AAAA;AAAA;AAmBO,MAAM,mCAAmC,+BAAY;AAAA,EACjD,YACH,SACgB,mBACA,oBAClB;AACE,UAAM,IAAI,iBAAiB,IAAI,kBAAkB,KAAK,OAAO,EAAE;AAH/C;AACA;AAAA,EAGpB;AACJ;AAEO,MAAM,uBAAiC;AAAA,EAC1C,YAA+B,UAAqC;AAArC;AAAA,EAAsC;AAAA,EAErE,MAAM,YAAY,qBAA6B,qBAA8B;AACzE,UAAM,UAAU,MAAM,KAAK,SAAS,YAAY;AAChD,UAAM,cAAc,QAAQ,cAAc;AAC1C,SAAK,yBAAyB,SAAS,mBAAmB;AAC1D,QAAI,wBAAwB,UAAa,gBAAgB;AACrD,YAAM,IAAI;AAAA,QACN,qCAAqC,WAAW,eAAe,mBAAmB,KAAK,mBAAmB;AAAA,MAC9G;AACJ,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,mBAAsB,qBAA6B,QAAsB,qBAA6B;AACxG,WAAO,OAAO,QAAQ,MAAM,KAAK,YAAY,qBAAqB,mBAAmB,GAAG,OAAO;AAAA,EACnG;AAAA,EAEA,MAAM,eAAe,qBAA6B;AAE9C,UAAM,KAAK,YAAY,qBAAqB,yCAAY,YAAY;AAAA,EACxE;AAAA,EAEA,MAAM,KAAQ,SAAY,MAAc,QAAsB;AAC1D,UAAM,UAAU,OAAO,OAAO,OAAO;AACrC,UAAM,KAAK,SAAS,KAAK,MAAM,OAAO;AACtC,WAAO;AAAA,EACX;AAAA,EAEA,UAAU,MAA0B;AAChC,WAAO,KAAK,iBAAiB,+CAAkB,SAAS,IAAI;AAAA,EAChE;AAAA,EAEA,cAAc;AACV,WAAO,KAAK,iBAAiB,+CAAkB,SAAS,gDAAmB,OAAO;AAAA,EACtF;AAAA,EAEA,mBAAmB;AACf,WAAO,KAAK,iBAAiB,+CAAkB,SAAS,gDAAmB,cAAc,KAAK;AAAA,EAClG;AAAA,EAEA,iBAAiB;AACb,WAAO,KAAK,SAAS,QAAQ,QAAQ;AAAA,EACzC;AAAA,EAEA,MAAM,QAAQ;AACV,UAAM,KAAK,SAAS,MAAM;AAAA,EAC9B;AAAA,EAEA,MAAc,iBACV,eACA,gBACA,aACF;AACE,UAAM,KAAK,SAAS;AAAA,MAChB,yCAAY;AAAA,MACZ,sEAA8B,OAAO;AAAA,QACjC;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACJ,CAAC;AAAA,MACD,EAAE,YAAY;AAAA,IAClB;AAAA,EACJ;AAAA,EAEU,yBAAyB,SAAkB,SAAkB;AACnE,UAAM;AAAA,MACF,eAAe,EAAE,YAAY;AAAA,MAC7B;AAAA,IACJ,IAAI;AACJ,QAAI,gBAAgB,yCAAY,aAAc;AAE9C,UAAM,EAAE,eAAe,YAAY,eAAe,IAAI,sEAA8B,OAAO,OAAO;AAClG,QAAI,kBAAkB,+CAAkB,SAAS;AAC7C,YAAM,IAAI;AAAA,QACN,8CAA8C,UAAU,GAAG,UAAU,KAAK,OAAO,MAAM,EAAE;AAAA,QACzF;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,mBAAmB,gDAAmB,SAAS;AAC/C,YAAM,IAAI;AAAA,QACN,sEAAsE,UAAU,KAAK,OAAO,MAAM,EAAE;AAAA,QACpG;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
