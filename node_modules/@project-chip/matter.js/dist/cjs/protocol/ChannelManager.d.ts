/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Channel } from "../common/Channel.js";
import { MatterError } from "../common/MatterError.js";
import { NodeId } from "../datatype/NodeId.js";
import { Fabric } from "../fabric/Fabric.js";
import { Session } from "../session/Session.js";
import { ByteArray } from "../util/ByteArray.js";
import { MessageChannel } from "./ExchangeManager.js";
export declare class NoChannelError extends MatterError {
}
export declare class ChannelManager {
    #private;
    constructor(caseSessionsPerFabricAndNode?: number);
    setChannel(fabric: Fabric, nodeId: NodeId, channel: MessageChannel<any>): Promise<void>;
    getChannel(fabric: Fabric, nodeId: NodeId, session?: Session<any>): MessageChannel<any>;
    /**
     * Returns the last established session for a Fabric and Node
     */
    getChannelForSession(session: Session<any>): MessageChannel<any> | undefined;
    removeAllNodeChannels(fabric: Fabric, nodeId: NodeId): Promise<void>;
    removeChannel(fabric: Fabric, nodeId: NodeId, session: Session<any>): Promise<void>;
    private getOrCreateAsPaseChannel;
    getOrCreateChannel(byteArrayChannel: Channel<ByteArray>, session: Session<any>): Promise<MessageChannel<any>>;
    close(): Promise<void>;
}
//# sourceMappingURL=ChannelManager.d.ts.map