/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { EventPriority } from "../../cluster/Cluster.js";
import { ClusterId } from "../../datatype/ClusterId.js";
import { EndpointNumber } from "../../datatype/EndpointNumber.js";
import { EventId } from "../../datatype/EventId.js";
import { EventNumber } from "../../datatype/EventNumber.js";
import { NodeId } from "../../datatype/NodeId.js";
import { TlvStream, TypeFromSchema } from "../../tlv/TlvSchema.js";
import { TlvEventData, TlvEventReport } from "./InteractionProtocol.js";
export type DecodedEventData<T> = {
    eventNumber: EventNumber;
    priority: EventPriority;
    epochTimestamp?: number | bigint;
    systemTimestamp?: number | bigint;
    deltaEpochTimestamp?: number | bigint;
    deltaSystemTimestamp?: number | bigint;
    data?: T;
};
export type DecodedEventReportValue<T> = {
    path: {
        nodeId?: NodeId;
        endpointId: EndpointNumber;
        clusterId: ClusterId;
        eventId: EventId;
        eventName: string;
    };
    events: DecodedEventData<T>[];
};
export declare function normalizeAndDecodeReadEventReport(data: TypeFromSchema<typeof TlvEventReport>[]): DecodedEventReportValue<any>[];
export declare function normalizeEventData(data: TypeFromSchema<typeof TlvEventData>[]): TypeFromSchema<typeof TlvEventData>[][];
export declare function normalizeAndDecodeEventData(data: TypeFromSchema<typeof TlvEventData>[]): DecodedEventReportValue<any>[];
export declare function decodeUnknownEventValue(data: TlvStream): any;
//# sourceMappingURL=EventDataDecoder.d.ts.map