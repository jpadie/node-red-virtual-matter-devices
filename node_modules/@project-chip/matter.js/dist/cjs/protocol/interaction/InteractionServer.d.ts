/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterDevice } from "../../MatterDevice.js";
import { AnyAttributeServer, AttributeServer } from "../../cluster/server/AttributeServer.js";
import { CommandServer } from "../../cluster/server/CommandServer.js";
import { AnyEventServer } from "../../cluster/server/EventServer.js";
import { Message } from "../../codec/MessageCodec.js";
import { AttributeId } from "../../datatype/AttributeId.js";
import { ClusterId } from "../../datatype/ClusterId.js";
import { CommandId } from "../../datatype/CommandId.js";
import { EndpointNumber } from "../../datatype/EndpointNumber.js";
import { EventId } from "../../datatype/EventId.js";
import { NodeId } from "../../datatype/NodeId.js";
import { EndpointInterface } from "../../endpoint/EndpointInterface.js";
import { MessageExchange } from "../../protocol/MessageExchange.js";
import { ProtocolHandler } from "../../protocol/ProtocolHandler.js";
import { TypeFromSchema } from "../../tlv/TlvSchema.js";
import { DataReportPayload } from "./AttributeDataEncoder.js";
import { InteractionEndpointStructure } from "./InteractionEndpointStructure.js";
import { InteractionRecipient, InteractionServerMessenger, InvokeRequest, ReadRequest, SubscribeRequest, TimedRequest, WriteRequest, WriteResponse } from "./InteractionMessenger.js";
import { TlvAttributePath, TlvClusterPath, TlvEventFilter, TlvEventPath } from "./InteractionProtocol.js";
import { StatusCode } from "./StatusCode.js";
import { SubscriptionOptions } from "./SubscriptionOptions.js";
/** Protocol ID for the Interaction Protocol as per Matter specification. */
export declare const INTERACTION_PROTOCOL_ID = 1;
/** Backward compatible re-export for Interaction Model version we support currently. */
export declare const INTERACTION_MODEL_REVISION = 12;
/** We use 10 as max to show that we support more then 1. Once we get a better real-world maximum we can change that. */
export declare const DEFAULT_MAX_PATHS_PER_INVOKE = 10;
export interface CommandPath {
    nodeId?: NodeId;
    endpointId: EndpointNumber;
    clusterId: ClusterId;
    commandId: CommandId;
}
export interface AttributePath {
    nodeId?: NodeId;
    endpointId: EndpointNumber;
    clusterId: ClusterId;
    attributeId: AttributeId;
}
export interface EventPath {
    nodeId?: NodeId;
    endpointId: EndpointNumber;
    clusterId: ClusterId;
    eventId: EventId;
    isUrgent?: boolean;
}
export interface AttributeWithPath {
    path: AttributePath;
    attribute: AnyAttributeServer<any>;
}
export interface EventWithPath {
    path: EventPath;
    event: AnyEventServer<any, any>;
}
export interface CommandWithPath {
    path: CommandPath;
    command: CommandServer<any, any>;
}
export declare function genericElementPathToId(endpointId: EndpointNumber | undefined, clusterId: ClusterId | undefined, elementId: number | undefined): string;
export declare function commandPathToId({ endpointId, clusterId, commandId }: CommandPath): string;
export declare function attributePathToId({ endpointId, clusterId, attributeId }: TypeFromSchema<typeof TlvAttributePath>): string;
export declare function eventPathToId({ endpointId, clusterId, eventId }: TypeFromSchema<typeof TlvEventPath>): string;
export declare function clusterPathToId({ nodeId, endpointId, clusterId }: TypeFromSchema<typeof TlvClusterPath>): string;
export declare function validateReadAttributesPath(path: TypeFromSchema<typeof TlvAttributePath>, isGroupSession?: boolean): void;
export declare function validateReadEventPath(path: TypeFromSchema<typeof TlvEventPath>, isGroupSession?: boolean): void;
/**
 * Translates interactions from the Matter protocol to Matter.js APIs.
 */
export declare class InteractionServer implements ProtocolHandler<MatterDevice>, InteractionRecipient {
    #private;
    constructor({ subscriptionOptions, endpointStructure, maxPathsPerInvoke, }: InteractionServer.Configuration);
    getId(): number;
    protected get isClosing(): boolean;
    get maxPathsPerInvoke(): number;
    onNewExchange(exchange: MessageExchange<MatterDevice>): Promise<void>;
    handleReadRequest(exchange: MessageExchange<MatterDevice>, { attributeRequests, dataVersionFilters, eventRequests, eventFilters, isFabricFiltered, interactionModelRevision, }: ReadRequest, message: Message): Promise<DataReportPayload>;
    protected readAttribute(_path: AttributePath, attribute: AnyAttributeServer<any>, exchange: MessageExchange<MatterDevice>, isFabricFiltered: boolean, message: Message, _endpoint: EndpointInterface): Promise<{
        version: number;
        value: any;
    }>;
    protected readEvent(_path: EventPath, eventFilters: TypeFromSchema<typeof TlvEventFilter>[] | undefined, event: AnyEventServer<any, any>, exchange: MessageExchange<MatterDevice>, isFabricFiltered: boolean, message: Message, _endpoint: EndpointInterface): Promise<import("./EventHandler.js").EventStorageData<any>[]>;
    handleWriteRequest(exchange: MessageExchange<MatterDevice>, { suppressResponse, timedRequest, writeRequests, interactionModelRevision, moreChunkedMessages }: WriteRequest, message: Message): Promise<WriteResponse>;
    protected writeAttribute(_path: AttributePath, attribute: AttributeServer<any>, value: any, exchange: MessageExchange<MatterDevice>, message: Message, _endpoint: EndpointInterface, _receivedWithinTimedInteraction?: boolean, isListWrite?: boolean): Promise<void>;
    handleSubscribeRequest(exchange: MessageExchange<MatterDevice>, { minIntervalFloorSeconds, maxIntervalCeilingSeconds, attributeRequests, dataVersionFilters, eventRequests, eventFilters, keepSubscriptions, isFabricFiltered, interactionModelRevision, }: SubscribeRequest, messenger: InteractionServerMessenger, message: Message): Promise<void>;
    handleInvokeRequest(exchange: MessageExchange<MatterDevice>, { invokeRequests, timedRequest, suppressResponse, interactionModelRevision }: InvokeRequest, messenger: InteractionServerMessenger, message: Message): Promise<void>;
    protected invokeCommand(_path: CommandPath, command: CommandServer<any, any>, exchange: MessageExchange<MatterDevice>, commandFields: any, message: Message, endpoint: EndpointInterface, _receivedWithinTimedInteraction?: boolean): Promise<{
        code: StatusCode;
        clusterCode?: number;
        responseId: CommandId;
        response: import("../../tlv/TlvSchema.js").TlvStream;
    }>;
    handleTimedRequest(exchange: MessageExchange<MatterDevice>, { timeout, interactionModelRevision }: TimedRequest): void;
    close(): Promise<void>;
}
export declare namespace InteractionServer {
    interface Configuration {
        readonly subscriptionOptions?: SubscriptionOptions;
        readonly endpointStructure: InteractionEndpointStructure;
        readonly maxPathsPerInvoke?: number;
    }
}
//# sourceMappingURL=InteractionServer.d.ts.map