{
  "version": 3,
  "sources": ["../../../../src/protocol/interaction/EventDataDecoder.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { EventPriority } from \"../../cluster/Cluster.js\";\nimport { getClusterById, getClusterEventById } from \"../../cluster/ClusterHelper.js\";\nimport { UnexpectedDataError } from \"../../common/MatterError.js\";\nimport { ClusterId } from \"../../datatype/ClusterId.js\";\nimport { EndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { EventId } from \"../../datatype/EventId.js\";\nimport { EventNumber } from \"../../datatype/EventNumber.js\";\nimport { NodeId } from \"../../datatype/NodeId.js\";\nimport { Diagnostic } from \"../../log/Diagnostic.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { TlvAny } from \"../../tlv/TlvAny.js\";\nimport { TlvStream, TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvEventData, TlvEventReport } from \"./InteractionProtocol.js\";\n\nconst logger = Logger.get(\"EventDataDecoder\");\n\nexport type DecodedEventData<T> = {\n    eventNumber: EventNumber;\n    priority: EventPriority;\n    epochTimestamp?: number | bigint;\n    systemTimestamp?: number | bigint;\n    deltaEpochTimestamp?: number | bigint;\n    deltaSystemTimestamp?: number | bigint;\n    data?: T;\n};\n\nexport type DecodedEventReportValue<T> = {\n    path: {\n        nodeId?: NodeId;\n        endpointId: EndpointNumber;\n        clusterId: ClusterId;\n        eventId: EventId;\n        eventName: string;\n    };\n    events: DecodedEventData<T>[];\n};\n\nexport function normalizeAndDecodeReadEventReport(\n    data: TypeFromSchema<typeof TlvEventReport>[],\n): DecodedEventReportValue<any>[] {\n    // TODO Decide how to handle the attribute report status field, right now we ignore it\n    const dataValues = data.flatMap(({ eventData }) => (eventData !== undefined ? eventData : []));\n\n    return normalizeAndDecodeEventData(dataValues);\n}\n\nexport function normalizeEventData(\n    data: TypeFromSchema<typeof TlvEventData>[],\n): TypeFromSchema<typeof TlvEventData>[][] {\n    // Put all returned values into a map to group by path\n    const responseList = new Map<string, TypeFromSchema<typeof TlvEventData>[]>(); // TODO CHECK\n    data.forEach(value => {\n        if (!value) return;\n        const {\n            path: { nodeId, endpointId, clusterId, eventId },\n        } = value;\n        const mapId = `${nodeId}-${endpointId}-${clusterId}-${eventId}`;\n        const list = responseList.get(mapId) || [];\n        list.push(value);\n        responseList.set(mapId, list);\n    });\n\n    return Array.from(responseList.values());\n}\n\nexport function normalizeAndDecodeEventData(\n    data: TypeFromSchema<typeof TlvEventData>[],\n): DecodedEventReportValue<any>[] {\n    const responseList = normalizeEventData(data);\n    const result = new Array<DecodedEventReportValue<any>>();\n    responseList.forEach(values => {\n        const {\n            path: { nodeId, endpointId, clusterId, eventId },\n        } = values[0];\n\n        if (endpointId === undefined || clusterId === undefined || eventId === undefined) {\n            throw new UnexpectedDataError(`Invalid event path ${endpointId}/${clusterId}/${eventId}`);\n        }\n        try {\n            const cluster = getClusterById(clusterId);\n            const eventDetail = getClusterEventById(cluster, eventId);\n            if (eventDetail === undefined) {\n                logger.debug(\n                    `Decode unknown event ${Diagnostic.hex(clusterId)}/${Diagnostic.hex(eventId)} via the AnySchema.`,\n                );\n\n                const eventName = `Unknown (${Diagnostic.hex(eventId)})`;\n\n                const events = values.map(eventData => ({\n                    ...eventData,\n                    data: eventData.data === undefined ? undefined : decodeUnknownEventValue(eventData.data),\n                    path: undefined,\n                }));\n                result.push({ path: { nodeId, endpointId, clusterId, eventId, eventName }, events });\n\n                return;\n            }\n            const {\n                event: { schema },\n                name,\n            } = eventDetail;\n            const events = values.map(eventData => ({\n                ...eventData,\n                data: eventData.data === undefined ? undefined : schema.decodeTlv(eventData.data),\n                path: undefined,\n            }));\n            result.push({ path: { nodeId, endpointId, clusterId, eventId, eventName: name }, events });\n        } catch (error: any) {\n            logger.error(`Error decoding event ${endpointId}/${clusterId}/${eventId}: ${error.message}`);\n        }\n    });\n    return result;\n}\n\nexport function decodeUnknownEventValue(data: TlvStream): any {\n    const schema = TlvAny;\n\n    if (data.length === 0) {\n        return undefined;\n    }\n\n    const tlvEncoded = schema.decodeTlv(data);\n    return schema.decodeAnyTlvStream(tlvEncoded);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,2BAAoD;AACpD,yBAAoC;AAMpC,wBAA2B;AAC3B,oBAAuB;AACvB,oBAAuB;AAhBvB;AAAA;AAAA;AAAA;AAAA;AAoBA,MAAM,SAAS,qBAAO,IAAI,kBAAkB;AAuBrC,SAAS,kCACZ,MAC8B;AAE9B,QAAM,aAAa,KAAK,QAAQ,CAAC,EAAE,UAAU,MAAO,cAAc,SAAY,YAAY,CAAC,CAAE;AAE7F,SAAO,4BAA4B,UAAU;AACjD;AAEO,SAAS,mBACZ,MACuC;AAEvC,QAAM,eAAe,oBAAI,IAAmD;AAC5E,OAAK,QAAQ,WAAS;AAClB,QAAI,CAAC,MAAO;AACZ,UAAM;AAAA,MACF,MAAM,EAAE,QAAQ,YAAY,WAAW,QAAQ;AAAA,IACnD,IAAI;AACJ,UAAM,QAAQ,GAAG,MAAM,IAAI,UAAU,IAAI,SAAS,IAAI,OAAO;AAC7D,UAAM,OAAO,aAAa,IAAI,KAAK,KAAK,CAAC;AACzC,SAAK,KAAK,KAAK;AACf,iBAAa,IAAI,OAAO,IAAI;AAAA,EAChC,CAAC;AAED,SAAO,MAAM,KAAK,aAAa,OAAO,CAAC;AAC3C;AAEO,SAAS,4BACZ,MAC8B;AAC9B,QAAM,eAAe,mBAAmB,IAAI;AAC5C,QAAM,SAAS,IAAI,MAAoC;AACvD,eAAa,QAAQ,YAAU;AAC3B,UAAM;AAAA,MACF,MAAM,EAAE,QAAQ,YAAY,WAAW,QAAQ;AAAA,IACnD,IAAI,OAAO,CAAC;AAEZ,QAAI,eAAe,UAAa,cAAc,UAAa,YAAY,QAAW;AAC9E,YAAM,IAAI,uCAAoB,sBAAsB,UAAU,IAAI,SAAS,IAAI,OAAO,EAAE;AAAA,IAC5F;AACA,QAAI;AACA,YAAM,cAAU,qCAAe,SAAS;AACxC,YAAM,kBAAc,0CAAoB,SAAS,OAAO;AACxD,UAAI,gBAAgB,QAAW;AAC3B,eAAO;AAAA,UACH,wBAAwB,6BAAW,IAAI,SAAS,CAAC,IAAI,6BAAW,IAAI,OAAO,CAAC;AAAA,QAChF;AAEA,cAAM,YAAY,YAAY,6BAAW,IAAI,OAAO,CAAC;AAErD,cAAMA,UAAS,OAAO,IAAI,gBAAc;AAAA,UACpC,GAAG;AAAA,UACH,MAAM,UAAU,SAAS,SAAY,SAAY,wBAAwB,UAAU,IAAI;AAAA,UACvF,MAAM;AAAA,QACV,EAAE;AACF,eAAO,KAAK,EAAE,MAAM,EAAE,QAAQ,YAAY,WAAW,SAAS,UAAU,GAAG,QAAAA,QAAO,CAAC;AAEnF;AAAA,MACJ;AACA,YAAM;AAAA,QACF,OAAO,EAAE,OAAO;AAAA,QAChB;AAAA,MACJ,IAAI;AACJ,YAAM,SAAS,OAAO,IAAI,gBAAc;AAAA,QACpC,GAAG;AAAA,QACH,MAAM,UAAU,SAAS,SAAY,SAAY,OAAO,UAAU,UAAU,IAAI;AAAA,QAChF,MAAM;AAAA,MACV,EAAE;AACF,aAAO,KAAK,EAAE,MAAM,EAAE,QAAQ,YAAY,WAAW,SAAS,WAAW,KAAK,GAAG,OAAO,CAAC;AAAA,IAC7F,SAAS,OAAY;AACjB,aAAO,MAAM,wBAAwB,UAAU,IAAI,SAAS,IAAI,OAAO,KAAK,MAAM,OAAO,EAAE;AAAA,IAC/F;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AAEO,SAAS,wBAAwB,MAAsB;AAC1D,QAAM,SAAS;AAEf,MAAI,KAAK,WAAW,GAAG;AACnB,WAAO;AAAA,EACX;AAEA,QAAM,aAAa,OAAO,UAAU,IAAI;AACxC,SAAO,OAAO,mBAAmB,UAAU;AAC/C;",
  "names": ["events"]
}
