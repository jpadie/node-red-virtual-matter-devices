/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { EventPriority } from "../../cluster/Cluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
/** @see {@link MatterSpecification.v13.Core} section XXX */
export declare const WildcardPathFlagsBitmap: {
    /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
    skipRootNode: BitFlag;
    /** Skip several large global attributes during wildcard expansion. */
    skipGlobalAttributes: BitFlag;
    /** Skip the AttributeList global attribute during wildcard expansion. */
    skipAttributeList: BitFlag;
    /** Skip the EventList global attribute during wildcard expansion. */
    skipEventList: BitFlag;
    /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
    skipCommandLists: BitFlag;
    /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
    skipCustomElements: BitFlag;
    /** Skip any Fixed (F) quality attributes during wildcard expansion. */
    skipFixedAttributes: BitFlag;
    /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
    skipChangesOmittedAttributes: BitFlag;
    /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
    skipDiagnosticsClusters: BitFlag;
};
/** @see {@link MatterSpecification.v13.Core}, section 10.6.2 */
export declare const TlvAttributePath: import("../../tlv/TlvObject.js").ObjectSchema<{
    enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
    endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
    clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
    attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
    listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
    wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
        /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
        skipRootNode: BitFlag;
        /** Skip several large global attributes during wildcard expansion. */
        skipGlobalAttributes: BitFlag;
        /** Skip the AttributeList global attribute during wildcard expansion. */
        skipAttributeList: BitFlag;
        /** Skip the EventList global attribute during wildcard expansion. */
        skipEventList: BitFlag;
        /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
        skipCommandLists: BitFlag;
        /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
        skipCustomElements: BitFlag;
        /** Skip any Fixed (F) quality attributes during wildcard expansion. */
        skipFixedAttributes: BitFlag;
        /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
        skipChangesOmittedAttributes: BitFlag;
        /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
        skipDiagnosticsClusters: BitFlag;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.8 */
export declare const TlvEventPath: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
    endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
    clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
    eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
    isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.9 */
export declare const TlvEventData: import("../../tlv/TlvObject.js").ObjectSchema<{
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
        isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>>;
    eventNumber: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EventNumber.js").EventNumber>;
    priority: import("../../tlv/TlvObject.js").FieldType<EventPriority>;
    epochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
    systemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
    deltaEpochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
    deltaSystemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
    data: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.6 */
export declare const TlvEventFilter: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
    eventMin: import("../../tlv/TlvObject.js").FieldType<number | bigint>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.7 */
export declare const TlvClusterPath: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
    endpointId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
    clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.3 */
export declare const TlvDataVersionFilter: import("../../tlv/TlvObject.js").ObjectSchema<{
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
    }>>;
    dataVersion: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.17 */
export declare const TlvStatus: import("../../tlv/TlvObject.js").ObjectSchema<{
    status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
    clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.16 */
export declare const TlvAttributeStatus: import("../../tlv/TlvObject.js").ObjectSchema<{
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
            skipRootNode: BitFlag;
            /** Skip several large global attributes during wildcard expansion. */
            skipGlobalAttributes: BitFlag;
            /** Skip the AttributeList global attribute during wildcard expansion. */
            skipAttributeList: BitFlag;
            /** Skip the EventList global attribute during wildcard expansion. */
            skipEventList: BitFlag;
            /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
            skipCommandLists: BitFlag;
            /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
            skipCustomElements: BitFlag;
            /** Skip any Fixed (F) quality attributes during wildcard expansion. */
            skipFixedAttributes: BitFlag;
            /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
            skipChangesOmittedAttributes: BitFlag;
            /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
            skipDiagnosticsClusters: BitFlag;
        }>>;
    }>>;
    status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.4 */
export declare const TlvAttributeData: import("../../tlv/TlvObject.js").ObjectSchema<{
    dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
            skipRootNode: BitFlag;
            /** Skip several large global attributes during wildcard expansion. */
            skipGlobalAttributes: BitFlag;
            /** Skip the AttributeList global attribute during wildcard expansion. */
            skipAttributeList: BitFlag;
            /** Skip the EventList global attribute during wildcard expansion. */
            skipEventList: BitFlag;
            /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
            skipCommandLists: BitFlag;
            /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
            skipCustomElements: BitFlag;
            /** Skip any Fixed (F) quality attributes during wildcard expansion. */
            skipFixedAttributes: BitFlag;
            /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
            skipChangesOmittedAttributes: BitFlag;
            /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
            skipDiagnosticsClusters: BitFlag;
        }>>;
    }>>;
    data: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream>;
}>;
export declare const TlvAttributeReportData: import("../../tlv/TlvObject.js").ObjectSchema<{
    dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
            skipRootNode: BitFlag;
            /** Skip several large global attributes during wildcard expansion. */
            skipGlobalAttributes: BitFlag;
            /** Skip the AttributeList global attribute during wildcard expansion. */
            skipAttributeList: BitFlag;
            /** Skip the EventList global attribute during wildcard expansion. */
            skipEventList: BitFlag;
            /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
            skipCommandLists: BitFlag;
            /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
            skipCustomElements: BitFlag;
            /** Skip any Fixed (F) quality attributes during wildcard expansion. */
            skipFixedAttributes: BitFlag;
            /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
            skipChangesOmittedAttributes: BitFlag;
            /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
            skipDiagnosticsClusters: BitFlag;
        }>>;
    }>>;
    data: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.5 */
export declare const TlvAttributeReport: import("../../tlv/TlvObject.js").ObjectSchema<{
    attributeStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
            listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
            wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                skipRootNode: BitFlag;
                /** Skip several large global attributes during wildcard expansion. */
                skipGlobalAttributes: BitFlag;
                /** Skip the AttributeList global attribute during wildcard expansion. */
                skipAttributeList: BitFlag;
                /** Skip the EventList global attribute during wildcard expansion. */
                skipEventList: BitFlag;
                /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                skipCommandLists: BitFlag;
                /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                skipCustomElements: BitFlag;
                /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                skipFixedAttributes: BitFlag;
                /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                skipChangesOmittedAttributes: BitFlag;
                /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                skipDiagnosticsClusters: BitFlag;
            }>>;
        }>>;
        status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        }>>;
    }>>;
    attributeData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
            listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
            wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                skipRootNode: BitFlag;
                /** Skip several large global attributes during wildcard expansion. */
                skipGlobalAttributes: BitFlag;
                /** Skip the AttributeList global attribute during wildcard expansion. */
                skipAttributeList: BitFlag;
                /** Skip the EventList global attribute during wildcard expansion. */
                skipEventList: BitFlag;
                /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                skipCommandLists: BitFlag;
                /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                skipCustomElements: BitFlag;
                /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                skipFixedAttributes: BitFlag;
                /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                skipChangesOmittedAttributes: BitFlag;
                /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                skipDiagnosticsClusters: BitFlag;
            }>>;
        }>>;
        data: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.15 */
export declare const TlvEventStatus: import("../../tlv/TlvObject.js").ObjectSchema<{
    path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
        isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>>;
    status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.10 */
export declare const TlvEventReport: import("../../tlv/TlvObject.js").ObjectSchema<{
    eventStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
            isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        }>>;
        status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        }>>;
    }>>;
    eventData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
            isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        }>>;
        eventNumber: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EventNumber.js").EventNumber>;
        priority: import("../../tlv/TlvObject.js").FieldType<EventPriority>;
        epochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        systemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        deltaEpochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        deltaSystemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
        data: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.11 */
export declare const TlvCommandPath: import("../../tlv/TlvObject.js").ObjectSchema<{
    endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
    clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
    commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.12 */
export declare const TlvCommandData: import("../../tlv/TlvObject.js").ObjectSchema<{
    commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
        commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
    }>>;
    commandFields: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
    commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.14 */
export declare const TlvCommandStatus: import("../../tlv/TlvObject.js").ObjectSchema<{
    commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
        commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
    }>>;
    status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
    }>>;
    commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.6.13 */
export declare const TlvInvokeResponseData: import("../../tlv/TlvObject.js").ObjectSchema<{
    command: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
            commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
        }>>;
        commandFields: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
        commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
    status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
            commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
        }>>;
        status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        }>>;
        commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.1 */
export declare const TlvStatusResponse: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A status code (@see Status Codes {@link MatterSpecification.v13.Core} section 7.10.7) */
    status: import("../../tlv/TlvObject.js").FieldType<import("../../cluster/export.js").Status>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.2 */
export declare const TlvReadRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A list of zero or more request paths to cluster attribute data. */
    attributeRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
            skipRootNode: BitFlag;
            /** Skip several large global attributes during wildcard expansion. */
            skipGlobalAttributes: BitFlag;
            /** Skip the AttributeList global attribute during wildcard expansion. */
            skipAttributeList: BitFlag;
            /** Skip the EventList global attribute during wildcard expansion. */
            skipEventList: BitFlag;
            /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
            skipCommandLists: BitFlag;
            /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
            skipCustomElements: BitFlag;
            /** Skip any Fixed (F) quality attributes during wildcard expansion. */
            skipFixedAttributes: BitFlag;
            /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
            skipChangesOmittedAttributes: BitFlag;
            /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
            skipDiagnosticsClusters: BitFlag;
        }>>;
    }>[]>;
    /** A list of zero or more request paths to cluster events. */
    eventRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
        isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>[]>;
    /** A list of zero or more minimum event numbers per specific node. */
    eventFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        eventMin: import("../../tlv/TlvObject.js").FieldType<number | bigint>;
    }>[]>;
    /** Limits the data read within fabric-scoped lists to the accessing fabric. */
    isFabricFiltered: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** A list of zero or more cluster instance data versions. */
    dataVersionFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
        }>>;
        dataVersion: import("../../tlv/TlvObject.js").FieldType<number>;
    }>[]>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.3 */
export declare const TlvDataReport: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A SubscriptionId only used in a Subscribe interaction. */
    subscriptionId: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** A list of zero or more attribute data reports, */
    attributeReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        attributeStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
                attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
                listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                    skipRootNode: BitFlag;
                    /** Skip several large global attributes during wildcard expansion. */
                    skipGlobalAttributes: BitFlag;
                    /** Skip the AttributeList global attribute during wildcard expansion. */
                    skipAttributeList: BitFlag;
                    /** Skip the EventList global attribute during wildcard expansion. */
                    skipEventList: BitFlag;
                    /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                    skipCommandLists: BitFlag;
                    /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                    skipCustomElements: BitFlag;
                    /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                    skipFixedAttributes: BitFlag;
                    /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                    skipChangesOmittedAttributes: BitFlag;
                    /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                    skipDiagnosticsClusters: BitFlag;
                }>>;
            }>>;
            status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
                clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            }>>;
        }>>;
        attributeData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
                attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
                listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                    skipRootNode: BitFlag;
                    /** Skip several large global attributes during wildcard expansion. */
                    skipGlobalAttributes: BitFlag;
                    /** Skip the AttributeList global attribute during wildcard expansion. */
                    skipAttributeList: BitFlag;
                    /** Skip the EventList global attribute during wildcard expansion. */
                    skipEventList: BitFlag;
                    /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                    skipCommandLists: BitFlag;
                    /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                    skipCustomElements: BitFlag;
                    /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                    skipFixedAttributes: BitFlag;
                    /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                    skipChangesOmittedAttributes: BitFlag;
                    /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                    skipDiagnosticsClusters: BitFlag;
                }>>;
            }>>;
            data: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream>;
        }>>;
    }>[]>;
    /** A list of zero or more event reports. */
    eventReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        eventStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
                eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
                isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>>;
            status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
                clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            }>>;
        }>>;
        eventData: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
                eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
                isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            }>>;
            eventNumber: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EventNumber.js").EventNumber>;
            priority: import("../../tlv/TlvObject.js").FieldType<EventPriority>;
            epochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            systemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            deltaEpochTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            deltaSystemTimestamp: import("../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            data: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
        }>>;
    }>[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    /** Do not send a response to this action. */
    suppressResponse: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** Special version of the DataReport Message with pre-encoded report entries used by Send logic */
export declare const TlvDataReportForSend: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A SubscriptionId only used in a Subscribe interaction. */
    subscriptionId: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    /** A list of zero or more attribute data reports, */
    attributeReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream[]>;
    /** A list of zero or more event reports. */
    eventReports: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    /** Do not send a response to this action. */
    suppressResponse: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.4 */
export declare const TlvSubscribeRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** False to terminate existing subscriptions from initiator. */
    keepSubscriptions: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** The requested minimum interval boundary floor in seconds. */
    minIntervalFloorSeconds: import("../../tlv/TlvObject.js").FieldType<number>;
    /** The requested maximum interval boundary ceiling in seconds. */
    maxIntervalCeilingSeconds: import("../../tlv/TlvObject.js").FieldType<number>;
    /** A list of zero or more request paths to cluster attribute data. */
    attributeRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
        listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
        wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
            skipRootNode: BitFlag;
            /** Skip several large global attributes during wildcard expansion. */
            skipGlobalAttributes: BitFlag;
            /** Skip the AttributeList global attribute during wildcard expansion. */
            skipAttributeList: BitFlag;
            /** Skip the EventList global attribute during wildcard expansion. */
            skipEventList: BitFlag;
            /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
            skipCommandLists: BitFlag;
            /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
            skipCustomElements: BitFlag;
            /** Skip any Fixed (F) quality attributes during wildcard expansion. */
            skipFixedAttributes: BitFlag;
            /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
            skipChangesOmittedAttributes: BitFlag;
            /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
            skipDiagnosticsClusters: BitFlag;
        }>>;
    }>[]>;
    /** A list of zero or more request paths to cluster events. */
    eventRequests: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
        clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
        eventId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EventId.js").EventId>;
        isUrgent: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    }>[]>;
    /** A list of zero or more minimum event numbers per specific node. */
    eventFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
        eventMin: import("../../tlv/TlvObject.js").FieldType<number | bigint>;
    }>[]>;
    /** Limits the data read within fabric-scoped lists to the accessing fabric. */
    isFabricFiltered: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** A list of zero or more cluster instance data versions. */
    dataVersionFilters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
        }>>;
        dataVersion: import("../../tlv/TlvObject.js").FieldType<number>;
    }>[]>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.5 */
export declare const TlvSubscribeResponse: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** Identifies the subscription. */
    subscriptionId: import("../../tlv/TlvObject.js").FieldType<number>;
    /** The final maximum interval for the subscription in seconds. */
    maxInterval: import("../../tlv/TlvObject.js").FieldType<number>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.9 */
export declare const TlvInvokeRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** Do not send a response to this action. */
    suppressResponse: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** Flag action as part of a timed invoke transaction. */
    timedRequest: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** Cluster command(s) to invoke. */
    invokeRequests: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
            commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
        }>>;
        commandFields: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
        commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>[]>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.10 */
export declare const TlvInvokeResponse: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** Deprecated and ignored by client, but required for backward compatibility reasons. */
    suppressResponse: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** Command response or status. */
    invokeResponses: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        command: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
                commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
            }>>;
            commandFields: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvSchema.js").TlvStream>;
            commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
        status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            commandPath: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
                clusterId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/ClusterId.js").ClusterId>;
                commandId: import("../../tlv/TlvObject.js").FieldType<import("../../datatype/CommandId.js").CommandId>;
            }>>;
            status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
                clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            }>>;
            commandRef: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        }>>;
    }>[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
export declare const TlvInvokeResponseForSend: import("../../tlv/TlvObject.js").ObjectSchema<{
    suppressResponse: import("../../tlv/TlvObject.js").FieldType<boolean>;
    invokeResponses: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.8 */
export declare const TlvTimedRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** An interval, in milliseconds, to expect a following action. */
    timeout: import("../../tlv/TlvObject.js").FieldType<number>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.6 */
export declare const TlvWriteRequest: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** Do not send a response to this action. */
    suppressResponse: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    /** Flag action as part of a timed write transaction. */
    timedRequest: import("../../tlv/TlvObject.js").FieldType<boolean>;
    /** A list of one or more path and data tuples. */
    writeRequests: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        dataVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
            listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
            wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                skipRootNode: BitFlag;
                /** Skip several large global attributes during wildcard expansion. */
                skipGlobalAttributes: BitFlag;
                /** Skip the AttributeList global attribute during wildcard expansion. */
                skipAttributeList: BitFlag;
                /** Skip the EventList global attribute during wildcard expansion. */
                skipEventList: BitFlag;
                /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                skipCommandLists: BitFlag;
                /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                skipCustomElements: BitFlag;
                /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                skipFixedAttributes: BitFlag;
                /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                skipChangesOmittedAttributes: BitFlag;
                /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                skipDiagnosticsClusters: BitFlag;
            }>>;
        }>>;
        data: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvSchema.js").TlvStream>;
    }>[]>;
    moreChunkedMessages: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
/** @see {@link MatterSpecification.v13.Core}, section 10.7.7 */
export declare const TlvWriteResponse: import("../../tlv/TlvObject.js").ObjectSchema<{
    /** A list of zero or more concrete paths indicating errors or successes. */
    writeResponses: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        path: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            enableTagCompression: import("../../tlv/TlvObject.js").OptionalFieldType<boolean>;
            nodeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/NodeId.js").NodeId>;
            endpointId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/EndpointNumber.js").EndpointNumber>;
            clusterId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/ClusterId.js").ClusterId>;
            attributeId: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/AttributeId.js").AttributeId>;
            listIndex: import("../../tlv/TlvObject.js").OptionalFieldType<number | null>;
            wildcardPathFlags: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
                skipRootNode: BitFlag;
                /** Skip several large global attributes during wildcard expansion. */
                skipGlobalAttributes: BitFlag;
                /** Skip the AttributeList global attribute during wildcard expansion. */
                skipAttributeList: BitFlag;
                /** Skip the EventList global attribute during wildcard expansion. */
                skipEventList: BitFlag;
                /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
                skipCommandLists: BitFlag;
                /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
                skipCustomElements: BitFlag;
                /** Skip any Fixed (F) quality attributes during wildcard expansion. */
                skipFixedAttributes: BitFlag;
                /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
                skipChangesOmittedAttributes: BitFlag;
                /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
                skipDiagnosticsClusters: BitFlag;
            }>>;
        }>>;
        status: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
            status: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
            clusterStatus: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../cluster/export.js").Status>;
        }>>;
    }>[]>;
    interactionModelRevision: import("../../tlv/TlvObject.js").FieldType<number>;
}>;
//# sourceMappingURL=InteractionProtocol.d.ts.map