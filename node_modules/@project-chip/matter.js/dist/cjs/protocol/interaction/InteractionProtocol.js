"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var InteractionProtocol_exports = {};
__export(InteractionProtocol_exports, {
  TlvAttributeData: () => TlvAttributeData,
  TlvAttributePath: () => TlvAttributePath,
  TlvAttributeReport: () => TlvAttributeReport,
  TlvAttributeReportData: () => TlvAttributeReportData,
  TlvAttributeStatus: () => TlvAttributeStatus,
  TlvClusterPath: () => TlvClusterPath,
  TlvCommandData: () => TlvCommandData,
  TlvCommandPath: () => TlvCommandPath,
  TlvCommandStatus: () => TlvCommandStatus,
  TlvDataReport: () => TlvDataReport,
  TlvDataReportForSend: () => TlvDataReportForSend,
  TlvDataVersionFilter: () => TlvDataVersionFilter,
  TlvEventData: () => TlvEventData,
  TlvEventFilter: () => TlvEventFilter,
  TlvEventPath: () => TlvEventPath,
  TlvEventReport: () => TlvEventReport,
  TlvEventStatus: () => TlvEventStatus,
  TlvInvokeRequest: () => TlvInvokeRequest,
  TlvInvokeResponse: () => TlvInvokeResponse,
  TlvInvokeResponseData: () => TlvInvokeResponseData,
  TlvInvokeResponseForSend: () => TlvInvokeResponseForSend,
  TlvReadRequest: () => TlvReadRequest,
  TlvStatus: () => TlvStatus,
  TlvStatusResponse: () => TlvStatusResponse,
  TlvSubscribeRequest: () => TlvSubscribeRequest,
  TlvSubscribeResponse: () => TlvSubscribeResponse,
  TlvTimedRequest: () => TlvTimedRequest,
  TlvWriteRequest: () => TlvWriteRequest,
  TlvWriteResponse: () => TlvWriteResponse,
  WildcardPathFlagsBitmap: () => WildcardPathFlagsBitmap
});
module.exports = __toCommonJS(InteractionProtocol_exports);
var import_AttributeId = require("../../datatype/AttributeId.js");
var import_ClusterId = require("../../datatype/ClusterId.js");
var import_CommandId = require("../../datatype/CommandId.js");
var import_EndpointNumber = require("../../datatype/EndpointNumber.js");
var import_EventId = require("../../datatype/EventId.js");
var import_EventNumber = require("../../datatype/EventNumber.js");
var import_NodeId = require("../../datatype/NodeId.js");
var import_BitmapSchema = require("../../schema/BitmapSchema.js");
var import_TlvAny = require("../../tlv/TlvAny.js");
var import_TlvArray = require("../../tlv/TlvArray.js");
var import_TlvBoolean = require("../../tlv/TlvBoolean.js");
var import_TlvNullable = require("../../tlv/TlvNullable.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_TlvObject = require("../../tlv/TlvObject.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const WildcardPathFlagsBitmap = {
  /** Skip the Root Node endpoint (endpoint 0) during wildcard expansion. */
  skipRootNode: (0, import_BitmapSchema.BitFlag)(0),
  /** Skip several large global attributes during wildcard expansion. */
  skipGlobalAttributes: (0, import_BitmapSchema.BitFlag)(1),
  /** Skip the AttributeList global attribute during wildcard expansion. */
  skipAttributeList: (0, import_BitmapSchema.BitFlag)(2),
  /** Skip the EventList global attribute during wildcard expansion. */
  skipEventList: (0, import_BitmapSchema.BitFlag)(3),
  /** Skip the AcceptedCommandList and GeneratedCommandList global attributes during wildcard expansion. */
  skipCommandLists: (0, import_BitmapSchema.BitFlag)(4),
  /** Skip any manufacturer-specific clusters or attributes during wildcard expansion. */
  skipCustomElements: (0, import_BitmapSchema.BitFlag)(5),
  /** Skip any Fixed (F) quality attributes during wildcard expansion. */
  skipFixedAttributes: (0, import_BitmapSchema.BitFlag)(6),
  /** Skip any Changes Omitted (C) quality attributes during wildcard expansion. */
  skipChangesOmittedAttributes: (0, import_BitmapSchema.BitFlag)(7),
  /** Skip all clusters with the Diagnostics (K) quality during wildcard expansion. */
  skipDiagnosticsClusters: (0, import_BitmapSchema.BitFlag)(8)
};
const TlvAttributePath = (0, import_TlvObject.TlvTaggedList)({
  // AttributePathIB
  enableTagCompression: (0, import_TlvObject.TlvOptionalField)(0, import_TlvBoolean.TlvBoolean),
  nodeId: (0, import_TlvObject.TlvOptionalField)(1, import_NodeId.TlvNodeId),
  endpointId: (0, import_TlvObject.TlvOptionalField)(2, import_EndpointNumber.TlvEndpointNumber),
  clusterId: (0, import_TlvObject.TlvOptionalField)(3, import_ClusterId.TlvClusterId),
  attributeId: (0, import_TlvObject.TlvOptionalField)(4, import_AttributeId.TlvAttributeId),
  listIndex: (0, import_TlvObject.TlvOptionalField)(5, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt16)),
  wildcardPathFlags: (0, import_TlvObject.TlvOptionalField)(6, (0, import_TlvNumber.TlvBitmap)(import_TlvNumber.TlvUInt32, WildcardPathFlagsBitmap))
});
const TlvEventPath = (0, import_TlvObject.TlvTaggedList)({
  // EventPathIB
  nodeId: (0, import_TlvObject.TlvOptionalField)(0, import_NodeId.TlvNodeId),
  endpointId: (0, import_TlvObject.TlvOptionalField)(1, import_EndpointNumber.TlvEndpointNumber),
  clusterId: (0, import_TlvObject.TlvOptionalField)(2, import_ClusterId.TlvClusterId),
  eventId: (0, import_TlvObject.TlvOptionalField)(3, import_EventId.TlvEventId),
  isUrgent: (0, import_TlvObject.TlvOptionalField)(4, import_TlvBoolean.TlvBoolean)
});
const TlvEventData = (0, import_TlvObject.TlvObject)({
  // EventDataIB
  path: (0, import_TlvObject.TlvField)(0, TlvEventPath),
  eventNumber: (0, import_TlvObject.TlvField)(1, import_EventNumber.TlvEventNumber),
  priority: (0, import_TlvObject.TlvField)(2, (0, import_TlvNumber.TlvEnum)()),
  epochTimestamp: (0, import_TlvObject.TlvOptionalField)(3, import_TlvNumber.TlvPosixMs),
  systemTimestamp: (0, import_TlvObject.TlvOptionalField)(4, import_TlvNumber.TlvSysTimeMS),
  deltaEpochTimestamp: (0, import_TlvObject.TlvOptionalField)(5, import_TlvNumber.TlvPosixMs),
  deltaSystemTimestamp: (0, import_TlvObject.TlvOptionalField)(6, import_TlvNumber.TlvSysTimeMS),
  data: (0, import_TlvObject.TlvOptionalField)(7, import_TlvAny.TlvAny)
});
const TlvEventFilter = (0, import_TlvObject.TlvObject)({
  // EventFilterIB
  nodeId: (0, import_TlvObject.TlvOptionalField)(0, import_NodeId.TlvNodeId),
  eventMin: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvUInt64)
});
const TlvClusterPath = (0, import_TlvObject.TlvTaggedList)({
  // ClusterPathIB
  nodeId: (0, import_TlvObject.TlvOptionalField)(0, import_NodeId.TlvNodeId),
  endpointId: (0, import_TlvObject.TlvField)(1, import_EndpointNumber.TlvEndpointNumber),
  clusterId: (0, import_TlvObject.TlvField)(2, import_ClusterId.TlvClusterId)
});
const TlvDataVersionFilter = (0, import_TlvObject.TlvObject)({
  // DataVersionFilterIB
  path: (0, import_TlvObject.TlvField)(0, TlvClusterPath),
  dataVersion: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvUInt32)
});
const TlvStatus = (0, import_TlvObject.TlvObject)({
  // StatusIB
  status: (0, import_TlvObject.TlvOptionalField)(0, (0, import_TlvNumber.TlvEnum)()),
  // 8Bit
  clusterStatus: (0, import_TlvObject.TlvOptionalField)(1, (0, import_TlvNumber.TlvEnum)())
});
const TlvAttributeStatus = (0, import_TlvObject.TlvObject)({
  // AttributeStatusIB
  path: (0, import_TlvObject.TlvField)(0, TlvAttributePath),
  status: (0, import_TlvObject.TlvField)(1, TlvStatus)
});
const TlvAttributeData = (0, import_TlvObject.TlvObject)({
  // AttributeDataIB version for Non-Reports
  dataVersion: (0, import_TlvObject.TlvOptionalField)(0, import_TlvNumber.TlvUInt32),
  path: (0, import_TlvObject.TlvField)(1, TlvAttributePath),
  data: (0, import_TlvObject.TlvField)(2, import_TlvAny.TlvAny)
});
const TlvAttributeReportData = (0, import_TlvObject.TlvObject)({
  // AttributeDataIB version for Reports
  dataVersion: (0, import_TlvObject.TlvOptionalField)(0, import_TlvNumber.TlvUInt32),
  path: (0, import_TlvObject.TlvField)(1, TlvAttributePath),
  data: (0, import_TlvObject.TlvField)(2, import_TlvAny.TlvAny)
});
const TlvAttributeReport = (0, import_TlvObject.TlvObject)({
  // AttributeReportIB
  attributeStatus: (0, import_TlvObject.TlvOptionalField)(0, TlvAttributeStatus),
  attributeData: (0, import_TlvObject.TlvOptionalField)(1, TlvAttributeReportData)
});
const TlvEventStatus = (0, import_TlvObject.TlvObject)({
  // EventStatusIB
  path: (0, import_TlvObject.TlvField)(0, TlvEventPath),
  status: (0, import_TlvObject.TlvField)(1, TlvStatus)
});
const TlvEventReport = (0, import_TlvObject.TlvObject)({
  // EventReportIB
  eventStatus: (0, import_TlvObject.TlvOptionalField)(0, TlvEventStatus),
  eventData: (0, import_TlvObject.TlvOptionalField)(1, TlvEventData)
});
const TlvCommandPath = (0, import_TlvObject.TlvTaggedList)({
  // CommandPathIB
  endpointId: (0, import_TlvObject.TlvOptionalField)(0, import_EndpointNumber.TlvEndpointNumber),
  clusterId: (0, import_TlvObject.TlvField)(1, import_ClusterId.TlvClusterId),
  commandId: (0, import_TlvObject.TlvField)(2, import_CommandId.TlvCommandId)
});
const TlvCommandData = (0, import_TlvObject.TlvObject)({
  // CommandDataIB
  commandPath: (0, import_TlvObject.TlvField)(0, TlvCommandPath),
  commandFields: (0, import_TlvObject.TlvOptionalField)(1, import_TlvAny.TlvAny),
  commandRef: (0, import_TlvObject.TlvOptionalField)(2, import_TlvNumber.TlvUInt16)
});
const TlvCommandStatus = (0, import_TlvObject.TlvObject)({
  // CommandStatusIB
  commandPath: (0, import_TlvObject.TlvField)(0, TlvCommandPath),
  status: (0, import_TlvObject.TlvField)(1, TlvStatus),
  commandRef: (0, import_TlvObject.TlvOptionalField)(2, import_TlvNumber.TlvUInt16)
});
const TlvInvokeResponseData = (0, import_TlvObject.TlvObject)({
  // InvokeResponseIB
  command: (0, import_TlvObject.TlvOptionalField)(0, TlvCommandData),
  status: (0, import_TlvObject.TlvOptionalField)(1, TlvCommandStatus)
});
const TlvStatusResponse = (0, import_TlvObject.TlvObject)({
  /** A status code (@see Status Codes {@link MatterSpecification.v13.Core} section 7.10.7) */
  status: (0, import_TlvObject.TlvField)(0, (0, import_TlvNumber.TlvEnum)()),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvReadRequest = (0, import_TlvObject.TlvObject)({
  /** A list of zero or more request paths to cluster attribute data. */
  attributeRequests: (0, import_TlvObject.TlvOptionalField)(0, (0, import_TlvArray.TlvArray)(TlvAttributePath)),
  /** A list of zero or more request paths to cluster events. */
  eventRequests: (0, import_TlvObject.TlvOptionalField)(1, (0, import_TlvArray.TlvArray)(TlvEventPath)),
  /** A list of zero or more minimum event numbers per specific node. */
  eventFilters: (0, import_TlvObject.TlvOptionalField)(2, (0, import_TlvArray.TlvArray)(TlvEventFilter)),
  /** Limits the data read within fabric-scoped lists to the accessing fabric. */
  isFabricFiltered: (0, import_TlvObject.TlvField)(3, import_TlvBoolean.TlvBoolean),
  /** A list of zero or more cluster instance data versions. */
  dataVersionFilters: (0, import_TlvObject.TlvOptionalField)(4, (0, import_TlvArray.TlvArray)(TlvDataVersionFilter)),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvDataReport = (0, import_TlvObject.TlvObject)({
  /** A SubscriptionId only used in a Subscribe interaction. */
  subscriptionId: (0, import_TlvObject.TlvOptionalField)(0, import_TlvNumber.TlvUInt32),
  /** A list of zero or more attribute data reports, */
  attributeReports: (0, import_TlvObject.TlvOptionalField)(1, (0, import_TlvArray.TlvArray)(TlvAttributeReport)),
  /** A list of zero or more event reports. */
  eventReports: (0, import_TlvObject.TlvOptionalField)(2, (0, import_TlvArray.TlvArray)(TlvEventReport)),
  moreChunkedMessages: (0, import_TlvObject.TlvOptionalField)(3, import_TlvBoolean.TlvBoolean),
  /** Do not send a response to this action. */
  suppressResponse: (0, import_TlvObject.TlvOptionalField)(4, import_TlvBoolean.TlvBoolean),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvDataReportForSend = (0, import_TlvObject.TlvObject)({
  /** A SubscriptionId only used in a Subscribe interaction. */
  subscriptionId: (0, import_TlvObject.TlvOptionalField)(0, import_TlvNumber.TlvUInt32),
  /** A list of zero or more attribute data reports, */
  attributeReports: (0, import_TlvObject.TlvOptionalField)(1, (0, import_TlvArray.TlvArray)(import_TlvAny.TlvAny)),
  /** A list of zero or more event reports. */
  eventReports: (0, import_TlvObject.TlvOptionalField)(2, (0, import_TlvArray.TlvArray)(import_TlvAny.TlvAny)),
  moreChunkedMessages: (0, import_TlvObject.TlvOptionalField)(3, import_TlvBoolean.TlvBoolean),
  /** Do not send a response to this action. */
  suppressResponse: (0, import_TlvObject.TlvOptionalField)(4, import_TlvBoolean.TlvBoolean),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvSubscribeRequest = (0, import_TlvObject.TlvObject)({
  /** False to terminate existing subscriptions from initiator. */
  keepSubscriptions: (0, import_TlvObject.TlvField)(0, import_TlvBoolean.TlvBoolean),
  /** The requested minimum interval boundary floor in seconds. */
  minIntervalFloorSeconds: (0, import_TlvObject.TlvField)(1, import_TlvNumber.TlvUInt16),
  /** The requested maximum interval boundary ceiling in seconds. */
  maxIntervalCeilingSeconds: (0, import_TlvObject.TlvField)(2, import_TlvNumber.TlvUInt16),
  /** A list of zero or more request paths to cluster attribute data. */
  attributeRequests: (0, import_TlvObject.TlvOptionalField)(3, (0, import_TlvArray.TlvArray)(TlvAttributePath)),
  /** A list of zero or more request paths to cluster events. */
  eventRequests: (0, import_TlvObject.TlvOptionalField)(4, (0, import_TlvArray.TlvArray)(TlvEventPath)),
  /** A list of zero or more minimum event numbers per specific node. */
  eventFilters: (0, import_TlvObject.TlvOptionalField)(5, (0, import_TlvArray.TlvArray)(TlvEventFilter)),
  /** Limits the data read within fabric-scoped lists to the accessing fabric. */
  isFabricFiltered: (0, import_TlvObject.TlvField)(7, import_TlvBoolean.TlvBoolean),
  /** A list of zero or more cluster instance data versions. */
  dataVersionFilters: (0, import_TlvObject.TlvOptionalField)(8, (0, import_TlvArray.TlvArray)(TlvDataVersionFilter)),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvSubscribeResponse = (0, import_TlvObject.TlvObject)({
  /** Identifies the subscription. */
  subscriptionId: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt32),
  /** The final maximum interval for the subscription in seconds. */
  maxInterval: (0, import_TlvObject.TlvField)(2, import_TlvNumber.TlvUInt16),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvInvokeRequest = (0, import_TlvObject.TlvObject)({
  /** Do not send a response to this action. */
  suppressResponse: (0, import_TlvObject.TlvField)(0, import_TlvBoolean.TlvBoolean),
  /** Flag action as part of a timed invoke transaction. */
  timedRequest: (0, import_TlvObject.TlvField)(1, import_TlvBoolean.TlvBoolean),
  /** Cluster command(s) to invoke. */
  invokeRequests: (0, import_TlvObject.TlvField)(2, (0, import_TlvArray.TlvArray)(TlvCommandData)),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvInvokeResponse = (0, import_TlvObject.TlvObject)({
  /** Deprecated and ignored by client, but required for backward compatibility reasons. */
  suppressResponse: (0, import_TlvObject.TlvField)(0, import_TlvBoolean.TlvBoolean),
  /** Command response or status. */
  invokeResponses: (0, import_TlvObject.TlvField)(1, (0, import_TlvArray.TlvArray)(TlvInvokeResponseData)),
  moreChunkedMessages: (0, import_TlvObject.TlvOptionalField)(2, import_TlvBoolean.TlvBoolean),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvInvokeResponseForSend = (0, import_TlvObject.TlvObject)({
  suppressResponse: (0, import_TlvObject.TlvField)(0, import_TlvBoolean.TlvBoolean),
  invokeResponses: (0, import_TlvObject.TlvField)(1, (0, import_TlvArray.TlvArray)(import_TlvAny.TlvAny)),
  moreChunkedMessages: (0, import_TlvObject.TlvOptionalField)(2, import_TlvBoolean.TlvBoolean),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvTimedRequest = (0, import_TlvObject.TlvObject)({
  /** An interval, in milliseconds, to expect a following action. */
  timeout: (0, import_TlvObject.TlvField)(0, import_TlvNumber.TlvUInt16),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvWriteRequest = (0, import_TlvObject.TlvObject)({
  /** Do not send a response to this action. */
  suppressResponse: (0, import_TlvObject.TlvOptionalField)(0, import_TlvBoolean.TlvBoolean),
  /** Flag action as part of a timed write transaction. */
  timedRequest: (0, import_TlvObject.TlvField)(1, import_TlvBoolean.TlvBoolean),
  /** A list of one or more path and data tuples. */
  writeRequests: (0, import_TlvObject.TlvField)(2, (0, import_TlvArray.TlvArray)(TlvAttributeData)),
  moreChunkedMessages: (0, import_TlvObject.TlvOptionalField)(3, import_TlvBoolean.TlvBoolean),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
const TlvWriteResponse = (0, import_TlvObject.TlvObject)({
  /** A list of zero or more concrete paths indicating errors or successes. */
  writeResponses: (0, import_TlvObject.TlvField)(0, (0, import_TlvArray.TlvArray)(TlvAttributeStatus)),
  interactionModelRevision: (0, import_TlvObject.TlvField)(255, import_TlvNumber.TlvUInt8)
});
//# sourceMappingURL=InteractionProtocol.js.map
