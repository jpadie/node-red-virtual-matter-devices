{
  "version": 3,
  "sources": ["../../../../src/node/paths/AttributePath.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { AttributeId } from \"../../datatype/AttributeId.js\";\nimport { EntryIndex } from \"../../datatype/EntryIndex.js\";\nimport { FieldId } from \"../../datatype/FieldId.js\";\nimport { BasePath } from \"./BasePath.js\";\n\nexport namespace AttributePath {\n    /**\n     * Attribute name or ID.\n     */\n    export type Address = AttributeId | string;\n\n    /**\n     * Field name or ID.\n     */\n    export type FieldAddress = FieldId | string;\n\n    /**\n     * Addresses a collection (struct or list) within an attribute.\n     *\n     * @see {@link MatterSpecification.v11.Core} \u00A7 8.9.2.2\n     */\n    export type Nested = ({ field: FieldAddress } | { entry: EntryIndex })[];\n\n    /**\n     * Addresses attribute data for read operations.  Note that if you\n     * specify the attribute you must also specify the cluster except for\n     * global attributes.\n     *\n     * @see {@link MatterSpecification.v11.Core} \u00A7 8.9.2.1 & 8.9.2.3\n     */\n    export type Read = BasePath.Read & {\n        attribute?: Address;\n        subpath?: Nested;\n    };\n\n    /**\n     * Addresses attribute data for write operations.\n     *\n     * @see {@link MatterSpecification.v11.Core} \u00A7 8.9.2.1 & 8.9.2.4\n     */\n    export type Write = BasePath.Write & {\n        attribute: Address;\n        subpath?: Nested;\n    };\n\n    /**\n     * Addresses a specific attribute.\n     */\n    export type Concrete = BasePath.Concrete & {\n        attribute: Address;\n        subpath?: Nested;\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
