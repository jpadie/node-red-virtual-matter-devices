"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ServerNode_exports = {};
__export(ServerNode_exports, {
  ServerNode: () => ServerNode
});
module.exports = __toCommonJS(ServerNode_exports);
var import_CommissioningBehavior = require("../behavior/system/commissioning/CommissioningBehavior.js");
var import_NetworkServer = require("../behavior/system/network/NetworkServer.js");
var import_ServerNetworkRuntime = require("../behavior/system/network/ServerNetworkRuntime.js");
var import_ProductDescriptionServer = require("../behavior/system/product-description/ProductDescriptionServer.js");
var import_SessionsBehavior = require("../behavior/system/sessions/SessionsBehavior.js");
var import_MatterError = require("../common/MatterError.js");
var import_EndpointServer = require("../endpoint/EndpointServer.js");
var import_RootEndpoint = require("../endpoint/definitions/system/RootEndpoint.js");
var import_EndpointInitializer = require("../endpoint/properties/EndpointInitializer.js");
var import_DiagnosticSource = require("../log/DiagnosticSource.js");
var import_Construction = require("../util/Construction.js");
var import_Error = require("../util/Error.js");
var import_Node = require("./Node.js");
var import_IdentityService = require("./server/IdentityService.js");
var import_ServerEndpointInitializer = require("./server/ServerEndpointInitializer.js");
var import_ServerStore = require("./server/storage/ServerStore.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class FactoryResetError extends import_MatterError.MatterError {
  constructor(message, cause) {
    super(message);
    this.cause = (0, import_Error.errorOf)(cause);
  }
}
class ServerNode extends import_Node.Node {
  constructor(definition, options) {
    super(import_Node.Node.nodeConfigFor(ServerNode.RootEndpoint, definition, options));
    import_DiagnosticSource.DiagnosticSource.add(this);
  }
  static async create(definition, options) {
    return await (0, import_Construction.asyncNew)(this, definition, options);
  }
  createRuntime() {
    return new import_ServerNetworkRuntime.ServerNetworkRuntime(this);
  }
  async [import_Construction.Construction.destruct]() {
    await super[import_Construction.Construction.destruct]();
    if (this.env.has(import_ServerStore.ServerStore)) {
      const store = this.env.get(import_ServerStore.ServerStore);
      await store.close();
      this.env.delete(import_ServerStore.ServerStore, store);
    }
  }
  async reset() {
    await super.reset();
    await import_EndpointServer.EndpointServer.forEndpoint(this)[Symbol.asyncDispose]();
  }
  /**
   * Perform a factory reset of the node.
   */
  async factoryReset() {
    try {
      await this.construction;
      const isOnline = this.lifecycle.isOnline;
      if (isOnline) {
        await this.cancel();
      }
      this.statusUpdate("resetting to factory defaults");
      await this.reset();
      await this.resetStorage();
      this.construction.start();
      if (isOnline) {
        await this.start();
      } else {
        await this.construction.ready;
      }
    } catch (e) {
      this.construction.crash();
      throw new FactoryResetError(`Error during factory reset of ${this}`, e);
    }
  }
  async advertiseNow() {
    await this.act(`advertiseNow<${this}>`, (agent) => agent.get(import_NetworkServer.NetworkServer).advertiseNow());
  }
  async initialize() {
    const serverStore = await import_ServerStore.ServerStore.create(this.env, this.id);
    this.env.set(import_ServerStore.ServerStore, serverStore);
    this.env.set(import_EndpointInitializer.EndpointInitializer, new import_ServerEndpointInitializer.ServerEndpointInitializer(this.env));
    this.env.set(import_IdentityService.IdentityService, new import_IdentityService.IdentityService(this));
    return super.initialize();
  }
  /**
   * By default on factory reset we erase all stored data.
   *
   * If this is inappropriate for your application you may override to alter the behavior.   Matter requires that all
   * "security- and privacy-related data and key material" is removed on factory reset.
   *
   * @see {@link MatterSpecification.v12.Core} ยง 13.4
   */
  async resetStorage() {
    await this.env.get(import_ServerStore.ServerStore).erase();
  }
}
((ServerNode2) => {
  ServerNode2.RootEndpoint = import_RootEndpoint.RootEndpoint.with(
    import_CommissioningBehavior.CommissioningBehavior,
    import_NetworkServer.NetworkServer,
    import_ProductDescriptionServer.ProductDescriptionServer,
    import_SessionsBehavior.SessionsBehavior
  );
})(ServerNode || (ServerNode = {}));
//# sourceMappingURL=ServerNode.js.map
