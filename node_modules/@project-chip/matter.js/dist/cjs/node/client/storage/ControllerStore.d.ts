/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Destructable } from "../../../common/Lifecycle.js";
import { Environment } from "../../../environment/Environment.js";
import { StorageContext } from "../../../storage/StorageContext.js";
import { StorageManager } from "../../../storage/StorageManager.js";
import { Construction } from "../../../util/Construction.js";
/**
 * Non-volatile state management for a {@link ControllerNode}.
 *
 * The default implementation for matter.js uses synchronous APIs for storage.
 * However, this will change in the future, and other implementations may be
 * backed by asynchronous storage.  So the public API is asynchronous.
 */
export declare class ControllerStore implements Destructable {
    #private;
    get construction(): Construction<ControllerStore>;
    /**
     * Create a new store.
     *
     * TODO - implement conversion from 0.7 format so people can change API seamlessly
     */
    constructor(environment: Environment, nodeId?: string);
    static create(environment: Environment, nodeId: string): Promise<ControllerStore>;
    erase(): Promise<void>;
    close(): Promise<void>;
    get sessionStorage(): StorageContext<any>;
    get credentialsStorage(): StorageContext<any>;
    get nodesStorage(): StorageContext<any>;
    get storage(): StorageManager<any>;
}
//# sourceMappingURL=ControllerStore.d.ts.map