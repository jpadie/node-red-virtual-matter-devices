{
  "version": 3,
  "sources": ["../../../src/common/Lifecycle.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { ImplementationError, MatterAggregateError } from \"./MatterError.js\";\n\nexport namespace Lifecycle {\n    /**\n     * Standard statuses in an object's lifecycle.\n     */\n    export enum Status {\n        Unknown = \"unknown\",\n        Inactive = \"inactive\",\n        Initializing = \"initializing\",\n        Active = \"active\",\n        Crashed = \"crashed\",\n        Destroying = \"destroying\",\n        Destroyed = \"destroyed\",\n    }\n\n    /**\n     * Lifecycle status for multiple items.\n     */\n    export type Map<T extends keyof any> = Record<T, Status>;\n\n    /**\n     * Assert subject is active.\n     */\n    export function assertActive(status: Status, description?: string) {\n        if (!description) {\n            description = \"dependency\";\n        }\n\n        switch (status) {\n            case Status.Active:\n                return;\n\n            case Status.Inactive:\n                throw new UninitializedDependencyError(description, \"is not initialized\");\n\n            case Status.Initializing:\n                throw new UninitializedDependencyError(description, \"is still initializing\");\n\n            case Status.Crashed:\n                throw new CrashedDependencyError(description, \"initialization failed\");\n\n            case Status.Destroying:\n                throw new DestroyedDependencyError(description, \"is closing\");\n\n            case Status.Destroyed:\n                throw new DestroyedDependencyError(description, \"is closed\");\n        }\n\n        throw new DependencyLifecycleError(description, `status \"${status}\" is unknown`);\n    }\n}\n\n/**\n * Base class for errors related to the lifecycle of a dependency.\n */\nexport class DependencyLifecycleError extends ImplementationError {\n    constructor(what: string, why: string) {\n        super(`${what} ${why}`);\n    }\n}\n\n/**\n * Standard interface for objects that have a primary task that may initiate after construction.\n */\nexport interface Startable {\n    /**\n     * Commence with the object's primary activity.\n     *\n     * Start should have no effect if the object is already started.\n     */\n    start(): void;\n}\n\n/**\n * Standard interface for objects supporting a task that may be aborted or stopped prior to destruction.\n */\nexport interface Cancellable {\n    /**\n     * Stop the object's primary activity.  This should result in termination as quickly as possible.\n     *\n     * Cancellation have no effect if the object is cancelled or otherwise in a state where cancellation is irrelevant.\n     */\n    cancel(): void;\n}\n\n/**\n * Standard interface for disposing of object resources.\n */\nexport interface Destructable {\n    close(): void | Promise<void>;\n\n    [Symbol.dispose]?: () => void;\n\n    [Symbol.asyncDispose]?: () => MaybePromise<void>;\n}\n\n/**\n * Thrown when a dependency is in an unsupported state.\n */\nexport class UnsupportedDependencyStatusError extends DependencyLifecycleError {}\n\n/**\n * Thrown for actions that cannot be performed until further initialization occurs.\n */\nexport class UninitializedDependencyError extends DependencyLifecycleError {}\n\n/**\n * Thrown for actions that cannot be performed because dependency crashed.\n */\nexport class CrashedDependencyError extends DependencyLifecycleError {\n    subject?: object;\n}\n\n/**\n * Thrown for actions that cannot be performed because a dependency has been destroyed.\n */\nexport class DestroyedDependencyError extends DependencyLifecycleError {}\n\n/**\n * Thrown for actions that cannot be performed because a dependency is not supported.\n */\nexport class UnsupportedDependencyError extends DependencyLifecycleError {}\n\n/**\n * Thrown if multiple dependencies crash.\n */\nexport class CrashedDependenciesError extends MatterAggregateError {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,yBAA0D;AAP1D;AAAA;AAAA;AAAA;AAAA;AASO,IAAU;AAAA,CAAV,CAAUA,eAAV;AAII,MAAK;AAAL,IAAKC,YAAL;AACH,IAAAA,QAAA,aAAU;AACV,IAAAA,QAAA,cAAW;AACX,IAAAA,QAAA,kBAAe;AACf,IAAAA,QAAA,YAAS;AACT,IAAAA,QAAA,aAAU;AACV,IAAAA,QAAA,gBAAa;AACb,IAAAA,QAAA,eAAY;AAAA,KAPJ,SAAAD,WAAA,WAAAA,WAAA;AAkBL,WAAS,aAAa,QAAgB,aAAsB;AAC/D,QAAI,CAAC,aAAa;AACd,oBAAc;AAAA,IAClB;AAEA,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD;AAAA,MAEJ,KAAK;AACD,cAAM,IAAI,6BAA6B,aAAa,oBAAoB;AAAA,MAE5E,KAAK;AACD,cAAM,IAAI,6BAA6B,aAAa,uBAAuB;AAAA,MAE/E,KAAK;AACD,cAAM,IAAI,uBAAuB,aAAa,uBAAuB;AAAA,MAEzE,KAAK;AACD,cAAM,IAAI,yBAAyB,aAAa,YAAY;AAAA,MAEhE,KAAK;AACD,cAAM,IAAI,yBAAyB,aAAa,WAAW;AAAA,IACnE;AAEA,UAAM,IAAI,yBAAyB,aAAa,WAAW,MAAM,cAAc;AAAA,EACnF;AA1BO,EAAAA,WAAS;AAAA,GAtBH;AAsDV,MAAM,iCAAiC,uCAAoB;AAAA,EAC9D,YAAY,MAAc,KAAa;AACnC,UAAM,GAAG,IAAI,IAAI,GAAG,EAAE;AAAA,EAC1B;AACJ;AAwCO,MAAM,yCAAyC,yBAAyB;AAAC;AAKzE,MAAM,qCAAqC,yBAAyB;AAAC;AAKrE,MAAM,+BAA+B,yBAAyB;AAAA,EACjE;AACJ;AAKO,MAAM,iCAAiC,yBAAyB;AAAC;AAKjE,MAAM,mCAAmC,yBAAyB;AAAC;AAKnE,MAAM,iCAAiC,wCAAqB;AAAC;",
  "names": ["Lifecycle", "Status"]
}
