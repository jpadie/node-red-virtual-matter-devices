{
  "version": 3,
  "sources": ["../../../src/common/MatterError.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { errorOf } from \"../util/Error.js\";\n\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\n\n/**\n * Error base class for all errors thrown by this library.\n */\nexport class MatterError extends Error {\n    /**\n     * Convert the error to formatted text.\n     *\n     * Matter encodes errors with modern JS features including {@link Error#cause} and {@link AggregateError#errors}\n     * subfields.  You can use this function to ensure all error details are presented regardless of environment.\n     */\n    format(format: \"plain\" | \"ansi\" | \"html\" = \"plain\", indents = 0) {\n        let formatterFor = MatterError.formatterFor;\n        if (typeof formatterFor !== \"function\") {\n            formatterFor = MatterError.defaultFormatterFactory;\n        }\n\n        let formatter = formatterFor(format);\n        if (typeof formatter !== \"function\") {\n            formatter = fallbackFormatter;\n        }\n\n        let result = formatter(this, indents);\n        if (typeof result !== \"string\") {\n            result = `${result}`;\n        }\n\n        return result as string;\n    }\n\n    /**\n     * Node.js-style object inspection.\n     *\n     * Node's default inspection only prevents two levels of depth which may hide critical information.  It's also\n     * considerably more verbose than native matter.js formatting.  We therefore offer this custom implementation.\n     *\n     * Note that this conforms to Node's API but is not dependent on Node.\n     */\n    [inspect](depth: number, inspectionOptions?: { colors?: boolean }) {\n        const formatterFor = MatterError.formatterFor;\n        if (typeof formatterFor !== \"function\") {\n            return this;\n        }\n\n        const format = formatterFor(inspectionOptions?.colors ? \"ansi\" : \"plain\");\n        if (typeof format !== \"function\") {\n            return this;\n        }\n\n        return format(this, depth);\n    }\n\n    /**\n     * Rethrow an error unless it is an instance of this class.\n     */\n    static accept<T extends MatterError>(this: new (...args: any[]) => T, error: unknown): asserts error is T {\n        if (error instanceof this) {\n            return;\n        }\n        throw error;\n    }\n\n    /**\n     * Rethrow an error if it is an instance of this class.\n     */\n    static reject(error: unknown): void {\n        if (error instanceof this) {\n            throw error;\n        }\n    }\n\n    /**\n     * The fallback formatter factory.  This produces a limited plaintext formatter.\n     */\n    static defaultFormatterFactory = () => fallbackFormatter;\n\n    /**\n     * The error formatter factory.  The default formatter is replaced by Matter.js in ./Format.ts.\n     */\n    static formatterFor: (formatName: string) => (value: unknown, indents?: number) => unknown =\n        MatterError.defaultFormatterFactory;\n\n    // Remove when es2022\n    declare cause?: unknown;\n}\n\n/**\n * Error thrown when a Platform specific implementation was not added and so a provider (Network, Time, Crypto, etc)\n * is not available.\n */\nexport class NoProviderError extends MatterError {}\n\n/**\n * Error thrown when an internal error occurs like unexpected cases or missing data that should be there. Please\n * report such errors.\n */\nexport class InternalError extends MatterError {}\n\n/** Error thrown when a feature is not implemented yet. Please report such errors. */\nexport class NotImplementedError extends InternalError {}\n\n/** Error thrown when an unexpected case in the matter flow is encountered. Please report such errors. */\nexport class MatterFlowError extends MatterError {}\n\n/** Error thrown when an unexpected data is encountered. Please report such errors. */\nexport class UnexpectedDataError extends MatterError {}\n\n/**\n * Error thrown if most likely an implementation error is detected. Please check and correct your implementation and\n * provided data. if you are sure your code is correct please report the issue.\n */\nexport class ImplementationError extends MatterError {}\n\n/**\n * Thrown for write attempts against immutable data.\n */\nexport class ReadOnlyError extends ImplementationError {\n    constructor(message = \"This view is read-only\") {\n        super(message);\n    }\n}\n\n/**\n * Thrown for errors that have multiple underlying causes.\n */\nexport class MatterAggregateError extends AggregateError {\n    constructor(causes: Iterable<unknown>, message?: string) {\n        causes = [...causes].map(errorOf);\n        super(causes, message);\n    }\n\n    [inspect] = MatterError.prototype[inspect];\n    format = MatterError.prototype.format;\n\n    static [Symbol.hasInstance](instance: unknown) {\n        if (instance instanceof MatterError) {\n            return true;\n        }\n        return AggregateError[Symbol.hasInstance](instance);\n    }\n}\n\n/**\n * It's never reasonable to fail to present error information so we include this rudimentary fallback error formatter.\n */\nfunction fallbackFormatter(value: unknown, indents = 0) {\n    if (value === undefined || value === null) {\n        return `${value}`;\n    }\n\n    function formatOne(value: unknown, indents: number, messagePrefix: string) {\n        const { message, stack, cause, errors } = value as {\n            message?: unknown;\n            stack?: unknown;\n            cause?: unknown;\n            errors?: unknown;\n        };\n\n        let indent;\n        if (typeof indents !== \"number\" || indents < 0) {\n            indent = \"\";\n        } else {\n            indent = \"  \".repeat(indents);\n        }\n\n        const buffer = [`${indent}${messagePrefix}${message ?? \"(unknown error)\"}`];\n\n        if (stack !== undefined && stack !== null) {\n            const frames = stack.toString().split(\"\\n\");\n            frames.shift();\n            buffer.push(...frames.map(f => `${indent}  ${f.trim()}`));\n        }\n\n        if (cause !== undefined) {\n            buffer.push(formatOne(cause, indents, \"Caused by: \"));\n        }\n\n        if (typeof (errors as Iterable<unknown> | undefined)?.[Symbol.iterator] === \"function\") {\n            let causeNumber = 0;\n            for (const error of errors as Iterable<unknown>) {\n                buffer.push(formatOne(error, indents + 1, `Cause #${causeNumber++}: `));\n            }\n        }\n\n        return buffer.join(\"\\n\");\n    }\n\n    return formatOne(value, indents, \"\");\n}\n"],
  "mappings": "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",
  "names": ["value", "indents"]
}
