{
  "version": 3,
  "sources": ["../../../src/device/EndpointStructureLogger.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GlobalAttributes } from \"../cluster/Cluster.js\";\nimport { SupportedAttributeClient, UnknownSupportedAttributeClient } from \"../cluster/client/AttributeClient.js\";\nimport { ClusterClientObj } from \"../cluster/client/ClusterClientTypes.js\";\nimport { SupportedEventClient, UnknownSupportedEventClient } from \"../cluster/client/EventClient.js\";\nimport { AnyAttributeServer, FabricScopeError } from \"../cluster/server/AttributeServer.js\";\nimport { ClusterServer } from \"../cluster/server/ClusterServer.js\";\nimport { EndpointInterface } from \"../endpoint/EndpointInterface.js\";\nimport { Diagnostic } from \"../log/Diagnostic.js\";\nimport { Logger } from \"../log/Logger.js\";\n\nconst logger = Logger.get(\"EndpointStructureLogger\");\n\n/**\n * Options for logging endpoint structure. The default is that anything is logged beside \"Non Supported\" attributes and\n * events on ClusterClients. The Filter methods can be used to filter out specific endpoints or clusters if wanted.\n */\nexport type EndpointLoggingOptions = {\n    logClusterServers?: boolean;\n    logClusterClients?: boolean;\n    logChildEndpoints?: boolean;\n    logClusterGlobalAttributes?: boolean;\n    logClusterAttributes?: boolean;\n    logNotSupportedClusterAttributes?: boolean;\n    logClusterCommands?: boolean;\n    logClusterEvents?: boolean;\n    logNotSupportedClusterEvents?: boolean;\n    logNotSupportedClusterCommands?: boolean;\n    logAttributePrimitiveValues?: boolean;\n    logAttributeObjectValues?: boolean;\n\n    clusterServerFilter?: (endpoint: EndpointInterface, cluster: ClusterServer) => boolean;\n    clusterClientFilter?: (endpoint: EndpointInterface, cluster: ClusterClientObj) => boolean;\n    endpointFilter?: (endpoint: EndpointInterface) => boolean;\n};\n\nfunction getAttributeServerValue(attribute: AnyAttributeServer<any>, options: EndpointLoggingOptions = {}) {\n    let value = \"\";\n    try {\n        const attributeValue = attribute.getLocal();\n        const attributeValueType = typeof attributeValue;\n        if (\n            (attributeValueType !== \"object\" || attributeValue === null) &&\n            options.logAttributePrimitiveValues !== false\n        ) {\n            value = attributeValue === null ? \"null\" : attributeValue.toString();\n        } else if (\n            attributeValueType === \"object\" &&\n            attributeValue !== null &&\n            options.logAttributeObjectValues !== false\n        ) {\n            value = Logger.toJSON(attributeValue);\n        }\n    } catch (error) {\n        if (error instanceof FabricScopeError) {\n            value = \"Fabric-Scoped\";\n        } else {\n            value = `Error: ${(error as any).message}`;\n        }\n    }\n    return value;\n}\n\nfunction logClusterServer(\n    endpoint: EndpointInterface,\n    clusterServer: ClusterServer,\n    options: EndpointLoggingOptions = {},\n) {\n    if (options.clusterServerFilter !== undefined && !options.clusterServerFilter(endpoint, clusterServer)) return;\n\n    const featureMap = clusterServer.attributes.featureMap?.getLocal() ?? {};\n    const globalAttributes = GlobalAttributes<any>(featureMap);\n    const supportedFeatures = new Array<string>();\n    for (const featureName in featureMap) {\n        if (featureMap[featureName] === true) supportedFeatures.push(featureName);\n    }\n    logger.info(\n        `Cluster-Server \"${clusterServer.name}\" (${Diagnostic.hex(clusterServer.id)}) ${\n            supportedFeatures.length ? `(Features: ${supportedFeatures.join(\", \")})` : \"\"\n        }`,\n    );\n    if (options.logClusterGlobalAttributes !== false) {\n        Logger.nest(() => {\n            logger.info(\"Global-Attributes:\");\n            Logger.nest(() => {\n                for (const attributeName in globalAttributes) {\n                    const attribute = clusterServer.attributes[attributeName];\n                    if (attribute === undefined) continue;\n\n                    const value = getAttributeServerValue(attribute, options);\n                    logger.info(\n                        `\"${attribute.name}\" (${Diagnostic.hex(attribute.id)})${value !== \"\" ? `: value = ${value}` : \"\"}`,\n                    );\n                }\n            });\n        });\n    }\n    if (options.logClusterAttributes !== false) {\n        Logger.nest(() => {\n            logger.info(\"Attributes:\");\n            Logger.nest(() => {\n                for (const attributeName in clusterServer.attributes) {\n                    if (attributeName in globalAttributes) continue;\n                    const attribute = clusterServer.attributes[attributeName];\n                    if (attribute === undefined) continue;\n\n                    const value = getAttributeServerValue(attribute, options);\n                    logger.info(\n                        `\"${attribute.name}\" (${Diagnostic.hex(attribute.id)})${value !== \"\" ? `: value = ${value}` : \"\"}`,\n                    );\n                }\n            });\n        });\n    }\n    if (options.logClusterCommands !== false) {\n        Logger.nest(() => {\n            logger.info(\"Commands:\");\n            Logger.nest(() => {\n                const commands = clusterServer.commands;\n                for (const commandName in commands) {\n                    const command = commands[commandName];\n                    if (command === undefined) continue;\n                    logger.info(\n                        `\"${command.name}\" (${Diagnostic.hex(command.invokeId)}/${Diagnostic.hex(command.responseId)})`,\n                    );\n                }\n            });\n        });\n    }\n    if (options.logClusterEvents !== false) {\n        Logger.nest(() => {\n            logger.info(\"Events:\");\n            Logger.nest(() => {\n                const events = clusterServer.events;\n                for (const eventName in events) {\n                    const event = events[eventName];\n                    if (event === undefined) continue;\n                    logger.info(`\"${event.name}\" (${Diagnostic.hex(event.id)})`);\n                }\n            });\n        });\n    }\n}\n\nfunction logClusterClient(\n    endpoint: EndpointInterface,\n    clusterClient: ClusterClientObj,\n    options: EndpointLoggingOptions = {},\n) {\n    if (options.clusterClientFilter !== undefined && !options.clusterClientFilter(endpoint, clusterClient)) return;\n\n    const { supportedFeatures: features } = clusterClient;\n    const globalAttributes = GlobalAttributes<any>(features);\n    const supportedFeatures = new Array<string>();\n    for (const featureName in features) {\n        if (features[featureName] === true) supportedFeatures.push(featureName);\n    }\n\n    logger.info(\n        `Cluster-Client \"${clusterClient.name}\" (${Diagnostic.hex(clusterClient.id)}) ${\n            supportedFeatures.length ? `(Features: ${supportedFeatures.join(\", \")})` : \"\"\n        }`,\n    );\n    if (options.logClusterGlobalAttributes !== false) {\n        Logger.nest(() => {\n            logger.info(\"Global-Attributes:\");\n            Logger.nest(() => {\n                for (const attributeName in globalAttributes) {\n                    const attribute = clusterClient.attributes[attributeName];\n                    if (attribute === undefined) continue;\n\n                    logger.info(`\"${attribute.name}\" (${Diagnostic.hex(attribute.id)})`);\n                }\n            });\n        });\n    }\n    if (options.logClusterAttributes !== false) {\n        Logger.nest(() => {\n            logger.info(\"Attributes:\");\n            Logger.nest(() => {\n                for (const attributeName in clusterClient.attributes) {\n                    if (attributeName in globalAttributes) continue;\n                    const attribute = clusterClient.attributes[attributeName];\n                    if (attribute === undefined) continue;\n                    const supported = attribute instanceof SupportedAttributeClient;\n                    if (!supported && options.logNotSupportedClusterAttributes === false) continue;\n                    const unknown = attribute instanceof UnknownSupportedAttributeClient;\n\n                    let info = \"\";\n                    if (!supported) info += \" (Not Supported)\";\n                    if (unknown) info += \" (Unknown)\";\n\n                    logger.info(`\"${attribute.name}\" (${Diagnostic.hex(attribute.id)})${info}`);\n                }\n            });\n        });\n    }\n    if (options.logClusterCommands !== false) {\n        Logger.nest(() => {\n            logger.info(\"Commands:\");\n            Logger.nest(() => {\n                for (const commandName in clusterClient.commands) {\n                    const supported = clusterClient.isCommandSupportedByName(commandName);\n                    if (!supported && options.logNotSupportedClusterCommands === false) continue;\n                    logger.info(`\"${commandName}\"${supported ? \"\" : \" (Not Supported)\"}`);\n                }\n            });\n        });\n    }\n    if (options.logClusterEvents !== false) {\n        Logger.nest(() => {\n            logger.info(\"Events:\");\n            Logger.nest(() => {\n                for (const eventName in clusterClient.events) {\n                    const event = clusterClient.events[eventName];\n                    if (event === undefined) continue;\n                    const supported = event instanceof SupportedEventClient;\n                    if (!supported && options.logNotSupportedClusterEvents === false) continue;\n                    const unknown = event instanceof UnknownSupportedEventClient;\n\n                    let info = \"\";\n                    if (!supported) info += \" (Not Supported)\";\n                    if (unknown) info += \" (Unknown)\";\n\n                    logger.info(`\"${event.name}\" (${Diagnostic.hex(event.id)})${info}`);\n                }\n            });\n        });\n    }\n}\n\nexport function logEndpoint(\n    endpoint: EndpointInterface,\n    options: EndpointLoggingOptions = {\n        logNotSupportedClusterAttributes: false,\n        logNotSupportedClusterEvents: false,\n        logNotSupportedClusterCommands: false,\n    },\n) {\n    if (options.endpointFilter !== undefined && !options.endpointFilter(endpoint)) return;\n\n    logger.info(`Endpoint ${endpoint.number} (${endpoint.name}):`);\n    if (options.logClusterServers !== false) {\n        Logger.nest(() => {\n            logger.info(\"Cluster-Servers:\");\n            Logger.nest(() => {\n                for (const clusterServer of endpoint.getAllClusterServers()) {\n                    logClusterServer(endpoint, clusterServer, options);\n                }\n            });\n        });\n    }\n    if (options.logClusterClients !== false) {\n        Logger.nest(() => {\n            logger.info(\"Cluster-Clients:\");\n            Logger.nest(() => {\n                for (const clusterClient of endpoint.getAllClusterClients()) {\n                    logClusterClient(endpoint, clusterClient, options);\n                }\n            });\n        });\n    }\n    if (options.logChildEndpoints !== false) {\n        Logger.nest(() => {\n            logger.info(\"Child-Endpoints:\");\n            Logger.nest(() => {\n                for (const childEndpoint of endpoint.getChildEndpoints()) {\n                    logEndpoint(childEndpoint, options);\n                }\n            });\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
