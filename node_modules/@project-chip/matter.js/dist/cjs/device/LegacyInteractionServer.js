"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LegacyInteractionServer_exports = {};
__export(LegacyInteractionServer_exports, {
  LegacyInteractionServer: () => LegacyInteractionServer
});
module.exports = __toCommonJS(LegacyInteractionServer_exports);
var import_definitions = require("../cluster/definitions/index.js");
var import_AttributeServer = require("../cluster/server/AttributeServer.js");
var import_MatterError = require("../common/MatterError.js");
var import_EndpointNumber = require("../datatype/EndpointNumber.js");
var import_Diagnostic = require("../log/Diagnostic.js");
var import_Logger = require("../log/Logger.js");
var import_AccessControlManager = require("../protocol/interaction/AccessControlManager.js");
var import_InteractionServer = require("../protocol/interaction/InteractionServer.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_Logger.Logger.get("LegacyInteractionServer");
class LegacyInteractionServer extends import_InteractionServer.InteractionServer {
  #endpointStructure;
  #aclManager;
  constructor(config) {
    const { endpointStructure } = config;
    super(config);
    this.#endpointStructure = endpointStructure;
  }
  #getAclManager(session) {
    if (this.#aclManager !== void 0) {
      return this.#aclManager;
    }
    const rootEndpoint = this.#endpointStructure.getEndpoint((0, import_EndpointNumber.EndpointNumber)(0));
    if (rootEndpoint === void 0) {
      throw new import_MatterError.InternalError("Root endpoint must exist.");
    }
    const aclCluster = rootEndpoint.getClusterServer(import_definitions.AccessControlCluster);
    if (aclCluster === void 0) {
      throw new import_MatterError.InternalError("Access control cluster must exist on root endpoint.");
    }
    const aclManager = this.#aclManager = new import_AccessControlManager.AccessControlManager(aclCluster.attributes.acl.get(session, false));
    aclCluster.subscribeAclAttribute(() => {
      const completeVal = aclCluster.attributes.acl.get(session, false);
      logger.info("ACL updated", completeVal);
      aclManager.updateAccessControlList(completeVal);
    });
    return aclManager;
  }
  #assertAccess(path, exchange, desiredAccessLevel) {
    const { endpointId, clusterId } = path;
    const endpoint = this.#endpointStructure.getEndpoint(endpointId);
    if (endpoint === void 0) {
      throw new import_MatterError.InternalError("Endpoint not found for ACL check. This should never happen.");
    }
    const aclManager = this.#getAclManager(exchange.session);
    if (!aclManager.allowsPrivilege(exchange.session, endpoint, clusterId, desiredAccessLevel)) {
      throw new import_AccessControlManager.AccessDeniedError(
        `Access to ${endpointId}/${import_Diagnostic.Diagnostic.hex(clusterId)} denied on ${exchange.session.name}.`
      );
    }
  }
  async readAttribute(path, attribute, exchange, isFabricFiltered, message, endpoint) {
    this.#assertAccess(path, exchange, attribute.readAcl);
    const data = await super.readAttribute(path, attribute, exchange, isFabricFiltered, message, endpoint);
    if (attribute instanceof import_AttributeServer.FabricScopedAttributeServer && !isFabricFiltered) {
      const { value, version } = data;
      return {
        value: attribute.sanitizeFabricSensitiveFields(
          value,
          exchange.session.fabric
        ),
        version
      };
    }
    return data;
  }
  async readEvent(path, eventFilters, event, exchange, isFabricFiltered, message, endpoint) {
    this.#assertAccess(path, exchange, event.readAcl);
    return super.readEvent(path, eventFilters, event, exchange, isFabricFiltered, message, endpoint);
  }
  async writeAttribute(path, attribute, value, exchange, message, endpoint, receivedWithinTimedInteraction, isListWrite) {
    this.#assertAccess(path, exchange, attribute.writeAcl);
    return super.writeAttribute(
      path,
      attribute,
      value,
      exchange,
      message,
      endpoint,
      receivedWithinTimedInteraction,
      isListWrite
    );
  }
  async invokeCommand(path, command, exchange, commandFields, message, endpoint, receivedWithinTimedInteraction = false) {
    this.#assertAccess(path, exchange, command.invokeAcl);
    return super.invokeCommand(
      path,
      command,
      exchange,
      commandFields,
      message,
      endpoint,
      receivedWithinTimedInteraction
    );
  }
}
//# sourceMappingURL=LegacyInteractionServer.js.map
