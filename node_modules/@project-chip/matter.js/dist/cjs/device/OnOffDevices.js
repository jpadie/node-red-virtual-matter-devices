"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OnOffDevices_exports = {};
__export(OnOffDevices_exports, {
  OnOffBaseDevice: () => OnOffBaseDevice,
  OnOffLightDevice: () => OnOffLightDevice,
  OnOffPluginUnitDevice: () => OnOffPluginUnitDevice,
  getClusterInitialAttributeValues: () => getClusterInitialAttributeValues
});
module.exports = __toCommonJS(OnOffDevices_exports);
var import_GroupsCluster = require("../cluster/definitions/GroupsCluster.js");
var import_IdentifyCluster = require("../cluster/definitions/IdentifyCluster.js");
var import_OnOffCluster = require("../cluster/definitions/OnOffCluster.js");
var import_GroupsServer = require("../cluster/server/GroupsServer.js");
var import_IdentifyServer = require("../cluster/server/IdentifyServer.js");
var import_OnOffServer = require("../cluster/server/OnOffServer.js");
var import_NamedHandler = require("../util/NamedHandler.js");
var import_Device = require("./Device.js");
var import_DeviceTypes = require("./DeviceTypes.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
function getClusterInitialAttributeValues(attributeInitialValues, cluster) {
  if (attributeInitialValues === void 0) return void 0;
  return attributeInitialValues[cluster.id];
}
class OnOffBaseDevice extends (0, import_NamedHandler.extendPublicHandlerMethods)(import_Device.Device) {
  /**
   * Creates a new OnOffBaseDevice
   *
   * @protected
   * @param definition Device type definition of the device to create
   * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
   * @param options Optional endpoint options
   * @param isLighting Define if Lighting feature is set
   */
  constructor(definition, attributeInitialValues, options = {}, isLighting = false) {
    super(definition, options);
    this.isLighting = isLighting;
    this.addDeviceClusters(attributeInitialValues);
  }
  /**
   * Adds mandatory clusters to the device
   *
   * @protected
   * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters
   * @param excludeList List of clusters to exclude from being added
   */
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    if (!excludeList.includes(import_IdentifyCluster.Identify.Cluster.id)) {
      this.addClusterServer(
        (0, import_IdentifyServer.createDefaultIdentifyClusterServer)({
          identify: async (data) => await this._executeHandler("identify", data)
        })
      );
    }
    if (!excludeList.includes(import_GroupsCluster.Groups.Cluster.id)) {
      this.addClusterServer((0, import_GroupsServer.createDefaultGroupsClusterServer)());
    }
    if (!excludeList.includes(import_OnOffCluster.OnOff.Cluster.id)) {
      this.addClusterServer(
        (0, import_OnOffServer.createDefaultOnOffClusterServer)(
          this.commandHandler,
          getClusterInitialAttributeValues(attributeInitialValues, import_OnOffCluster.OnOff.Cluster),
          this.isLighting
        )
      );
    }
  }
  /**
   * Turns the device on or off
   * This is an example f a convenient device class API to control the device without need to access clusters
   *
   * @param onOff true to turn on, false to turn off
   */
  setOnOff(onOff) {
    this.getClusterServer(import_OnOffCluster.OnOff.Cluster)?.setOnOffAttribute(onOff);
  }
  getOnOff() {
    return this.getClusterServer(import_OnOffCluster.OnOff.Cluster)?.getOnOffAttribute() ?? false;
  }
  /**
   * Toggles the device on or off
   * This is an example f a convenient device class API to control the device without need to access clusters
   */
  toggle() {
    const cluster = this.getClusterServer(import_OnOffCluster.OnOff.Cluster);
    cluster?.setOnOffAttribute(!cluster?.getOnOffAttribute());
  }
  // Add Listeners convenient for chosen attributes
  /**
   * Adds a listener for the OnOff attribute
   * This is an example of a convenient device class API to control the device without need to access clusters
   *
   * @param listener Listener function to be called when the attribute changes
   */
  addOnOffListener(listener) {
    this.getClusterServer(import_OnOffCluster.OnOff.Cluster)?.subscribeOnOffAttribute(listener);
  }
}
class OnOffPluginUnitDevice extends OnOffBaseDevice {
  constructor(onOffAttributeInitialValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[import_OnOffCluster.OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    super(import_DeviceTypes.DeviceTypes.ON_OFF_PLUGIN_UNIT, initialAttributeValues, options, false);
  }
}
class OnOffLightDevice extends OnOffBaseDevice {
  constructor(onOffAttributeInitialValues, options = {}) {
    const initialAttributeValues = {};
    if (onOffAttributeInitialValues !== void 0) {
      initialAttributeValues[import_OnOffCluster.OnOff.Cluster.id] = onOffAttributeInitialValues;
    }
    super(import_DeviceTypes.DeviceTypes.ON_OFF_LIGHT, initialAttributeValues, options, true);
  }
  addDeviceClusters(attributeInitialValues, excludeList = []) {
    super.addDeviceClusters(attributeInitialValues, [import_OnOffCluster.OnOff.Cluster.id]);
    if (!excludeList.includes(import_OnOffCluster.OnOff.Cluster.id)) {
      this.addClusterServer(
        (0, import_OnOffServer.createDefaultOnOffClusterServer)(
          this.commandHandler,
          getClusterInitialAttributeValues(
            attributeInitialValues,
            import_OnOffCluster.OnOff.Cluster.with(import_OnOffCluster.OnOff.Feature.Lighting)
          ),
          true
        )
      );
    }
  }
}
//# sourceMappingURL=OnOffDevices.js.map
