{
  "version": 3,
  "sources": ["../../../src/device/Aggregator.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { BridgedDeviceBasicInformationCluster } from \"../cluster/definitions/BridgedDeviceBasicInformationCluster.js\";\nimport { ClusterServer } from \"../cluster/server/ClusterServer.js\";\nimport { AttributeInitialValues } from \"../cluster/server/ClusterServerTypes.js\";\nimport { ImplementationError } from \"../common/MatterError.js\";\nimport { ComposedDevice } from \"./ComposedDevice.js\";\nimport { Device } from \"./Device.js\";\nimport { DeviceTypes } from \"./DeviceTypes.js\";\nimport { Endpoint, EndpointOptions } from \"./Endpoint.js\";\n\n/**\n * An Aggregator is a special endpoint that exposes multiple devices as a \"bridge\" into the matter ecosystem.\n * Use the `addBridgedDevice` or `addBridgedDeviceWithPowerSourceInfo` method to add the devices and provide the details\n * for the \"Bridged Device Basic Information Cluster\". The BridgedDeviceBasicInformationCluster is then added automatically.\n * If Power source information should be provided you need to also add the needed clusters (PowerSourceConfigurationCluster\n * and PowerSourceCluster) to the device!\n */\nexport class Aggregator extends Endpoint {\n    /**\n     * Create a new Aggregator instance and optionally directly add devices to it. If this is used the devices must\n     * already have the BridgedDeviceBasicInformationCluster added!\n     * @param devices Array of devices to add\n     * @param options Optional Endpoint options\n     */\n    constructor(devices: Device[] = [], options: EndpointOptions = {}) {\n        // Aggregator is a Composed device with an DeviceTypes.AGGREGATOR device type\n        super([DeviceTypes.AGGREGATOR], options);\n        devices.forEach(device => this.addBridgedDevice(device));\n    }\n\n    /**\n     * Add a bridged device to the Aggregator. If provided the bridgedBasicInformation is used to automatically add the\n     * BridgedDeviceBasicInformationCluster to the device and also handles Reachability event triggering when\n     * reachability event changes. If not provided the BridgedDeviceBasicInformationCluster must be already existing\n     * on the device!\n     *\n     * @param device Device instance to add\n     * @param bridgedBasicInformation Optional BridgedDeviceBasicInformationCluster attribute values to\n     */\n    addBridgedDevice(\n        device: Device | ComposedDevice,\n        bridgedBasicInformation?: AttributeInitialValues<typeof BridgedDeviceBasicInformationCluster.attributes>,\n    ): void {\n        // Add DeviceTypes.BRIDGED_DEVICE device type to the device exposed via Aggregator\n        const deviceTypes = device.getDeviceTypes();\n        if (!deviceTypes.includes(DeviceTypes.BRIDGED_NODE)) {\n            deviceTypes.push(DeviceTypes.BRIDGED_NODE);\n            device.setDeviceTypes(deviceTypes);\n        }\n        if (bridgedBasicInformation !== undefined) {\n            const bridgedBasicInformationCluster = ClusterServer(\n                BridgedDeviceBasicInformationCluster,\n                bridgedBasicInformation,\n                {},\n                {\n                    reachableChanged: true,\n                },\n            );\n            device.addClusterServer(bridgedBasicInformationCluster);\n\n            bridgedBasicInformationCluster.subscribeReachableAttribute(newValue => {\n                bridgedBasicInformationCluster.triggerReachableChangedEvent({ reachableNewValue: newValue });\n            });\n        } else {\n            if (!device.hasClusterServer(BridgedDeviceBasicInformationCluster)) {\n                throw new ImplementationError(\n                    \"BridgedDeviceBasicInformationCluster is required for bridged devices. Please add yourself or provide as second parameter\",\n                );\n            }\n        }\n        this.addChildEndpoint(device);\n    }\n\n    /**\n     * Add a bridged device with power source information to the Aggregator. If provided the bridgedBasicInformation is\n     * used to automatically add the BridgedDeviceBasicInformationCluster to the device. If not provided the\n     * BridgedDeviceBasicInformationCluster must be already existing on the device!\n     * The required clusters PowerSourceConfigurationCluster and PowerSourceCluster needs to be added manually to the device!\n     *\n     * @param device Device instance to add\n     * @param bridgedBasicInformation Optional BridgedDeviceBasicInformationCluster attribute values to\n     */\n    addBridgedDeviceWithPowerSourceInfo(\n        device: Device | ComposedDevice,\n        bridgedBasicInformation?: AttributeInitialValues<typeof BridgedDeviceBasicInformationCluster.attributes>,\n    ): void {\n        // Add DeviceTypes.BRIDGED_DEVICE_WITH_POWERSOURCE_INFO device type to the device exposed via Aggregator\n        const deviceTypes = device.getDeviceTypes();\n        if (!deviceTypes.includes(DeviceTypes.BRIDGED_DEVICE_WITH_POWERSOURCE_INFO)) {\n            deviceTypes.push(DeviceTypes.BRIDGED_DEVICE_WITH_POWERSOURCE_INFO);\n            device.setDeviceTypes(deviceTypes);\n        }\n        if (bridgedBasicInformation !== undefined) {\n            device.addClusterServer(ClusterServer(BridgedDeviceBasicInformationCluster, bridgedBasicInformation, {}));\n        } else {\n            if (!device.hasClusterServer(BridgedDeviceBasicInformationCluster)) {\n                throw new ImplementationError(\n                    \"BridgedDeviceBasicInformationCluster is required for bridged devices. Please add yourself or provide as second parameter\",\n                );\n            }\n        }\n        this.addChildEndpoint(device);\n    }\n\n    /**\n     * Returns all bridged devices added to the Aggregator\n     *\n     * @returns Array of bridged devices\n     */\n    getBridgedDevices() {\n        return this.getChildEndpoints();\n    }\n\n    removeBridgedDevice(device: Device | ComposedDevice) {\n        this.removeChildEndpoint(device);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,kDAAqD;AACrD,2BAA8B;AAE9B,yBAAoC;AAGpC,yBAA4B;AAC5B,sBAA0C;AAZ1C;AAAA;AAAA;AAAA;AAAA;AAqBO,MAAM,mBAAmB,yBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOrC,YAAY,UAAoB,CAAC,GAAG,UAA2B,CAAC,GAAG;AAE/D,UAAM,CAAC,+BAAY,UAAU,GAAG,OAAO;AACvC,YAAQ,QAAQ,YAAU,KAAK,iBAAiB,MAAM,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,iBACI,QACA,yBACI;AAEJ,UAAM,cAAc,OAAO,eAAe;AAC1C,QAAI,CAAC,YAAY,SAAS,+BAAY,YAAY,GAAG;AACjD,kBAAY,KAAK,+BAAY,YAAY;AACzC,aAAO,eAAe,WAAW;AAAA,IACrC;AACA,QAAI,4BAA4B,QAAW;AACvC,YAAM,qCAAiC;AAAA,QACnC;AAAA,QACA;AAAA,QACA,CAAC;AAAA,QACD;AAAA,UACI,kBAAkB;AAAA,QACtB;AAAA,MACJ;AACA,aAAO,iBAAiB,8BAA8B;AAEtD,qCAA+B,4BAA4B,cAAY;AACnE,uCAA+B,6BAA6B,EAAE,mBAAmB,SAAS,CAAC;AAAA,MAC/F,CAAC;AAAA,IACL,OAAO;AACH,UAAI,CAAC,OAAO,iBAAiB,gFAAoC,GAAG;AAChE,cAAM,IAAI;AAAA,UACN;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,iBAAiB,MAAM;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oCACI,QACA,yBACI;AAEJ,UAAM,cAAc,OAAO,eAAe;AAC1C,QAAI,CAAC,YAAY,SAAS,+BAAY,oCAAoC,GAAG;AACzE,kBAAY,KAAK,+BAAY,oCAAoC;AACjE,aAAO,eAAe,WAAW;AAAA,IACrC;AACA,QAAI,4BAA4B,QAAW;AACvC,aAAO,qBAAiB,oCAAc,kFAAsC,yBAAyB,CAAC,CAAC,CAAC;AAAA,IAC5G,OAAO;AACH,UAAI,CAAC,OAAO,iBAAiB,gFAAoC,GAAG;AAChE,cAAM,IAAI;AAAA,UACN;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,iBAAiB,MAAM;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB;AAChB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EAEA,oBAAoB,QAAiC;AACjD,SAAK,oBAAoB,MAAM;AAAA,EACnC;AACJ;",
  "names": []
}
