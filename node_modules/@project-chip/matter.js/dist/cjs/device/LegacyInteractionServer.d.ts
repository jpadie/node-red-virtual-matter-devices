/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterDevice } from "../MatterDevice.js";
import { AnyAttributeServer, AttributeServer } from "../cluster/server/AttributeServer.js";
import { CommandServer } from "../cluster/server/CommandServer.js";
import { AnyEventServer } from "../cluster/server/EventServer.js";
import { Message } from "../codec/MessageCodec.js";
import { EndpointInterface } from "../endpoint/EndpointInterface.js";
import { MessageExchange } from "../protocol/MessageExchange.js";
import { EventStorageData } from "../protocol/interaction/EventHandler.js";
import { TlvEventFilter } from "../protocol/interaction/InteractionProtocol.js";
import { AttributePath, CommandPath, EventPath, InteractionServer } from "../protocol/interaction/InteractionServer.js";
import { TypeFromSchema } from "../tlv/TlvSchema.js";
/**
 * Interactionserver for the legacy API code paths which includes ACL checks before calling the actual
 * attribute/command handlers.
 */
export declare class LegacyInteractionServer extends InteractionServer {
    #private;
    constructor(config: InteractionServer.Configuration);
    protected readAttribute(path: AttributePath, attribute: AnyAttributeServer<any>, exchange: MessageExchange<MatterDevice>, isFabricFiltered: boolean, message: Message, endpoint: EndpointInterface): Promise<{
        version: number;
        value: any;
    }>;
    protected readEvent(path: EventPath, eventFilters: TypeFromSchema<typeof TlvEventFilter>[] | undefined, event: AnyEventServer<any, any>, exchange: MessageExchange<MatterDevice>, isFabricFiltered: boolean, message: Message, endpoint: EndpointInterface): Promise<EventStorageData<any>[]>;
    protected writeAttribute(path: AttributePath, attribute: AttributeServer<any>, value: any, exchange: MessageExchange<MatterDevice>, message: Message, endpoint: EndpointInterface, receivedWithinTimedInteraction?: boolean, isListWrite?: boolean): Promise<void>;
    protected invokeCommand(path: CommandPath, command: CommandServer<any, any>, exchange: MessageExchange<MatterDevice>, commandFields: any, message: Message, endpoint: EndpointInterface, receivedWithinTimedInteraction?: boolean): Promise<{
        code: import("../protocol/interaction/StatusCode.js").StatusCode;
        clusterCode?: number;
        responseId: import("../datatype/CommandId.js").CommandId;
        response: import("../tlv/TlvSchema.js").TlvStream;
    }>;
}
//# sourceMappingURL=LegacyInteractionServer.d.ts.map