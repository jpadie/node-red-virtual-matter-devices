{
  "version": 3,
  "sources": ["../../../src/device/OnOffDevices.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Attributes, Cluster, Commands, Events } from \"../cluster/Cluster.js\";\nimport { Groups } from \"../cluster/definitions/GroupsCluster.js\";\nimport { Identify } from \"../cluster/definitions/IdentifyCluster.js\";\nimport { OnOff } from \"../cluster/definitions/OnOffCluster.js\";\nimport { AttributeInitialValues, ClusterServerHandlers } from \"../cluster/server/ClusterServerTypes.js\";\nimport { createDefaultGroupsClusterServer } from \"../cluster/server/GroupsServer.js\";\nimport { createDefaultIdentifyClusterServer } from \"../cluster/server/IdentifyServer.js\";\nimport { createDefaultOnOffClusterServer } from \"../cluster/server/OnOffServer.js\";\nimport { ClusterId } from \"../datatype/ClusterId.js\";\nimport { BitSchema, TypeFromPartialBitSchema } from \"../schema/BitmapSchema.js\";\nimport { extendPublicHandlerMethods } from \"../util/NamedHandler.js\";\nimport { MakeMandatory } from \"../util/Type.js\";\nimport { Device } from \"./Device.js\";\nimport { DeviceTypeDefinition, DeviceTypes } from \"./DeviceTypes.js\";\nimport { EndpointOptions } from \"./Endpoint.js\";\n\ntype OnOffBaseDeviceCommands = {\n    identify: ClusterServerHandlers<typeof Identify.Cluster>[\"identify\"];\n    offWithEffect: MakeMandatory<ClusterServerHandlers<typeof OnOff.Complete>[\"offWithEffect\"]>;\n};\n\n/**\n * Utility function to get the initial attribute values for a cluster out of an object with initial attribute values\n * for multiple clusters\n *\n * @param attributeInitialValues Object with initial attribute values for automatically added clusters\n * @param cluster Cluster to get the initial attribute values for\n */\nexport function getClusterInitialAttributeValues<\n    F extends BitSchema,\n    SF extends TypeFromPartialBitSchema<F>,\n    A extends Attributes,\n    C extends Commands,\n    E extends Events,\n>(\n    attributeInitialValues: { [key: ClusterId]: AttributeInitialValues<any> } | undefined,\n    cluster: Cluster<F, SF, A, C, E>,\n): AttributeInitialValues<A> | undefined {\n    if (attributeInitialValues === undefined) return undefined;\n    return attributeInitialValues[cluster.id] as AttributeInitialValues<A>;\n}\n\n/**\n * Abstract Base class for OnOff devices\n */\nexport class OnOffBaseDevice extends extendPublicHandlerMethods<typeof Device, OnOffBaseDeviceCommands>(Device) {\n    /**\n     * Creates a new OnOffBaseDevice\n     *\n     * @protected\n     * @param definition Device type definition of the device to create\n     * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters\n     * @param options Optional endpoint options\n     * @param isLighting Define if Lighting feature is set\n     */\n    constructor(\n        definition: DeviceTypeDefinition,\n        attributeInitialValues?: { [key: ClusterId]: AttributeInitialValues<any> },\n        options: EndpointOptions = {},\n        protected isLighting = false,\n    ) {\n        super(definition, options);\n        this.addDeviceClusters(attributeInitialValues);\n    }\n\n    /**\n     * Adds mandatory clusters to the device\n     *\n     * @protected\n     * @param attributeInitialValues Optional object with initial attribute values for automatically added clusters\n     * @param excludeList List of clusters to exclude from being added\n     */\n    protected addDeviceClusters(\n        attributeInitialValues?: { [key: ClusterId]: AttributeInitialValues<any> },\n        excludeList: ClusterId[] = [],\n    ) {\n        // TODO: Find a way to make this automated based on the required clusters?\n        if (!excludeList.includes(Identify.Cluster.id)) {\n            this.addClusterServer(\n                createDefaultIdentifyClusterServer({\n                    identify: async data => await this._executeHandler(\"identify\", data),\n                }),\n            );\n        }\n        if (!excludeList.includes(Groups.Cluster.id)) {\n            this.addClusterServer(createDefaultGroupsClusterServer());\n        }\n        if (!excludeList.includes(OnOff.Cluster.id)) {\n            this.addClusterServer(\n                createDefaultOnOffClusterServer(\n                    this.commandHandler,\n                    getClusterInitialAttributeValues(attributeInitialValues, OnOff.Cluster),\n                    this.isLighting,\n                ),\n            );\n        }\n    }\n\n    /**\n     * Turns the device on or off\n     * This is an example f a convenient device class API to control the device without need to access clusters\n     *\n     * @param onOff true to turn on, false to turn off\n     */\n    setOnOff(onOff: boolean) {\n        this.getClusterServer(OnOff.Cluster)?.setOnOffAttribute(onOff);\n    }\n\n    getOnOff() {\n        return this.getClusterServer(OnOff.Cluster)?.getOnOffAttribute() ?? false;\n    }\n\n    /**\n     * Toggles the device on or off\n     * This is an example f a convenient device class API to control the device without need to access clusters\n     */\n    toggle() {\n        const cluster = this.getClusterServer(OnOff.Cluster);\n        cluster?.setOnOffAttribute(!cluster?.getOnOffAttribute());\n    }\n\n    // Add Listeners convenient for chosen attributes\n    /**\n     * Adds a listener for the OnOff attribute\n     * This is an example of a convenient device class API to control the device without need to access clusters\n     *\n     * @param listener Listener function to be called when the attribute changes\n     */\n    addOnOffListener(listener: (newValue: boolean, oldValue: boolean) => void) {\n        this.getClusterServer(OnOff.Cluster)?.subscribeOnOffAttribute(listener);\n    }\n}\n\n/**\n * Device class for an OnOffPluginUnit Device\n */\nexport class OnOffPluginUnitDevice extends OnOffBaseDevice {\n    constructor(\n        onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>,\n        options: EndpointOptions = {},\n    ) {\n        const initialAttributeValues: { [key: ClusterId]: AttributeInitialValues<any> } = {};\n        if (onOffAttributeInitialValues !== undefined) {\n            initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;\n        }\n        super(DeviceTypes.ON_OFF_PLUGIN_UNIT, initialAttributeValues, options, false);\n    }\n}\n\n/**\n * Device class for an OnOffPluginUnit Device\n */\nexport class OnOffLightDevice extends OnOffBaseDevice {\n    constructor(\n        onOffAttributeInitialValues?: AttributeInitialValues<typeof OnOff.Cluster.attributes>,\n        options: EndpointOptions = {},\n    ) {\n        const initialAttributeValues: { [key: ClusterId]: AttributeInitialValues<any> } = {};\n        if (onOffAttributeInitialValues !== undefined) {\n            initialAttributeValues[OnOff.Cluster.id] = onOffAttributeInitialValues;\n        }\n        super(DeviceTypes.ON_OFF_LIGHT, initialAttributeValues, options, true);\n    }\n\n    protected override addDeviceClusters(\n        attributeInitialValues?: { [key: ClusterId]: AttributeInitialValues<any> },\n        excludeList: ClusterId[] = [],\n    ) {\n        super.addDeviceClusters(attributeInitialValues, [OnOff.Cluster.id]);\n        if (!excludeList.includes(OnOff.Cluster.id)) {\n            this.addClusterServer(\n                createDefaultOnOffClusterServer(\n                    this.commandHandler,\n                    getClusterInitialAttributeValues(\n                        attributeInitialValues,\n                        OnOff.Cluster.with(OnOff.Feature.Lighting),\n                    ),\n                    true,\n                ),\n            );\n        }\n    }\n}\n\n/*\nExample to enhance the exposed commands of the device\n\n// additional commands to be allowed for registering and triggering handlers\ntype OnOffLightingDeviceCommands = {\n    fadeOut: (time: number) => Promise<void>;\n}\n\nclass OnOffLightingDevice extends extendPublicHandlerMethods<typeof OnOffBaseDevice, OnOffLightingDeviceCommands>(OnOffBaseDevice) {\n\n    test() {\n        // This still works\n        this._executeHandler(\"identify\", 5);\n\n        // this works too\n        this.__internal__DO_NOT_CALL_THIS_OR_YOU_WILL_BE_FIRED__executeHandler(\"fadeOut\", 5);\n    }\n}\n */\n"],
  "mappings": "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",
  "names": []
}
