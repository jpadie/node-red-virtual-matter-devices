{
  "version": 3,
  "sources": ["../../../../../../src/behavior/state/managed/values/ValueManager.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Metatype } from \"../../../../model/definitions/index.js\";\nimport type { RootSupervisor } from \"../../../supervision/RootSupervisor.js\";\nimport type { Schema } from \"../../../supervision/Schema.js\";\nimport { ValueSupervisor } from \"../../../supervision/ValueSupervisor.js\";\nimport { BitmapManager } from \"./BitmapManager.js\";\nimport { ListManager } from \"./ListManager.js\";\nimport { PrimitiveManager } from \"./PrimitiveManager.js\";\nimport { StructManager } from \"./StructManager.js\";\n\n/**\n * Obtain a {@link ValueSupervisor.Manage} implementation for the given schema.\n *\n * Used by {@link RootSupervisor} which acts as a cache.\n */\nexport function ValueManager(schema: Schema, owner: RootSupervisor): ValueSupervisor.Manage {\n    switch (schema.effectiveMetatype) {\n        case Metatype.object:\n            return StructManager(owner, schema);\n\n        case Metatype.bitmap:\n            return BitmapManager(owner, schema);\n\n        case Metatype.array:\n            return ListManager(owner, schema);\n\n        // TODO - for completeness we should either make ByteArray immutable in state or wrap here but meh\n\n        default:\n            return PrimitiveManager;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAyB;AAIzB,2BAA8B;AAC9B,yBAA4B;AAC5B,8BAAiC;AACjC,2BAA8B;AAb9B;AAAA;AAAA;AAAA;AAAA;AAoBO,SAAS,aAAa,QAAgB,OAA+C;AACxF,UAAQ,OAAO,mBAAmB;AAAA,IAC9B,KAAK,4BAAS;AACV,iBAAO,oCAAc,OAAO,MAAM;AAAA,IAEtC,KAAK,4BAAS;AACV,iBAAO,oCAAc,OAAO,MAAM;AAAA,IAEtC,KAAK,4BAAS;AACV,iBAAO,gCAAY,OAAO,MAAM;AAAA;AAAA,IAIpC;AACI,aAAO;AAAA,EACf;AACJ;",
  "names": []
}
