{
  "version": 3,
  "sources": ["../../../../../src/behavior/state/validation/assertions.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SchemaErrorPath } from \"../../../model/index.js\";\nimport { ByteArray } from \"../../../util/ByteArray.js\";\nimport { isObject } from \"../../../util/Type.js\";\nimport { DatatypeError } from \"../../errors.js\";\nimport { Val } from \"../Val.js\";\n\nexport function assertNumber(value: Val, path: SchemaErrorPath): asserts value is number {\n    if (typeof value === \"number\") {\n        return;\n    }\n    throw new DatatypeError(path, \"a number\", value);\n}\n\nexport function assertBoolean(value: Val, path: SchemaErrorPath): asserts value is number {\n    if (typeof value === \"boolean\" || value === 0 || value === 1) {\n        return;\n    }\n    throw new DatatypeError(path, \"a boolean\", value);\n}\n\nexport function assertObject(value: Val, path: SchemaErrorPath): asserts value is Val.Struct {\n    if (isObject(value)) {\n        return;\n    }\n    throw new DatatypeError(path, \"an object\", value);\n}\n\nexport function assertNumeric(value: Val, path: SchemaErrorPath): asserts value is number | bigint {\n    if (typeof value === \"number\" || typeof value === \"bigint\") {\n        return;\n    }\n    throw new DatatypeError(path, \"a number or bigint\", value);\n}\n\nexport function assertString(value: Val, path: SchemaErrorPath): asserts value is string {\n    if (typeof value === \"string\") {\n        return;\n    }\n    throw new DatatypeError(path, \"a string\", value);\n}\n\nexport function assertBytes(value: Val, path: SchemaErrorPath): asserts value is ByteArray {\n    if (value instanceof ByteArray) {\n        return;\n    }\n    throw new DatatypeError(path, \"a byte array\", value);\n}\n\nexport function assertSequence(value: Val, path: SchemaErrorPath): asserts value is string | ByteArray {\n    if (typeof value === \"string\" || value instanceof ByteArray) {\n        return;\n    }\n    throw new DatatypeError(path, \"a string or byte array\", value);\n}\n\nexport function assertArray(value: Val, path: SchemaErrorPath): asserts value is Val[] {\n    if (!Array.isArray(value)) {\n        throw new DatatypeError(path, \"an array\", value);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,uBAA0B;AAC1B,kBAAyB;AACzB,oBAA8B;AAT9B;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,aAAa,OAAY,MAAgD;AACrF,MAAI,OAAO,UAAU,UAAU;AAC3B;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,YAAY,KAAK;AACnD;AAEO,SAAS,cAAc,OAAY,MAAgD;AACtF,MAAI,OAAO,UAAU,aAAa,UAAU,KAAK,UAAU,GAAG;AAC1D;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,aAAa,KAAK;AACpD;AAEO,SAAS,aAAa,OAAY,MAAoD;AACzF,UAAI,sBAAS,KAAK,GAAG;AACjB;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,aAAa,KAAK;AACpD;AAEO,SAAS,cAAc,OAAY,MAAyD;AAC/F,MAAI,OAAO,UAAU,YAAY,OAAO,UAAU,UAAU;AACxD;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,sBAAsB,KAAK;AAC7D;AAEO,SAAS,aAAa,OAAY,MAAgD;AACrF,MAAI,OAAO,UAAU,UAAU;AAC3B;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,YAAY,KAAK;AACnD;AAEO,SAAS,YAAY,OAAY,MAAmD;AACvF,MAAI,iBAAiB,4BAAW;AAC5B;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,gBAAgB,KAAK;AACvD;AAEO,SAAS,eAAe,OAAY,MAA4D;AACnG,MAAI,OAAO,UAAU,YAAY,iBAAiB,4BAAW;AACzD;AAAA,EACJ;AACA,QAAM,IAAI,4BAAc,MAAM,0BAA0B,KAAK;AACjE;AAEO,SAAS,YAAY,OAAY,MAA+C;AACnF,MAAI,CAAC,MAAM,QAAQ,KAAK,GAAG;AACvB,UAAM,IAAI,4BAAc,MAAM,YAAY,KAAK;AAAA,EACnD;AACJ;",
  "names": []
}
