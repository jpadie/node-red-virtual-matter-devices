{
  "version": 3,
  "sources": ["../../../../src/behavior/cluster/ClusterEvents.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type { ClusterType } from \"../../cluster/ClusterType.js\";\nimport type { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport type { AsyncObservable, Observable } from \"../../util/Observable.js\";\nimport type { Behavior } from \"../Behavior.js\";\nimport type { ActionContext } from \"../context/ActionContext.js\";\nimport type { ClusterOf } from \"./ClusterBehaviorUtil.js\";\n\n/**\n * Event instance type for ClusterBehaviors.\n */\nexport type ClusterEvents<ClusterT extends ClusterType, BaseT extends Behavior.Type> =\n    // Keep observables *not* supplied by the old cluster\n    Omit<InstanceType<BaseT[\"Events\"]>, keyof ClusterEvents.Properties<ClusterOf<BaseT>>> &\n        // Add observables supplied by the new cluster\n        ClusterEvents.Properties<ClusterT>;\n\nexport namespace ClusterEvents {\n    export type Type<C extends ClusterType, B extends Behavior.Type> = {\n        new (): ClusterEvents<C, B>;\n    };\n\n    /**\n     * Properties the cluster contributes to Events.\n     */\n    export type Properties<C> = AttributeObservables<ClusterType.AttributesOf<C>, \"Changing\"> &\n        AttributeObservables<ClusterType.AttributesOf<C>, \"Changed\"> &\n        EventObservables<ClusterType.EventsOf<C>>;\n\n    export type AttributeObservables<A extends Record<string, ClusterType.Attribute>, N extends string> = {\n        [K in keyof A as string extends K\n            ? never\n            : K extends string\n              ? A[K] extends { optional: true }\n                  ? never\n                  : `${K}$${N}`\n              : never]: AttributeObservable<A[K]>;\n    } & {\n        [K in keyof A as string extends K\n            ? never\n            : K extends string\n              ? A[K] extends { optional: true }\n                  ? `${K}$${N}`\n                  : never\n              : never]?: AttributeObservable<A[K]>;\n    };\n\n    export type AttributeObservable<A extends ClusterType.Attribute = ClusterType.Attribute> = AsyncObservable<\n        [value: TypeFromSchema<A[\"schema\"]>, oldValue: TypeFromSchema<A[\"schema\"]>, context: ActionContext]\n    >;\n\n    export type EventObservables<E extends Record<string, ClusterType.Event>> = {\n        [K in keyof E as string extends K\n            ? never\n            : K extends string\n              ? E[K] extends { optional: true }\n                  ? never\n                  : K\n              : never]: EventObservable<E[K]>;\n    } & {\n        [K in keyof E as string extends K\n            ? never\n            : K extends string\n              ? E[K] extends { optional: true }\n                  ? K\n                  : never\n              : never]?: EventObservable<E[K]>;\n    };\n\n    export type EventObservable<E extends ClusterType.Event = ClusterType.Event> = Observable<\n        [payload: TypeFromSchema<E[\"schema\"]>, context: ActionContext]\n    >;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
