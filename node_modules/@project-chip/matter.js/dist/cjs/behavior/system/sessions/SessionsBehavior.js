"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SessionsBehavior_exports = {};
__export(SessionsBehavior_exports, {
  SessionsBehavior: () => SessionsBehavior
});
module.exports = __toCommonJS(SessionsBehavior_exports);
var import_SessionManager = require("../../../session/SessionManager.js");
var import_Observable = require("../../../util/Observable.js");
var import_Behavior = require("../../Behavior.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class SessionsBehavior extends import_Behavior.Behavior {
  static id = "sessions";
  initialize() {
    const env = this.endpoint.env;
    if (env.has(import_SessionManager.SessionManager)) {
      this.#enterOnlineMode(env.get(import_SessionManager.SessionManager));
    }
    const sessionManagerEvents = env.eventsFor(import_SessionManager.SessionManager);
    this.reactTo(sessionManagerEvents.added, this.#enterOnlineMode);
    this.reactTo(sessionManagerEvents.deleted, this.#enterOfflineMode);
  }
  #convertToExposedSession(session) {
    return {
      name: session.name,
      nodeId: session.nodeId,
      peerNodeId: session.peerNodeId,
      fabric: session.fabric?.externalInformation,
      isPeerActive: session.isPeerActive(),
      lastInteractionTimestamp: session.timestamp,
      lastActiveTimestamp: session.activeTimestamp,
      numberOfActiveSubscriptions: session.numberOfActiveSubscriptions
    };
  }
  #enterOnlineMode(sessions) {
    this.reactTo(sessions.sessionOpened, this.#sessionOpened);
    this.reactTo(sessions.sessionClosed, this.#sessionClosed);
    this.reactTo(sessions.subscriptionsChanged, this.#subscriptionsChanged);
  }
  #sessionOpened(session) {
    if (session.isPase) {
      return;
    }
    const exposedSession = this.#convertToExposedSession(session);
    this.state.sessions[session.id] = exposedSession;
    this.events.opened.emit(exposedSession);
  }
  #sessionClosed(session) {
    if (!(session.id in this.state.sessions)) {
      return;
    }
    delete this.state.sessions[session.id];
    this.events.closed.emit(this.#convertToExposedSession(session));
  }
  #subscriptionsChanged(session) {
    if (session.isPase) {
      return;
    }
    const sessionEntry = this.state.sessions[session.id];
    if (sessionEntry === void 0) {
      return;
    }
    sessionEntry.numberOfActiveSubscriptions = session.numberOfActiveSubscriptions;
    this.state.sessions[session.id] = sessionEntry;
    this.events.subscriptionsChanged.emit(sessionEntry);
  }
  #enterOfflineMode() {
    this.state.sessions = {};
  }
}
((SessionsBehavior2) => {
  class State {
    sessions = {};
  }
  SessionsBehavior2.State = State;
  class Events extends import_Observable.EventEmitter {
    opened = (0, import_Observable.Observable)();
    closed = (0, import_Observable.Observable)();
    subscriptionsChanged = (0, import_Observable.Observable)();
  }
  SessionsBehavior2.Events = Events;
})(SessionsBehavior || (SessionsBehavior = {}));
//# sourceMappingURL=SessionsBehavior.js.map
