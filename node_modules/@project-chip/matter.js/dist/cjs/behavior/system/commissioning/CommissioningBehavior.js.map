{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/commissioning/CommissioningBehavior.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FailsafeContext } from \"../../../common/FailsafeContext.js\";\nimport { Lifecycle } from \"../../../common/Lifecycle.js\";\nimport { ImplementationError, MatterFlowError } from \"../../../common/MatterError.js\";\nimport { FabricIndex } from \"../../../datatype/FabricIndex.js\";\nimport { Endpoint } from \"../../../endpoint/Endpoint.js\";\nimport type { EndpointServer } from \"../../../endpoint/EndpointServer.js\";\nimport { ExposedFabricInformation } from \"../../../fabric/Fabric.js\";\nimport { FabricAction, FabricManager } from \"../../../fabric/FabricManager.js\";\nimport { Diagnostic } from \"../../../log/Diagnostic.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport { DatatypeModel, FieldElement } from \"../../../model/index.js\";\nimport type { Node } from \"../../../node/Node.js\";\nimport { NodeLifecycle } from \"../../../node/NodeLifecycle.js\";\nimport { ServerNode } from \"../../../node/ServerNode.js\";\nimport {\n    CommissioningFlowType,\n    DiscoveryCapabilitiesSchema,\n    ManualPairingCodeCodec,\n    QrPairingCodeCodec,\n} from \"../../../schema/PairingCodeSchema.js\";\nimport { QrCode } from \"../../../schema/QrCodeSchema.js\";\nimport { PaseClient } from \"../../../session/pase/PaseClient.js\";\nimport { ByteArray } from \"../../../util/ByteArray.js\";\nimport { EventEmitter, Observable } from \"../../../util/Observable.js\";\nimport { Behavior } from \"../../Behavior.js\";\nimport { ActionContext } from \"../../context/ActionContext.js\";\nimport { BasicInformationBehavior } from \"../../definitions/basic-information/BasicInformationBehavior.js\";\nimport { OperationalCredentialsBehavior } from \"../../definitions/operational-credentials/OperationalCredentialsBehavior.js\";\nimport { Val } from \"../../state/Val.js\";\nimport { NetworkServer } from \"../network/NetworkServer.js\";\nimport { SessionsBehavior } from \"../sessions/SessionsBehavior.js\";\nimport { CommissioningOptions } from \"./CommissioningOptions.js\";\n\nconst logger = Logger.get(\"Commissioning\");\n\n/**\n * Server functionality related to commissioning used by {@link EndpointServer}.\n *\n * Better name would be CommissioningServer but we already have one of those.\n */\nexport class CommissioningBehavior extends Behavior {\n    static override readonly id = \"commissioning\";\n\n    declare state: CommissioningBehavior.State;\n    declare events: CommissioningBehavior.Events;\n    declare internal: CommissioningBehavior.Internal;\n\n    static override early = true;\n\n    override initialize() {\n        if (this.state.passcode === -1) {\n            this.state.passcode = PaseClient.generateRandomPasscode();\n        } else if (CommissioningOptions.FORBIDDEN_PASSCODES.includes(this.state.passcode)) {\n            throw new ImplementationError(`Passcode ${this.state.passcode} is not allowed`);\n        }\n\n        if (this.state.discriminator === -1) {\n            this.state.discriminator = PaseClient.generateRandomDiscriminator();\n        }\n\n        this.reactTo((this.endpoint as Node).lifecycle.online, this.#nodeOnline);\n\n        this.reactTo((this.endpoint as Node).lifecycle.partsReady, this.#initializeNode);\n    }\n\n    override [Symbol.asyncDispose]() {\n        this.internal.unregisterFailsafeListener?.();\n    }\n\n    handleFabricChange(fabricIndex: FabricIndex, fabricAction: FabricAction) {\n        // Do not consider commissioned so long as there is an active failsafe timer as commissioning may not be\n        // complete and could still be rolled back\n        if (this.endpoint.env.has(FailsafeContext)) {\n            const failsafe = this.endpoint.env.get(FailsafeContext);\n            if (fabricAction === FabricAction.Added || fabricAction === FabricAction.Updated) {\n                // Added or updated fabric with active Failsafe are temporary and should not be considered until failsafe ends\n                if (failsafe.construction.status !== Lifecycle.Status.Destroyed) {\n                    if (failsafe.fabricIndex === fabricIndex) {\n                        this.#monitorFailsafe(failsafe);\n                        return;\n                    } else {\n                        throw new MatterFlowError(\n                            `Failsafe owns a different fabricIndex then ${failsafe.forUpdateNoc ? \"updated\" : \"added\"}.`,\n                        );\n                    }\n                }\n            } else if (fabricAction === FabricAction.Removed) {\n                // Removed fabric with active Failsafe are ignored but should match the failsafe one\n                if (failsafe.fabricIndex !== fabricIndex) {\n                    throw new MatterFlowError(\"Failsafe owns a different fabricIndex then removed.\");\n                }\n            }\n        }\n\n        const fabrics = this.endpoint.env.get(FabricManager).getFabrics();\n        const commissioned = !!fabrics.length;\n        if (fabricAction === FabricAction.Removed) {\n            delete this.state.fabrics[fabricIndex];\n        } else {\n            const fabric = fabrics.find(fabric => fabric.fabricIndex === fabricIndex);\n            if (fabric !== undefined) {\n                this.state.fabrics[fabricIndex] = {\n                    fabricIndex: fabric.fabricIndex,\n                    fabricId: fabric.fabricId,\n                    nodeId: fabric.nodeId,\n                    rootNodeId: fabric.rootNodeId,\n                    rootVendorId: fabric.rootVendorId,\n                    label: fabric.label,\n                };\n            }\n        }\n\n        let doFactoryReset = false;\n        if (commissioned !== this.state.commissioned) {\n            this.state.commissioned = commissioned;\n            if (commissioned) {\n                this.events.commissioned.emit(this.context);\n                (this.endpoint.lifecycle as NodeLifecycle).commissioned.emit(this.context);\n            } else {\n                this.events.decommissioned.emit(this.context);\n                (this.endpoint.lifecycle as NodeLifecycle).decommissioned.emit(this.context);\n\n                doFactoryReset = true;\n            }\n        }\n\n        this.events.fabricsChanged.emit(fabricIndex, fabricAction);\n\n        if (doFactoryReset) {\n            const sessions = this.agent.get(SessionsBehavior);\n            if (Object.keys(sessions.state.sessions).length > 0) {\n                // We have still open sessions, wait for them to close\n                this.reactTo(sessions.events.closed, this.#handleSessionClosed);\n            } else {\n                this.#triggerFactoryReset();\n            }\n        }\n    }\n\n    #handleSessionClosed() {\n        const sessions = this.agent.get(SessionsBehavior);\n        if (Object.keys(sessions.state.sessions).length === 0) {\n            this.#triggerFactoryReset();\n        }\n    }\n\n    #triggerFactoryReset() {\n        this.endpoint.env.runtime.add(\n            (this.endpoint as ServerNode).factoryReset().then(this.callback(this.initiateCommissioning)),\n        );\n    }\n\n    #monitorFailsafe(failsafe: FailsafeContext) {\n        if (this.internal.unregisterFailsafeListener) {\n            return;\n        }\n\n        // Callback that listens to the failsafe for destruction and triggers commissioning status update\n        const listener = this.callback(function (this: CommissioningBehavior, status: Lifecycle.Status) {\n            if (status === Lifecycle.Status.Destroyed) {\n                if (failsafe.fabricIndex !== undefined) {\n                    this.handleFabricChange(\n                        failsafe.fabricIndex,\n                        failsafe.forUpdateNoc ? FabricAction.Updated : FabricAction.Added,\n                    );\n                }\n                this.internal.unregisterFailsafeListener?.();\n            }\n        });\n\n        // Callback that removes above listener\n        this.internal.unregisterFailsafeListener = this.callback(function (this: CommissioningBehavior) {\n            failsafe.construction.change.off(listener);\n            this.internal.unregisterFailsafeListener = undefined;\n        });\n\n        // Register the listener\n        failsafe.construction.change.on(listener);\n    }\n\n    /**\n     * The server invokes this method when the node is active but not yet commissioned.\n     *\n     * An uncommissioned node is not yet associated with fabrics.  It cannot be used until commissioned by a controller.\n     *\n     * The default implementation logs the QR code and credentials.\n     */\n    initiateCommissioning() {\n        const { passcode, discriminator } = this.state;\n\n        const { qrPairingCode, manualPairingCode } = this.state.pairingCodes;\n\n        logger.notice(\n            Diagnostic.strong(this.endpoint.toString()),\n            \"is uncommissioned\",\n            Diagnostic.dict({\n                passcode,\n                discriminator,\n                \"manual pairing code\": manualPairingCode,\n            }),\n            Diagnostic.list([\n                QrCode.get(qrPairingCode).trim(),\n                `QR code URL: https://project-chip.github.io/connectedhomeip/qrcode.html?data=${qrPairingCode}\\n`,\n            ]),\n        );\n    }\n\n    /**\n     * Obtain pairing codes for a node.\n     */\n    static pairingCodesFor(node: Endpoint) {\n        const bi = node.stateOf(BasicInformationBehavior);\n        const comm = node.stateOf(CommissioningBehavior);\n        const net = node.stateOf(NetworkServer);\n\n        const qrPairingCode = QrPairingCodeCodec.encode([\n            {\n                version: 0,\n                vendorId: bi.vendorId,\n                productId: bi.productId,\n                flowType: comm.flowType,\n                discriminator: comm.discriminator,\n                passcode: comm.passcode,\n                discoveryCapabilities: DiscoveryCapabilitiesSchema.encode(net.discoveryCapabilities),\n            },\n        ]);\n\n        return {\n            manualPairingCode: ManualPairingCodeCodec.encode({\n                discriminator: comm.discriminator,\n                passcode: comm.passcode,\n            }),\n            qrPairingCode,\n        };\n    }\n\n    /**\n     * Define logical schema to make passcode and discriminator persistent.\n     */\n    static override readonly schema = new DatatypeModel({\n        name: \"CommissioningState\",\n\n        children: [\n            FieldElement({ name: \"passcode\", type: \"uint32\", quality: \"N\" }),\n            FieldElement({ name: \"discriminator\", type: \"uint16\", quality: \"N\" }),\n        ],\n    });\n\n    #nodeOnline() {\n        const fabrics = this.endpoint.env.get(FabricManager).getFabrics();\n        if (!fabrics.length) {\n            this.initiateCommissioning();\n        } else {\n            const exposedFabrics: Record<FabricIndex, ExposedFabricInformation> = {};\n            fabrics.forEach(\n                ({ fabricIndex, externalInformation }) => (exposedFabrics[fabricIndex] = externalInformation),\n            );\n            this.state.fabrics = exposedFabrics;\n        }\n    }\n\n    #initializeNode() {\n        this.state.commissioned = !!this.agent.get(OperationalCredentialsBehavior).state.commissionedFabrics;\n        (this.endpoint.lifecycle as NodeLifecycle).initialized.emit(this.state.commissioned);\n    }\n}\n\nexport namespace CommissioningBehavior {\n    export interface PairingCodes {\n        manualPairingCode: string;\n        qrPairingCode: string;\n    }\n\n    export class Internal {\n        unregisterFailsafeListener?: () => void = undefined;\n    }\n\n    export class State implements CommissioningOptions {\n        commissioned = false;\n        fabrics: Record<FabricIndex, ExposedFabricInformation> = {};\n        passcode = -1;\n        discriminator = -1;\n        flowType = CommissioningFlowType.Standard;\n        additionalBleAdvertisementData?: ByteArray = undefined;\n        pairingCodes = {} as PairingCodes;\n\n        [Val.properties](endpoint: Endpoint) {\n            return {\n                get pairingCodes() {\n                    return CommissioningBehavior.pairingCodesFor(endpoint);\n                },\n            };\n        }\n    }\n\n    export class Events extends EventEmitter {\n        commissioned = Observable<[session: ActionContext]>();\n        decommissioned = Observable<[session: ActionContext]>();\n        fabricsChanged = Observable<[fabricIndex: FabricIndex, action: FabricAction]>();\n    }\n}\n"],
  "mappings": "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",
  "names": ["fabric", "CommissioningBehavior"]
}
