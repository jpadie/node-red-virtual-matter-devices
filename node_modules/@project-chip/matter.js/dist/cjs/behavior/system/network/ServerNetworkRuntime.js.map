{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/network/ServerNetworkRuntime.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../../MatterDevice.js\";\nimport { Ble } from \"../../../ble/Ble.js\";\nimport { InstanceBroadcaster } from \"../../../common/InstanceBroadcaster.js\";\nimport { ImplementationError, InternalError } from \"../../../common/MatterError.js\";\nimport { TransportInterface } from \"../../../common/TransportInterface.js\";\nimport { FabricIndex } from \"../../../datatype/FabricIndex.js\";\nimport { MdnsService } from \"../../../environment/MdnsService.js\";\nimport { FabricAction, FabricManager } from \"../../../fabric/FabricManager.js\";\nimport { MdnsInstanceBroadcaster } from \"../../../mdns/MdnsInstanceBroadcaster.js\";\nimport { InterfaceType, Network, NetworkInterface, NetworkInterfaceDetailed } from \"../../../net/Network.js\";\nimport { UdpInterface } from \"../../../net/UdpInterface.js\";\nimport { ServerNode } from \"../../../node/ServerNode.js\";\nimport { TransactionalInteractionServer } from \"../../../node/server/TransactionalInteractionServer.js\";\nimport { ServerStore } from \"../../../node/server/storage/ServerStore.js\";\nimport { ExchangeManager } from \"../../../protocol/ExchangeManager.js\";\nimport { SessionManager } from \"../../../session/SessionManager.js\";\nimport { CommissioningBehavior } from \"../commissioning/CommissioningBehavior.js\";\nimport { ProductDescriptionServer } from \"../product-description/ProductDescriptionServer.js\";\nimport { SessionsBehavior } from \"../sessions/SessionsBehavior.js\";\nimport { NetworkRuntime } from \"./NetworkRuntime.js\";\n\nfunction convertNetworkEnvironmentType(type: string | number) {\n    const convertedType: InterfaceType =\n        typeof type === \"string\" ? InterfaceType[type as keyof typeof InterfaceType] : type;\n    if (typeof convertedType !== \"number\" || convertedType < 1 || convertedType > 4) {\n        return undefined;\n    }\n    return convertedType;\n}\n\n/**\n * Handles network functionality for {@link NodeServer}.\n */\nexport class ServerNetworkRuntime extends NetworkRuntime {\n    #interactionServer?: TransactionalInteractionServer;\n    #matterDevice?: MatterDevice;\n    #mdnsBroadcaster?: MdnsInstanceBroadcaster;\n    #primaryNetInterface?: UdpInterface;\n    #bleBroadcaster?: InstanceBroadcaster;\n    #bleTransport?: TransportInterface;\n    #commissionedListener?: () => void;\n\n    override get owner() {\n        return super.owner as ServerNode;\n    }\n\n    /**\n     * Access the MDNS broadcaster for the node.\n     */\n    get mdnsBroadcaster() {\n        if (!this.#mdnsBroadcaster) {\n            this.#mdnsBroadcaster = this.owner.env\n                .get(MdnsService)\n                .createInstanceBroadcaster(this.owner.state.network.operationalPort);\n        }\n        return this.#mdnsBroadcaster;\n    }\n\n    get networkInterfaceConfiguration(): NetworkInterface[] {\n        const interfaceConfig = this.owner.env.vars.get<Record<string, { type: string | number }>>(\n            \"network.interface\",\n            {},\n        );\n\n        return Object.entries(interfaceConfig).map(([name, { type }]) => ({\n            name,\n            type: convertNetworkEnvironmentType(type),\n        }));\n    }\n\n    async getNetworkInterfaces(): Promise<NetworkInterfaceDetailed[]> {\n        const network = this.owner.env.get(Network);\n\n        const interfaces = await network.getNetInterfaces(this.networkInterfaceConfiguration);\n        const interfaceDetails = new Array<NetworkInterfaceDetailed>();\n        for (const { name, type } of interfaces) {\n            const details = await network.getIpMac(name);\n            if (details !== undefined) {\n                interfaceDetails.push({ name, type, ...details });\n            }\n        }\n        return interfaceDetails;\n    }\n\n    openAdvertisementWindow() {\n        if (!this.#matterDevice) {\n            throw new InternalError(\"Server runtime device instance is missing\");\n        }\n\n        return this.#matterDevice.startAnnouncement();\n    }\n\n    announceNow() {\n        if (!this.#matterDevice) {\n            throw new InternalError(\"Server runtime device instance is missing\");\n        }\n\n        // TODO - see comment in startAdvertising\n        return this.#matterDevice.announce(true);\n    }\n\n    /**\n     * The IPv6 {@link UdpInterface}. We create this interface independently of the server so the OS can select a port\n     * before we are fully online.\n     */\n    protected async getPrimaryNetInterface() {\n        if (this.#primaryNetInterface === undefined) {\n            const port = this.owner.state.network.port;\n            this.#primaryNetInterface = await UdpInterface.create(\n                this.owner.env.get(Network),\n                \"udp6\",\n                port ? port : undefined,\n                this.owner.state.network.listeningAddressIpv6,\n            );\n\n            await this.owner.set({ network: { operationalPort: this.#primaryNetInterface.port } });\n        }\n        return this.#primaryNetInterface;\n    }\n\n    /**\n     * A BLE broadcaster.\n     */\n    protected get bleBroadcaster() {\n        if (this.#bleBroadcaster === undefined) {\n            const bleData = this.owner.state.commissioning.additionalBleAdvertisementData;\n            this.#bleBroadcaster = Ble.get().getBleBroadcaster(bleData);\n        }\n        return this.#bleBroadcaster;\n    }\n\n    /**\n     * A BLE transport.\n     */\n    protected get bleTransport() {\n        if (this.#bleTransport === undefined) {\n            this.#bleTransport = Ble.get().getBlePeripheralInterface();\n        }\n        return this.#bleTransport;\n    }\n\n    /**\n     * Add transports to the {@link MatterDevice}.\n     */\n    protected async addTransports(device: MatterDevice) {\n        device.addTransportInterface(await this.getPrimaryNetInterface());\n\n        const netconf = this.owner.state.network;\n\n        if (netconf.ipv4) {\n            device.addTransportInterface(\n                await UdpInterface.create(\n                    this.owner.env.get(Network),\n                    \"udp4\",\n                    netconf.port,\n                    netconf.listeningAddressIpv4,\n                ),\n            );\n        }\n\n        if (netconf.ble) {\n            device.addTransportInterface(this.bleTransport);\n        }\n    }\n\n    /**\n     * Add broadcasters to the {@link MatterDevice}.\n     */\n    protected async addBroadcasters(device: MatterDevice) {\n        const isCommissioned = !!this.#commissionedFabrics;\n\n        let discoveryCapabilities = this.owner.state.network.discoveryCapabilities;\n\n        if (isCommissioned) {\n            // Already commissioned, only broadcast on network\n            discoveryCapabilities = { onIpNetwork: true };\n        }\n\n        if (discoveryCapabilities.onIpNetwork) {\n            device.addBroadcaster(this.mdnsBroadcaster);\n        }\n\n        if (discoveryCapabilities.ble) {\n            device.addBroadcaster(this.bleBroadcaster);\n        }\n    }\n\n    /**\n     * When the first Fabric gets added we need to enable MDNS broadcasting.\n     */\n    enableMdnsBroadcasting() {\n        const mdnsBroadcaster = this.mdnsBroadcaster;\n        if (!this.#matterDevice?.hasBroadcaster(mdnsBroadcaster)) {\n            this.#matterDevice?.addBroadcaster(mdnsBroadcaster);\n        }\n    }\n\n    /**\n     * On commission we turn off bluetooth and join the IP network if we haven't already.\n     *\n     * On decommission we're destroyed so don't need to handle that case.\n     */\n    endUncommissionedMode() {\n        if (this.#bleBroadcaster) {\n            this.owner.env.runtime.add(this.#removeBleBroadcaster(this.#bleBroadcaster));\n            this.#bleBroadcaster = undefined;\n        }\n\n        if (this.#bleTransport) {\n            this.owner.env.runtime.add(this.#removeBleTransport(this.#bleTransport));\n            this.#bleTransport = undefined;\n        }\n    }\n\n    async #removeBleBroadcaster(bleBroadcaster: InstanceBroadcaster) {\n        await this.#matterDevice?.deleteBroadcaster(bleBroadcaster);\n        await bleBroadcaster.close();\n    }\n\n    async #removeBleTransport(bleTransport: TransportInterface) {\n        await this.#matterDevice?.deleteTransportInterface(bleTransport);\n        await bleTransport.close();\n    }\n\n    /**\n     * Expose the internal InteractionServer for testing.\n     */\n    get interactionServer() {\n        if (this.#interactionServer === undefined) {\n            throw new ImplementationError(\"Interaction server is not available yet\");\n        }\n        return this.#interactionServer;\n    }\n\n    get #commissionedFabrics() {\n        return this.owner.state.operationalCredentials.commissionedFabrics;\n    }\n\n    override get operationalPort() {\n        return this.#primaryNetInterface?.port ?? 0;\n    }\n\n    endCommissioning() {\n        if (this.#matterDevice !== undefined) {\n            return this.#matterDevice.endCommissioning();\n        }\n    }\n\n    protected override async start() {\n        const mdnsScanner = (await this.owner.env.load(MdnsService)).scanner;\n        await this.owner.act(\"start-network\", agent => agent.load(ProductDescriptionServer));\n\n        this.#interactionServer = await TransactionalInteractionServer.create(this.owner);\n\n        const { sessionStorage, fabricStorage } = this.owner.env.get(ServerStore);\n\n        const matterDevice = await MatterDevice.create(\n            sessionStorage,\n            fabricStorage,\n            () => ({\n                ...this.owner.state.commissioning,\n                productDescription: this.owner.state.productDescription,\n                ble: !!this.owner.state.network.ble,\n            }),\n            this.owner.state.basicInformation.capabilityMinima.caseSessionsPerFabric, // Internally it is \"Session and Node\", so we support even more\n            (_fabricIndex: FabricIndex, _fabricAction: FabricAction) => {\n                // We use events directly\n            },\n            (_fabricIndex: FabricIndex) => {\n                // Wired differently using SessionBehavior\n            },\n            { maxPathsPerInvoke: this.#interactionServer.maxPathsPerInvoke },\n        );\n        this.#matterDevice = matterDevice;\n        matterDevice.addProtocolHandler(this.#interactionServer);\n        matterDevice.addScanner(mdnsScanner);\n\n        matterDevice.fabricManager.events.added.on(fabric => {\n            const fabrics = this.#matterDevice?.fabricManager.getFabrics() ?? [];\n            if (fabrics.length === 1 && fabrics[0].fabricIndex === fabric.fabricIndex) {\n                this.enableMdnsBroadcasting();\n            }\n        });\n\n        // Expose internal managers for other components in the environment\n        this.owner.env.set(SessionManager, matterDevice.sessionManager);\n        this.owner.env.set(FabricManager, matterDevice.fabricManager);\n        this.owner.env.set(ExchangeManager, this.#matterDevice.exchangeManager);\n\n        await this.owner.act(\"load-sessions\", agent => agent.load(SessionsBehavior));\n        this.owner.eventsOf(CommissioningBehavior).commissioned.on(() => this.endUncommissionedMode());\n\n        await this.addTransports(matterDevice);\n        await this.addBroadcasters(matterDevice);\n\n        await this.owner.set({ network: { operationalPort: this.operationalPort } });\n\n        await this.openAdvertisementWindow();\n    }\n\n    protected override async stop() {\n        if (this.#matterDevice) {\n            this.owner.env.delete(SessionManager, this.#matterDevice.sessionManager);\n            this.owner.env.delete(FabricManager, this.#matterDevice.fabricManager);\n            this.owner.env.delete(ExchangeManager, this.#matterDevice.exchangeManager);\n\n            await this.#matterDevice.close();\n\n            this.#matterDevice = undefined;\n            this.#primaryNetInterface = undefined;\n        }\n\n        if (this.#primaryNetInterface) {\n            // If we created the net interface but not the device we need to dispose ourselves\n            await this.#primaryNetInterface.close();\n            this.#primaryNetInterface = undefined;\n        }\n\n        await this.#interactionServer?.[Symbol.asyncDispose]();\n        this.#interactionServer = undefined;\n\n        if (this.#commissionedListener) {\n            const commissionedListener = this.#commissionedListener;\n            this.#commissionedListener = undefined;\n            this.owner.eventsOf(CommissioningBehavior).commissioned.off(commissionedListener);\n        }\n    }\n\n    protected override blockNewActivity() {\n        this.#interactionServer?.blockNewActivity();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
