{
  "version": 3,
  "sources": ["../../../../src/behavior/context/ActionTracer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DataModelPath } from \"../../model/definitions/DataModelPath.js\";\nimport { StatusCode } from \"../../protocol/interaction/StatusCode.js\";\nimport { Val } from \"../state/Val.js\";\n\n/**\n * This is an instrumentation interface that allows for recording of attribute I/O, commands, events and state\n * mutation.\n *\n * Implemented as abstract class to allow for lookup by type in Environment.\n */\nexport abstract class ActionTracer {\n    abstract record(action: ActionTracer.Action): void;\n}\n\nexport namespace ActionTracer {\n    export enum ActionType {\n        Initialize = \"initialize\",\n        Read = \"read\",\n        Write = \"write\",\n        Invoke = \"invoke\",\n        Destroy = \"destroy\",\n    }\n\n    export interface Mutation {\n        path: DataModelPath;\n        values: Record<string, unknown>;\n    }\n\n    export interface Action {\n        type: ActionType;\n        path?: DataModelPath;\n        status?: StatusCode;\n        input?: Val;\n        mutations?: Mutation[];\n        output?: Val;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAe,aAAa;AAEnC;AAAA,CAEO,CAAUA,kBAAV;AACI,MAAK;AAAL,IAAKC,gBAAL;AACH,IAAAA,YAAA,gBAAa;AACb,IAAAA,YAAA,UAAO;AACP,IAAAA,YAAA,WAAQ;AACR,IAAAA,YAAA,YAAS;AACT,IAAAA,YAAA,aAAU;AAAA,KALF,aAAAD,cAAA,eAAAA,cAAA;AAAA,GADC;",
  "names": ["ActionTracer", "ActionType"]
}
