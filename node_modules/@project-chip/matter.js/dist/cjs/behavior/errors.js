"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  ConformanceError: () => ConformanceError,
  ConstraintError: () => ConstraintError,
  DatatypeError: () => DatatypeError,
  ExpiredReferenceError: () => ExpiredReferenceError,
  InvokeError: () => InvokeError,
  PhantomReferenceError: () => PhantomReferenceError,
  ReadError: () => ReadError,
  SchemaImplementationError: () => import_errors2.SchemaImplementationError,
  ValidateError: () => ValidateError,
  WriteError: () => WriteError
});
module.exports = __toCommonJS(errors_exports);
var import_errors = require("../model/definitions/errors.js");
var import_StatusCode = require("../protocol/interaction/StatusCode.js");
var import_errors2 = require("../model/definitions/errors.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class ReadError extends import_errors.SchemaViolationError {
  constructor(path, message, code) {
    super("Reading", path, message, code ?? import_StatusCode.StatusCode.UnsupportedRead);
  }
}
class WriteError extends import_errors.SchemaViolationError {
  constructor(path, message, code) {
    super("Writing", path, message, code ?? import_StatusCode.StatusCode.UnsupportedWrite);
  }
}
class InvokeError extends import_errors.SchemaViolationError {
  constructor(path, message, code) {
    super("Invoking", path, message, code ?? import_StatusCode.StatusCode.UnsupportedAccess);
  }
}
class ValidateError extends import_errors.SchemaViolationError {
  constructor(path, message, code) {
    super("Validating", path, message, code ?? import_StatusCode.StatusCode.InvalidDataType);
  }
}
class DatatypeError extends ValidateError {
  constructor(path, type, value, code) {
    const str = `${value}`;
    if (str.length > 60) {
      value = `${str.substring(60)}\u2026`;
    }
    super(path, `Value "${str}" is not ${type}`, code);
  }
}
class ConstraintError extends ValidateError {
  constructor(schema, path, message) {
    super(path, `Constraint "${schema.constraint}": ${message}`, import_StatusCode.StatusCode.ConstraintError);
  }
}
class ConformanceError extends ValidateError {
  constructor(schema, path, message, choice) {
    let prefix;
    if (choice) {
      prefix = `Conformance choice "${choice}"`;
    } else {
      prefix = `Conformance "${schema.conformance}"`;
    }
    super(path, `${prefix}: ${message}`, import_StatusCode.StatusCode.InvalidAction);
  }
}
class ExpiredReferenceError extends import_errors.SchemaViolationError {
  constructor(path) {
    super(
      "Referencing",
      path,
      "This value is no longer available because its context has exited",
      import_StatusCode.StatusCode.Failure
    );
  }
}
class PhantomReferenceError extends import_errors.SchemaViolationError {
  constructor(path) {
    super("Referencing", path, "Container was removed", import_StatusCode.StatusCode.Failure);
  }
}
//# sourceMappingURL=errors.js.map
