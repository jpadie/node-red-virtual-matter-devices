{
  "version": 3,
  "sources": ["../../../../src/behavior/internal/ServerBacking.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FieldValue } from \"../../model/index.js\";\nimport { ServerStore } from \"../../node/server/storage/ServerStore.js\";\nimport { EventHandler } from \"../../protocol/interaction/EventHandler.js\";\nimport { camelize } from \"../../util/String.js\";\nimport { Behavior } from \"../Behavior.js\";\nimport { Val } from \"../state/Val.js\";\nimport { Datasource } from \"../state/managed/Datasource.js\";\nimport { BehaviorBacking } from \"./BehaviorBacking.js\";\n\n/**\n * This class backs the server implementation of a behavior.\n */\nexport class ServerBehaviorBacking extends BehaviorBacking {\n    #store?: Datasource.Store;\n    #eventHandler?: EventHandler;\n\n    override get store() {\n        if (!this.#store) {\n            this.#store = this.#serverStore.partStores.storeForPart(this.endpoint).storeForBehavior(this.type.id);\n        }\n        return this.#store;\n    }\n\n    get eventHandler() {\n        if (!this.#eventHandler) {\n            this.#eventHandler = this.#serverStore.eventHandler;\n        }\n        return this.#eventHandler;\n    }\n\n    protected override invokeInitializer(behavior: Behavior, options?: Behavior.Options) {\n        const finalizeState = () => {\n            this.#applyTransitiveDefaults(behavior.state);\n\n            // State must now conform to the schema.  Validate the behavior's state rather than internal state\n            // because the behavior likely has uncommitted changes\n            const context = behavior.context;\n            this.datasource.validate(context, behavior.state);\n        };\n\n        const promise = super.invokeInitializer(behavior, options);\n        if (promise) {\n            return promise.then(finalizeState);\n        }\n\n        finalizeState();\n    }\n\n    get #serverStore() {\n        return this.endpoint.env.get(ServerStore);\n    }\n\n    /**\n     * Schema may specify that state fields default to the value of another field.  We apply these defaults after\n     * initialization when the other field should be defined.\n     */\n    #applyTransitiveDefaults(state: Val.Struct) {\n        const schema = this.type.schema;\n        if (!schema) {\n            return;\n        }\n\n        for (const member of schema.activeMembers) {\n            const name = camelize(member.name);\n            if (state[name] === undefined) {\n                const referenced = FieldValue.referenced(member.default);\n                if (referenced) {\n                    const val = state[camelize(referenced)];\n                    if (val !== undefined) {\n                        state[name] = val;\n                    }\n                }\n            }\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,mBAA2B;AAC3B,yBAA4B;AAE5B,oBAAyB;AAIzB,6BAAgC;AAbhC;AAAA;AAAA;AAAA;AAAA;AAkBO,MAAM,8BAA8B,uCAAgB;AAAA,EACvD;AAAA,EACA;AAAA,EAEA,IAAa,QAAQ;AACjB,QAAI,CAAC,KAAK,QAAQ;AACd,WAAK,SAAS,KAAK,aAAa,WAAW,aAAa,KAAK,QAAQ,EAAE,iBAAiB,KAAK,KAAK,EAAE;AAAA,IACxG;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,eAAe;AACf,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,gBAAgB,KAAK,aAAa;AAAA,IAC3C;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EAEmB,kBAAkB,UAAoB,SAA4B;AACjF,UAAM,gBAAgB,MAAM;AACxB,WAAK,yBAAyB,SAAS,KAAK;AAI5C,YAAM,UAAU,SAAS;AACzB,WAAK,WAAW,SAAS,SAAS,SAAS,KAAK;AAAA,IACpD;AAEA,UAAM,UAAU,MAAM,kBAAkB,UAAU,OAAO;AACzD,QAAI,SAAS;AACT,aAAO,QAAQ,KAAK,aAAa;AAAA,IACrC;AAEA,kBAAc;AAAA,EAClB;AAAA,EAEA,IAAI,eAAe;AACf,WAAO,KAAK,SAAS,IAAI,IAAI,8BAAW;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyB,OAAmB;AACxC,UAAM,SAAS,KAAK,KAAK;AACzB,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AAEA,eAAW,UAAU,OAAO,eAAe;AACvC,YAAM,WAAO,wBAAS,OAAO,IAAI;AACjC,UAAI,MAAM,IAAI,MAAM,QAAW;AAC3B,cAAM,aAAa,wBAAW,WAAW,OAAO,OAAO;AACvD,YAAI,YAAY;AACZ,gBAAM,MAAM,UAAM,wBAAS,UAAU,CAAC;AACtC,cAAI,QAAQ,QAAW;AACnB,kBAAM,IAAI,IAAI;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
