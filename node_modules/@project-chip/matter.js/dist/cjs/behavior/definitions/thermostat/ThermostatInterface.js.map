{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/thermostat/ThermostatInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { Thermostat } from \"../../../cluster/definitions/ThermostatCluster.js\";\n\nexport namespace ThermostatInterface {\n    export interface Base {\n        /**\n         * Upon receipt, the attributes for the indicated setpoint(s) shall have the amount specified in the Amount\n         * field added to them. If the resulting value is outside the limits imposed by MinCoolSetpointLimit,\n         * MaxCoolSetpointLimit, MinHeatSetpointLimit and MaxHeatSetpointLimit, the value is clamped to those limits.\n         * This is not considered an error condition.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.1\n         */\n        setpointRaiseLower(request: Thermostat.SetpointRaiseLowerRequest): MaybePromise;\n    }\n\n    export interface ScheduleConfiguration {\n        /**\n         * Upon receipt, the weekly schedule for updating setpoints shall be stored in the thermostat and SHOULD begin\n         * at the time of receipt. A status code shall be sent in response.\n         *\n         * When a command is received that requires a total number of transitions greater than the device supports, the\n         * status of the response shall be INSUFFICIENT_SPACE.\n         *\n         * When any of the setpoints sent in the sequence is out of range (AbsMin/MaxSetPointLimit), or when the Mode\n         * for Sequence field includes a mode not supported by the device, the status of the response shall be\n         * CONSTRAINT_ERROR and no setpoints from the entire sequence SHOULD be used.\n         *\n         * When an overlapping transition is detected, the status of the response shall be FAILURE.\n         *\n         * When a device which does not support multiple days in a command receives a command with more than one bit\n         * set in the DayOfWeekForSequence field, or when a device which does not support multiple modes in a command\n         * receives a command with more than one bit set in the ModeForSequence field, or when the contents of the\n         * Transitions field does not agree with NumberOfTransitionsForSequence, DayOfWeekForSequence or\n         * ModeForSequence, the status of the response shall be INVALID_COMMAND.\n         *\n         * When the transitions could be added successfully, the status of the response shall be SUCCESS.\n         *\n         * The set weekly schedule command is used to update the thermostat weekly setpoint schedule from a management\n         * system. If the thermostat already has a weekly setpoint schedule programmed, then it SHOULD replace each\n         * daily setpoint set as it receives the updates from the management system. For example, if the thermostat has\n         * 4 setpoints for every day of the week and is sent a Set Weekly Schedule command with one setpoint for\n         * Saturday then the thermostat SHOULD remove all 4 setpoints for Saturday and replace those with the updated\n         * setpoint but leave all other days unchanged. If the schedule is larger than what fits in one frame or\n         * contains more than 10 transitions, the schedule shall then be sent using multiple Set Weekly Schedule\n         * Commands.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4\n         */\n        setWeeklySchedule(request: Thermostat.SetWeeklyScheduleRequest): MaybePromise;\n\n        /**\n         * Upon receipt, the unit SHOULD send in return the Get Weekly Schedule Response command. The Days to Return\n         * and Mode to Return fields are defined as bitmask for the flexibility to support multiple days and multiple\n         * modes within one command. If thermostat cannot handle incoming command with multiple days and/or multiple\n         * modes within one command, it shall send default response of INVALID_COMMAND in return.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5\n         */\n        getWeeklySchedule(request: Thermostat.GetWeeklyScheduleRequest): MaybePromise<Thermostat.GetWeeklyScheduleResponse>;\n\n        /**\n         * This command is used to clear the weekly schedule. The Clear weekly schedule has no payload.\n         *\n         * Upon receipt, all transitions currently stored shall be cleared and a default response of SUCCESS shall be\n         * sent in response. There are no error responses to this command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.7\n         */\n        clearWeeklySchedule(): MaybePromise;\n    }\n}\n\nexport type ThermostatInterface = {\n    components: [\n        { flags: {}, methods: ThermostatInterface.Base },\n        { flags: { scheduleConfiguration: true }, methods: ThermostatInterface.ScheduleConfiguration }\n    ]\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
