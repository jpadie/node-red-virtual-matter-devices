/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { Thermostat } from "../../../cluster/definitions/ThermostatCluster.js";
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { ThermostatInterface } from "./ThermostatInterface.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * ThermostatBehavior is the base class for objects that support interaction with {@link Thermostat.Cluster}.
 *
 * Thermostat.Cluster requires you to enable one or more optional features. You can do so using {@link
 * ThermostatBehavior.with}.
 */
export declare const ThermostatBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 513;
    readonly name: "Thermostat";
    readonly revision: 6;
    readonly features: {
        readonly heating: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly cooling: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly occupancy: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly scheduleConfiguration: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly setback: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly autoMode: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly localTemperatureNotExposed: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly localTemperature: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
        readonly outdoorTemperature: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
        readonly remoteSensing: import("../../../cluster/Cluster.js").OptionalWritableAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            localTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
            outdoorTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
            occupancy: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly controlSequenceOfOperation: import("../../../cluster/Cluster.js").WritableAttribute<Thermostat.ControlSequenceOfOperation, any>;
        readonly systemMode: import("../../../cluster/Cluster.js").WritableAttribute<Thermostat.SystemMode, any>;
        readonly temperatureSetpointHold: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.TemperatureSetpointHold, any>;
        readonly temperatureSetpointHoldDuration: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
        readonly thermostatProgrammingOperationMode: import("../../../cluster/Cluster.js").OptionalWritableAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            scheduleActive: import("../../../schema/BitmapSchema.js").BitFlag;
            autoRecovery: import("../../../schema/BitmapSchema.js").BitFlag;
            economy: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly thermostatRunningState: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            heat: import("../../../schema/BitmapSchema.js").BitFlag;
            cool: import("../../../schema/BitmapSchema.js").BitFlag;
            fan: import("../../../schema/BitmapSchema.js").BitFlag;
            heatStage2: import("../../../schema/BitmapSchema.js").BitFlag;
            coolStage2: import("../../../schema/BitmapSchema.js").BitFlag;
            fanStage2: import("../../../schema/BitmapSchema.js").BitFlag;
            fanStage3: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly setpointChangeSource: import("../../../cluster/Cluster.js").OptionalAttribute<Thermostat.SetpointChangeSource, any>;
        readonly setpointChangeAmount: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
        readonly setpointChangeSourceTimestamp: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
        readonly emergencyHeatDelta: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
        readonly acType: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.AcType, any>;
        readonly acCapacity: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
        readonly acRefrigerantType: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.AcRefrigerantType, any>;
        readonly acCompressorType: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.AcCompressorType, any>;
        readonly acErrorCode: import("../../../cluster/Cluster.js").OptionalWritableAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            compressorFail: import("../../../schema/BitmapSchema.js").BitFlag;
            roomSensorFail: import("../../../schema/BitmapSchema.js").BitFlag;
            outdoorSensorFail: import("../../../schema/BitmapSchema.js").BitFlag;
            coilSensorFail: import("../../../schema/BitmapSchema.js").BitFlag;
            fanFail: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly acLouverPosition: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.AcLouverPosition, any>;
        readonly acCoilTemperature: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
        readonly acCapacityFormat: import("../../../cluster/Cluster.js").OptionalWritableAttribute<Thermostat.AcCapacityFormat, any>;
    };
    readonly commands: {
        readonly setpointRaiseLower: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
            mode: import("../../../tlv/TlvObject.js").FieldType<Thermostat.SetpointRaiseLowerMode>;
            amount: import("../../../tlv/TlvObject.js").FieldType<number>;
        }>, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly occupancy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly occupancy: import("../../../cluster/Cluster.js").Attribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    occupied: import("../../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly heating: true;
        };
        readonly component: {
            readonly attributes: {
                readonly absMinHeatSetpointLimit: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly absMaxHeatSetpointLimit: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly piHeatingDemand: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
                readonly occupiedHeatingSetpoint: import("../../../cluster/Cluster.js").WritableAttribute<number, any>;
                readonly minHeatSetpointLimit: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
                readonly maxHeatSetpointLimit: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly cooling: true;
        };
        readonly component: {
            readonly attributes: {
                readonly absMinCoolSetpointLimit: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly absMaxCoolSetpointLimit: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly piCoolingDemand: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
                readonly occupiedCoolingSetpoint: import("../../../cluster/Cluster.js").WritableAttribute<number, any>;
                readonly minCoolSetpointLimit: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
                readonly maxCoolSetpointLimit: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly localTemperatureNotExposed: false;
        };
        readonly component: {
            readonly attributes: {
                readonly localTemperatureCalibration: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly cooling: true;
            readonly occupancy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly unoccupiedCoolingSetpoint: import("../../../cluster/Cluster.js").WritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly heating: true;
            readonly occupancy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly unoccupiedHeatingSetpoint: import("../../../cluster/Cluster.js").WritableAttribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly autoMode: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minSetpointDeadBand: import("../../../cluster/Cluster.js").WritableAttribute<number, any>;
                readonly thermostatRunningMode: import("../../../cluster/Cluster.js").OptionalAttribute<Thermostat.ThermostatRunningMode, any>;
            };
        };
    }, {
        readonly flags: {
            readonly scheduleConfiguration: true;
        };
        readonly component: {
            readonly attributes: {
                readonly startOfWeek: import("../../../cluster/Cluster.js").FixedAttribute<Thermostat.StartOfWeek, any>;
                readonly numberOfWeeklyTransitions: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
                readonly numberOfDailyTransitions: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly setWeeklySchedule: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    numberOfTransitionsForSequence: import("../../../tlv/TlvObject.js").FieldType<number>;
                    dayOfWeekForSequence: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        sunday: import("../../../schema/BitmapSchema.js").BitFlag;
                        monday: import("../../../schema/BitmapSchema.js").BitFlag;
                        tuesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        wednesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        thursday: import("../../../schema/BitmapSchema.js").BitFlag;
                        friday: import("../../../schema/BitmapSchema.js").BitFlag;
                        saturday: import("../../../schema/BitmapSchema.js").BitFlag;
                        away: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    modeForSequence: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        heatSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                        coolSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    transitions: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        transitionTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        heatSetpoint: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                        coolSetpoint: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                    }>[]>;
                }>, void, any>;
                readonly getWeeklySchedule: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    daysToReturn: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        sunday: import("../../../schema/BitmapSchema.js").BitFlag;
                        monday: import("../../../schema/BitmapSchema.js").BitFlag;
                        tuesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        wednesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        thursday: import("../../../schema/BitmapSchema.js").BitFlag;
                        friday: import("../../../schema/BitmapSchema.js").BitFlag;
                        saturday: import("../../../schema/BitmapSchema.js").BitFlag;
                        away: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    modeToReturn: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        heatSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                        coolSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    numberOfTransitionsForSequence: import("../../../tlv/TlvObject.js").FieldType<number>;
                    dayOfWeekForSequence: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        sunday: import("../../../schema/BitmapSchema.js").BitFlag;
                        monday: import("../../../schema/BitmapSchema.js").BitFlag;
                        tuesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        wednesday: import("../../../schema/BitmapSchema.js").BitFlag;
                        thursday: import("../../../schema/BitmapSchema.js").BitFlag;
                        friday: import("../../../schema/BitmapSchema.js").BitFlag;
                        saturday: import("../../../schema/BitmapSchema.js").BitFlag;
                        away: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    modeForSequence: import("../../../tlv/TlvObject.js").FieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        heatSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                        coolSetpointPresent: import("../../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    transitions: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        transitionTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        heatSetpoint: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                        coolSetpoint: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                    }>[]>;
                }>, any>;
                readonly clearWeeklySchedule: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly setback: true;
        };
        readonly component: {
            readonly attributes: {
                readonly occupiedSetback: import("../../../cluster/Cluster.js").WritableAttribute<number | null, any>;
                readonly occupiedSetbackMin: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly occupiedSetbackMax: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly setback: true;
            readonly occupancy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly unoccupiedSetback: import("../../../cluster/Cluster.js").WritableAttribute<number | null, any>;
                readonly unoccupiedSetbackMin: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly unoccupiedSetbackMax: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly autoMode: true;
            readonly heating: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly autoMode: true;
            readonly cooling: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly heating: false;
            readonly cooling: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, ThermostatInterface>, ThermostatInterface>;
type ThermostatBehaviorType = InstanceType<typeof ThermostatBehavior>;
export interface ThermostatBehavior extends ThermostatBehaviorType {
}
type StateType = InstanceType<typeof ThermostatBehavior.State>;
export declare namespace ThermostatBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=ThermostatBehavior.d.ts.map