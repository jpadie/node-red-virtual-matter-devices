{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/group-key-management/GroupKeyManagementServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupKeyManagement } from \"../../../cluster/definitions/GroupKeyManagementCluster.js\";\nimport { ImplementationError } from \"../../../common/MatterError.js\";\nimport { StatusCode, StatusResponseError } from \"../../../protocol/interaction/StatusCode.js\";\nimport { GroupKeyManagementBehavior } from \"./GroupKeyManagementBehavior.js\";\n\n/**\n * This is the default server implementation of {@link GroupKeyManagementBehavior}.\n */\nexport class GroupKeyManagementServer extends GroupKeyManagementBehavior {\n    override initialize(): void {\n        if (this.state.maxGroupKeysPerFabric !== 1) {\n            throw new ImplementationError(\"maxGroupKeysPerFabric must be 1 for now.\");\n        }\n        if (this.state.maxGroupsPerFabric !== 0) {\n            throw new ImplementationError(\"maxGroupsPerFabric must be 0 for now.\");\n        }\n        this.state.groupTable = [];\n    }\n\n    override keySetWrite() {\n        throw new StatusResponseError(\n            \"We do not support and additional groups then the IPK\",\n            StatusCode.ResourceExhausted,\n        );\n    }\n\n    override keySetRead({\n        groupKeySetId,\n    }: GroupKeyManagement.KeySetReadRequest): GroupKeyManagement.KeySetReadResponse {\n        if (this.context.session === undefined) {\n            throw new ImplementationError(\"Session must be defined\");\n        }\n        const fabric = this.context.session.associatedFabric;\n\n        const groupKeySet = fabric.getGroupKeySet(groupKeySetId);\n        if (groupKeySet === undefined) {\n            throw new StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, StatusCode.NotFound);\n        }\n\n        return {\n            groupKeySet: {\n                ...groupKeySet,\n                epochKey0: null,\n                epochKey1: null,\n                epochKey2: null,\n            },\n        };\n    }\n\n    override keySetRemove({ groupKeySetId }: GroupKeyManagement.KeySetRemoveRequest) {\n        if (groupKeySetId === 0) {\n            throw new StatusResponseError(`GroupKeySet ${groupKeySetId} cannot be removed`, StatusCode.InvalidCommand);\n        }\n\n        // We only have key 0, so we can't remove it\n        throw new StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, StatusCode.NotFound);\n    }\n\n    override keySetReadAllIndices() {\n        if (this.context.session === undefined) {\n            throw new ImplementationError(\"Session must be defined\");\n        }\n        const fabric = this.context.session.associatedFabric;\n\n        const groupKeySetIDs = fabric.getAllGroupKeySets().map(({ groupKeySetId }) => groupKeySetId);\n\n        return {\n            groupKeySetIDs,\n        };\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,yBAAoC;AACpC,wBAAgD;AAChD,wCAA2C;AAT3C;AAAA;AAAA;AAAA;AAAA;AAcO,MAAM,iCAAiC,6DAA2B;AAAA,EAC5D,aAAmB;AACxB,QAAI,KAAK,MAAM,0BAA0B,GAAG;AACxC,YAAM,IAAI,uCAAoB,0CAA0C;AAAA,IAC5E;AACA,QAAI,KAAK,MAAM,uBAAuB,GAAG;AACrC,YAAM,IAAI,uCAAoB,uCAAuC;AAAA,IACzE;AACA,SAAK,MAAM,aAAa,CAAC;AAAA,EAC7B;AAAA,EAES,cAAc;AACnB,UAAM,IAAI;AAAA,MACN;AAAA,MACA,6BAAW;AAAA,IACf;AAAA,EACJ;AAAA,EAES,WAAW;AAAA,IAChB;AAAA,EACJ,GAAgF;AAC5E,QAAI,KAAK,QAAQ,YAAY,QAAW;AACpC,YAAM,IAAI,uCAAoB,yBAAyB;AAAA,IAC3D;AACA,UAAM,SAAS,KAAK,QAAQ,QAAQ;AAEpC,UAAM,cAAc,OAAO,eAAe,aAAa;AACvD,QAAI,gBAAgB,QAAW;AAC3B,YAAM,IAAI,sCAAoB,eAAe,aAAa,cAAc,6BAAW,QAAQ;AAAA,IAC/F;AAEA,WAAO;AAAA,MACH,aAAa;AAAA,QACT,GAAG;AAAA,QACH,WAAW;AAAA,QACX,WAAW;AAAA,QACX,WAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA,EAES,aAAa,EAAE,cAAc,GAA2C;AAC7E,QAAI,kBAAkB,GAAG;AACrB,YAAM,IAAI,sCAAoB,eAAe,aAAa,sBAAsB,6BAAW,cAAc;AAAA,IAC7G;AAGA,UAAM,IAAI,sCAAoB,eAAe,aAAa,cAAc,6BAAW,QAAQ;AAAA,EAC/F;AAAA,EAES,uBAAuB;AAC5B,QAAI,KAAK,QAAQ,YAAY,QAAW;AACpC,YAAM,IAAI,uCAAoB,yBAAyB;AAAA,IAC3D;AACA,UAAM,SAAS,KAAK,QAAQ,QAAQ;AAEpC,UAAM,iBAAiB,OAAO,mBAAmB,EAAE,IAAI,CAAC,EAAE,cAAc,MAAM,aAAa;AAE3F,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
