{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/account-login/AccountLoginInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { AccountLogin } from \"../../../cluster/definitions/AccountLoginCluster.js\";\n\nexport namespace AccountLoginInterface {\n    export interface Base {\n        /**\n         * The purpose of this command is to determine if the active user account of the given Content App matches the\n         * active user account of a given Commissionee, and when it does, return a Setup PIN code which can be used for\n         * password-authenticated session establishment (PASE) with the Commissionee.\n         *\n         * For example, a Video Player with a Content App Platform may invoke this command on one of its Content App\n         * endpoints to facilitate commissioning of a Phone App made by the same vendor as the Content App. If the\n         * accounts match, then the Content App may return a setup code that can be used\n         *\n         * by the Video Player to commission the Phone App without requiring the user to physically input a setup code.\n         *\n         * The account match is determined by the Content App using a method which is outside the scope of this\n         * specification and will typically involve a central service which is in communication with both the Content\n         * App and the Commissionee. The GetSetupPIN command is needed in order to provide the Commissioner/Admin with\n         * a Setup PIN when this Commissioner/Admin is operated by a different vendor from the Content App.\n         *\n         * This method is used to facilitate Setup PIN exchange (for PASE) between Commissioner and Commissionee when\n         * the same user account is active on both nodes. With this method, the Content App satisfies proof of\n         * possession related to commissioning by requiring the same user account to be active on both Commissionee and\n         * Content App, while the Commissioner/Admin ensures user consent by prompting the user prior to invocation of\n         * the command.\n         *\n         * Upon receipt of this command, the Content App checks if the account associated with the Temporary Account\n         * Identifier sent by the client is the same account that is active on itself. If the accounts are the same,\n         * then the Content App returns the GetSetupPIN Response which includes a Setup PIN that may be used for PASE\n         * with the Commissionee.\n         *\n         * The Temporary Account Identifier for a Commissionee may be populated with the Rotating ID field of the\n         * client\u2019s commissionable node advertisement (see Rotating Device Identifier section in [MatterCore]) encoded\n         * as an octet string where the octets of the Rotating Device Identifier are encoded as 2-character sequences\n         * by representing each octet\u2019s value as a 2-digit hexadecimal number, using uppercase letters.\n         *\n         * The Setup PIN is a character string so that it can accommodate different future formats, including\n         * alpha-numeric encodings. For a Commissionee it shall be populated with the Manual Pairing Code (see Manual\n         * Pairing Code section in [MatterCore]) encoded as a string (11 characters) or the Passcode portion of the\n         * Manual Pairing Code (when less than 11 characters) .\n         *\n         * The server shall implement rate limiting to prevent brute force attacks. No more than 10 unique requests in\n         * a 10 minute period shall be allowed; a command response status of FAILURE should sent for additional\n         * commands received within the 10 minute period. Because access to this command is limited to nodes with\n         * Admin-level access, and the user is prompted for consent prior to Commissioning, there are in place multiple\n         * obstacles to successfully mounting a brute force attack. A Content App that supports this command shall\n         * ensure that the Temporary Account Identifier used by its clients is not valid for more than 10 minutes.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.1\n         */\n        getSetupPin(request: AccountLogin.GetSetupPinRequest): MaybePromise<AccountLogin.GetSetupPinResponse>;\n\n        /**\n         * The purpose of this command is to allow the Content App to assume the user account of a given Commissionee\n         * by leveraging the Setup PIN code input by the user during the commissioning process.\n         *\n         * For example, a Video Player with a Content App Platform may invoke this command on one of its Content App\n         * endpoints after the commissioning has completed of a Phone App made by the same vendor as the Content App.\n         * The Content App may determine whether the Temporary Account Identifier maps to an account with a\n         * corresponding Setup PIN and, if so, it may automatically login to the account for the corresponding user.\n         * The end result is that a user performs commissioning of a Phone App to a Video Player by inputting the Setup\n         * PIN for the Phone App into the Video Player UX. Once commissioning has completed, the Video Player invokes\n         * this command to allow the corresponding Content App to assume the same user account as the Phone App.\n         *\n         * The verification of Setup PIN for the given Temporary Account Identifier is determined by the Content App\n         * using a method which is outside the scope of this specification and will typically involve a central service\n         * which is in communication with both the Content App and the Commissionee. Implementations of such a service\n         * should impose aggressive time outs for any mapping of Temporary Account Identifier to Setup PIN in order to\n         * prevent accidental login due to delayed invocation.\n         *\n         * Upon receipt, the Content App checks if the account associated with the client\u2019s Temp Account Identifier has\n         * a current active Setup PIN with the given value. If the Setup PIN is valid for the user account associated\n         * with the Temp Account Identifier, then the Content App may make that user account active.\n         *\n         * The Temporary Account Identifier for a Commissionee may be populated with the Rotating ID field of the\n         * client\u2019s commissionable node advertisement encoded as an octet string where the octets of the Rotating\n         * Device Identifier are encoded as 2-character sequences by representing each octet\u2019s value as a 2-digit\n         * hexadecimal number, using uppercase letters.\n         *\n         * The Setup PIN for a Commissionee may be populated with the Manual Pairing Code encoded as a string of\n         * decimal numbers (11 characters) or the Passcode portion of the Manual Pairing Code encoded as a string of\n         * decimal numbers (8 characters) .\n         *\n         * The server shall implement rate limiting to prevent brute force attacks. No more than 10 unique requests in\n         * a 10 minute period shall be allowed; a command response status of FAILURE should sent for additional\n         * commands received within the 10 minute period. Because access to this command is limited to nodes with\n         * Admin-level access, and the user is involved when obtaining the SetupPIN, there are in place multiple\n         * obstacles to successfully mounting a brute force attack. A Content App that supports this command shall\n         * ensure that the Temporary Account Identifier used by its clients is not valid for more than 10 minutes.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3\n         */\n        login(request: AccountLogin.LoginRequest): MaybePromise;\n\n        /**\n         * The purpose of this command is to instruct the Content App to clear the current user account. This command\n         * SHOULD be used by clients of a Content App to indicate the end of a user session.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.4\n         */\n        logout(request: AccountLogin.LogoutRequest): MaybePromise;\n    }\n}\n\nexport type AccountLoginInterface = { components: [{ flags: {}, methods: AccountLoginInterface.Base }] };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
