/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { PumpConfigurationAndControl } from "../../../cluster/definitions/PumpConfigurationAndControlCluster.js";
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * PumpConfigurationAndControlBehavior is the base class for objects that support interaction with {@link
 * PumpConfigurationAndControl.Cluster}.
 *
 * PumpConfigurationAndControl.Cluster requires you to enable one or more optional features. You can do so using {@link
 * PumpConfigurationAndControlBehavior.with}.
 */
export declare const PumpConfigurationAndControlBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 512;
    readonly name: "PumpConfigurationAndControl";
    readonly revision: 4;
    readonly features: {
        readonly constantPressure: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly compensatedPressure: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly constantFlow: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly constantSpeed: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly constantTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly automatic: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly localOperation: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly maxPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
        readonly maxSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
        readonly maxFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
        readonly pumpStatus: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            deviceFault: import("../../../schema/BitmapSchema.js").BitFlag;
            supplyFault: import("../../../schema/BitmapSchema.js").BitFlag;
            speedLow: import("../../../schema/BitmapSchema.js").BitFlag;
            speedHigh: import("../../../schema/BitmapSchema.js").BitFlag;
            localOverride: import("../../../schema/BitmapSchema.js").BitFlag;
            running: import("../../../schema/BitmapSchema.js").BitFlag;
            remotePressure: import("../../../schema/BitmapSchema.js").BitFlag;
            remoteFlow: import("../../../schema/BitmapSchema.js").BitFlag;
            remoteTemperature: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly effectiveOperationMode: import("../../../cluster/Cluster.js").Attribute<PumpConfigurationAndControl.OperationMode, any>;
        readonly effectiveControlMode: import("../../../cluster/Cluster.js").Attribute<PumpConfigurationAndControl.ControlMode, any>;
        readonly capacity: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
        readonly speed: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
        readonly lifetimeRunningHours: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
        readonly power: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
        readonly lifetimeEnergyConsumed: import("../../../cluster/Cluster.js").OptionalWritableAttribute<number | null, any>;
        readonly operationMode: import("../../../cluster/Cluster.js").WritableAttribute<PumpConfigurationAndControl.OperationMode, any>;
        readonly controlMode: import("../../../cluster/Cluster.js").OptionalWritableAttribute<PumpConfigurationAndControl.ControlMode, any>;
    };
    readonly events: {
        readonly supplyVoltageLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly supplyVoltageHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly powerMissingPhase: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly systemPressureLow: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly systemPressureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly dryRunning: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly motorTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly pumpMotorFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly electronicTemperatureHigh: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly pumpBlocked: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly sensorFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly electronicNonFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly electronicFatalFailure: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly generalFault: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly leakage: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly airDetection: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
        readonly turbineOperation: import("../../../cluster/Cluster.js").OptionalEvent<void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly constantPressure: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly maxConstPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly automatic: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly maxConstPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly minCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly maxCompPressure: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly minConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly maxConstSpeed: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly minConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly maxConstFlow: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly minConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
                readonly maxConstTemp: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly compensatedPressure: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly maxCompPressure: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constantSpeed: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly maxConstSpeed: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constantFlow: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly maxConstFlow: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constantTemperature: true;
        };
        readonly component: {
            readonly attributes: {
                readonly minConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
                readonly maxConstTemp: import("../../../cluster/Cluster.js").FixedAttribute<number | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constantPressure: false;
            readonly compensatedPressure: false;
            readonly constantFlow: false;
            readonly constantSpeed: false;
            readonly constantTemperature: false;
        };
        readonly component: false;
    }];
}>, typeof ClusterBehavior, {
    components: never[];
}>;
type PumpConfigurationAndControlBehaviorType = InstanceType<typeof PumpConfigurationAndControlBehavior>;
export interface PumpConfigurationAndControlBehavior extends PumpConfigurationAndControlBehaviorType {
}
type StateType = InstanceType<typeof PumpConfigurationAndControlBehavior.State>;
export declare namespace PumpConfigurationAndControlBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=PumpConfigurationAndControlBehavior.d.ts.map