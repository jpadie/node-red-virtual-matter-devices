{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/operational-state/OperationalStateInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { OperationalState } from \"../../../cluster/definitions/OperationalStateCluster.js\";\n\nexport namespace OperationalStateInterface {\n    export interface Base {\n        /**\n         * This command shall be supported if the device supports remotely pausing the operation. If this command is\n         * supported, the Resume command shall also be supported.\n         *\n         * On receipt of this command, the device shall pause its operation if it is possible based on the current\n         * function of the server. For example, if it is at a point where it is safe to do so and/or permitted, but can\n         * be restarted from the point at which pause occurred.\n         *\n         * If this command is received when already in the Paused state the device shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n         *\n         * A device that receives this command in any state which is not Pause-compatible shall respond\n         *\n         * with an OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take no\n         * further action.\n         *\n         * States are defined as Pause-compatible as follows:\n         *\n         *   \u2022 For states defined in this cluster specification, in Table 3, \u201CPause Compatibility\u201D.\n         *\n         *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n         *\n         *   \u2022 For manufacturer-specific states, by the manufacturer.\n         *\n         * A device that is unable to honor the Pause command for whatever reason shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further action.\n         *\n         * Otherwise, on success:\n         *\n         *   \u2022 The OperationalState attribute shall be set to Paused.\n         *\n         *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n         *\n         * The following table defines the compatibility of this cluster\u2019s states with the Pause command.\n         *\n         * ### Table 3. Pause Compatibility\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.1\n         */\n        pause(): MaybePromise<OperationalState.OperationalCommandResponse>;\n\n        /**\n         * This command shall be supported if the device supports remotely stopping the operation.\n         *\n         * On receipt of this command, the device shall stop its operation if it is at a position where it is safe to\n         * do so and/or permitted. Restart of the device following the receipt of the Stop command shall require\n         * attended operation unless remote start is allowed by the device type and any jurisdiction governing remote\n         * operation of the device.\n         *\n         * If this command is received when already in the Stopped state the device shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n         *\n         * A device that is unable to honor the Stop command for whatever reason shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further action.\n         *\n         * Otherwise, on success:\n         *\n         *   \u2022 The OperationalState attribute shall be set to Stopped.\n         *\n         *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.2\n         */\n        stop(): MaybePromise<OperationalState.OperationalCommandResponse>;\n\n        /**\n         * This command shall be supported if the device supports remotely starting the operation. If this command is\n         * supported, the 'Stop command shall also be supported.\n         *\n         * On receipt of this command, the device shall start its operation if it is safe to do so and the device is in\n         * an operational state from which it can be started. There may be either regulatory or manufacturer-imposed\n         * safety and security requirements that first necessitate some specific action at the device before a Start\n         * command can be honored. In such instances, a device shall respond with a status code of\n         * CommandInvalidInState if a Start command is received prior to the required on- device action.\n         *\n         * If this command is received when already in the Running state the device shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n         *\n         * A device that is unable to honor the Start command for whatever reason shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further action.\n         *\n         * Otherwise, on success:\n         *\n         *   \u2022 The OperationalState attribute shall be set to Running.\n         *\n         *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.3\n         */\n        start(): MaybePromise<OperationalState.OperationalCommandResponse>;\n\n        /**\n         * This command shall be supported if the device supports remotely resuming the operation. If this command is\n         * supported, the Pause command shall also be supported.\n         *\n         * On receipt of this command, the device shall resume its operation from the point it was at when it received\n         * the Pause command, or from the point when it was paused by means outside of this cluster (for example by\n         * manual button press).\n         *\n         * If this command is received when already in the Running state the device shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n         *\n         * A device that receives this command in any state which is not Resume-compatible shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take no further\n         * action.\n         *\n         * States are defined as Resume-compatible as follows:\n         *\n         *   \u2022 For states defined in this cluster specification, in Table 4, \u201CResume Compatibility\u201D.\n         *\n         *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n         *\n         *   \u2022 For manufacturer-specific states, by the manufacturer.\n         *\n         * The following table defines the compatibility of this cluster\u2019s states with the Resume command.\n         *\n         * ### Table 4. Resume Compatibility\n         *\n         * A device that is unable to honor the Resume command for any other reason shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further action.\n         *\n         * Otherwise, on success:\n         *\n         *   \u2022 The OperationalState attribute shall be set to the most recent non-Error operational state prior to\n         *     entering the Paused state.\n         *\n         *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.4\n         */\n        resume(): MaybePromise<OperationalState.OperationalCommandResponse>;\n    }\n}\n\nexport type OperationalStateInterface = { components: [{ flags: {}, methods: OperationalStateInterface.Base }] };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
