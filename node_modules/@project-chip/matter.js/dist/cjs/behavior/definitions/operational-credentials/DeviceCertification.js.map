{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/operational-credentials/DeviceCertification.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../../MatterDevice.js\";\nimport { AttestationCertificateManager } from \"../../../certificate/AttestationCertificateManager.js\";\nimport { CertificationDeclarationManager } from \"../../../certificate/CertificationDeclarationManager.js\";\nimport { ImplementationError, InternalError } from \"../../../common/MatterError.js\";\nimport { Crypto } from \"../../../crypto/Crypto.js\";\nimport { PrivateKey } from \"../../../crypto/Key.js\";\nimport { SecureSession } from \"../../../session/SecureSession.js\";\nimport { ByteArray } from \"../../../util/ByteArray.js\";\nimport { Construction } from \"../../../util/Construction.js\";\nimport { ProductDescription } from \"../../system/product-description/ProductDescription.js\";\n\n/**\n * Device certification used by the OperationalCredentials cluster.\n */\nexport class DeviceCertification {\n    #privateKey?: PrivateKey;\n    #certificate?: ByteArray;\n    #intermediateCertificate?: ByteArray;\n    #declaration?: ByteArray;\n    readonly #construction: Construction<DeviceCertification>;\n\n    get construction() {\n        return this.#construction;\n    }\n\n    get certificate() {\n        return this.#assertInitialized().certificate;\n    }\n\n    get intermediateCertificate() {\n        return this.#assertInitialized().intermediateCertificate;\n    }\n\n    get declaration() {\n        return this.#assertInitialized().declaration;\n    }\n\n    constructor(config?: DeviceCertification.Definition, product?: ProductDescription) {\n        // Certification Provider function is used to request the certificates delayed\n        if (typeof config === \"function\") {\n            const configProvider = config;\n            this.#construction = Construction(this, async () => {\n                this.#initializeFromConfig(await configProvider());\n            });\n            return;\n        }\n\n        // We need a dummy construction to avoid errors\n        this.#construction = Construction(this, () => {});\n\n        // With a directly provided config or without we con initialize directly\n        if (config === undefined) {\n            if (product === undefined) {\n                throw new ImplementationError(`Cannot generate device certification without product information`);\n            }\n\n            const paa = new AttestationCertificateManager(product.vendorId);\n            const { keyPair: dacKeyPair, dac } = paa.getDACert(product.productId);\n\n            config = {\n                privateKey: PrivateKey(dacKeyPair.privateKey),\n                certificate: dac,\n                intermediateCertificate: paa.getPAICert(),\n                declaration: CertificationDeclarationManager.generate(product.vendorId, product.productId),\n            };\n        }\n        this.#initializeFromConfig(config);\n    }\n\n    #initializeFromConfig(config: DeviceCertification.Configuration) {\n        this.#privateKey = config.privateKey instanceof ByteArray ? PrivateKey(config.privateKey) : config.privateKey;\n        this.#certificate = config.certificate;\n        this.#intermediateCertificate = config.intermediateCertificate;\n        this.#declaration = config.declaration;\n    }\n\n    sign(session: SecureSession<MatterDevice>, data: ByteArray) {\n        return Crypto.sign(this.#assertInitialized().privateKey, [data, session.attestationChallengeKey]);\n    }\n\n    /**\n     * Makes sure that the device certification is initialized and construction is completed and returns \"Non-undefined\"\n     * values\n     */\n    #assertInitialized() {\n        this.#construction.assert();\n        if (\n            this.#certificate === undefined ||\n            this.#intermediateCertificate === undefined ||\n            this.#declaration === undefined ||\n            this.#privateKey === undefined\n        ) {\n            throw new InternalError(\n                `Device certification not initialized while trying to access it. This should never happen.`,\n            );\n        }\n        return {\n            certificate: this.#certificate,\n            intermediateCertificate: this.#intermediateCertificate,\n            declaration: this.#declaration,\n            privateKey: this.#privateKey,\n        };\n    }\n}\n\nexport namespace DeviceCertification {\n    export interface Configuration {\n        privateKey: PrivateKey | ByteArray;\n        certificate: ByteArray;\n        intermediateCertificate: ByteArray;\n        declaration: ByteArray;\n    }\n\n    export type Definition = Configuration | (() => Promise<Configuration>);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,2CAA8C;AAC9C,6CAAgD;AAChD,yBAAmD;AACnD,oBAAuB;AACvB,iBAA2B;AAE3B,uBAA0B;AAC1B,0BAA6B;AAd7B;AAAA;AAAA;AAAA;AAAA;AAoBO,MAAM,oBAAoB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EAET,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,mBAAmB,EAAE;AAAA,EACrC;AAAA,EAEA,IAAI,0BAA0B;AAC1B,WAAO,KAAK,mBAAmB,EAAE;AAAA,EACrC;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,mBAAmB,EAAE;AAAA,EACrC;AAAA,EAEA,YAAY,QAAyC,SAA8B;AAE/E,QAAI,OAAO,WAAW,YAAY;AAC9B,YAAM,iBAAiB;AACvB,WAAK,oBAAgB,kCAAa,MAAM,YAAY;AAChD,aAAK,sBAAsB,MAAM,eAAe,CAAC;AAAA,MACrD,CAAC;AACD;AAAA,IACJ;AAGA,SAAK,oBAAgB,kCAAa,MAAM,MAAM;AAAA,IAAC,CAAC;AAGhD,QAAI,WAAW,QAAW;AACtB,UAAI,YAAY,QAAW;AACvB,cAAM,IAAI,uCAAoB,kEAAkE;AAAA,MACpG;AAEA,YAAM,MAAM,IAAI,mEAA8B,QAAQ,QAAQ;AAC9D,YAAM,EAAE,SAAS,YAAY,IAAI,IAAI,IAAI,UAAU,QAAQ,SAAS;AAEpE,eAAS;AAAA,QACL,gBAAY,uBAAW,WAAW,UAAU;AAAA,QAC5C,aAAa;AAAA,QACb,yBAAyB,IAAI,WAAW;AAAA,QACxC,aAAa,uEAAgC,SAAS,QAAQ,UAAU,QAAQ,SAAS;AAAA,MAC7F;AAAA,IACJ;AACA,SAAK,sBAAsB,MAAM;AAAA,EACrC;AAAA,EAEA,sBAAsB,QAA2C;AAC7D,SAAK,cAAc,OAAO,sBAAsB,iCAAY,uBAAW,OAAO,UAAU,IAAI,OAAO;AACnG,SAAK,eAAe,OAAO;AAC3B,SAAK,2BAA2B,OAAO;AACvC,SAAK,eAAe,OAAO;AAAA,EAC/B;AAAA,EAEA,KAAK,SAAsC,MAAiB;AACxD,WAAO,qBAAO,KAAK,KAAK,mBAAmB,EAAE,YAAY,CAAC,MAAM,QAAQ,uBAAuB,CAAC;AAAA,EACpG;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB;AACjB,SAAK,cAAc,OAAO;AAC1B,QACI,KAAK,iBAAiB,UACtB,KAAK,6BAA6B,UAClC,KAAK,iBAAiB,UACtB,KAAK,gBAAgB,QACvB;AACE,YAAM,IAAI;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,MACH,aAAa,KAAK;AAAA,MAClB,yBAAyB,KAAK;AAAA,MAC9B,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,IACrB;AAAA,EACJ;AACJ;",
  "names": []
}
