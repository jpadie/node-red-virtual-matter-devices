{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/operational-credentials/OperationalCredentialsServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CertificateError } from \"../../../certificate/CertificateManager.js\";\nimport { AccessLevel, Command } from \"../../../cluster/Cluster.js\";\nimport { AccessControl } from \"../../../cluster/definitions/AccessControlCluster.js\";\nimport { OperationalCredentials } from \"../../../cluster/definitions/OperationalCredentialsCluster.js\";\nimport { MatterFabricInvalidAdminSubjectError } from \"../../../common/FailsafeContext.js\";\nimport { MatterFabricConflictError } from \"../../../common/FailsafeTimer.js\";\nimport { MatterFlowError, UnexpectedDataError } from \"../../../common/MatterError.js\";\nimport { ValidationError } from \"../../../common/ValidationError.js\";\nimport { CryptoVerifyError } from \"../../../crypto/Crypto.js\";\nimport { FabricIndex } from \"../../../datatype/FabricIndex.js\";\nimport { Endpoint } from \"../../../endpoint/Endpoint.js\";\nimport { Fabric, PublicKeyError } from \"../../../fabric/Fabric.js\";\nimport { FabricAction, FabricManager, FabricTableFullError } from \"../../../fabric/FabricManager.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport type { Node } from \"../../../node/Node.js\";\nimport { StatusCode, StatusResponseError } from \"../../../protocol/interaction/StatusCode.js\";\nimport { assertSecureSession } from \"../../../session/SecureSession.js\";\nimport { TlvBoolean } from \"../../../tlv/TlvBoolean.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../../tlv/TlvObject.js\";\nimport { TlvByteString } from \"../../../tlv/TlvString.js\";\nimport { Val } from \"../../state/Val.js\";\nimport { ValueSupervisor } from \"../../supervision/ValueSupervisor.js\";\nimport { CommissioningBehavior } from \"../../system/commissioning/CommissioningBehavior.js\";\nimport { ProductDescriptionServer } from \"../../system/product-description/ProductDescriptionServer.js\";\nimport { AccessControlServer } from \"../access-control/AccessControlServer.js\";\nimport { DeviceCertification } from \"./DeviceCertification.js\";\nimport { OperationalCredentialsBehavior } from \"./OperationalCredentialsBehavior.js\";\nimport { TlvAttestation, TlvCertSigningRequest } from \"./OperationalCredentialsTypes.js\";\n\nconst logger = Logger.get(\"OperationalCredentials\");\n\n/**\n * Monkey patching Tlv Structure of attestationRequest and csrRequest commands to prevent data validation of the nonce\n * fields to be handled as ConstraintError because we need to return a special error.\n * We do this to leave the model in fact for other validations and only apply the change for our Schema-aware Tlv parsing.\n */\nOperationalCredentials.Cluster.commands = {\n    ...OperationalCredentials.Cluster.commands,\n    attestationRequest: Command(\n        0x0,\n        TlvObject({ attestationNonce: TlvField(0, TlvByteString) }),\n        0x1,\n        OperationalCredentials.TlvAttestationResponse,\n        { invokeAcl: AccessLevel.Administer },\n    ),\n    csrRequest: Command(\n        0x4,\n        TlvObject({\n            csrNonce: TlvField(0, TlvByteString),\n            isForUpdateNoc: TlvOptionalField(1, TlvBoolean),\n        }),\n        0x5,\n        OperationalCredentials.TlvCsrResponse,\n        { invokeAcl: AccessLevel.Administer },\n    ),\n};\n\n/**\n * This is the default server implementation of OperationalCredentialsBehavior.\n *\n * TODO - currently \"source of truth\" for fabric data is persisted by FabricManager.  If we remove some legacy code\n * paths we can move source of truth to here.  Right now we just sync fabrics with MatterDevice.  This sync is only as\n * comprehensive as required by current use cases.  If fabrics are mutated directly on MatterDevice then this code will\n * require update.\n */\nexport class OperationalCredentialsServer extends OperationalCredentialsBehavior {\n    declare internal: OperationalCredentialsServer.Internal;\n    declare state: OperationalCredentialsServer.State;\n\n    override initialize() {\n        // maximum number of fabrics. Also FabricBuilder uses 254 as max!\n        if (this.state.supportedFabrics === undefined) {\n            this.state.supportedFabrics = 254;\n        }\n        this.state.commissionedFabrics = this.state.fabrics.length;\n\n        this.reactTo((this.endpoint as Node).lifecycle.online, this.#nodeOnline);\n    }\n\n    override async attestationRequest({ attestationNonce }: OperationalCredentials.AttestationRequest) {\n        if (attestationNonce.length !== 32) {\n            throw new StatusResponseError(\"Invalid attestation nonce length\", StatusCode.InvalidCommand);\n        }\n\n        const certification = await this.getCertification();\n\n        const elements = TlvAttestation.encode({\n            declaration: certification.declaration,\n            attestationNonce: attestationNonce,\n            timestamp: 0,\n        });\n        return {\n            attestationElements: elements,\n            attestationSignature: certification.sign(this.session, elements),\n        };\n    }\n\n    override async csrRequest({ csrNonce, isForUpdateNoc }: OperationalCredentials.CsrRequest) {\n        if (csrNonce.length !== 32) {\n            throw new StatusResponseError(\"Invalid csr nonce length\", StatusCode.InvalidCommand);\n        }\n\n        if (isForUpdateNoc && this.session.isPase) {\n            throw new StatusResponseError(\n                \"csrRequest for UpdateNoc received on a PASE session.\",\n                StatusCode.InvalidCommand,\n            );\n        }\n\n        const failsafeContext = this.session.context.failsafeContext;\n        if (failsafeContext.fabricIndex !== undefined) {\n            throw new StatusResponseError(\n                `csrRequest received after ${failsafeContext.forUpdateNoc ? \"UpdateNOC\" : \"AddNOC\"} already invoked.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        const certification = await this.getCertification();\n\n        const certSigningRequest = failsafeContext.createCertificateSigningRequest(\n            isForUpdateNoc ?? false,\n            this.session.id,\n        );\n        const nocsrElements = TlvCertSigningRequest.encode({ certSigningRequest, csrNonce });\n        return { nocsrElements, attestationSignature: certification.sign(this.session, nocsrElements) };\n    }\n\n    override async certificateChainRequest({ certificateType }: OperationalCredentials.CertificateChainRequest) {\n        const certification = await this.getCertification();\n\n        switch (certificateType) {\n            case OperationalCredentials.CertificateChainType.DacCertificate:\n                return { certificate: certification.certificate };\n            case OperationalCredentials.CertificateChainType.PaiCertificate:\n                return { certificate: certification.intermediateCertificate };\n            default:\n                throw new StatusResponseError(\n                    `Unsupported certificate type: ${certificateType}`,\n                    StatusCode.InvalidCommand,\n                );\n        }\n    }\n\n    #mapNocErrors(error: unknown): OperationalCredentials.NocResponse {\n        if (error instanceof MatterFabricConflictError) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.FabricConflict,\n                debugText: error.message,\n            };\n        } else if (error instanceof FabricTableFullError) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.TableFull,\n                debugText: error.message,\n            };\n        } else if (\n            error instanceof CryptoVerifyError ||\n            error instanceof CertificateError ||\n            error instanceof ValidationError ||\n            error instanceof UnexpectedDataError\n        ) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.InvalidNoc,\n                debugText: error.message,\n            };\n        } else if (error instanceof PublicKeyError) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.InvalidPublicKey,\n                debugText: error.message,\n            };\n        } else if (error instanceof MatterFabricInvalidAdminSubjectError) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.InvalidAdminSubject,\n                debugText: error.message,\n            };\n        }\n        throw error;\n    }\n\n    override async addNoc({\n        nocValue,\n        icacValue,\n        ipkValue,\n        caseAdminSubject,\n        adminVendorId,\n    }: OperationalCredentials.AddNocRequest) {\n        const failsafeContext = this.session.context.failsafeContext;\n\n        if (failsafeContext.fabricIndex !== undefined) {\n            throw new StatusResponseError(\n                `addNoc received after ${failsafeContext.forUpdateNoc ? \"UpdateNOC\" : \"AddNOC\"} already invoked.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        if (!failsafeContext.hasRootCert) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.InvalidNoc,\n                debugText: \"Root certificate not found.\",\n            };\n        }\n\n        if (failsafeContext.csrSessionId !== this.session.id) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.MissingCsr,\n                debugText: \"CSR not found in failsafe context.\",\n            };\n        }\n\n        if (failsafeContext.forUpdateNoc) {\n            throw new StatusResponseError(\n                `addNoc received after csr request was invoked for UpdateNOC.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        const state = this.state;\n        if (state.commissionedFabrics >= state.supportedFabrics) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.TableFull,\n                debugText: `No more fabrics can be added because limit ${state.supportedFabrics} reached.`,\n            };\n        }\n\n        let fabric: Fabric;\n        try {\n            fabric = await failsafeContext.buildFabric({\n                nocValue,\n                icacValue,\n                adminVendorId,\n                ipkValue,\n                caseAdminSubject,\n            });\n        } catch (error) {\n            logger.info(\"Building fabric for addNoc failed\", error);\n            return this.#mapNocErrors(error);\n        }\n\n        // The receiver SHALL create and add a new Access Control Entry using the CaseAdminSubject field to grant\n        // subsequent Administer access to an Administrator member of the new Fabric.\n        const aclCluster = this.agent.get(AccessControlServer);\n        aclCluster.state.acl.push({\n            fabricIndex: fabric.fabricIndex,\n            privilege: AccessControl.AccessControlEntryPrivilege.Administer,\n            authMode: AccessControl.AccessControlEntryAuthMode.Case,\n            subjects: [caseAdminSubject],\n            targets: null, // entire node\n        });\n\n        await failsafeContext.addFabric(fabric);\n\n        try {\n            if (this.session.isPase) {\n                logger.debug(`Add Fabric ${fabric.fabricIndex} to PASE session ${this.session.name}.`);\n                this.session.addAssociatedFabric(fabric);\n            }\n\n            // Update attributes\n            const existingFabricIndex = this.state.fabrics.findIndex(f => f.fabricIndex === fabric.fabricIndex);\n            const existingNocIndex = this.state.nocs.findIndex(n => n.fabricIndex === fabric.fabricIndex);\n            if (existingFabricIndex !== -1 || existingNocIndex !== -1) {\n                throw new MatterFlowError(\n                    `FabricIndex ${fabric.fabricIndex} already exists in state. This should not happen.`,\n                );\n            }\n        } catch (e) {\n            // Fabric insertion into MatterDevice is not currently transactional so we need to remove manually\n            await fabric.remove(this.session.id);\n            throw e;\n        }\n\n        // TODO The incoming IPKValue SHALL be stored in the Fabric-scoped slot within the Group Key Management cluster\n        //  (see KeySetWrite), for subsequent use during CASE.\n\n        // TODO If the current secure session was established with PASE, the receiver SHALL: a. Augment the secure\n        //  session context with the FabricIndex generated above, such that subsequent interactions have the proper\n        //  accessing fabric.\n\n        logger.info(`addNoc success, adminVendorId ${adminVendorId}, caseAdminSubject ${caseAdminSubject}`);\n\n        return {\n            statusCode: OperationalCredentials.NodeOperationalCertStatus.Ok,\n            fabricIndex: fabric.fabricIndex,\n        };\n    }\n\n    override async updateNoc({ nocValue, icacValue }: OperationalCredentials.UpdateNocRequest) {\n        assertSecureSession(this.session);\n\n        const device = this.session.context;\n\n        const timedOp = device.failsafeContext;\n\n        if (timedOp.fabricIndex !== undefined) {\n            throw new StatusResponseError(\n                `updateNoc received after ${timedOp.forUpdateNoc ? \"UpdateNOC\" : \"AddNOC\"} already invoked.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        if (timedOp.forUpdateNoc) {\n            throw new StatusResponseError(\n                `addNoc received after csr request was invoked for UpdateNOC.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        if (timedOp.hasRootCert) {\n            throw new StatusResponseError(\n                \"Trusted root certificate added in this session which is now allowed for UpdateNOC.\",\n                StatusCode.ConstraintError,\n            );\n        }\n\n        if (!timedOp.forUpdateNoc) {\n            throw new StatusResponseError(\"csrRequest not invoked for UpdateNOC.\", StatusCode.ConstraintError);\n        }\n\n        if (this.session.associatedFabric.fabricIndex !== timedOp.associatedFabric?.fabricIndex) {\n            throw new StatusResponseError(\n                \"Fabric of this session and the failsafe context do not match.\",\n                StatusCode.ConstraintError,\n            );\n        }\n\n        // Build a new Fabric with the updated NOC and ICAC\n        try {\n            const updateFabric = await timedOp.buildUpdatedFabric(nocValue, icacValue);\n\n            // update FabricManager and Resumption records but leave current session intact\n            await timedOp.updateFabric(updateFabric);\n\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.Ok,\n                fabricIndex: updateFabric.fabricIndex,\n            };\n        } catch (error) {\n            logger.info(\"Building fabric for updateNoc failed\", error);\n            return this.#mapNocErrors(error);\n        }\n    }\n\n    override async updateFabricLabel({ label }: OperationalCredentials.UpdateFabricLabelRequest) {\n        const fabric = this.session.associatedFabric;\n\n        const currentFabricIndex = fabric.fabricIndex;\n        const device = this.session.context;\n        const conflictingLabelFabric = device\n            .getFabrics()\n            .find(f => f.label === label && f.fabricIndex !== currentFabricIndex);\n        if (conflictingLabelFabric !== undefined) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.LabelConflict,\n                debugText: `Label ${label} already used by fabric ${conflictingLabelFabric.fabricIndex}`,\n            };\n        }\n\n        await fabric.setLabel(label);\n\n        return { statusCode: OperationalCredentials.NodeOperationalCertStatus.Ok, fabricIndex: fabric.fabricIndex };\n    }\n\n    override async removeFabric({ fabricIndex }: OperationalCredentials.RemoveFabricRequest) {\n        const device = this.session.context;\n\n        const fabric = device.getFabricByIndex(fabricIndex);\n\n        if (fabric === undefined) {\n            return {\n                statusCode: OperationalCredentials.NodeOperationalCertStatus.InvalidFabricIndex,\n                debugText: `Fabric ${fabricIndex} not found`,\n            };\n        }\n\n        await fabric.remove(this.session.id);\n        // The state is updated on removal via commissionedFabricChanged event, see constructor\n\n        return {\n            statusCode: OperationalCredentials.NodeOperationalCertStatus.Ok,\n            fabricIndex,\n        };\n    }\n\n    override addTrustedRootCertificate({ rootCaCertificate }: OperationalCredentials.AddTrustedRootCertificateRequest) {\n        const failsafeContext = this.session.context.failsafeContext;\n\n        if (failsafeContext.hasRootCert) {\n            throw new StatusResponseError(\n                \"Trusted root certificate already added in this FailSafe context.\",\n                StatusCode.ConstraintError,\n            );\n        }\n\n        if (failsafeContext.fabricIndex !== undefined) {\n            throw new StatusResponseError(\n                `Cannot add trusted root certificates after ${failsafeContext.forUpdateNoc ? \"UpdateNOC\" : \"AddNOC\"}.`,\n                StatusCode.ConstraintError,\n            );\n        }\n\n        try {\n            failsafeContext.setRootCert(rootCaCertificate);\n        } catch (error) {\n            logger.info(\"setting root certificate failed\", error);\n            if (\n                error instanceof CryptoVerifyError ||\n                error instanceof CertificateError ||\n                error instanceof ValidationError ||\n                error instanceof UnexpectedDataError\n            ) {\n                throw new StatusResponseError(error.message, StatusCode.InvalidCommand);\n            }\n            throw error;\n        }\n\n        const fabrics = this.endpoint.env.get(FabricManager).getFabrics();\n        const trustedRootCertificates = fabrics.map(fabric => fabric.rootCert);\n        trustedRootCertificates.push(rootCaCertificate);\n        this.state.trustedRootCertificates = trustedRootCertificates;\n    }\n\n    async #updateFabrics() {\n        const fabrics = this.endpoint.env.get(FabricManager).getFabrics();\n        this.state.fabrics = fabrics.map(fabric => ({\n            fabricId: fabric.fabricId,\n            label: fabric.label,\n            nodeId: fabric.nodeId,\n            rootPublicKey: fabric.rootPublicKey,\n            vendorId: fabric.rootVendorId,\n            fabricIndex: fabric.fabricIndex,\n        }));\n\n        this.state.nocs = fabrics.map(fabric => ({\n            noc: fabric.operationalCert,\n            icac: fabric.intermediateCACert ?? null,\n            fabricIndex: fabric.fabricIndex,\n        }));\n\n        this.state.trustedRootCertificates = fabrics.map(fabric => fabric.rootCert);\n\n        this.state.commissionedFabrics = fabrics.length;\n\n        await this.context.transaction.commit();\n    }\n\n    async getCertification() {\n        const certification =\n            this.internal.certification ??\n            (this.internal.certification = new DeviceCertification(\n                this.state.certification,\n                this.agent.get(ProductDescriptionServer).state,\n            ));\n\n        await certification.construction;\n\n        return certification;\n    }\n\n    async #handleAddedFabric({ fabricIndex }: Fabric) {\n        await this.#updateFabrics();\n        this.agent.get(CommissioningBehavior).handleFabricChange(fabricIndex, FabricAction.Added);\n    }\n\n    async #handleUpdatedFabric({ fabricIndex }: Fabric) {\n        await this.#updateFabrics();\n        this.agent.get(CommissioningBehavior).handleFabricChange(fabricIndex, FabricAction.Updated);\n    }\n\n    async #handleRemovedFabric({ fabricIndex }: Fabric) {\n        await this.#updateFabrics();\n        this.agent.get(CommissioningBehavior).handleFabricChange(fabricIndex, FabricAction.Removed);\n    }\n\n    async #handleFailsafeClosed() {\n        await this.#updateFabrics();\n    }\n\n    async #nodeOnline() {\n        const fabricManager = this.endpoint.env.get(FabricManager);\n        this.reactTo(fabricManager.events.added, this.#handleAddedFabric, { lock: true });\n        this.reactTo(fabricManager.events.updated, this.#handleUpdatedFabric, { lock: true });\n        this.reactTo(fabricManager.events.deleted, this.#handleRemovedFabric, { lock: true });\n        this.reactTo(fabricManager.events.failsafeClosed, this.#handleFailsafeClosed, { lock: true });\n        await this.#updateFabrics();\n    }\n}\n\nexport namespace OperationalCredentialsServer {\n    export class Internal {\n        certification?: DeviceCertification;\n        commissionedFabric?: FabricIndex;\n    }\n\n    export class State extends OperationalCredentialsBehavior.State {\n        /**\n         * Device certification information.\n         *\n         * Device certification provides a cryptographic certificate that asserts the official status of a device.\n         * Production consumer-facing devices are certified by the CSA.\n         *\n         * Development devices and those intended for personal use may use a development certificate.  This is the\n         * default if you do not provide an official certification in {@link ServerOptions.certification}.\n         */\n        certification?: DeviceCertification.Definition = undefined;\n\n        [Val.properties](_endpoint: Endpoint, session: ValueSupervisor.Session) {\n            return {\n                get currentFabricIndex() {\n                    return session.fabric ?? FabricIndex.NO_FABRIC;\n                },\n            };\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["OperationalCredentialsServer"]
}
