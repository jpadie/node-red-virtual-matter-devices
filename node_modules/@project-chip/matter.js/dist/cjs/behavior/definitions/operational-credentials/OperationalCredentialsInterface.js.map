{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/operational-credentials/OperationalCredentialsInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { OperationalCredentials } from \"../../../cluster/definitions/OperationalCredentialsCluster.js\";\n\nexport namespace OperationalCredentialsInterface {\n    export interface Base {\n        /**\n         * This command shall be generated to request the Attestation Information, in the form of an\n         * AttestationResponse Command. If the AttestationNonce that is provided in the command is malformed, a\n         * recipient shall fail the command with a Status Code of INVALID_COMMAND. The AttestationNonce field shall be\n         * used in the computation of the Attestation Information.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.1\n         */\n        attestationRequest(request: OperationalCredentials.AttestationRequest): MaybePromise<OperationalCredentials.AttestationResponse>;\n\n        /**\n         * If the CertificateType is not a valid value per CertificateChainTypeEnum then the command shall fail with a\n         * Status Code of INVALID_COMMAND.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.3\n         */\n        certificateChainRequest(request: OperationalCredentials.CertificateChainRequest): MaybePromise<OperationalCredentials.CertificateChainResponse>;\n\n        /**\n         * This command shall be generated to execute the Node Operational CSR Procedure and subsequently return the\n         * NOCSR Information, in the form of a CSRResponse Command.\n         *\n         * The CSRNonce field shall be used in the computation of the NOCSR Information. If the CSRNonce is malformed,\n         * then this command shall fail with an INVALID_COMMAND status code.\n         *\n         * If the IsForUpdateNOC field is present and set to true, but the command was received over a PASE session,\n         * the command shall fail with an INVALID_COMMAND status code, as it would never be possible to use a resulting\n         * subsequent certificate issued from the CSR with the UpdateNOC command, which is forbidden over PASE sessions.\n         *\n         * If the IsForUpdateNOC field is present and set to true, the internal state of the CSR associated keypair\n         * shall be tagged as being for a subsequent UpdateNOC, otherwise the internal state of the CSR shall be tagged\n         * as being for a subsequent AddNOC. See AddNOC and UpdateNOC for details about the processing.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * If a prior UpdateNOC or AddNOC command was successfully executed within the fail-safe timer period, then\n         * this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator.\n         *\n         * If the Node Operational Key Pair generated during processing of the Node Operational CSR Procedure is found\n         * to collide with an existing key pair already previously generated and installed, and that check had been\n         * executed, then this command shall fail with a FAILURE status code sent back to the initiator.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.5\n         */\n        csrRequest(request: OperationalCredentials.CsrRequest): MaybePromise<OperationalCredentials.CsrResponse>;\n\n        /**\n         * This command shall add a new NOC chain to the device and commission a new Fabric association upon successful\n         * validation of all arguments and preconditions.\n         *\n         * The new value shall immediately be reflected in the NOCs list attribute.\n         *\n         * A Commissioner or Administrator shall issue this command after issuing the CSRRequest command and receiving\n         * its response.\n         *\n         * A Commissioner or Administrator SHOULD issue this command after performing the Attestation Procedure.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.8\n         */\n        addNoc(request: OperationalCredentials.AddNocRequest): MaybePromise<OperationalCredentials.NocResponse>;\n\n        /**\n         * This command shall replace the NOC and optional associated ICAC (if present) scoped under the accessing\n         * fabric upon successful validation of all arguments and preconditions. The new value shall immediately be\n         * reflected in the NOCs list attribute.\n         *\n         * A Commissioner or Administrator shall issue this command after issuing the CSRRequest Command and receiving\n         * its response.\n         *\n         * A Commissioner or Administrator SHOULD issue this command after performing the Attestation Procedure.\n         *\n         * Effect When Received\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * If a prior UpdateNOC or AddNOC command was successfully executed within the fail-safe timer period, then\n         * this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator.\n         *\n         * If a prior AddTrustedRootCertificate command was successfully invoked within the fail-safe timer period,\n         * then this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator, since the only\n         * valid following logical operation is invoking the AddNOC command.\n         *\n         * If the prior CSRRequest state that preceded UpdateNOC had the IsForUpdateNOC field indicated as false, then\n         * this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator.\n         *\n         * If any of the following conditions arise, the Node shall process an error by responding with an\n         *\n         * NOCResponse with a StatusCode of InvalidNOC as described in Section 11.18.6.7.2, \u201CHandling Errors\u201D:\n         *\n         *   \u2022 The NOC provided in the NOCValue does not refer in its subject to the FabricID associated with the\n         *     accessing fabric.\n         *\n         *   \u2022 The ICAC provided in the ICACValue (if present) has a FabricID in its subject that does not match the\n         *     FabricID associated with the accessing fabric.\n         *\n         * Otherwise, the command is considered an update of existing credentials for a given Fabric, and the following\n         * shall apply:\n         *\n         *   1. The Operational Certificate under the accessing fabric index in the NOCs list shall be updated to match\n         *      the incoming NOCValue and ICACValue (if present), such that the Node\u2019s Operational Identifier within\n         *      the Fabric immediately changes.\n         *\n         *     a. The operational key pair associated with the incoming NOC from the NOCValue, and generated by the\n         *        prior CSRRequest command, shall be committed to permanent storage, for subsequent use during CASE.\n         *\n         *     b. The operational discovery service record shall immediately reflect the new Operational Identifier.\n         *\n         *     c. All internal data reflecting the prior operational identifier of the Node within the Fabric shall be\n         *        revoked and removed, to an outcome equivalent to the disappearance of the prior Node, except for the\n         *        ongoing CASE session context, which shall temporarily remain valid until the NOCResponse has been\n         *        successfully delivered or until the next transport-layer error, so that the response can be received\n         *        by the Administrator invoking the command.\n         *\n         * Thereafter, the Node shall respond with an NOCResponse with a StatusCode of OK and a FabricIndex field\n         * matching the FabricIndex under which the updated NOC is scoped.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.9\n         */\n        updateNoc(request: OperationalCredentials.UpdateNocRequest): MaybePromise<OperationalCredentials.NocResponse>;\n\n        /**\n         * This command shall be used by an Administrator to set the user-visible Label field for a given Fabric, as\n         * reflected by entries in the Fabrics attribute. An Administrator shall use this command to set the Label to a\n         * string (possibly selected by the user themselves) that the user can recognize and relate to this\n         * Administrator\n         *\n         *   \u2022 during the commissioning process, and\n         *\n         *   \u2022 whenever the user chooses to update this string.\n         *\n         * The Label field, along with the VendorID field in the same entry of the Fabrics attribute, SHOULD be used by\n         * Administrators to provide additional per-fabric context when operations such as RemoveFabric are considered\n         * or used.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.11\n         */\n        updateFabricLabel(request: OperationalCredentials.UpdateFabricLabelRequest): MaybePromise<OperationalCredentials.NocResponse>;\n\n        /**\n         * This command is used by Administrators to remove a given Fabric and delete all associated fabric-scoped data.\n         *\n         * If the given Fabric being removed is the last one to reference a given Trusted Root CA Certificate stored in\n         * the Trusted Root Certificates list, then that Trusted Root Certificate shall be removed.\n         *\n         * WARNING\n         *\n         * This command, if referring to an already existing Fabric not under the control of the invoking\n         * Administrator, shall ONLY be invoked after obtaining some form of explicit user consent through some method\n         * executed by the Administrator or Commissioner. This method of obtaining consent SHOULD employ as much data\n         * as possible about the existing Fabric associations within the Fabrics list, so that likelihood is as small\n         * as possible of a user removing a Fabric unwittingly. If a method exists for an Administrator or Commissioner\n         * to convey Fabric Removal to an entity related to that Fabric, whether in-band or out-of-band, then this\n         * method SHOULD be used to notify the other Administrative Domain\u2019s party of the removal. Otherwise, users may\n         * only observe the removal of a Fabric association as persistently failing attempts to reach a Node\n         * operationally.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.12\n         */\n        removeFabric(request: OperationalCredentials.RemoveFabricRequest): MaybePromise<OperationalCredentials.NocResponse>;\n\n        /**\n         * This command shall add a Trusted Root CA Certificate, provided as its Matter Certificate Encoding\n         * representation, to the TrustedRootCertificates Attribute list and shall ensure the next AddNOC command\n         * executed uses the provided certificate as its root of trust.\n         *\n         * If the certificate from the RootCACertificate field is already installed, based on exact byte-for-byte\n         * equality, then this command shall succeed with no change to the list.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * If a prior AddTrustedRootCertificate command was successfully invoked within the fail-safe timer period,\n         * which would cause the new invocation to add a second root certificate within a given fail- safe timer\n         * period, then this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator.\n         *\n         * If a prior UpdateNOC or AddNOC command was successfully executed within the fail-safe timer period, then\n         * this command shall fail with a CONSTRAINT_ERROR status code sent back to the initiator.\n         *\n         * If the certificate from the RootCACertificate field fails any validity checks, not fulfilling all the\n         * requirements for a valid Matter Certificate Encoding representation, including a truncated or oversize\n         * value, then this command shall fail with an INVALID_COMMAND status code sent back to the initiator.\n         *\n         * Note that the only method of removing a trusted root is by removing the Fabric that uses it as its root of\n         * trust using the RemoveFabric command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.18.6.13\n         */\n        addTrustedRootCertificate(request: OperationalCredentials.AddTrustedRootCertificateRequest): MaybePromise;\n    }\n}\n\nexport type OperationalCredentialsInterface = {\n    components: [{ flags: {}, methods: OperationalCredentialsInterface.Base }]\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
