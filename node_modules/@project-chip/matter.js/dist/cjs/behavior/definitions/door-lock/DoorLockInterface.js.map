{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/door-lock/DoorLockInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { DoorLock } from \"../../../cluster/definitions/DoorLockCluster.js\";\n\nexport namespace DoorLockInterface {\n    export interface Base {\n        /**\n         * This command causes the lock device to lock the door. This command includes an optional code for the lock.\n         * The door lock may require a PIN depending on the value of the RequirePINForRemoteOperation attribute.\n         *\n         * \u2020 The PIN/RFID Code is an obsolete field name, use PINCode instead.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.1\n         */\n        lockDoor(request: DoorLock.LockDoorRequest): MaybePromise;\n\n        /**\n         * This command causes the lock device to unlock the door. This command includes an optional code for the lock.\n         * The door lock may require a code depending on the value of the RequirePINForRemoteOperation attribute.\n         *\n         * NOTE\n         *\n         * If the attribute AutoRelockTime is supported the lock will transition to the locked state when the auto\n         * relock time has expired.\n         *\n         * \u2020 The PIN/RFID Code is an obsolete field name, use PINCode instead.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.2\n         */\n        unlockDoor(request: DoorLock.UnlockDoorRequest): MaybePromise;\n\n        /**\n         * This command causes the lock device to unlock the door with a timeout parameter. After the time in seconds\n         * specified in the timeout field, the lock device will relock itself automatically. This timeout parameter is\n         * only temporary for this message transition and overrides the default relock time\n         *\n         * as specified in the AutoRelockTime attribute. If the door lock device is not capable of or does not want to\n         * support temporary Relock Timeout, it SHOULD NOT support this optional command.\n         *\n         * \u2020 The PIN/RFID Code is an obsolete field name, use PINCode instead.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.3\n         */\n        unlockWithTimeout(request: DoorLock.UnlockWithTimeoutRequest): MaybePromise;\n    }\n\n    export interface Logging {\n        /**\n         * Request a log record. Log number is between 1 \u2013 [Number of Log Records Supported attribute]. If log number 0\n         * is requested then the most recent log entry is returned.\n         *\n         * Log record format: The log record format is defined in the description of the GetLogRecordResponse command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.4\n         */\n        getLogRecord(request: DoorLock.GetLogRecordRequest): MaybePromise<DoorLock.GetLogRecordResponse>;\n    }\n\n    export interface User {\n        /**\n         * Set user into the lock.\n         *\n         * Fields used for different use cases:\n         *\n         * Return status is a global status code or a cluster-specific status code from the Status Codes table and\n         *\n         * shall be one of the following values:\n         *\n         *   \u2022 SUCCESS, if setting User was successful.\n         *\n         *   \u2022 FAILURE, if some unexpected internal error occurred setting User.\n         *\n         *   \u2022 OCCUPIED, if OperationType is Add and UserIndex points to an occupied slot.\n         *\n         *   \u2022 INVALID_COMMAND, if one or more fields violate constraints or are invalid or if OperationType is Modify\n         *     and UserIndex points to an available slot.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.34\n         */\n        setUser(request: DoorLock.SetUserRequest): MaybePromise;\n\n        /**\n         * Retrieve user.\n         *\n         * An InvokeResponse command shall be sent with an appropriate error\n         *\n         * COMMAND, etc.) as needed otherwise the GetUserResponse Command shall be sent implying a status of SUCCESS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.35\n         */\n        getUser(request: DoorLock.GetUserRequest): MaybePromise<DoorLock.GetUserResponse>;\n\n        /**\n         * Clears a user or all Users.\n         *\n         * For each user to clear, all associated credentials (e.g. PIN, RFID, fingerprint, etc.) shall be cleared and\n         * the user entry values shall be reset to their default values (e.g. UserStatus shall be Available, UserType\n         * shall be UnrestrictedUser) and all associated schedules shall be cleared.\n         *\n         * A LockUserChange event with the provided UserIndex shall be generated after successfully clearing users.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.37\n         */\n        clearUser(request: DoorLock.ClearUserRequest): MaybePromise;\n\n        /**\n         * Set a credential (e.g. PIN, RFID, Fingerprint, etc.) into the lock for a new user, existing user, or\n         * ProgrammingUser.\n         *\n         * Fields used for different use cases:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.40\n         */\n        setCredential(request: DoorLock.SetCredentialRequest): MaybePromise<DoorLock.SetCredentialResponse>;\n\n        /**\n         * Retrieve the status of a particular credential (e.g. PIN, RFID, Fingerprint, etc.) by index.\n         *\n         * An InvokeResponse command shall be sent with an appropriate error (e.g. FAILURE, INVALID_COMMAND, etc.) as\n         * needed otherwise the GetCredentialStatusResponse command shall be sent implying a status of SUCCESS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.42\n         */\n        getCredentialStatus(request: DoorLock.GetCredentialStatusRequest): MaybePromise<DoorLock.GetCredentialStatusResponse>;\n\n        /**\n         * Clear one, one type, or all credentials except ProgrammingPIN credential.\n         *\n         * Fields used for different use cases:\n         *\n         * For each credential cleared whose user doesn\u2019t have another valid credential, the corresponding user record\n         * shall be reset back to default values and its UserStatus value shall be set to Available and UserType value\n         * shall be set to UnrestrictedUser and all schedules shall be cleared. In\n         *\n         * this case a LockUserChange event shall be generated for the user being cleared. Return status shall be one\n         * of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.44\n         */\n        clearCredential(request: DoorLock.ClearCredentialRequest): MaybePromise;\n    }\n\n    export interface WeekDayAccessSchedules {\n        /**\n         * Set a weekly repeating schedule for a specified user.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use WeekDayIndex and UserIndex instead, respectively.\n         *\n         * The associated UserType may be changed to ScheduleRestrictedUser by the lock when a Week Day schedule is set.\n         *\n         * Return status shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.14\n         */\n        setWeekDaySchedule(request: DoorLock.SetWeekDayScheduleRequest): MaybePromise;\n\n        /**\n         * Retrieve the specific weekly schedule for the specific user.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use WeekDayIndex and UserIndex instead, respectively.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.15\n         */\n        getWeekDaySchedule(request: DoorLock.GetWeekDayScheduleRequest): MaybePromise<DoorLock.GetWeekDayScheduleResponse>;\n\n        /**\n         * Clear the specific weekly schedule or all weekly schedules for the specific user.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use WeekDayIndex and UserIndex instead, respectively.\n         *\n         * Return status shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.17\n         */\n        clearWeekDaySchedule(request: DoorLock.ClearWeekDayScheduleRequest): MaybePromise;\n    }\n\n    export interface YearDayAccessSchedules {\n        /**\n         * Set a time-specific schedule ID for a specified user.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use YearDayIndex and UserIndex instead, respectively.\n         *\n         * The associated UserType may be changed to ScheduleRestrictedUser by the lock when a Year Day schedule is set.\n         *\n         * Return status shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.18\n         */\n        setYearDaySchedule(request: DoorLock.SetYearDayScheduleRequest): MaybePromise;\n\n        /**\n         * Retrieve the specific year day schedule for the specific schedule and user indexes.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use YearDayIndex and UserIndex instead, respectively.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.19\n         */\n        getYearDaySchedule(request: DoorLock.GetYearDayScheduleRequest): MaybePromise<DoorLock.GetYearDayScheduleResponse>;\n\n        /**\n         * Clears the specific year day schedule or all year day schedules for the specific user.\n         *\n         * \u2020 The Schedule ID and User ID are obsolete field names, use YearDayIndex and UserIndex instead, respectively.\n         *\n         * Return status shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.21\n         */\n        clearYearDaySchedule(request: DoorLock.ClearYearDayScheduleRequest): MaybePromise;\n    }\n\n    export interface HolidaySchedules {\n        /**\n         * Set the holiday Schedule by specifying local start time and local end time with respect to any Lock\n         * Operating Mode.\n         *\n         * \u2020 The Holiday Schedule ID is an obsolete field name, use HolidayIndex instead. Return status shall be one of\n         * the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.22\n         */\n        setHolidaySchedule(request: DoorLock.SetHolidayScheduleRequest): MaybePromise;\n\n        /**\n         * Get the holiday schedule for the specified index.\n         *\n         * \u2020 The Holiday Schedule ID is an obsolete field name, use HolidayIndex instead.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.23\n         */\n        getHolidaySchedule(request: DoorLock.GetHolidayScheduleRequest): MaybePromise<DoorLock.GetHolidayScheduleResponse>;\n\n        /**\n         * Clears the holiday schedule or all holiday schedules.\n         *\n         * \u2020 The Holiday Schedule ID is an obsolete field name, use HolidayIndex instead.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.25\n         */\n        clearHolidaySchedule(request: DoorLock.ClearHolidayScheduleRequest): MaybePromise;\n    }\n\n    export interface PinCredentialNotUser {\n        /**\n         * Set a PIN Code into the lock.\n         *\n         * Return status is a global status code or a cluster-specific status code from the Status Codes table and\n         * shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.6\n         */\n        setPinCode(request: DoorLock.SetPinCodeRequest): MaybePromise;\n\n        /**\n         * Retrieve a PIN Code.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.7\n         */\n        getPinCode(request: DoorLock.GetPinCodeRequest): MaybePromise<DoorLock.GetPinCodeResponse>;\n\n        /**\n         * Clear a PIN code or all PIN codes.\n         *\n         * \u2020 The User ID is an obsolete field name, use PINSlotIndex instead.\n         *\n         * For each PIN Code cleared whose user doesn\u2019t have a RFID Code or other credential type, then corresponding\n         * user record\u2019s UserStatus value shall be set to Available, and UserType value shall be set to\n         * UnrestrictedUser and all schedules shall be cleared.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.9\n         */\n        clearPinCode(request: DoorLock.ClearPinCodeRequest): MaybePromise;\n\n        /**\n         * Clear out all PINs on the lock.\n         *\n         * NOTE\n         *\n         * On the server, the clear all PIN codes command SHOULD have the same effect as the ClearPINCode command with\n         * respect to the setting of user status, user type and schedules.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.10\n         */\n        clearAllPinCodes(): MaybePromise;\n    }\n\n    export interface PinCredentialAndRfidCredentialAndFingerCredentialsNotUser {\n        /**\n         * Set the status of a user ID.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.11\n         */\n        setUserStatus(request: DoorLock.SetUserStatusRequest): MaybePromise;\n\n        /**\n         * Get the status of a user.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.12\n         */\n        getUserStatus(request: DoorLock.GetUserStatusRequest): MaybePromise<DoorLock.GetUserStatusResponse>;\n\n        /**\n         * Set the user type for a specified user.\n         *\n         * For user type value please refer to User Type Value.\n         *\n         * Return status shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.26\n         */\n        setUserType(request: DoorLock.SetUserTypeRequest): MaybePromise;\n\n        /**\n         * Retrieve the user type for a specific user.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.27\n         */\n        getUserType(request: DoorLock.GetUserTypeRequest): MaybePromise<DoorLock.GetUserTypeResponse>;\n    }\n\n    export interface RfidCredentialNotUser {\n        /**\n         * Set an ID for RFID access into the lock.\n         *\n         * Return status is a global status code or a cluster-specific status code from the Status Codes table and\n         * shall be one of the following values:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.29\n         */\n        setRfidCode(request: DoorLock.SetRfidCodeRequest): MaybePromise;\n\n        /**\n         * Retrieve an RFID code.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.30\n         */\n        getRfidCode(request: DoorLock.GetRfidCodeRequest): MaybePromise<DoorLock.GetRfidCodeResponse>;\n\n        /**\n         * Clear an RFID code or all RFID codes.\n         *\n         * \u2020 The User ID is an obsolete field name, use RFIDSlotIndex instead.\n         *\n         * For each RFID Code cleared whose user doesn\u2019t have a PIN Code or other credential type, then the\n         * corresponding user record\u2019s UserStatus value shall be set to Available, and UserType value shall be set to\n         * UnrestrictedUser and all schedules shall be cleared.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.32\n         */\n        clearRfidCode(request: DoorLock.ClearRfidCodeRequest): MaybePromise;\n\n        /**\n         * Clear out all RFIDs on the lock. If you clear all RFID codes and this user didn\u2019t have a PIN code, the user\n         * status has to be set to \"0 Available\", the user type has to be set to the default value, and all schedules\n         * which are supported have to be set to the default values.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.33\n         */\n        clearAllRfidCodes(): MaybePromise;\n    }\n\n    export interface Unbolting {\n        /**\n         * This command causes the lock device to unlock the door without pulling the latch. This command includes an\n         * optional code for the lock. The door lock may require a code depending on the value of the\n         * RequirePINForRemoteOperation attribute.\n         *\n         * NOTE\n         *\n         * If the attribute AutoRelockTime is supported, the lock will transition to the locked state when the auto\n         * relock time has expired.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.2.10.45\n         */\n        unboltDoor(request: DoorLock.UnboltDoorRequest): MaybePromise;\n    }\n}\n\nexport type DoorLockInterface = {\n    components: [\n        { flags: {}, methods: DoorLockInterface.Base },\n        { flags: { logging: true }, methods: DoorLockInterface.Logging },\n        { flags: { user: true }, methods: DoorLockInterface.User },\n        { flags: { weekDayAccessSchedules: true }, methods: DoorLockInterface.WeekDayAccessSchedules },\n        { flags: { yearDayAccessSchedules: true }, methods: DoorLockInterface.YearDayAccessSchedules },\n        { flags: { holidaySchedules: true }, methods: DoorLockInterface.HolidaySchedules },\n        { flags: { pinCredential: true, user: false }, methods: DoorLockInterface.PinCredentialNotUser },\n        {\n            flags: { pinCredential: true, rfidCredential: true, fingerCredentials: true, user: false },\n            methods: DoorLockInterface.PinCredentialAndRfidCredentialAndFingerCredentialsNotUser\n        },\n        { flags: { rfidCredential: true, user: false }, methods: DoorLockInterface.RfidCredentialNotUser },\n        { flags: { unbolting: true }, methods: DoorLockInterface.Unbolting }\n    ]\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
