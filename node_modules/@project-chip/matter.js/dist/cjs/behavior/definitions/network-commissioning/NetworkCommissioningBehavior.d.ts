/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { NetworkCommissioning } from "../../../cluster/definitions/NetworkCommissioningCluster.js";
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { NetworkCommissioningInterface } from "./NetworkCommissioningInterface.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * NetworkCommissioningBehavior is the base class for objects that support interaction with {@link
 * NetworkCommissioning.Cluster}.
 *
 * NetworkCommissioning.Cluster requires you to enable one or more optional features. You can do so using {@link
 * NetworkCommissioningBehavior.with}.
 */
export declare const NetworkCommissioningBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 49;
    readonly name: "NetworkCommissioning";
    readonly revision: 2;
    readonly features: {
        readonly wiFiNetworkInterface: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly threadNetworkInterface: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly ethernetNetworkInterface: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly maxNetworks: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
        readonly networks: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
            networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
            connected: import("../../../tlv/TlvObject.js").FieldType<boolean>;
        }>[], any>;
        readonly interfaceEnabled: import("../../../cluster/Cluster.js").WritableAttribute<boolean, any>;
        readonly lastNetworkingStatus: import("../../../cluster/Cluster.js").Attribute<NetworkCommissioning.NetworkCommissioningStatus | null, any>;
        readonly lastNetworkId: import("../../../cluster/Cluster.js").Attribute<Uint8Array | null, any>;
        readonly lastConnectErrorValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly wiFiNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly scanMaxTimeSeconds: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
                readonly connectMaxTimeSeconds: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly scanNetworks: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    ssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array | null>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    wiFiScanResults: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        security: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            unencrypted: import("../../../schema/BitmapSchema.js").BitFlag;
                            wep: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpaPersonal: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpa2Personal: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpa3Personal: import("../../../schema/BitmapSchema.js").BitFlag;
                        }>>;
                        ssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        bssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        channel: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        wiFiBand: import("../../../tlv/TlvObject.js").OptionalFieldType<NetworkCommissioning.WiFiBand>;
                        rssi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                    threadScanResults: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        panId: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        extendedPanId: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        networkName: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                        channel: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        version: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        extendedAddress: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        rssi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        lqi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                }>, any>;
                readonly removeNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
                readonly connectNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    errorValue: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                }>, any>;
                readonly reorderNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    networkIndex: import("../../../tlv/TlvObject.js").FieldType<number>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly scanMaxTimeSeconds: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
                readonly connectMaxTimeSeconds: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly scanNetworks: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    ssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array | null>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    wiFiScanResults: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        security: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                            unencrypted: import("../../../schema/BitmapSchema.js").BitFlag;
                            wep: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpaPersonal: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpa2Personal: import("../../../schema/BitmapSchema.js").BitFlag;
                            wpa3Personal: import("../../../schema/BitmapSchema.js").BitFlag;
                        }>>;
                        ssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        bssid: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        channel: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        wiFiBand: import("../../../tlv/TlvObject.js").OptionalFieldType<NetworkCommissioning.WiFiBand>;
                        rssi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                    threadScanResults: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        panId: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        extendedPanId: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        networkName: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                        channel: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        version: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        extendedAddress: import("../../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
                        rssi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        lqi: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                }>, any>;
                readonly removeNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
                readonly connectNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    errorValue: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                }>, any>;
                readonly reorderNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkId: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    networkIndex: import("../../../tlv/TlvObject.js").FieldType<number>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly supportedWiFiBands: import("../../../cluster/Cluster.js").FixedAttribute<NetworkCommissioning.WiFiBand[], any>;
            };
            readonly commands: {
                readonly addOrUpdateWiFiNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    ssid: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    credentials: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
        };
        readonly component: {
            readonly attributes: {
                readonly supportedThreadFeatures: import("../../../cluster/Cluster.js").FixedAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    isBorderRouterCapable: import("../../../schema/BitmapSchema.js").BitFlag;
                    isRouterCapable: import("../../../schema/BitmapSchema.js").BitFlag;
                    isSleepyEndDeviceCapable: import("../../../schema/BitmapSchema.js").BitFlag;
                    isFullThreadDevice: import("../../../schema/BitmapSchema.js").BitFlag;
                    isSynchronizedSleepyEndDeviceCapable: import("../../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly threadVersion: import("../../../cluster/Cluster.js").FixedAttribute<number, any>;
            };
            readonly commands: {
                readonly addOrUpdateThreadNetwork: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    operationalDataset: import("../../../tlv/TlvObject.js").FieldType<Uint8Array>;
                    breadcrumb: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }>, import("../../../tlv/TlvObject.js").TypeFromFields<{
                    networkingStatus: import("../../../tlv/TlvObject.js").FieldType<NetworkCommissioning.NetworkCommissioningStatus>;
                    debugText: import("../../../tlv/TlvObject.js").OptionalFieldType<string>;
                    networkIndex: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
            readonly threadNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: true;
            readonly ethernetNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly threadNetworkInterface: true;
            readonly ethernetNetworkInterface: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly wiFiNetworkInterface: false;
            readonly threadNetworkInterface: false;
            readonly ethernetNetworkInterface: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, NetworkCommissioningInterface>, NetworkCommissioningInterface>;
type NetworkCommissioningBehaviorType = InstanceType<typeof NetworkCommissioningBehavior>;
export interface NetworkCommissioningBehavior extends NetworkCommissioningBehaviorType {
}
type StateType = InstanceType<typeof NetworkCommissioningBehavior.State>;
export declare namespace NetworkCommissioningBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=NetworkCommissioningBehavior.d.ts.map