{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/network-commissioning/NetworkCommissioningInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { NetworkCommissioning } from \"../../../cluster/definitions/NetworkCommissioningCluster.js\";\n\nexport namespace NetworkCommissioningInterface {\n    export interface WiFiNetworkInterfaceOrThreadNetworkInterface {\n        /**\n         * This command shall scan on the Cluster instance\u2019s associated network interface for either of:\n         *\n         *   \u2022 All available networks (non-directed scanning)\n         *\n         *   \u2022 Specific networks (directed scanning)\n         *\n         * Scanning for available networks detects all networks of the type corresponding to the cluster server\n         * instance\u2019s associated network interface that are possible to join, such as all visible Wi-Fi access points\n         * for Wi-Fi cluster server instances, all Thread PANs for Thread cluster server instances, within bounds of\n         * the maximum response size.\n         *\n         * Scanning for a specific network (i.e. directed scanning) takes place if a network identifier (e.g. Wi-Fi\n         * SSID) is provided in the command arguments. Directed scanning shall restrict the result set to the specified\n         * network only.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * The client shall NOT expect the server to be done scanning and have responded with ScanNetworksResponse\n         * before ScanMaxTimeSeconds seconds have elapsed. Enough transport time affordances for retries SHOULD be\n         * expected before a client determines the operation to have timed-out.\n         *\n         * This command shall fail with a status code of BUSY if the server determines that it will fail to reliably\n         * send a response due to changes of networking interface configuration at runtime for the interface over which\n         * the command was invoked, or if it is currently unable to proceed with such an operation.\n         *\n         * For Wi-Fi-supporting servers (WI feature) the server shall always honor directed scans, and attempt to\n         * provide all matching BSSID which are reachable on the bands which would otherwise be attempted if a\n         * ConnectNetwork having the specified SSID were to take place. This command is useful for clients to determine\n         * reachability capabilities as seen by the server\u2019s own radios.\n         *\n         * For Wi-Fi-supporting servers the server shall always scan on all bands supported by the interface\n         *\n         * associated with the cluster instance on which the command was invoked.\n         *\n         * If the command was invoked over the same link whose configuration is managed by a given server cluster\n         * instance, there may be an impact on other communication from the invoking client, as well as other clients,\n         * while the network interface is processing the scan. Clients SHOULD NOT use this command unless actively in\n         * the process of re-configuring network connectivity.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1\n         */\n        scanNetworks(request: NetworkCommissioning.ScanNetworksRequest): MaybePromise<NetworkCommissioning.ScanNetworksResponse>;\n\n        /**\n         * This command shall remove the network configuration from the Cluster if there was already a network\n         * configuration with the same NetworkID. The relative order of the entries in the Networks\n         *\n         * attribute shall remain unchanged, except for the removal of the requested network configuration.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * If the Networks attribute does not contain a matching entry, the command shall immediately respond with\n         * NetworkConfigResponse having NetworkingStatus status field set to NetworkIdNotFound.\n         *\n         * On success, the NetworkConfigResponse command shall have its NetworkIndex field set to the 0- based index of\n         * the entry in the Networks attribute that was just removed, and a NetworkingStatus status field set to\n         * Success.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6\n         */\n        removeNetwork(request: NetworkCommissioning.RemoveNetworkRequest): MaybePromise<NetworkCommissioning.NetworkConfigResponse>;\n\n        /**\n         * This command shall attempt to connect to a network whose configuration was previously added by either the\n         * AddOrUpdateWiFiNetwork or AddOrUpdateThreadNetwork commands. Network is identified by its NetworkID.\n         *\n         * This command shall fail with a BUSY status code returned to the initiator if the server is currently unable\n         * to proceed with such an operation, such as if it is currently attempting to connect in the background, or is\n         * already proceeding with a prior ConnectNetwork.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * Success or failure of this command shall be communicated by the ConnectNetworkResponse command, unless some\n         * data model validations caused a FAILURE status to be sent prior to finishing execution of the command. The\n         * ConnectNetworkResponse shall indicate the value Success in the NetworkingStatus field on successful\n         * connection. On failure to connect, the ConnectNetworkResponse shall contain an appropriate NetworkingStatus,\n         * DebugText and ErrorValue indicating the reason for failure.\n         *\n         * The amount of time needed to determine successful or failing connectivity on the cluster server\u2019s associated\n         * interface is provided by the ConnectMaxTimeSeconds attribute. Clients shall NOT consider the connection to\n         * have timed-out until at least that duration has taken place. For non-concurrent commissioning situations,\n         * the client SHOULD allow additional margin of time to account for its delay in executing operational\n         * discovery of the Node once it is connected to the new network.\n         *\n         * On successful connection, the entry associated with the given Network configuration in the Networks\n         * attribute shall indicate its Connected field set to true, and all other entries, if any exist, shall\n         * indicate their Connected field set to false.\n         *\n         * On failure to connect, the entry associated with the given Network configuration in the Networks attribute\n         * shall indicate its Connected field set to false.\n         *\n         * The precedence order of any entry subject to ConnectNetwork shall NOT change within the Networks attribute.\n         *\n         * Even after successfully connecting to a network, the configuration shall revert to the prior state of\n         * configuration if the CommissioningComplete command (see Section 11.10.6.6, \u201CCommissioningComplete Command\u201D)\n         * is not successfully invoked before expiry of the Fail-Safe timer.\n         *\n         * When non-concurrent commissioning is being used by a Commissioner or Administrator, the\n         * ConnectNetworkResponse shall be sent with the NetworkingStatus field set to Success prior to closing the\n         * commissioning channel, even if not yet connected to the operational network, unless the device would be\n         * incapable of joining that network, in which case the usual failure path described in the prior paragraphs\n         * shall be followed. Once the commissioning channel is closed, the operational channel will be started. It is\n         * possible that the only method to determine success of the operation is operational discovery of the Node on\n         * the new operational network. Therefore, before invoking the ConnectNetwork command, the client SHOULD\n         * re-invoke the Arm Fail-Safe command with a duration that meets the following:\n         *\n         *   1. Sufficient time to meet the minimum required time (see Section 11.9.6.4, \u201CConnectMaxTimeSeconds\n         *      Attribute\u201D) that may be taken by the server to connect to the desired network.\n         *\n         *   2. Sufficient time to account for possible message-layer retries when a response is requested.\n         *\n         *   3. Sufficient time to allow operational discovery on the new network by a Commissioner or Administrator.\n         *\n         *   4. Sufficient time to establish a CASE session after operational discovery\n         *\n         *   5. Not so long that, in error situations, the delay to reverting back to being discoverable for\n         *      commissioning with a previous configuration would cause significant user-perceived delay.\n         *\n         * Note as well that the CommissioningTimeout duration provided in a prior OpenCommissioningWindow or\n         * OpenBasicCommissioningWindow command may impact the total time available to proceed with error recovery\n         * after a connection failure.\n         *\n         * The LastNetworkingStatus, LastNetworkID and LastConnectErrorValue attributes may assist the client in\n         * determining the reason for a failure after reconnecting over a Commissioning channel, especially in\n         * non-concurrent commissioning situations.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8\n         */\n        connectNetwork(request: NetworkCommissioning.ConnectNetworkRequest): MaybePromise<NetworkCommissioning.ConnectNetworkResponse>;\n\n        /**\n         * This command shall set the specific order of the network configuration selected by its NetworkID in the\n         * Networks attribute to match the position given by NetworkIndex.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10\n         */\n        reorderNetwork(request: NetworkCommissioning.ReorderNetworkRequest): MaybePromise<NetworkCommissioning.NetworkConfigResponse>;\n    }\n\n    export interface WiFiNetworkInterface {\n        /**\n         * This command shall be used to add or modify Wi-Fi network configurations.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * The Credentials associated with the network are not readable after execution of this command, as they do not\n         * appear in the Networks attribute, for security reasons.\n         *\n         * If this command contains a ClientIdentifier, and the Networks list does not contain an entry with a matching\n         * ClientIdentifier, then this command shall fail with a status of NOT_FOUND.\n         *\n         * See Section 11.9.7.5, \u201CCommon processing of AddOrUpdateWiFiNetwork and AddOrUpdateThreadNetwork\u201D for\n         * behavior of addition/update.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3\n         */\n        addOrUpdateWiFiNetwork(request: NetworkCommissioning.AddOrUpdateWiFiNetworkRequest): MaybePromise<NetworkCommissioning.NetworkConfigResponse>;\n    }\n\n    export interface ThreadNetworkInterface {\n        /**\n         * This command shall be used to add or modify Thread network configurations.\n         *\n         * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n         * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n         *\n         * See Section 11.9.7.5, \u201CCommon processing of AddOrUpdateWiFiNetwork and AddOrUpdateThreadNetwork\u201D for\n         * behavior of addition/update.\n         *\n         * The XPAN ID in the OperationalDataset serves as the NetworkID for the network configuration to be added or\n         * updated.\n         *\n         * If the Networks attribute does not contain an entry with the same NetworkID as the one provided in the\n         * OperationalDataset, the operation shall be considered an addition, otherwise, it shall be considered an\n         * update.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4\n         */\n        addOrUpdateThreadNetwork(request: NetworkCommissioning.AddOrUpdateThreadNetworkRequest): MaybePromise<NetworkCommissioning.NetworkConfigResponse>;\n    }\n}\n\nexport type NetworkCommissioningInterface = {\n    components: [\n        {\n            flags: { wiFiNetworkInterface: true },\n            methods: NetworkCommissioningInterface.WiFiNetworkInterfaceOrThreadNetworkInterface\n        },\n        {\n            flags: { threadNetworkInterface: true },\n            methods: NetworkCommissioningInterface.WiFiNetworkInterfaceOrThreadNetworkInterface\n        },\n        { flags: { wiFiNetworkInterface: true }, methods: NetworkCommissioningInterface.WiFiNetworkInterface },\n        { flags: { threadNetworkInterface: true }, methods: NetworkCommissioningInterface.ThreadNetworkInterface }\n    ]\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
