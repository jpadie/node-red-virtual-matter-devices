{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/actions/ActionsInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { Actions } from \"../../../cluster/definitions/ActionsCluster.js\";\n\nexport namespace ActionsInterface {\n    export interface Base {\n        /**\n         * This command triggers an action (state change) on the involved endpoints, in a \"fire and forget\" manner.\n         * Afterwards, the action\u2019s state shall be Inactive.\n         *\n         * Example: recall a scene on a number of lights.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.1\n         */\n        instantAction(request: Actions.InstantActionRequest): MaybePromise;\n\n        /**\n         * It is recommended that, where possible (e.g., it is not possible for attributes with Boolean data type), a\n         * gradual transition SHOULD take place from the old to the new state over this time period. However, the exact\n         * transition is manufacturer dependent.\n         *\n         * This command triggers an action (state change) on the involved endpoints, with a specified time to\n         * transition from the current state to the new state. During the transition, the action\u2019s state shall be\n         * Active. Afterwards, the action\u2019s state shall be Inactive.\n         *\n         * Example: recall a scene on a number of lights, with a specified transition time.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.2\n         */\n        instantActionWithTransition(request: Actions.InstantActionWithTransitionRequest): MaybePromise;\n\n        /**\n         * This command triggers the commencement of an action on the involved endpoints. Afterwards, the action\u2019s\n         * state shall be Active.\n         *\n         * Example: start a dynamic lighting pattern (such as gradually rotating the colors around the setpoints of the\n         * scene) on a set of lights.\n         *\n         * Example: start a sequence of events such as a wake-up experience involving lights moving through several\n         * brightness/color combinations and the window covering gradually opening.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.3\n         */\n        startAction(request: Actions.StartActionRequest): MaybePromise;\n\n        /**\n         * This command triggers the commencement of an action on the involved endpoints, and shall change the action\u2019s\n         * state to Active. After the specified Duration, the action will stop, and the action\u2019s state shall change to\n         * Inactive.\n         *\n         * Example: start a dynamic lighting pattern (such as gradually rotating the colors around the setpoints of the\n         * scene) on a set of lights for 1 hour (Duration=3600).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.4\n         */\n        startActionWithDuration(request: Actions.StartActionWithDurationRequest): MaybePromise;\n\n        /**\n         * This command stops the ongoing action on the involved endpoints. Afterwards, the action\u2019s state shall be\n         * Inactive.\n         *\n         * Example: stop a dynamic lighting pattern which was previously started with StartAction.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.5\n         */\n        stopAction(request: Actions.StopActionRequest): MaybePromise;\n\n        /**\n         * This command pauses an ongoing action, and shall change the action\u2019s state to Paused.\n         *\n         * Example: pause a dynamic lighting effect (the lights stay at their current color) which was previously\n         * started with StartAction.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.6\n         */\n        pauseAction(request: Actions.PauseActionRequest): MaybePromise;\n\n        /**\n         * This command pauses an ongoing action, and shall change the action\u2019s state to Paused. After the specified\n         * Duration, the ongoing action will be automatically resumed. which shall change the action\u2019s state to Active.\n         *\n         * Example: pause a dynamic lighting effect (the lights stay at their current color) for 10 minutes\n         * (Duration=600).\n         *\n         * The difference between Pause/Resume and Disable/Enable is on the one hand semantic (the former is more of a\n         * transitionary nature while the latter is more permanent) and on the other hand these can be implemented\n         * slightly differently in the implementation of the action (e.g. a Pause would be automatically resumed after\n         * some hours or during a nightly reset, while an Disable would remain in effect until explicitly enabled\n         * again).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.7\n         */\n        pauseActionWithDuration(request: Actions.PauseActionWithDurationRequest): MaybePromise;\n\n        /**\n         * This command resumes a previously paused action, and shall change the action\u2019s state to Active.\n         *\n         * The difference between ResumeAction and StartAction is that ResumeAction will continue the action from the\n         * state where it was paused, while StartAction will start the action from the beginning.\n         *\n         * Example: resume a dynamic lighting effect (the lights' colors will change gradually, continuing from the\n         * point they were paused).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.8\n         */\n        resumeAction(request: Actions.ResumeActionRequest): MaybePromise;\n\n        /**\n         * This command enables a certain action or automation. Afterwards, the action\u2019s state shall be Active.\n         *\n         * Example: enable a motion sensor to control the lights in an area.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.9\n         */\n        enableAction(request: Actions.EnableActionRequest): MaybePromise;\n\n        /**\n         * This command enables a certain action or automation, and shall change the action\u2019s state to be Active. After\n         * the specified Duration, the action or automation will stop, and the action\u2019s state shall change to Disabled.\n         *\n         * Example: enable a \"presence mimicking\" behavior for the lights in your home during a vacation; the Duration\n         * field is used to indicated the length of your absence from home. After that period, the presence mimicking\n         * behavior will no longer control these lights.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.10\n         */\n        enableActionWithDuration(request: Actions.EnableActionWithDurationRequest): MaybePromise;\n\n        /**\n         * This command disables a certain action or automation, and shall change the action\u2019s state to Inactive.\n         *\n         * Example: disable a motion sensor to no longer control the lights in an area.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.11\n         */\n        disableAction(request: Actions.DisableActionRequest): MaybePromise;\n\n        /**\n         * This command disables a certain action or automation, and shall change the action\u2019s state to Disabled. After\n         * the specified Duration, the action or automation will re-start, and the action\u2019s state shall change to\n         * either Inactive or Active, depending on the actions (see examples 4 and 6).\n         *\n         * Example: disable a \"wakeup\" experience for a period of 1 week when going on holiday (to prevent them from\n         * turning on in the morning while you\u2019re not at home). After this period, the wakeup experience will control\n         * the lights as before.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.12\n         */\n        disableActionWithDuration(request: Actions.DisableActionWithDurationRequest): MaybePromise;\n    }\n}\n\nexport type ActionsInterface = { components: [{ flags: {}, methods: ActionsInterface.Base }] };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
