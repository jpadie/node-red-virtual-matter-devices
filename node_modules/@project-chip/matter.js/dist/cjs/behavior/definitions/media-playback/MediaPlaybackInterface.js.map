{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/media-playback/MediaPlaybackInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { MediaPlayback } from \"../../../cluster/definitions/MediaPlaybackCluster.js\";\n\nexport namespace MediaPlaybackInterface {\n    export interface Base {\n        /**\n         * Upon receipt, this shall play media. If content is currently in a FastForward or Rewind state. Play shall\n         * return media to normal playback speed.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.1\n         */\n        play(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall pause playback of the media.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.2\n         */\n        pause(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall stop playback of the media. User-visible outcome is context-specific. This may\n         * navigate the user back to the location from where the media was originally launched.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.3\n         */\n        stop(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall Start Over with the current media playback item.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.4\n         */\n        startOver(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall cause the handler to be invoked for \"Previous\". User experience is\n         * context-specific. This will often Go back to the previous media playback item.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.5\n         */\n        previous(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall cause the handler to be invoked for \"Next\". User experience is context- specific.\n         * This will often Go forward to the next media playback item.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.6\n         */\n        next(): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall Skip forward in the media by the given number of milliseconds.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.9\n         */\n        skipForward(request: MediaPlayback.SkipForwardRequest): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall Skip backward in the media by the given number of milliseconds.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.10\n         */\n        skipBackward(request: MediaPlayback.SkipBackwardRequest): MaybePromise<MediaPlayback.PlaybackResponse>;\n    }\n\n    export interface AdvancedSeek {\n        /**\n         * Upon receipt, this shall change the playback position in the media to the given position.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.11\n         */\n        seek(request: MediaPlayback.SeekRequest): MaybePromise<MediaPlayback.PlaybackResponse>;\n    }\n\n    export interface AudioTracks {\n        /**\n         * Upon receipt, the server shall set the active Audio Track to the one identified by the TrackID in the Track\n         * catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not correspond\n         * to the streaming media OR no media is being streamed at the time of receipt of this command, the server will\n         * return an error status of INVALID_ARGUMENT.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13\n         */\n        activateAudioTrack(request: MediaPlayback.ActivateAudioTrackRequest): MaybePromise;\n    }\n\n    export interface TextTracks {\n        /**\n         * Upon receipt, the server shall set the active Text Track to the one identified by the TrackID in the Track\n         * catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not correspond\n         * to the streaming media OR no media is being streamed at the time of receipt of this command, the server\n         * shall return an error status of INVALID_ARGUMENT.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.14\n         */\n        activateTextTrack(request: MediaPlayback.ActivateTextTrackRequest): MaybePromise;\n\n        /**\n         * If a Text Track is active (i.e. being displayed), upon receipt of this command, the server shall stop\n         * displaying it.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.15\n         */\n        deactivateTextTrack(): MaybePromise;\n    }\n\n    export interface VariableSpeed {\n        /**\n         * Upon receipt, this shall start playback of the media backward in case the media is currently playing in the\n         * forward direction or is not playing. If the playback is already happening in the backwards direction receipt\n         * of this command shall increase the speed of the media playback backwards.\n         *\n         * Different \"rewind\" speeds may be reflected on the media playback device based upon the number of sequential\n         * calls to this function and the capability of the device. This is to avoid needing to define every speed\n         * (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be updated to\n         * reflect the new speed of playback. If the playback speed cannot be changed for the media being played(for\n         * example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be returned. If the\n         * playback speed has reached the maximum supported speed for media playing backwards, the status of\n         * SPEED_OUT_OF_RANGE shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.7\n         */\n        rewind(request: MediaPlayback.RewindRequest): MaybePromise<MediaPlayback.PlaybackResponse>;\n\n        /**\n         * Upon receipt, this shall start playback of the media in the forward direction in case the media is\n         *\n         * currently playing in the backward direction or is not playing. If the playback is already happening in the\n         * forward direction receipt of this command shall increase the speed of the media playback.\n         *\n         * Different \"fast-forward\" speeds may be reflected on the media playback device based upon the number of\n         * sequential calls to this function and the capability of the device. This is to avoid needing to define every\n         * speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be updated to\n         * reflect the new speed of playback. If the playback speed cannot be changed for the media being played(for\n         * example, in live streaming content not supporting seek), the status of NOT_ALLOWED shall be returned. If the\n         * playback speed has reached the maximum supported speed for media playing forward, the status of\n         * SPEED_OUT_OF_RANGE shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.8\n         */\n        fastForward(request: MediaPlayback.FastForwardRequest): MaybePromise<MediaPlayback.PlaybackResponse>;\n    }\n}\n\nexport type MediaPlaybackInterface = {\n    components: [\n        { flags: {}, methods: MediaPlaybackInterface.Base },\n        { flags: { advancedSeek: true }, methods: MediaPlaybackInterface.AdvancedSeek },\n        { flags: { audioTracks: true }, methods: MediaPlaybackInterface.AudioTracks },\n        { flags: { textTracks: true }, methods: MediaPlaybackInterface.TextTracks },\n        { flags: { variableSpeed: true }, methods: MediaPlaybackInterface.VariableSpeed }\n    ]\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
