{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/general-commissioning/GeneralCommissioningServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { AdministratorCommissioning } from \"../../../cluster/definitions/AdministratorCommissioningCluster.js\";\nimport { GeneralCommissioning } from \"../../../cluster/definitions/GeneralCommissioningCluster.js\";\nimport { MatterFlowError } from \"../../../common/MatterError.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport type { Node } from \"../../../node/Node.js\";\nimport { assertSecureSession } from \"../../../session/SecureSession.js\";\nimport { AdministratorCommissioningServer } from \"../administrator-commissioning/AdministratorCommissioningServer.js\";\nimport { BasicInformationServer } from \"../basic-information/BasicInformationServer.js\";\nimport { GeneralCommissioningBehavior } from \"./GeneralCommissioningBehavior.js\";\nimport { ServerNodeFailsafeContext } from \"./ServerNodeFailsafeContext.js\";\n\nconst SuccessResponse = { errorCode: GeneralCommissioning.CommissioningError.Ok, debugText: \"\" };\nconst logger = Logger.get(\"GeneralCommissioningClusterHandler\");\n\n/**\n * This is the default server implementation of GeneralCommissioningBehavior.\n */\nexport class GeneralCommissioningServer extends GeneralCommissioningBehavior {\n    declare state: GeneralCommissioningServer.State;\n\n    override initialize() {\n        const bci = this.state.basicCommissioningInfo;\n\n        if (bci.failSafeExpiryLengthSeconds === undefined) {\n            // One minute\n            bci.failSafeExpiryLengthSeconds = 60;\n        }\n\n        if (bci.maxCumulativeFailsafeSeconds === undefined) {\n            // 5 minutes, recommended by spec\n            bci.maxCumulativeFailsafeSeconds = 900;\n        }\n\n        this.state.breadcrumb = 0;\n    }\n\n    override async armFailSafe({ breadcrumb, expiryLengthSeconds }: GeneralCommissioning.ArmFailSafeRequest) {\n        assertSecureSession(this.session, \"armFailSafe can only be called on a secure session\");\n        const device = this.session.context;\n\n        try {\n            // If the fail-safe timer is not currently armed, the commissioning window is open, and the command was\n            // received over a CASE session, the command SHALL leave the current fail-safe state unchanged and\n            // immediately respond with an ArmFailSafeResponse containing an ErrorCode value of BusyWithOtherAdmin. This\n            // is done to allow commissioners, which use PASE connections, the opportunity to use the failsafe during\n            // the relatively short commissioning window.\n            if (\n                !device.isFailsafeArmed() &&\n                this.agent.get(AdministratorCommissioningServer).state.windowStatus !==\n                    AdministratorCommissioning.CommissioningWindowStatus.WindowNotOpen &&\n                !this.session.isPase\n            ) {\n                throw new MatterFlowError(\"Failed to arm failsafe using CASE while commissioning window is opened.\");\n            }\n\n            if (device.isFailsafeArmed()) {\n                await device.failsafeContext.extend(this.session.fabric, expiryLengthSeconds);\n            } else {\n                // If ExpiryLengthSeconds is 0 and the fail-safe timer was not armed, then this command invocation SHALL lead\n                // to a success response with no side effect against the fail-safe context.\n                if (expiryLengthSeconds === 0) return SuccessResponse;\n\n                await device.beginTimed(\n                    new ServerNodeFailsafeContext(this.endpoint as Node, {\n                        fabrics: device.fabricManager,\n                        sessions: device.sessionManager,\n                        expiryLengthSeconds,\n                        maxCumulativeFailsafeSeconds: this.state.basicCommissioningInfo.maxCumulativeFailsafeSeconds,\n                        associatedFabric: this.session.fabric,\n                    }),\n                );\n            }\n\n            if (device.isFailsafeArmed()) {\n                // If failsafe is armed after the command, set breadcrumb (not when expired)\n                this.state.breadcrumb = breadcrumb;\n            }\n        } catch (error) {\n            MatterFlowError.accept(error);\n\n            logger.debug(`Error while arming failSafe timer`, error);\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.BusyWithOtherAdmin,\n                debugText: error.message,\n            };\n        }\n\n        return SuccessResponse;\n    }\n\n    override async setRegulatoryConfig({\n        breadcrumb,\n        newRegulatoryConfig,\n        countryCode,\n    }: GeneralCommissioning.SetRegulatoryConfigRequest) {\n        const locationCapabilityValue = this.state.locationCapability;\n\n        // Check and handle country code\n        const basicInformation = this.agent.get(BasicInformationServer);\n        const currentLocationCountryCode = basicInformation.state.location;\n\n        if (currentLocationCountryCode !== countryCode) {\n            if (this.state.allowCountryCodeChange === false && countryCode !== \"XX\") {\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Country code change not allowed: ${countryCode}`,\n                };\n            }\n            if (\n                this.state.countryCodeWhitelist !== undefined &&\n                !this.state.countryCodeWhitelist.includes(countryCode)\n            ) {\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Country code change not allowed: ${countryCode}`,\n                };\n            }\n            if (countryCode !== \"XX\") {\n                basicInformation.state.location = countryCode;\n            }\n        }\n\n        // Check and handle regulatory config for LocationCapability\n        let validValues;\n        switch (locationCapabilityValue) {\n            case GeneralCommissioning.RegulatoryLocationType.Outdoor:\n                validValues = [GeneralCommissioning.RegulatoryLocationType.Outdoor];\n                break;\n            case GeneralCommissioning.RegulatoryLocationType.Indoor:\n                validValues = [GeneralCommissioning.RegulatoryLocationType.Indoor];\n                break;\n            case GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor:\n                validValues = [\n                    GeneralCommissioning.RegulatoryLocationType.Indoor,\n                    GeneralCommissioning.RegulatoryLocationType.Outdoor,\n                    GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor,\n                ];\n                break;\n            default:\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Invalid regulatory location: ${\n                        newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor\n                            ? \"Indoor\"\n                            : \"Outdoor\"\n                    }`,\n                };\n        }\n        if (!validValues.includes(newRegulatoryConfig)) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                debugText: `Invalid regulatory location: ${\n                    newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor ? \"Indoor\" : \"Outdoor\"\n                }`,\n            };\n        }\n\n        // Regulatory config is not fabric-writable so requires elevated privileges\n        this.asAdmin(() => {\n            this.state.regulatoryConfig = newRegulatoryConfig;\n        });\n\n        this.state.breadcrumb = breadcrumb;\n\n        return SuccessResponse;\n    }\n\n    override async commissioningComplete() {\n        if (this.session.isPase) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,\n                debugText: \"Command not executed over CASE session.\",\n            };\n        }\n\n        const fabric = this.session.associatedFabric;\n\n        const device = this.session.context;\n        if (!device.isFailsafeArmed()) {\n            return { errorCode: GeneralCommissioning.CommissioningError.NoFailSafe, debugText: \"FailSafe not armed.\" };\n        }\n        const failsafeContext = device.failsafeContext;\n\n        assertSecureSession(this.session, \"commissioningComplete can only be called on a secure session\");\n\n        const timedFabric = failsafeContext.associatedFabric?.fabricIndex;\n        if (fabric.fabricIndex !== timedFabric) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,\n                debugText: `Associated fabric ${fabric.fabricIndex} does not match the one from the failsafe context ${timedFabric}.`,\n            };\n        }\n\n        // On successful execution of the CommissioningComplete command the following actions SHALL be undertaken on the\n        // Server:\n        // 1. The Fail-Safe timer associated with the current Fail-Safe context SHALL be disarmed.\n        // 2. The commissioning window at the Server SHALL be closed.\n        // 3. Any temporary administrative privileges automatically granted to any open PASE session SHALL be revoked\n        //    (see Section 6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D).\n        // 4. The Secure Session Context of any PASE session still established at the Server SHALL be cleared.\n        await failsafeContext.completeCommission();\n\n        // 5. The Breadcrumb attribute SHALL be reset to zero.\n        this.state.breadcrumb = BigInt(0);\n\n        logger.info(`Commissioning completed on fabric #${fabric.fabricId} as node #${fabric.nodeId}.`);\n\n        return SuccessResponse;\n    }\n}\n\nexport namespace GeneralCommissioningServer {\n    // We place the following configuration options in State rather than Internal so they can be conveniently configured\n    // using GeneralCommissioningServer.set()\n    export class State extends GeneralCommissioningBehavior.State {\n        /**\n         * Set to false to prevent the controller from changing the country code during commissioning.\n         */\n        allowCountryCodeChange = true; // Default true if not set\n\n        /**\n         * Set to an array of two-letter country codes to limit the countries the controller may assign.\n         */\n        countryCodeWhitelist?: string[] = undefined;\n    }\n}\n"],
  "mappings": "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",
  "names": ["GeneralCommissioningServer"]
}
