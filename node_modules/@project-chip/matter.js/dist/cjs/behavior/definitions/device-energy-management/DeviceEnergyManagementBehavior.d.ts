/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { DeviceEnergyManagement } from "../../../cluster/definitions/DeviceEnergyManagementCluster.js";
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { DeviceEnergyManagementInterface } from "./DeviceEnergyManagementInterface.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * DeviceEnergyManagementBehavior is the base class for objects that support interaction with {@link
 * DeviceEnergyManagement.Cluster}.
 *
 * DeviceEnergyManagement.Cluster requires you to enable one or more optional features. You can do so using {@link
 * DeviceEnergyManagementBehavior.with}.
 */
export declare const DeviceEnergyManagementBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 152;
    readonly name: "DeviceEnergyManagement";
    readonly revision: 3;
    readonly features: {
        readonly powerAdjustment: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly powerForecastReporting: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly stateForecastReporting: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly startTimeAdjustment: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly pausable: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly forecastAdjustment: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly constraintBasedAdjustment: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly esaType: import("../../../cluster/Cluster.js").FixedAttribute<DeviceEnergyManagement.EsaType, any>;
        readonly esaCanGenerate: import("../../../cluster/Cluster.js").FixedAttribute<boolean, any>;
        readonly esaState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.EsaState, any>;
        readonly absMinPower: import("../../../cluster/Cluster.js").Attribute<number | bigint, any>;
        readonly absMaxPower: import("../../../cluster/Cluster.js").Attribute<number | bigint, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly powerAdjustment: true;
        };
        readonly component: {
            readonly attributes: {
                readonly powerAdjustmentCapability: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    minPower: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    maxPower: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    minDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                    maxDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>[] | null, any>;
            };
            readonly commands: {
                readonly powerAdjustRequest: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    power: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    duration: import("../../../tlv/TlvObject.js").FieldType<number>;
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.AdjustmentCause>;
                }>, void, any>;
                readonly cancelPowerAdjustRequest: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
            readonly events: {
                readonly powerAdjustStart: import("../../../cluster/Cluster.js").Event<void, any>;
                readonly powerAdjustEnd: import("../../../cluster/Cluster.js").Event<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.Cause>;
                    duration: import("../../../tlv/TlvObject.js").FieldType<number>;
                    energyUse: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly powerForecastReporting: true;
        };
        readonly component: {
            readonly attributes: {
                readonly forecast: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    forecastId: import("../../../tlv/TlvObject.js").FieldType<number>;
                    activeSlotNumber: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                    startTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                    endTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                    earliestStartTime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    latestEndTime: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    isPauseable: import("../../../tlv/TlvObject.js").FieldType<boolean>;
                    slots: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        minDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        maxDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        defaultDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        elapsedSlotTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        remainingSlotTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        slotIsPauseable: import("../../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                        minPauseDuration: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        maxPauseDuration: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        manufacturerEsaState: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        nominalPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        minPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        maxPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        nominalEnergy: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        costs: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                            costType: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.CostType>;
                            value: import("../../../tlv/TlvObject.js").FieldType<number>;
                            decimalPoints: import("../../../tlv/TlvObject.js").FieldType<number>;
                            currency: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        }>[]>;
                        minPowerAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        maxPowerAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        minDurationAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        maxDurationAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                    forecastUpdateReason: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.ForecastUpdateReason>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly stateForecastReporting: true;
        };
        readonly component: {
            readonly attributes: {
                readonly forecast: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    forecastId: import("../../../tlv/TlvObject.js").FieldType<number>;
                    activeSlotNumber: import("../../../tlv/TlvObject.js").FieldType<number | null>;
                    startTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                    endTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                    earliestStartTime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    latestEndTime: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    isPauseable: import("../../../tlv/TlvObject.js").FieldType<boolean>;
                    slots: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        minDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        maxDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        defaultDuration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        elapsedSlotTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        remainingSlotTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        slotIsPauseable: import("../../../tlv/TlvObject.js").OptionalFieldType<boolean>;
                        minPauseDuration: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        maxPauseDuration: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        manufacturerEsaState: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        nominalPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        minPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        maxPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        nominalEnergy: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        costs: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                            costType: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.CostType>;
                            value: import("../../../tlv/TlvObject.js").FieldType<number>;
                            decimalPoints: import("../../../tlv/TlvObject.js").FieldType<number>;
                            currency: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        }>[]>;
                        minPowerAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        maxPowerAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        minDurationAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        maxDurationAdjustment: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                    forecastUpdateReason: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.ForecastUpdateReason>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly powerAdjustment: true;
        };
        readonly component: {
            readonly attributes: {
                readonly optOutState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.OptOutState, any>;
            };
        };
    }, {
        readonly flags: {
            readonly startTimeAdjustment: true;
        };
        readonly component: {
            readonly attributes: {
                readonly optOutState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.OptOutState, any>;
            };
        };
    }, {
        readonly flags: {
            readonly pausable: true;
        };
        readonly component: {
            readonly attributes: {
                readonly optOutState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.OptOutState, any>;
            };
        };
    }, {
        readonly flags: {
            readonly forecastAdjustment: true;
        };
        readonly component: {
            readonly attributes: {
                readonly optOutState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.OptOutState, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constraintBasedAdjustment: true;
        };
        readonly component: {
            readonly attributes: {
                readonly optOutState: import("../../../cluster/Cluster.js").Attribute<DeviceEnergyManagement.OptOutState, any>;
            };
        };
    }, {
        readonly flags: {
            readonly pausable: true;
        };
        readonly component: {
            readonly commands: {
                readonly pauseRequest: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    duration: import("../../../tlv/TlvObject.js").FieldType<number>;
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.AdjustmentCause>;
                }>, void, any>;
                readonly resumeRequest: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
            readonly events: {
                readonly paused: import("../../../cluster/Cluster.js").Event<void, any>;
                readonly resumed: import("../../../cluster/Cluster.js").Event<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.Cause>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly startTimeAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly startTimeAdjustRequest: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    requestedStartTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.AdjustmentCause>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly forecastAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly modifyForecastRequest: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    forecastId: import("../../../tlv/TlvObject.js").FieldType<number>;
                    slotAdjustments: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        slotIndex: import("../../../tlv/TlvObject.js").FieldType<number>;
                        nominalPower: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                        duration: import("../../../tlv/TlvObject.js").FieldType<number>;
                    }>[]>;
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.AdjustmentCause>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constraintBasedAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly requestConstraintBasedForecast: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    constraints: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        startTime: import("../../../tlv/TlvObject.js").FieldType<number>;
                        duration: import("../../../tlv/TlvObject.js").FieldType<number>;
                        nominalPower: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        maximumEnergy: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        loadControl: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    }>[]>;
                    cause: import("../../../tlv/TlvObject.js").FieldType<DeviceEnergyManagement.AdjustmentCause>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly startTimeAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly cancelRequest: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly forecastAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly cancelRequest: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly constraintBasedAdjustment: true;
        };
        readonly component: {
            readonly commands: {
                readonly cancelRequest: import("../../../cluster/Cluster.js").Command<void, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly feature: false;
            readonly startTimeAdjustment: true;
            readonly stateForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly pausable: true;
            readonly stateForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly forecastAdjustment: true;
            readonly stateForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly constraintBasedAdjustment: true;
            readonly stateForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly startTimeAdjustment: true;
            readonly powerForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly pausable: true;
            readonly powerForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly forecastAdjustment: true;
            readonly powerForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly feature: false;
            readonly constraintBasedAdjustment: true;
            readonly powerForecastReporting: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly powerAdjustment: false;
            readonly powerForecastReporting: false;
            readonly stateForecastReporting: false;
            readonly startTimeAdjustment: false;
            readonly pausable: false;
            readonly forecastAdjustment: false;
            readonly constraintBasedAdjustment: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, DeviceEnergyManagementInterface>, DeviceEnergyManagementInterface>;
type DeviceEnergyManagementBehaviorType = InstanceType<typeof DeviceEnergyManagementBehavior>;
export interface DeviceEnergyManagementBehavior extends DeviceEnergyManagementBehaviorType {
}
type StateType = InstanceType<typeof DeviceEnergyManagementBehavior.State>;
export declare namespace DeviceEnergyManagementBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=DeviceEnergyManagementBehavior.d.ts.map