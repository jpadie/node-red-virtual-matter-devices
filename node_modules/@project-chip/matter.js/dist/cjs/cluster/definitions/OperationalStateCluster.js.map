{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OperationalStateCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, OptionalCommand, Event, EventPriority, OptionalEvent } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvUInt8, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OperationalState {\n    /**\n     * The OperationalStateStruct is used to indicate a possible state of the device.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.2\n     */\n    export const TlvOperationalStateStruct = TlvObject({\n        /**\n         * This shall be populated with a value from the OperationalStateEnum.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.2.1\n         */\n        operationalStateId: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall be present if the OperationalStateID is from the set reserved for Manufacturer Specific\n         * States, otherwise it shall NOT be present. If present, this shall contain a human-readable description of\n         * the operational state.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.2.2\n         */\n        operationalStateLabel: TlvOptionalField(1, TlvString.bound({ maxLength: 64 }))\n    });\n\n    /**\n     * The OperationalStateStruct is used to indicate a possible state of the device.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.2\n     */\n    export interface OperationalStateStruct extends TypeFromSchema<typeof TlvOperationalStateStruct> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.4\n     */\n    export const TlvErrorState = TlvObject({\n        /**\n         * This shall be populated with a value from the ErrorStateEnum.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.4.1\n         */\n        errorStateId: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall be present if the ErrorStateID is from the set reserved for Manufacturer Specific Errors,\n         * otherwise it shall NOT be present. If present, this shall contain a human-readable description of the\n         * ErrorStateID; e.g. for a manufacturer specific ErrorStateID of \"0x80\" the ErrorStateLabel may contain \"My\n         * special error\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.4.2\n         */\n        errorStateLabel: TlvOptionalField(1, TlvString.bound({ maxLength: 64 })),\n\n        /**\n         * This shall be a human-readable string that provides details about the error condition. As an example, if the\n         * ErrorStateID indicates that the device is a Robotic Vacuum that is stuck, the ErrorStateDetails contains\n         * \"left wheel blocked\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.4.3\n         */\n        errorStateDetails: TlvOptionalField(2, TlvString.bound({ maxLength: 64 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.4\n     */\n    export interface ErrorState extends TypeFromSchema<typeof TlvErrorState> {}\n\n    /**\n     * This command shall be supported by an implementation if any of the other commands defined by this cluster are\n     * supported (i.e. listed in the AcceptedCommandList global attribute). This command shall also be supported by an\n     * implementation of a derived cluster as a response to any commands that may be additionally defined therein.\n     *\n     * This command shall be generated in response to any of the Start, Stop, Pause, or Resume commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.5\n     */\n    export const TlvOperationalCommandResponse = TlvObject({\n        /**\n         * This shall indicate the success or otherwise of the attempted command invocation. On a successful invocation\n         * of the attempted command, the ErrorStateID shall be populated with NoError. Please see the individual\n         * command sections for additional specific requirements on population.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.5.1\n         */\n        commandResponseState: TlvField(0, TlvErrorState)\n    });\n\n    /**\n     * This command shall be supported by an implementation if any of the other commands defined by this cluster are\n     * supported (i.e. listed in the AcceptedCommandList global attribute). This command shall also be supported by an\n     * implementation of a derived cluster as a response to any commands that may be additionally defined therein.\n     *\n     * This command shall be generated in response to any of the Start, Stop, Pause, or Resume commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.5\n     */\n    export interface OperationalCommandResponse extends TypeFromSchema<typeof TlvOperationalCommandResponse> {}\n\n    /**\n     * Body of the OperationalState operationalError event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.1\n     */\n    export const TlvOperationalErrorEvent = TlvObject({ errorState: TlvField(0, TlvErrorState) });\n\n    /**\n     * Body of the OperationalState operationalError event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.1\n     */\n    export interface OperationalErrorEvent extends TypeFromSchema<typeof TlvOperationalErrorEvent> {}\n\n    /**\n     * Body of the OperationalState operationCompletion event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2\n     */\n    export const TlvOperationCompletionEvent = TlvObject({\n        /**\n         * This field provides an indication of the state at the end of the operation. This field shall have a value\n         * from the ErrorStateEnum set. A value of NoError indicates success, that is, no error has been detected.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2.1\n         */\n        completionErrorCode: TlvField(0, TlvUInt8),\n\n        /**\n         * The total operational time, in seconds, from when the operation was started via an initial Start command or\n         * manual action, until the operation completed. This includes any time spent while paused. There may be cases\n         * whereby the total operational time exceeds the maximum value that can be conveyed by this attribute, in such\n         * instances, this attribute shall be populated with null.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2.2\n         */\n        totalOperationalTime: TlvOptionalField(1, TlvNullable(TlvUInt32)),\n\n        /**\n         * The total time spent in the paused state, in seconds. There may be cases whereby the total paused time\n         * exceeds the maximum value that can be conveyed by this attribute, in such instances, this attribute shall be\n         * populated with null.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2.3\n         */\n        pausedTime: TlvOptionalField(2, TlvNullable(TlvUInt32))\n    });\n\n    /**\n     * Body of the OperationalState operationCompletion event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2\n     */\n    export interface OperationCompletionEvent extends TypeFromSchema<typeof TlvOperationCompletionEvent> {}\n\n    /**\n     * The following table defines the generally applicable ErrorState values.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.4.3.1\n     */\n    export enum GeneralErrorState {\n        /**\n         * The device is not in an error state\n         */\n        NoError = 0,\n\n        /**\n         * The device is unable to start or resume operation\n         */\n        UnableToStartOrResume = 1,\n\n        /**\n         * The device was unable to complete the current operation\n         */\n        UnableToCompleteOperation = 2,\n\n        /**\n         * The device cannot process the command in its current state\n         */\n        CommandInvalidInState = 3\n    }\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x60,\n        name: \"OperationalState\",\n        revision: 2,\n\n        attributes: {\n            /**\n             * Indicates a list of names of different phases that the device can go through for the selected function\n             * or mode. The list may not be in sequence order. For example in a washing machine this could include\n             * items such as \"pre-soak\", \"rinse\", and \"spin\". These phases are manufacturer specific and may change\n             * when a different function or mode is selected.\n             *\n             * A null value indicates that the device does not present phases during its operation. When this\n             * attribute\u2019s value is null, the CurrentPhase attribute shall also be set to null.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.1\n             */\n            phaseList: Attribute(0x0, TlvNullable(TlvArray(TlvString, { maxLength: 32 }))),\n\n            /**\n             * This attribute represents the current phase of operation being performed by the server. This shall be\n             * the positional index representing the value from the set provided in the PhaseList Attribute, where the\n             * first item in that list is an index of 0. Thus, this attribute shall have a maximum value that is\n             * \"length(PhaseList) - 1\".\n             *\n             * Null if the PhaseList attribute is null or if the PhaseList attribute is an empty list.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.2\n             */\n            currentPhase: Attribute(0x1, TlvNullable(TlvUInt8)),\n\n            /**\n             * Indicates the estimated time left before the operation is completed, in seconds. Changes to this value\n             * shall NOT be reported in a subscription (note the C Quality). A Client implementation may periodically\n             * poll this value to ensure alignment of any local rendering of the CountdownTime with the device provided\n             * value.\n             *\n             * A value of 0 means that the operation has completed.\n             *\n             * When this attribute is null, that represents that there is no time currently defined until operation\n             * completion. This may happen, for example, because no operation is in progress or because the completion\n             * time is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.3\n             */\n            countdownTime: OptionalAttribute(\n                0x2,\n                TlvNullable(TlvUInt32.bound({ max: 259200 })),\n                { omitChanges: true, default: null }\n            ),\n\n            /**\n             * This attribute describes the set of possible operational states that the device exposes. An operational\n             * state is a fundamental device state such as Running or Error. Details of the phase of a device when, for\n             * example, in a state of Running are provided by the CurrentPhase attribute.\n             *\n             * All devices shall, at a minimum, expose the set of states matching the commands that are also supported\n             * by the cluster instance, in addition to Error. The set of possible device states are defined in the\n             * OperationalStateEnum. A device type requiring implementation of this cluster shall define the set of\n             * states that are applicable to that specific device type.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.4\n             */\n            operationalStateList: Attribute(0x3, TlvArray(TlvOperationalStateStruct), { default: [] }),\n\n            /**\n             * This attribute specifies the current operational state of a device. This shall be populated with a valid\n             * OperationalStateID from the set of values in the OperationalStateList Attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.5\n             */\n            operationalState: Attribute(0x4, TlvUInt8),\n\n            /**\n             * This attribute shall specify the details of any current error condition being experienced on the device\n             * when the OperationalState attribute is populated with Error. Please see ErrorStateStruct for general\n             * requirements on the population of this attribute.\n             *\n             * When there is no error detected, this shall have an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.6\n             */\n            operationalError: Attribute(0x5, TlvErrorState)\n        },\n\n        commands: {\n            /**\n             * This command shall be supported if the device supports remotely pausing the operation. If this command\n             * is supported, the Resume command shall also be supported.\n             *\n             * On receipt of this command, the device shall pause its operation if it is possible based on the current\n             * function of the server. For example, if it is at a point where it is safe to do so and/or permitted, but\n             * can be restarted from the point at which pause occurred.\n             *\n             * If this command is received when already in the Paused state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that receives this command in any state which is not Pause-compatible shall respond\n             *\n             * with an OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take\n             * no further action.\n             *\n             * States are defined as Pause-compatible as follows:\n             *\n             *   \u2022 For states defined in this cluster specification, in Table 3, \u201CPause Compatibility\u201D.\n             *\n             *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n             *\n             *   \u2022 For manufacturer-specific states, by the manufacturer.\n             *\n             * A device that is unable to honor the Pause command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Paused.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * The following table defines the compatibility of this cluster\u2019s states with the Pause command.\n             *\n             * ### Table 3. Pause Compatibility\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.1\n             */\n            pause: OptionalCommand(0x0, TlvNoArguments, 0x4, TlvOperationalCommandResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely stopping the operation.\n             *\n             * On receipt of this command, the device shall stop its operation if it is at a position where it is safe\n             * to do so and/or permitted. Restart of the device following the receipt of the Stop command shall require\n             * attended operation unless remote start is allowed by the device type and any jurisdiction governing\n             * remote operation of the device.\n             *\n             * If this command is received when already in the Stopped state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that is unable to honor the Stop command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Stopped.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.2\n             */\n            stop: OptionalCommand(0x1, TlvNoArguments, 0x4, TlvOperationalCommandResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely starting the operation. If this command\n             * is supported, the 'Stop command shall also be supported.\n             *\n             * On receipt of this command, the device shall start its operation if it is safe to do so and the device\n             * is in an operational state from which it can be started. There may be either regulatory or\n             * manufacturer-imposed safety and security requirements that first necessitate some specific action at the\n             * device before a Start command can be honored. In such instances, a device shall respond with a status\n             * code of CommandInvalidInState if a Start command is received prior to the required on- device action.\n             *\n             * If this command is received when already in the Running state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that is unable to honor the Start command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Running.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.3\n             */\n            start: OptionalCommand(0x2, TlvNoArguments, 0x4, TlvOperationalCommandResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely resuming the operation. If this command\n             * is supported, the Pause command shall also be supported.\n             *\n             * On receipt of this command, the device shall resume its operation from the point it was at when it\n             * received the Pause command, or from the point when it was paused by means outside of this cluster (for\n             * example by manual button press).\n             *\n             * If this command is received when already in the Running state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that receives this command in any state which is not Resume-compatible shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take no\n             * further action.\n             *\n             * States are defined as Resume-compatible as follows:\n             *\n             *   \u2022 For states defined in this cluster specification, in Table 4, \u201CResume Compatibility\u201D.\n             *\n             *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n             *\n             *   \u2022 For manufacturer-specific states, by the manufacturer.\n             *\n             * The following table defines the compatibility of this cluster\u2019s states with the Resume command.\n             *\n             * ### Table 4. Resume Compatibility\n             *\n             * A device that is unable to honor the Resume command for any other reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to the most recent non-Error operational state prior to\n             *     entering the Paused state.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.4\n             */\n            resume: OptionalCommand(0x3, TlvNoArguments, 0x4, TlvOperationalCommandResponse)\n        },\n\n        events: {\n            /**\n             * This event is generated when a reportable error condition is detected. A device that generates this\n             * event shall also set the OperationalState attribute to Error, indicating an error condition.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.1\n             */\n            operationalError: Event(0x0, EventPriority.Critical, TlvOperationalErrorEvent),\n\n            /**\n             * This event is generated when the overall operation ends, successfully or otherwise. For example, the\n             * completion of a cleaning operation in a Robot Vacuum Cleaner, or the completion of a wash cycle in a\n             * Washing Machine.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2\n             */\n            operationCompletion: OptionalEvent(0x1, EventPriority.Info, TlvOperationCompletionEvent)\n        }\n    });\n\n    /**\n     * This cluster supports remotely monitoring and, where supported, changing the operational state of any device\n     * where a state machine is a part of the operation.\n     *\n     * This cluster defines common states, scoped to this cluster (e.g. Stopped, Running, Paused, Error). A derived\n     * cluster specification may define more states scoped to the derivation. Manufacturer specific states are\n     * supported in this cluster and any derived clusters thereof. When defined in a derived instance, such states are\n     * scoped to the derivation.\n     *\n     * Actual state transitions are dependent on both the implementation, and the requirements that may additionally be\n     * imposed by a derived cluster.\n     *\n     * An implementation that supports remotely starting its operation can make use of this cluster\u2019s Start command to\n     * do so. A device that supports remote pause or stop of its currently selected operation can similarly make use of\n     * this cluster\u2019s Pause and Stop commands to do so. The ability to remotely pause or stop is independent of how the\n     * operation was started (for example, an operation started by using a manual button press can be stopped by using\n     * a Stop command if the device supports remotely stopping the operation).\n     *\n     * Additionally, this cluster provides events for monitoring the operational state of the device.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type OperationalStateCluster = OperationalState.Cluster;\nexport const OperationalStateCluster = OperationalState.Cluster;\nClusterRegistry.register(OperationalState.Complete);\n"],
  "mappings": "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",
  "names": ["OperationalState", "GeneralErrorState"]
}
