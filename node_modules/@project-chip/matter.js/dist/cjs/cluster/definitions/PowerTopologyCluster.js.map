{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/PowerTopologyCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, Attribute } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace PowerTopology {\n    /**\n     * These are optional features supported by PowerTopologyCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.8.4\n     */\n    export enum Feature {\n        /**\n         * NodeTopology (NODE)\n         *\n         * This endpoint provides or consumes power to/from the entire node\n         */\n        NodeTopology = \"NodeTopology\",\n\n        /**\n         * TreeTopology (TREE)\n         *\n         * This endpoint provides or consumes power to/from itself and its child endpoints\n         */\n        TreeTopology = \"TreeTopology\",\n\n        /**\n         * SetTopology (SET)\n         *\n         * This endpoint provides or consumes power to/from a specified set of endpoints\n         */\n        SetTopology = \"SetTopology\",\n\n        /**\n         * DynamicPowerFlow (DYPF)\n         *\n         * The specified set of endpoints may change\n         */\n        DynamicPowerFlow = \"DynamicPowerFlow\"\n    }\n\n    /**\n     * A PowerTopologyCluster supports these elements if it supports feature SetTopology.\n     */\n    export const SetTopologyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the list of endpoints capable of providing power to and/or consuming power from the endpoint\n             * hosting this server.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.8.5.1\n             */\n            availableEndpoints: FixedAttribute(0x0, TlvArray(TlvEndpointNumber, { maxLength: 20 }), { default: [] })\n        }\n    });\n\n    /**\n     * A PowerTopologyCluster supports these elements if it supports feature DynamicPowerFlow.\n     */\n    export const DynamicPowerFlowComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the current list of endpoints currently providing or consuming power to or from the endpoint\n             * hosting this server. This list shall be a subset of the value of the AvailableEndpoints attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.8.5.2\n             */\n            activeEndpoints: Attribute(\n                0x1,\n                TlvArray(TlvEndpointNumber, { maxLength: 20 }),\n                { persistent: true, default: [] }\n            )\n        }\n    });\n\n    /**\n     * These elements and properties are present in all PowerTopology clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x9c,\n        name: \"PowerTopology\",\n        revision: 1,\n\n        features: {\n            /**\n             * NodeTopology\n             *\n             * This endpoint provides or consumes power to/from the entire node\n             */\n            nodeTopology: BitFlag(0),\n\n            /**\n             * TreeTopology\n             *\n             * This endpoint provides or consumes power to/from itself and its child endpoints\n             */\n            treeTopology: BitFlag(1),\n\n            /**\n             * SetTopology\n             *\n             * This endpoint provides or consumes power to/from a specified set of endpoints\n             */\n            setTopology: BitFlag(2),\n\n            /**\n             * DynamicPowerFlow\n             *\n             * The specified set of endpoints may change\n             */\n            dynamicPowerFlow: BitFlag(3)\n        },\n\n        /**\n         * This metadata controls which PowerTopologyCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { setTopology: true }, component: SetTopologyComponent },\n            { flags: { dynamicPowerFlow: true }, component: DynamicPowerFlowComponent },\n            { flags: { dynamicPowerFlow: true, setTopology: false }, component: false },\n            { flags: { nodeTopology: true, treeTopology: true }, component: false },\n            { flags: { nodeTopology: true, setTopology: true }, component: false },\n            { flags: { treeTopology: true, setTopology: true }, component: false },\n            { flags: { nodeTopology: false, treeTopology: false, setTopology: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * The Power Topology Cluster provides a mechanism for expressing how power is flowing between endpoints.\n     *\n     * Per the Matter specification you cannot use {@link PowerTopologyCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.8\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const SET = { setTopology: true };\n    const DYPF = { dynamicPowerFlow: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            availableEndpoints: MutableCluster.AsConditional(\n                SetTopologyComponent.attributes.availableEndpoints,\n                { mandatoryIf: [SET] }\n            ),\n            activeEndpoints: MutableCluster.AsConditional(\n                DynamicPowerFlowComponent.attributes.activeEndpoints,\n                { mandatoryIf: [DYPF] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all PowerTopology features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type PowerTopologyCluster = PowerTopology.Cluster;\nexport const PowerTopologyCluster = PowerTopology.Cluster;\nClusterRegistry.register(PowerTopology.Complete);\n"],
  "mappings": "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",
  "names": ["PowerTopology", "Feature"]
}
