"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OvenModeCluster_exports = {};
__export(OvenModeCluster_exports, {
  OvenMode: () => OvenMode,
  OvenModeCluster: () => OvenModeCluster
});
module.exports = __toCommonJS(OvenModeCluster_exports);
var import_MutableCluster = require("../mutation/MutableCluster.js");
var import_Cluster = require("../Cluster.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_TlvNullable = require("../../tlv/TlvNullable.js");
var import_BitmapSchema = require("../../schema/BitmapSchema.js");
var import_TlvArray = require("../../tlv/TlvArray.js");
var import_ModeBaseCluster = require("./ModeBaseCluster.js");
var import_ClusterRegistry = require("../ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var OvenMode;
((OvenMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = OvenMode2.Feature || (OvenMode2.Feature = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["Bake"] = 16384] = "Bake";
    ModeTag2[ModeTag2["Convection"] = 16385] = "Convection";
    ModeTag2[ModeTag2["Grill"] = 16386] = "Grill";
    ModeTag2[ModeTag2["Roast"] = 16387] = "Roast";
    ModeTag2[ModeTag2["Clean"] = 16388] = "Clean";
    ModeTag2[ModeTag2["ConvectionBake"] = 16389] = "ConvectionBake";
    ModeTag2[ModeTag2["ConvectionRoast"] = 16390] = "ConvectionRoast";
    ModeTag2[ModeTag2["Warming"] = 16391] = "Warming";
    ModeTag2[ModeTag2["Proofing"] = 16392] = "Proofing";
    ModeTag2[ModeTag2["Steam"] = 16393] = "Steam";
  })(ModeTag = OvenMode2.ModeTag || (OvenMode2.ModeTag = {}));
  OvenMode2.OnOffComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same
       * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the
       * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.5
       */
      onMode: (0, import_Cluster.WritableAttribute)(3, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt8), { persistent: true, default: null })
    }
  });
  OvenMode2.Base = import_MutableCluster.MutableCluster.Component({
    id: 73,
    name: "OvenMode",
    revision: 1,
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
       * same endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
       */
      onOff: (0, import_BitmapSchema.BitFlag)(0)
    },
    attributes: {
      /**
       * This attribute shall contain the list of supported modes that may be selected for the CurrentMode
       * attribute. Each item in this list represents a unique mode as indicated by the Mode field of the
       * ModeOptionStruct.
       *
       * Each entry in this list shall have a unique value for the Mode field. Each entry in this list shall have
       * a unique value for the Label field.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.2
       */
      supportedModes: (0, import_Cluster.FixedAttribute)(0, (0, import_TlvArray.TlvArray)(import_ModeBaseCluster.ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 })),
      /**
       * Indicates the current mode of the server.
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * The value of this attribute may change at any time via an out-of-band interaction outside of the server,
       * such as interactions with a user interface, via internal mode changes due to autonomously progressing
       * through a sequence of operations, on system time-outs or idle delays, or via interactions coming from a
       * fabric other than the one which last executed a ChangeToMode.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.3
       */
      currentMode: (0, import_Cluster.Attribute)(1, import_TlvNumber.TlvUInt8, { scene: true, persistent: true }),
      /**
       * Indicates the desired startup mode for the server when it is supplied with power.
       *
       * If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, when the
       * server is powered up, except in the case when the OnMode attribute overrides the StartUpMode attribute
       * (see OnModeWithPowerUp).
       *
       * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode
       * attribute shall return to its value prior to the restart.
       *
       * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
       *
       * If this attribute is not implemented, or is set to the null value, it shall have no effect.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.4
       */
      startUpMode: (0, import_Cluster.OptionalWritableAttribute)(2, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt8), { persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
       */
      changeToMode: (0, import_Cluster.Command)(0, import_ModeBaseCluster.ModeBase.TlvChangeToModeRequest, 0, import_Cluster.TlvNoResponse)
    },
    /**
     * This metadata controls which OvenModeCluster elements matter.js activates for specific feature combinations.
     */
    extensions: import_MutableCluster.MutableCluster.Extensions({ flags: { onOff: true }, component: OvenMode2.OnOffComponent })
  });
  OvenMode2.ClusterInstance = (0, import_MutableCluster.MutableCluster)(OvenMode2.Base);
  OvenMode2.Cluster = OvenMode2.ClusterInstance;
  const DEPONOFF = { onOff: true };
  OvenMode2.CompleteInstance = (0, import_MutableCluster.MutableCluster)({
    id: OvenMode2.Cluster.id,
    name: OvenMode2.Cluster.name,
    revision: OvenMode2.Cluster.revision,
    features: OvenMode2.Cluster.features,
    attributes: {
      ...OvenMode2.Cluster.attributes,
      onMode: import_MutableCluster.MutableCluster.AsConditional(OvenMode2.OnOffComponent.attributes.onMode, { mandatoryIf: [DEPONOFF] })
    },
    commands: OvenMode2.Cluster.commands
  });
  OvenMode2.Complete = OvenMode2.CompleteInstance;
})(OvenMode || (OvenMode = {}));
const OvenModeCluster = OvenMode.Cluster;
import_ClusterRegistry.ClusterRegistry.register(OvenMode.Complete);
//# sourceMappingURL=OvenModeCluster.js.map
