{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/PowerSourceCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    OptionalAttribute,\n    FixedAttribute,\n    OptionalFixedAttribute,\n    OptionalEvent,\n    EventPriority,\n    Attribute\n} from \"../Cluster.js\";\nimport { TlvUInt32, TlvUInt16, TlvEnum, TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace PowerSource {\n    /**\n     * These are optional features supported by PowerSourceCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.4\n     */\n    export enum Feature {\n        /**\n         * Wired (WIRED)\n         *\n         * A wired power source\n         */\n        Wired = \"Wired\",\n\n        /**\n         * Battery (BAT)\n         *\n         * A battery power source\n         */\n        Battery = \"Battery\",\n\n        /**\n         * Rechargeable (RECHG)\n         *\n         * A rechargeable battery power source\n         */\n        Rechargeable = \"Rechargeable\",\n\n        /**\n         * Replaceable (REPLC)\n         *\n         * A replaceable battery power source\n         */\n        Replaceable = \"Replaceable\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.5\n     */\n    export enum WiredCurrentType {\n        /**\n         * Indicates AC current\n         */\n        Ac = 0,\n\n        /**\n         * Indicates DC current\n         */\n        Dc = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.1\n     */\n    export enum WiredFault {\n        /**\n         * The Node detects an unspecified fault on this wired power source.\n         */\n        Unspecified = 0,\n\n        /**\n         * The Node detects the supplied voltage is above maximum supported value for this wired power source.\n         */\n        OverVoltage = 1,\n\n        /**\n         * The Node detects the supplied voltage is below maximum supported value for this wired power source.\n         */\n        UnderVoltage = 2\n    }\n\n    /**\n     * Body of the PowerSource wiredFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.1\n     */\n    export const TlvWiredFaultChangeEvent = TlvObject({\n        /**\n         * This field shall represent the set of faults currently detected, as per ActiveWiredFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.1.1\n         */\n        current: TlvField(0, TlvArray(TlvEnum<WiredFault>(), { maxLength: 8 })),\n\n        /**\n         * This field shall represent the set of faults detected prior to this change event, as per ActiveWiredFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.1.2\n         */\n        previous: TlvField(1, TlvArray(TlvEnum<WiredFault>(), { maxLength: 8 }))\n    });\n\n    /**\n     * Body of the PowerSource wiredFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.1\n     */\n    export interface WiredFaultChangeEvent extends TypeFromSchema<typeof TlvWiredFaultChangeEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.6\n     */\n    export enum BatChargeLevel {\n        /**\n         * Charge level is nominal\n         */\n        Ok = 0,\n\n        /**\n         * Charge level is low, intervention may soon be required.\n         */\n        Warning = 1,\n\n        /**\n         * Charge level is critical, immediate intervention is required\n         */\n        Critical = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.7\n     */\n    export enum BatReplaceability {\n        /**\n         * The replaceability is unspecified or unknown.\n         */\n        Unspecified = 0,\n\n        /**\n         * The battery is not replaceable.\n         */\n        NotReplaceable = 1,\n\n        /**\n         * The battery is replaceable by the user or customer.\n         */\n        UserReplaceable = 2,\n\n        /**\n         * The battery is replaceable by an authorized factory technician.\n         */\n        FactoryReplaceable = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.2\n     */\n    export enum BatFault {\n        /**\n         * The Node detects an unspecified fault on this battery power source.\n         */\n        Unspecified = 0,\n\n        /**\n         * The Node detects the temperature of this battery power source is above ideal operating conditions.\n         */\n        OverTemp = 1,\n\n        /**\n         * The Node detects the temperature of this battery power source is below ideal operating conditions.\n         */\n        UnderTemp = 2\n    }\n\n    /**\n     * Body of the PowerSource batFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.2\n     */\n    export const TlvBatFaultChangeEvent = TlvObject({\n        /**\n         * This field shall represent the set of faults currently detected, as per ActiveBatFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.2.1\n         */\n        current: TlvField(0, TlvArray(TlvEnum<BatFault>(), { maxLength: 8 })),\n\n        /**\n         * This field shall represent the set of faults detected prior to this change event, as per ActiveBatFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.2.2\n         */\n        previous: TlvField(1, TlvArray(TlvEnum<BatFault>(), { maxLength: 8 }))\n    });\n\n    /**\n     * Body of the PowerSource batFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.2\n     */\n    export interface BatFaultChangeEvent extends TypeFromSchema<typeof TlvBatFaultChangeEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.8\n     */\n    export enum BatCommonDesignation {\n        /**\n         * Common type is unknown or unspecified\n         */\n        Unspecified = 0,\n\n        /**\n         * Common type is as specified\n         */\n        Aaa = 1,\n\n        /**\n         * Common type is as specified\n         */\n        Aa = 2,\n\n        /**\n         * Common type is as specified\n         */\n        C = 3,\n\n        /**\n         * Common type is as specified\n         */\n        D = 4,\n\n        /**\n         * Common type is as specified\n         */\n        \"4V5\" = 5,\n\n        /**\n         * Common type is as specified\n         */\n        \"6V0\" = 6,\n\n        /**\n         * Common type is as specified\n         */\n        \"9V0\" = 7,\n\n        /**\n         * Common type is as specified\n         */\n        \"12Aa\" = 8,\n\n        /**\n         * Common type is as specified\n         */\n        Aaaa = 9,\n\n        /**\n         * Common type is as specified\n         */\n        A = 10,\n\n        /**\n         * Common type is as specified\n         */\n        B = 11,\n\n        /**\n         * Common type is as specified\n         */\n        F = 12,\n\n        /**\n         * Common type is as specified\n         */\n        N = 13,\n\n        /**\n         * Common type is as specified\n         */\n        No6 = 14,\n\n        /**\n         * Common type is as specified\n         */\n        SubC = 15,\n\n        /**\n         * Common type is as specified\n         */\n        A23 = 16,\n\n        /**\n         * Common type is as specified\n         */\n        A27 = 17,\n\n        /**\n         * Common type is as specified\n         */\n        Ba5800 = 18,\n\n        /**\n         * Common type is as specified\n         */\n        Duplex = 19,\n\n        /**\n         * Common type is as specified\n         */\n        \"4Sr44\" = 20,\n\n        /**\n         * Common type is as specified\n         */\n        E523 = 21,\n\n        /**\n         * Common type is as specified\n         */\n        E531 = 22,\n\n        /**\n         * Common type is as specified\n         */\n        \"15V0\" = 23,\n\n        /**\n         * Common type is as specified\n         */\n        \"22V5\" = 24,\n\n        /**\n         * Common type is as specified\n         */\n        \"30V0\" = 25,\n\n        /**\n         * Common type is as specified\n         */\n        \"45V0\" = 26,\n\n        /**\n         * Common type is as specified\n         */\n        \"67V5\" = 27,\n\n        /**\n         * Common type is as specified\n         */\n        J = 28,\n\n        /**\n         * Common type is as specified\n         */\n        Cr123A = 29,\n\n        /**\n         * Common type is as specified\n         */\n        Cr2 = 30,\n\n        /**\n         * Common type is as specified\n         */\n        \"2Cr5\" = 31,\n\n        /**\n         * Common type is as specified\n         */\n        CrP2 = 32,\n\n        /**\n         * Common type is as specified\n         */\n        CrV3 = 33,\n\n        /**\n         * Common type is as specified\n         */\n        Sr41 = 34,\n\n        /**\n         * Common type is as specified\n         */\n        Sr43 = 35,\n\n        /**\n         * Common type is as specified\n         */\n        Sr44 = 36,\n\n        /**\n         * Common type is as specified\n         */\n        Sr45 = 37,\n\n        /**\n         * Common type is as specified\n         */\n        Sr48 = 38,\n\n        /**\n         * Common type is as specified\n         */\n        Sr54 = 39,\n\n        /**\n         * Common type is as specified\n         */\n        Sr55 = 40,\n\n        /**\n         * Common type is as specified\n         */\n        Sr57 = 41,\n\n        /**\n         * Common type is as specified\n         */\n        Sr58 = 42,\n\n        /**\n         * Common type is as specified\n         */\n        Sr59 = 43,\n\n        /**\n         * Common type is as specified\n         */\n        Sr60 = 44,\n\n        /**\n         * Common type is as specified\n         */\n        Sr63 = 45,\n\n        /**\n         * Common type is as specified\n         */\n        Sr64 = 46,\n\n        /**\n         * Common type is as specified\n         */\n        Sr65 = 47,\n\n        /**\n         * Common type is as specified\n         */\n        Sr66 = 48,\n\n        /**\n         * Common type is as specified\n         */\n        Sr67 = 49,\n\n        /**\n         * Common type is as specified\n         */\n        Sr68 = 50,\n\n        /**\n         * Common type is as specified\n         */\n        Sr69 = 51,\n\n        /**\n         * Common type is as specified\n         */\n        Sr516 = 52,\n\n        /**\n         * Common type is as specified\n         */\n        Sr731 = 53,\n\n        /**\n         * Common type is as specified\n         */\n        Sr712 = 54,\n\n        /**\n         * Common type is as specified\n         */\n        Lr932 = 55,\n\n        /**\n         * Common type is as specified\n         */\n        A5 = 56,\n\n        /**\n         * Common type is as specified\n         */\n        A10 = 57,\n\n        /**\n         * Common type is as specified\n         */\n        A13 = 58,\n\n        /**\n         * Common type is as specified\n         */\n        A312 = 59,\n\n        /**\n         * Common type is as specified\n         */\n        A675 = 60,\n\n        /**\n         * Common type is as specified\n         */\n        Ac41E = 61,\n\n        /**\n         * Common type is as specified\n         */\n        E10180 = 62,\n\n        /**\n         * Common type is as specified\n         */\n        E10280 = 63,\n\n        /**\n         * Common type is as specified\n         */\n        E10440 = 64,\n\n        /**\n         * Common type is as specified\n         */\n        E14250 = 65,\n\n        /**\n         * Common type is as specified\n         */\n        E14430 = 66,\n\n        /**\n         * Common type is as specified\n         */\n        E14500 = 67,\n\n        /**\n         * Common type is as specified\n         */\n        E14650 = 68,\n\n        /**\n         * Common type is as specified\n         */\n        E15270 = 69,\n\n        /**\n         * Common type is as specified\n         */\n        E16340 = 70,\n\n        /**\n         * Common type is as specified\n         */\n        Rcr123A = 71,\n\n        /**\n         * Common type is as specified\n         */\n        E17500 = 72,\n\n        /**\n         * Common type is as specified\n         */\n        E17670 = 73,\n\n        /**\n         * Common type is as specified\n         */\n        E18350 = 74,\n\n        /**\n         * Common type is as specified\n         */\n        E18500 = 75,\n\n        /**\n         * Common type is as specified\n         */\n        E18650 = 76,\n\n        /**\n         * Common type is as specified\n         */\n        E19670 = 77,\n\n        /**\n         * Common type is as specified\n         */\n        E25500 = 78,\n\n        /**\n         * Common type is as specified\n         */\n        E26650 = 79,\n\n        /**\n         * Common type is as specified\n         */\n        E32600 = 80\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.9\n     */\n    export enum BatApprovedChemistry {\n        /**\n         * Cell chemistry is unspecified or unknown\n         */\n        Unspecified = 0,\n\n        /**\n         * Cell chemistry is alkaline\n         */\n        Alkaline = 1,\n\n        /**\n         * Cell chemistry is lithium carbon fluoride\n         */\n        LithiumCarbonFluoride = 2,\n\n        /**\n         * Cell chemistry is lithium chromium oxide\n         */\n        LithiumChromiumOxide = 3,\n\n        /**\n         * Cell chemistry is lithium copper oxide\n         */\n        LithiumCopperOxide = 4,\n\n        /**\n         * Cell chemistry is lithium iron disulfide\n         */\n        LithiumIronDisulfide = 5,\n\n        /**\n         * Cell chemistry is lithium manganese dioxide\n         */\n        LithiumManganeseDioxide = 6,\n\n        /**\n         * Cell chemistry is lithium thionyl chloride\n         */\n        LithiumThionylChloride = 7,\n\n        /**\n         * Cell chemistry is magnesium\n         */\n        Magnesium = 8,\n\n        /**\n         * Cell chemistry is mercury oxide\n         */\n        MercuryOxide = 9,\n\n        /**\n         * Cell chemistry is nickel oxyhydride\n         */\n        NickelOxyhydride = 10,\n\n        /**\n         * Cell chemistry is silver oxide\n         */\n        SilverOxide = 11,\n\n        /**\n         * Cell chemistry is zinc air\n         */\n        ZincAir = 12,\n\n        /**\n         * Cell chemistry is zinc carbon\n         */\n        ZincCarbon = 13,\n\n        /**\n         * Cell chemistry is zinc chloride\n         */\n        ZincChloride = 14,\n\n        /**\n         * Cell chemistry is zinc manganese dioxide\n         */\n        ZincManganeseDioxide = 15,\n\n        /**\n         * Cell chemistry is lead acid\n         */\n        LeadAcid = 16,\n\n        /**\n         * Cell chemistry is lithium cobalt oxide\n         */\n        LithiumCobaltOxide = 17,\n\n        /**\n         * Cell chemistry is lithium ion\n         */\n        LithiumIon = 18,\n\n        /**\n         * Cell chemistry is lithium ion polymer\n         */\n        LithiumIonPolymer = 19,\n\n        /**\n         * Cell chemistry is lithium iron phosphate\n         */\n        LithiumIronPhosphate = 20,\n\n        /**\n         * Cell chemistry is lithium sulfur\n         */\n        LithiumSulfur = 21,\n\n        /**\n         * Cell chemistry is lithium titanate\n         */\n        LithiumTitanate = 22,\n\n        /**\n         * Cell chemistry is nickel cadmium\n         */\n        NickelCadmium = 23,\n\n        /**\n         * Cell chemistry is nickel hydrogen\n         */\n        NickelHydrogen = 24,\n\n        /**\n         * Cell chemistry is nickel iron\n         */\n        NickelIron = 25,\n\n        /**\n         * Cell chemistry is nickel metal hydride\n         */\n        NickelMetalHydride = 26,\n\n        /**\n         * Cell chemistry is nickel zinc\n         */\n        NickelZinc = 27,\n\n        /**\n         * Cell chemistry is silver zinc\n         */\n        SilverZinc = 28,\n\n        /**\n         * Cell chemistry is sodium ion\n         */\n        SodiumIon = 29,\n\n        /**\n         * Cell chemistry is sodium sulfur\n         */\n        SodiumSulfur = 30,\n\n        /**\n         * Cell chemistry is zinc bromide\n         */\n        ZincBromide = 31,\n\n        /**\n         * Cell chemistry is zinc cerium\n         */\n        ZincCerium = 32\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.10\n     */\n    export enum BatChargeState {\n        /**\n         * Unable to determine the charging state\n         */\n        Unknown = 0,\n\n        /**\n         * The battery is charging\n         */\n        IsCharging = 1,\n\n        /**\n         * The battery is at full charge\n         */\n        IsAtFullCharge = 2,\n\n        /**\n         * The battery is not charging\n         */\n        IsNotCharging = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.3\n     */\n    export enum BatChargeFault {\n        /**\n         * The Node detects an unspecified fault on this battery source.\n         */\n        Unspecified = 0,\n\n        /**\n         * The Node detects the ambient temperature is above the nominal range for this battery source.\n         */\n        AmbientTooHot = 1,\n\n        /**\n         * The Node detects the ambient temperature is below the nominal range for this battery source.\n         */\n        AmbientTooCold = 2,\n\n        /**\n         * The Node detects the temperature of this battery source is above the nominal range.\n         */\n        BatteryTooHot = 3,\n\n        /**\n         * The Node detects the temperature of this battery source is below the nominal range.\n         */\n        BatteryTooCold = 4,\n\n        /**\n         * The Node detects this battery source is not present.\n         */\n        BatteryAbsent = 5,\n\n        /**\n         * The Node detects this battery source is over voltage.\n         */\n        BatteryOverVoltage = 6,\n\n        /**\n         * The Node detects this battery source is under voltage.\n         */\n        BatteryUnderVoltage = 7,\n\n        /**\n         * The Node detects the charger for this battery source is over voltage.\n         */\n        ChargerOverVoltage = 8,\n\n        /**\n         * The Node detects the charger for this battery source is under voltage.\n         */\n        ChargerUnderVoltage = 9,\n\n        /**\n         * The Node detects a charging safety timeout for this battery source.\n         */\n        SafetyTimeout = 10\n    }\n\n    /**\n     * Body of the PowerSource batChargeFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.3\n     */\n    export const TlvBatChargeFaultChangeEvent = TlvObject({\n        /**\n         * This field shall represent the set of faults currently detected, as per ActiveBatChargeFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.3.1\n         */\n        current: TlvField(0, TlvArray(TlvEnum<BatChargeFault>(), { maxLength: 16 })),\n\n        /**\n         * This field shall represent the set of faults detected prior to this change event, as per\n         * ActiveBatChargeFaults.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.3.2\n         */\n        previous: TlvField(1, TlvArray(TlvEnum<BatChargeFault>(), { maxLength: 16 }))\n    });\n\n    /**\n     * Body of the PowerSource batChargeFaultChange event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.3\n     */\n    export interface BatChargeFaultChangeEvent extends TypeFromSchema<typeof TlvBatChargeFaultChangeEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.6.4\n     */\n    export enum PowerSourceStatus {\n        /**\n         * Indicate the source status is not specified\n         */\n        Unspecified = 0,\n\n        /**\n         * Indicate the source is available and currently supplying power\n         */\n        Active = 1,\n\n        /**\n         * Indicate the source is available, but is not currently supplying power\n         */\n        Standby = 2,\n\n        /**\n         * Indicate the source is not currently available to supply power\n         */\n        Unavailable = 3\n    }\n\n    /**\n     * A PowerSourceCluster supports these elements if it supports feature Wired.\n     */\n    export const WiredComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the assessed RMS or DC voltage currently provided by the hard-wired source, in mV\n             * (millivolts). A value of NULL shall indicate the Node is currently unable to assess the value. If the\n             * wired source is not connected, but the Node is still able to assess a value, then the assessed value may\n             * be reported.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.4\n             */\n            wiredAssessedInputVoltage: OptionalAttribute(0x3, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates the assessed frequency of the voltage, currently provided by the hard-wired source, in Hz. A\n             * value of NULL shall indicate the Node is currently unable to assess the value. If the wired source is\n             * not connected, but the Node is still able to assess a value, then the assessed value may be reported.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.5\n             */\n            wiredAssessedInputFrequency: OptionalAttribute(0x4, TlvNullable(TlvUInt16), { omitChanges: true }),\n\n            /**\n             * Indicates the type of current the Node expects to be provided by the hard- wired source as specified in\n             * WiredCurrentTypeEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.6\n             */\n            wiredCurrentType: FixedAttribute(0x5, TlvEnum<WiredCurrentType>()),\n\n            /**\n             * Indicates the assessed instantaneous current draw of the Node on the hard- wired source, in mA\n             * (milliamps). A value of NULL shall indicate the Node is currently unable to assess the value. If the\n             * wired source is not connected, but the Node is still able to assess a value, then the assessed value may\n             * be reported.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.7\n             */\n            wiredAssessedCurrent: OptionalAttribute(0x6, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates the nominal voltage, printed as part of the Node\u2019s regulatory compliance label in mV\n             * (millivolts), expected to be provided by the hard-wired source.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.8\n             */\n            wiredNominalVoltage: OptionalFixedAttribute(0x7, TlvUInt32),\n\n            /**\n             * Indicates the maximum current, printed as part of the Node\u2019s regulatory compliance label in mA\n             * (milliamps), expected to be provided by the hard-wired source.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.9\n             */\n            wiredMaximumCurrent: OptionalFixedAttribute(0x8, TlvUInt32),\n\n            /**\n             * Indicates if the Node detects that the hard-wired power source is properly connected.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.10\n             */\n            wiredPresent: OptionalAttribute(0x9, TlvBoolean),\n\n            /**\n             * Indicates the set of wired faults currently detected by the Node on this power source. This set is\n             * represented as a list of WiredFaultEnum. When the Node detects a fault has been raised, the appropriate\n             * WiredFaultEnum value shall be added to this list, provided it is not already present. This list shall\n             * NOT contain more than one instance of a specific WiredFaultEnum value. When the Node detects all\n             * conditions contributing to a fault have been cleared, the corresponding WiredFaultEnum value shall be\n             * removed from this list. An empty list shall indicate there are currently no active faults. The order of\n             * this list SHOULD have no significance. Clients interested in monitoring changes in active faults may\n             * subscribe to this attribute, or they may subscribe to WiredFaultChange.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.11\n             */\n            activeWiredFaults: OptionalAttribute(\n                0xa,\n                TlvArray(TlvEnum<WiredFault>(), { maxLength: 8 }),\n                { default: [] }\n            )\n        },\n\n        events: {\n            /**\n             * The WiredFaultChange Event shall be generated when the set of wired faults currently detected by the\n             * Node on this wired power source changes. This event shall correspond to a change in value of\n             * ActiveWiredFaults.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.1\n             */\n            wiredFaultChange: OptionalEvent(0x0, EventPriority.Info, TlvWiredFaultChangeEvent)\n        }\n    });\n\n    /**\n     * A PowerSourceCluster supports these elements if it supports feature Battery.\n     */\n    export const BatteryComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the currently measured output voltage of the battery in mV (millivolts). A value of NULL shall\n             * indicate the Node is currently unable to assess the value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.12\n             */\n            batVoltage: OptionalAttribute(0xb, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates the estimated percentage of battery charge remaining until the battery will no longer be able\n             * to provide power to the Node. Values are expressed in half percent units, ranging from 0 to 200. E.g. a\n             * value of 48 is equivalent to 24%. A value of NULL shall indicate the Node is currently unable to assess\n             * the value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.13\n             */\n            batPercentRemaining: OptionalAttribute(\n                0xc,\n                TlvNullable(TlvUInt8.bound({ max: 200 })),\n                { omitChanges: true }\n            ),\n\n            /**\n             * Indicates the estimated time in seconds before the battery will no longer be able to provide power to\n             * the Node. A value of NULL shall indicate the Node is currently unable to assess the value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.14\n             */\n            batTimeRemaining: OptionalAttribute(0xd, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates a coarse ranking of the charge level of the battery, used to indicate when intervention is\n             * required as specified in BatChargeLevelEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.15\n             */\n            batChargeLevel: Attribute(0xe, TlvEnum<BatChargeLevel>()),\n\n            /**\n             * Indicates if the battery needs to be replaced. Replacement may be simple routine maintenance, such as\n             * with a single use, non-rechargeable cell. Replacement, however, may also indicate end of life, or\n             * serious fault with a rechargeable or even non-replaceable cell.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.16\n             */\n            batReplacementNeeded: Attribute(0xf, TlvBoolean),\n\n            /**\n             * Indicates the replaceability of the battery as specified in BatReplaceabilityEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.17\n             */\n            batReplaceability: FixedAttribute(0x10, TlvEnum<BatReplaceability>()),\n\n            /**\n             * Indicates whether the Node detects that the batteries are properly installed.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.18\n             */\n            batPresent: OptionalAttribute(0x11, TlvBoolean),\n\n            /**\n             * Indicates the set of battery faults currently detected by the Node on this power source. This set is\n             * represented as a list of BatFaultEnum. When the Node detects a fault has been raised, the appropriate\n             * BatFaultEnum value shall be added to this list, provided it is not already present. This list shall NOT\n             * contain more than one instance of a specific BatFaultEnum value. When the Node detects all conditions\n             * contributing to a fault have been cleared, the corresponding BatFaultEnum value shall be removed from\n             * this list. An empty list shall indicate there are currently no active faults. The order of this list\n             * SHOULD have no significance. Clients interested in monitoring changes in active faults may subscribe to\n             * this attribute, or they may subscribe to BatFaultChange.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.19\n             */\n            activeBatFaults: OptionalAttribute(0x12, TlvArray(TlvEnum<BatFault>(), { maxLength: 8 }), { default: [] })\n        },\n\n        events: {\n            /**\n             * The BatFaultChange Event shall be generated when the set of battery faults currently detected by the\n             * Node on this battery power source changes. This event shall correspond to a change in value of\n             * ActiveBatFaults.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.2\n             */\n            batFaultChange: OptionalEvent(0x1, EventPriority.Info, TlvBatFaultChangeEvent)\n        }\n    });\n\n    /**\n     * A PowerSourceCluster supports these elements if it supports feature Replaceable.\n     */\n    export const ReplaceableComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall provide a user-facing description of this battery, which SHOULD contain information\n             * required to identify a replacement, such as form factor, chemistry or preferred manufacturer.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.20\n             */\n            batReplacementDescription: FixedAttribute(0x13, TlvString.bound({ maxLength: 60 })),\n\n            /**\n             * Indicates the ID of the common or colloquial designation of the battery, as specified in\n             * BatCommonDesignationEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.21\n             */\n            batCommonDesignation: OptionalFixedAttribute(0x14, TlvEnum<BatCommonDesignation>()),\n\n            /**\n             * Indicates the string representing the ANSI designation for the battery as specified in ANSI C18.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.22\n             */\n            batAnsiDesignation: OptionalFixedAttribute(0x15, TlvString.bound({ maxLength: 20 })),\n\n            /**\n             * Indicates the string representing the IEC designation for the battery as specified in IEC 60086.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.23\n             */\n            batIecDesignation: OptionalFixedAttribute(0x16, TlvString.bound({ maxLength: 20 })),\n\n            /**\n             * Indicates the ID of the preferred chemistry of the battery source as specified in\n             * BatApprovedChemistryEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.24\n             */\n            batApprovedChemistry: OptionalFixedAttribute(0x17, TlvEnum<BatApprovedChemistry>()),\n\n            /**\n             * Indicates the quantity of individual, user- or factory-serviceable battery cells or packs in the battery\n             * source.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.26\n             */\n            batQuantity: FixedAttribute(0x19, TlvUInt8)\n        }\n    });\n\n    /**\n     * A PowerSourceCluster supports these elements if it supports features Replaceable or Rechargeable.\n     */\n    export const ReplaceableOrRechargeableComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the preferred minimum charge capacity rating in mAh of individual, user- or\n             * factory-serviceable battery cells or packs in the battery source.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.25\n             */\n            batCapacity: OptionalFixedAttribute(0x18, TlvUInt32)\n        }\n    });\n\n    /**\n     * A PowerSourceCluster supports these elements if it supports feature Rechargeable.\n     */\n    export const RechargeableComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the current state of the battery source with respect to charging as specified in\n             * BatChargeStateEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.27\n             */\n            batChargeState: Attribute(0x1a, TlvEnum<BatChargeState>()),\n\n            /**\n             * Indicates the estimated time in seconds before the battery source will be at full charge. A value of\n             * NULL shall indicate the Node is currently unable to assess the value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.28\n             */\n            batTimeToFullCharge: OptionalAttribute(0x1b, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates whether the Node can remain operational while the battery source is charging.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.29\n             */\n            batFunctionalWhileCharging: Attribute(0x1c, TlvBoolean),\n\n            /**\n             * Indicates assessed current in mA (milliamps) presently supplied to charge the battery source. A value of\n             * NULL shall indicate the Node is currently unable to assess the value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.30\n             */\n            batChargingCurrent: OptionalAttribute(0x1d, TlvNullable(TlvUInt32), { omitChanges: true }),\n\n            /**\n             * Indicates the set of charge faults currently detected by the Node on this power source. This set is\n             * represented as a list of BatChargeFaultEnum. When the Node detects a fault has been raised, the\n             * appropriate BatChargeFaultEnum value shall be added to this list, provided it is not already present.\n             * This list shall NOT contain more than one instance of a specific BatChargeFaultEnum value. When the Node\n             * detects all conditions contributing to a fault have been cleared, the corresponding BatChargeFaultEnum\n             * value shall be removed from this list. An empty list shall indicate there are currently no active\n             * faults. The order of this list SHOULD have no significance. Clients interested in monitoring changes in\n             * active faults may subscribe to this attribute, or they may subscribe to the BatFaultChange event.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.31\n             */\n            activeBatChargeFaults: OptionalAttribute(\n                0x1e,\n                TlvArray(TlvEnum<BatChargeFault>(), { maxLength: 16 }),\n                { default: [] }\n            )\n        },\n\n        events: {\n            /**\n             * The BatChargeFaultChange Event shall be generated when the set of charge faults currently detected by\n             * the Node on this battery power source changes. This event shall correspond to a change in value of\n             * ActiveBatChargeFaults.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.8.3\n             */\n            batChargeFaultChange: OptionalEvent(0x2, EventPriority.Info, TlvBatChargeFaultChangeEvent)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all PowerSource clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x2f,\n        name: \"PowerSource\",\n        revision: 2,\n\n        features: {\n            /**\n             * Wired\n             *\n             * A wired power source\n             */\n            wired: BitFlag(0),\n\n            /**\n             * Battery\n             *\n             * A battery power source\n             */\n            battery: BitFlag(1),\n\n            /**\n             * Rechargeable\n             *\n             * A rechargeable battery power source\n             */\n            rechargeable: BitFlag(2),\n\n            /**\n             * Replaceable\n             *\n             * A replaceable battery power source\n             */\n            replaceable: BitFlag(3)\n        },\n\n        attributes: {\n            /**\n             * Indicates the participation of this power source in providing power to the Node as specified in\n             * PowerSourceStatusEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.1\n             */\n            status: Attribute(0x0, TlvEnum<PowerSourceStatus>()),\n\n            /**\n             * Indicates the relative preference with which the Node will select this source to provide power. A source\n             * with a lower order shall be selected by the Node to provide power before any other source with a higher\n             * order, if the lower order source is available (see Status).\n             *\n             * Note, Order is read-only and therefore NOT intended to allow clients control over power source selection.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.2\n             */\n            order: Attribute(0x1, TlvUInt8, { persistent: true }),\n\n            /**\n             * This attribute shall provide a user-facing description of this source, used to distinguish it from other\n             * power sources, e.g. \"DC Power\", \"Primary Battery\" or \"Battery back-up\". This attribute shall NOT be used\n             * to convey information such as battery form factor, or chemistry.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.3\n             */\n            description: FixedAttribute(0x2, TlvString.bound({ maxLength: 60 })),\n\n            /**\n             * Indicates a list of endpoints that are powered by the source defined by this cluster. Multiple instances\n             * of this cluster may list the same endpoint, because it is possible for power for an endpoint to come\n             * from multiple sources. In that case the Order attribute indicates their priority.\n             *\n             * For each power source on a node, there shall only be one instance of this cluster.\n             *\n             * A cluster instance with an empty list shall indicate that the power source is for the entire node, which\n             * includes all endpoints.\n             *\n             * A cluster instance with a non-empty list shall include the endpoint, upon which the cluster instance\n             * resides.\n             *\n             * The above rules allow that some endpoints can have an unknown power source, and therefore would not be\n             * indicated by any instance of this cluster.\n             *\n             * Empty list examples\n             *\n             * Typically, there is one power source for the node. Also common is mains power for the node with battery\n             * backup power for the node. In both these common cases, for each cluster instance described, the list is\n             * empty.\n             *\n             * Populated list example\n             *\n             * A node has a mains power source with Order as 0 (zero), but some application endpoints (not all) have a\n             * battery back up source with Order as 1, which means this list is empty for the Power Source cluster\n             * associated with the mains power, because it indicates the entire node, but the Power Source cluster\n             * instance associated with the battery backup would list the endpoints that have a battery backup.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.7.7.32\n             */\n            endpointList: Attribute(0x1f, TlvArray(TlvEndpointNumber), { default: [] })\n        },\n\n        /**\n         * This metadata controls which PowerSourceCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { wired: true }, component: WiredComponent },\n            { flags: { battery: true }, component: BatteryComponent },\n            { flags: { replaceable: true }, component: ReplaceableComponent },\n            { flags: { replaceable: true }, component: ReplaceableOrRechargeableComponent },\n            { flags: { rechargeable: true }, component: ReplaceableOrRechargeableComponent },\n            { flags: { rechargeable: true }, component: RechargeableComponent },\n            { flags: { rechargeable: true, battery: false }, component: false },\n            { flags: { replaceable: true, battery: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is used to describe the configuration and capabilities of a physical power source that provides\n     * power to one or more endpoints on a node. In case the node has multiple power sources, each is described by its\n     * own cluster instance. Each instance of this cluster may be associated with one or more endpoints or the entire\n     * node.\n     *\n     * PowerSourceCluster supports optional features that you can enable with the PowerSourceCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.7\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const WIRED = { wired: true };\n    const BAT = { battery: true };\n    const REPLC = { replaceable: true };\n    const RECHG = { rechargeable: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            wiredAssessedInputVoltage: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredAssessedInputVoltage,\n                { optionalIf: [WIRED] }\n            ),\n            wiredAssessedInputFrequency: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredAssessedInputFrequency,\n                { optionalIf: [WIRED] }\n            ),\n            wiredCurrentType: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredCurrentType,\n                { mandatoryIf: [WIRED] }\n            ),\n            wiredAssessedCurrent: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredAssessedCurrent,\n                { optionalIf: [WIRED] }\n            ),\n            wiredNominalVoltage: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredNominalVoltage,\n                { optionalIf: [WIRED] }\n            ),\n            wiredMaximumCurrent: MutableCluster.AsConditional(\n                WiredComponent.attributes.wiredMaximumCurrent,\n                { optionalIf: [WIRED] }\n            ),\n            wiredPresent: MutableCluster.AsConditional(WiredComponent.attributes.wiredPresent, { optionalIf: [WIRED] }),\n            activeWiredFaults: MutableCluster.AsConditional(\n                WiredComponent.attributes.activeWiredFaults,\n                { optionalIf: [WIRED] }\n            ),\n            batVoltage: MutableCluster.AsConditional(BatteryComponent.attributes.batVoltage, { optionalIf: [BAT] }),\n            batPercentRemaining: MutableCluster.AsConditional(\n                BatteryComponent.attributes.batPercentRemaining,\n                { optionalIf: [BAT] }\n            ),\n            batTimeRemaining: MutableCluster.AsConditional(\n                BatteryComponent.attributes.batTimeRemaining,\n                { optionalIf: [BAT] }\n            ),\n            batChargeLevel: MutableCluster.AsConditional(\n                BatteryComponent.attributes.batChargeLevel,\n                { mandatoryIf: [BAT] }\n            ),\n            batReplacementNeeded: MutableCluster.AsConditional(\n                BatteryComponent.attributes.batReplacementNeeded,\n                { mandatoryIf: [BAT] }\n            ),\n            batReplaceability: MutableCluster.AsConditional(\n                BatteryComponent.attributes.batReplaceability,\n                { mandatoryIf: [BAT] }\n            ),\n            batPresent: MutableCluster.AsConditional(BatteryComponent.attributes.batPresent, { optionalIf: [BAT] }),\n            activeBatFaults: MutableCluster.AsConditional(\n                BatteryComponent.attributes.activeBatFaults,\n                { optionalIf: [BAT] }\n            ),\n            batReplacementDescription: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batReplacementDescription,\n                { mandatoryIf: [REPLC] }\n            ),\n            batCommonDesignation: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batCommonDesignation,\n                { optionalIf: [REPLC] }\n            ),\n            batAnsiDesignation: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batAnsiDesignation,\n                { optionalIf: [REPLC] }\n            ),\n            batIecDesignation: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batIecDesignation,\n                { optionalIf: [REPLC] }\n            ),\n            batApprovedChemistry: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batApprovedChemistry,\n                { optionalIf: [REPLC] }\n            ),\n            batCapacity: MutableCluster.AsConditional(\n                ReplaceableOrRechargeableComponent.attributes.batCapacity,\n                { optionalIf: [REPLC, RECHG] }\n            ),\n            batQuantity: MutableCluster.AsConditional(\n                ReplaceableComponent.attributes.batQuantity,\n                { mandatoryIf: [REPLC] }\n            ),\n            batChargeState: MutableCluster.AsConditional(\n                RechargeableComponent.attributes.batChargeState,\n                { mandatoryIf: [RECHG] }\n            ),\n            batTimeToFullCharge: MutableCluster.AsConditional(\n                RechargeableComponent.attributes.batTimeToFullCharge,\n                { optionalIf: [RECHG] }\n            ),\n            batFunctionalWhileCharging: MutableCluster.AsConditional(\n                RechargeableComponent.attributes.batFunctionalWhileCharging,\n                { mandatoryIf: [RECHG] }\n            ),\n            batChargingCurrent: MutableCluster.AsConditional(\n                RechargeableComponent.attributes.batChargingCurrent,\n                { optionalIf: [RECHG] }\n            ),\n            activeBatChargeFaults: MutableCluster.AsConditional(\n                RechargeableComponent.attributes.activeBatChargeFaults,\n                { optionalIf: [RECHG] }\n            )\n        },\n\n        events: {\n            wiredFaultChange: MutableCluster.AsConditional(\n                WiredComponent.events.wiredFaultChange,\n                { optionalIf: [WIRED] }\n            ),\n            batFaultChange: MutableCluster.AsConditional(BatteryComponent.events.batFaultChange, { optionalIf: [BAT] }),\n            batChargeFaultChange: MutableCluster.AsConditional(\n                RechargeableComponent.events.batChargeFaultChange,\n                { optionalIf: [RECHG] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all PowerSource features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type PowerSourceCluster = PowerSource.Cluster;\nexport const PowerSourceCluster = PowerSource.Cluster;\nClusterRegistry.register(PowerSource.Complete);\n"],
  "mappings": "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",
  "names": ["PowerSource", "Feature", "WiredCurrentType", "WiredFault", "BatChargeLevel", "BatReplaceability", "BatFault", "BatCommonDesignation", "BatApprovedChemistry", "BatChargeState", "BatChargeFault", "PowerSourceStatus"]
}
