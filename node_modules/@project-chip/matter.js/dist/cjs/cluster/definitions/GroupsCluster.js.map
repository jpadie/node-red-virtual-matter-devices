{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/GroupsCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { FixedAttribute, Command, AccessLevel, TlvNoResponse } from \"../Cluster.js\";\nimport { TlvUInt8, TlvBitmap, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvGroupId } from \"../../datatype/GroupId.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { StatusCode } from \"../../protocol/interaction/StatusCode.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Groups {\n    /**\n     * These are optional features supported by GroupsCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.4\n     */\n    export enum Feature {\n        /**\n         * GroupNames (GN)\n         *\n         * The Group Names feature indicates the ability to store a name for a group when a group is added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.4.1\n         */\n        GroupNames = \"GroupNames\"\n    }\n\n    /**\n     * The value of the Groups nameSupport attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.6.1\n     */\n    export const NameSupportAttribute = { nameSupport: BitFlag(7) };\n\n    /**\n     * Input to the Groups addGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.1\n     */\n    export const TlvAddGroupRequest = TlvObject({\n        /**\n         * This field shall be used to identify the group and any associated key material to which the server endpoint\n         * is to be added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.1.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field may be set to a human-readable name for the group. If the client has no name for the group, the\n         * GroupName field shall be set to the empty string.\n         *\n         * Support of group names is optional and is indicated by the FeatureMap and NameSupport attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.1.2\n         */\n        groupName: TlvField(1, TlvString.bound({ maxLength: 16 }))\n    });\n\n    /**\n     * Input to the Groups addGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.1\n     */\n    export interface AddGroupRequest extends TypeFromSchema<typeof TlvAddGroupRequest> {}\n\n    /**\n     * The AddGroupResponse is sent by the Groups cluster server in response to an AddGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.7\n     */\n    export const TlvAddGroupResponse = TlvObject({\n        /**\n         * This field is set according to the Effect on Receipt section of the AddGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.7.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * This field is set to the GroupID field of the received AddGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.7.2\n         */\n        groupId: TlvField(1, TlvGroupId)\n    });\n\n    /**\n     * The AddGroupResponse is sent by the Groups cluster server in response to an AddGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.7\n     */\n    export interface AddGroupResponse extends TypeFromSchema<typeof TlvAddGroupResponse> {}\n\n    /**\n     * Input to the Groups viewGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.2\n     */\n    export const TlvViewGroupRequest = TlvObject({ groupId: TlvField(0, TlvGroupId) });\n\n    /**\n     * Input to the Groups viewGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.2\n     */\n    export interface ViewGroupRequest extends TypeFromSchema<typeof TlvViewGroupRequest> {}\n\n    /**\n     * The ViewGroupResponse command is sent by the Groups cluster server in response to a ViewGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.8\n     */\n    export const TlvViewGroupResponse = TlvObject({\n        /**\n         * This field is according to the Effect on Receipt section of the ViewGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.8.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * This field is set to the GroupID field of the received ViewGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.8.2\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * If the status is SUCCESS, and group names are supported, this field is set to the group name associated with\n         * that group in the Group Table; otherwise it is set to the empty string.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.8.3\n         */\n        groupName: TlvField(2, TlvString.bound({ maxLength: 16 }))\n    });\n\n    /**\n     * The ViewGroupResponse command is sent by the Groups cluster server in response to a ViewGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.8\n     */\n    export interface ViewGroupResponse extends TypeFromSchema<typeof TlvViewGroupResponse> {}\n\n    /**\n     * Input to the Groups getGroupMembership command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.3\n     */\n    export const TlvGetGroupMembershipRequest = TlvObject({ groupList: TlvField(0, TlvArray(TlvGroupId)) });\n\n    /**\n     * Input to the Groups getGroupMembership command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.3\n     */\n    export interface GetGroupMembershipRequest extends TypeFromSchema<typeof TlvGetGroupMembershipRequest> {}\n\n    /**\n     * The GetGroupMembershipResponse command is sent by the Groups cluster server in response to a GetGroupMembership\n     * command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.9\n     */\n    export const TlvGetGroupMembershipResponse = TlvObject({\n        /**\n         * This field shall contain the remaining capacity of the Group Table of the node. The following values apply:\n         *\n         *   \u2022 0 - No further groups may be added.\n         *\n         *   \u2022 0 < Capacity < 0xFE - Capacity holds the number of groups that may be added.\n         *\n         *   \u2022 0xFE - At least 1 further group may be added (exact number is unknown).\n         *\n         *   \u2022 null - It is unknown if any further groups may be added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.9.1\n         */\n        capacity: TlvField(0, TlvNullable(TlvUInt8)),\n\n        /**\n         * The GroupList field shall contain either the group IDs of all the groups in the Group Table for which the\n         * server endpoint is a member of the group (in the case where the GroupList field of the received\n         * GetGroupMembership command was empty), or the group IDs of all the groups in the Group Table for which the\n         * server endpoint is a member of the group and for which the group ID was included in the the GroupList field\n         * of the received GetGroupMembership command (in the case where the GroupList field of the received\n         * GetGroupMembership command was not empty).\n         *\n         * Zigbee: If the total number of groups will cause the maximum payload length of a frame to be exceeded, then\n         * the GroupList field shall contain only as many groups as will fit.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.9.2\n         */\n        groupList: TlvField(1, TlvArray(TlvGroupId))\n    });\n\n    /**\n     * The GetGroupMembershipResponse command is sent by the Groups cluster server in response to a GetGroupMembership\n     * command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.9\n     */\n    export interface GetGroupMembershipResponse extends TypeFromSchema<typeof TlvGetGroupMembershipResponse> {}\n\n    /**\n     * Input to the Groups removeGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.4\n     */\n    export const TlvRemoveGroupRequest = TlvObject({ groupId: TlvField(0, TlvGroupId) });\n\n    /**\n     * Input to the Groups removeGroup command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.4\n     */\n    export interface RemoveGroupRequest extends TypeFromSchema<typeof TlvRemoveGroupRequest> {}\n\n    /**\n     * The RemoveGroupResponse command is generated by the server in response to the receipt of a RemoveGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.10\n     */\n    export const TlvRemoveGroupResponse = TlvObject({\n        /**\n         * This field is according to the Effect on Receipt section of the RemoveGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.10.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * This field is set to the GroupID field of the received RemoveGroup command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.10.2\n         */\n        groupId: TlvField(1, TlvGroupId)\n    });\n\n    /**\n     * The RemoveGroupResponse command is generated by the server in response to the receipt of a RemoveGroup command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.10\n     */\n    export interface RemoveGroupResponse extends TypeFromSchema<typeof TlvRemoveGroupResponse> {}\n\n    /**\n     * Input to the Groups addGroupIfIdentifying command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.6\n     */\n    export const TlvAddGroupIfIdentifyingRequest = TlvObject({\n        /**\n         * This field shall be used to identify the group and any associated key material to which the server endpoint\n         * is to be added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.6.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field may be set to a human-readable name for the group. If the client has no name for the group, the\n         * GroupName field shall be set to the empty string.\n         *\n         * Support of group names is optional and is indicated by the FeatureMap and NameSupport attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.6.2\n         */\n        groupName: TlvField(1, TlvString.bound({ maxLength: 16 }))\n    });\n\n    /**\n     * Input to the Groups addGroupIfIdentifying command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.6\n     */\n    export interface AddGroupIfIdentifyingRequest extends TypeFromSchema<typeof TlvAddGroupIfIdentifyingRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.5.1\n     */\n    export const NameSupport = {\n        /**\n         * The ability to store a name for a group.\n         */\n        groupNames: BitFlag(7)\n    };\n\n    /**\n     * These elements and properties are present in all Groups clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x4,\n        name: \"Groups\",\n        revision: 4,\n\n        features: {\n            /**\n             * GroupNames\n             *\n             * The Group Names feature indicates the ability to store a name for a group when a group is added.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.4.1\n             */\n            groupNames: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * This attribute provides legacy, read-only access to whether the Group Names feature is supported. The\n             * most significant bit, bit 7 (GroupNames), shall be equal to bit 0 of the FeatureMap attribute (GN\n             * Feature). All other bits shall be 0.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.6.1\n             */\n            nameSupport: FixedAttribute(0x0, TlvBitmap(TlvUInt8, NameSupportAttribute))\n        },\n\n        commands: {\n            /**\n             * The AddGroup command allows a client to add group membership in a particular group for the server\n             * endpoint.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.1\n             */\n            addGroup: Command(0x0, TlvAddGroupRequest, 0x0, TlvAddGroupResponse, { invokeAcl: AccessLevel.Manage }),\n\n            /**\n             * The ViewGroup command allows a client to request that the server responds with a ViewGroupResponse\n             * command containing the name string for a particular group.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.2\n             */\n            viewGroup: Command(0x1, TlvViewGroupRequest, 0x1, TlvViewGroupResponse),\n\n            /**\n             * The GetGroupMembership command allows a client to inquire about the group membership of the server\n             * endpoint, in a number of ways.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.3\n             */\n            getGroupMembership: Command(0x2, TlvGetGroupMembershipRequest, 0x2, TlvGetGroupMembershipResponse),\n\n            /**\n             * The RemoveGroup command allows a client to request that the server removes the membership for the server\n             * endpoint, if any, in a particular group.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.4\n             */\n            removeGroup: Command(\n                0x3,\n                TlvRemoveGroupRequest,\n                0x3,\n                TlvRemoveGroupResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The RemoveAllGroups command allows a client to direct the server to remove all group associations for\n             * the server endpoint.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.5\n             */\n            removeAllGroups: Command(0x4, TlvNoArguments, 0x4, TlvNoResponse, { invokeAcl: AccessLevel.Manage }),\n\n            /**\n             * The AddGroupIfIdentifying command allows a client to add group membership in a particular group for the\n             * server endpoint, on condition that the endpoint is identifying itself. Identifying functionality is\n             * controlled using the Identify cluster, (see Identify Cluster).\n             *\n             * For correct operation of the AddGroupIfIdentifying command, any endpoint that supports the Groups server\n             * cluster shall also support the Identify server cluster.\n             *\n             * This command might be used to assist configuring group membership in the absence of a commissioning tool.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3.7.6\n             */\n            addGroupIfIdentifying: Command(\n                0x5,\n                TlvAddGroupIfIdentifyingRequest,\n                0x5,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Manage }\n            )\n        },\n\n        /**\n         * This metadata controls which GroupsCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions()\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({ ...Base, supportedFeatures: { groupNames: true } });\n\n    /**\n     * The Groups cluster manages, per endpoint, the content of the node-wide Group Table that is part of the\n     * underlying interaction layer.\n     *\n     * In a network supporting fabrics, group IDs referenced by attributes or other elements of this cluster are scoped\n     * to the accessing fabric.\n     *\n     * The Groups cluster is scoped to the endpoint. Groups cluster commands support discovering the endpoint\n     * membership in a group, adding the endpoint to a group, removing the endpoint from a group, removing endpoint\n     * membership from all groups. All commands defined in this cluster shall only affect groups scoped to the\n     * accessing fabric.\n     *\n     * When group names are supported, the server stores a name string, which is set by the client for each assigned\n     * group and indicated in response to a client request.\n     *\n     * Note that configuration of group addresses for outgoing commands is achieved using the Message Layer mechanisms\n     * where the Group Table is not involved. Hence this cluster does not play a part in that.\n     *\n     * GroupsCluster supports optional features that you can enable with the GroupsCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.3\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type GroupsCluster = Groups.Cluster;\nexport const GroupsCluster = Groups.Cluster;\nClusterRegistry.register(Groups.Complete);\n"],
  "mappings": "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",
  "names": ["Groups", "Feature"]
}
