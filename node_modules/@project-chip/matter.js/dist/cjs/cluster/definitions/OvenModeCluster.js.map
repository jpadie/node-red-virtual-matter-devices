{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OvenModeCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    WritableAttribute,\n    FixedAttribute,\n    Attribute,\n    OptionalWritableAttribute,\n    Command,\n    TlvNoResponse\n} from \"../Cluster.js\";\nimport { TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { ModeBase } from \"./ModeBaseCluster.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OvenMode {\n    /**\n     * These are optional features supported by OvenModeCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.4\n     */\n    export enum Feature {\n        /**\n         * OnOff (DEPONOFF)\n         *\n         * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the same\n         * endpoint. See OnMode for more information.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.4.1\n         */\n        OnOff = \"OnOff\"\n    }\n\n    export enum ModeTag {\n        /**\n         * This mode sets the device into baking mode for baking food items.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.1\n         */\n        Bake = 16384,\n\n        /**\n         * This mode sets the device into convection mode which creates an airflow within the device during the cooking\n         * duration.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.2\n         */\n        Convection = 16385,\n\n        /**\n         * This mode sets the device into grill mode for grilling food items. This is the same as Broil for many\n         * regions.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.3\n         */\n        Grill = 16386,\n\n        /**\n         * This mode sets the device into roast mode for roasting food items.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.4\n         */\n        Roast = 16387,\n\n        /**\n         * This mode sets the device into cleaning mode to clean the internal components of the appliance.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.5\n         */\n        Clean = 16388,\n\n        /**\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1\n         */\n        ConvectionBake = 16389,\n\n        /**\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1\n         */\n        ConvectionRoast = 16390,\n\n        /**\n         * This mode sets the device into a warming mode which begins warming the cavity.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.8\n         */\n        Warming = 16391,\n\n        /**\n         * This mode sets the device into proofing mode which creates an environment ready for proofing.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1.9\n         */\n        Proofing = 16392,\n\n        /**\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11.4.1\n         */\n        Steam = 16393\n    }\n\n    /**\n     * A OvenModeCluster supports these elements if it supports feature OnOff.\n     */\n    export const OnOffComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same\n             * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the\n             * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster\n             *\n             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.6.5\n             */\n            onMode: WritableAttribute(0x3, TlvNullable(TlvUInt8), { persistent: true, default: null })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all OvenMode clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x49,\n        name: \"OvenMode\",\n        revision: 1,\n\n        features: {\n            /**\n             * OnOff\n             *\n             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the\n             * same endpoint. See OnMode for more information.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.4.1\n             */\n            onOff: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * This attribute shall contain the list of supported modes that may be selected for the CurrentMode\n             * attribute. Each item in this list represents a unique mode as indicated by the Mode field of the\n             * ModeOptionStruct.\n             *\n             * Each entry in this list shall have a unique value for the Mode field. Each entry in this list shall have\n             * a unique value for the Label field.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.6.2\n             */\n            supportedModes: FixedAttribute(0x0, TlvArray(ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 })),\n\n            /**\n             * Indicates the current mode of the server.\n             *\n             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.\n             *\n             * The value of this attribute may change at any time via an out-of-band interaction outside of the server,\n             * such as interactions with a user interface, via internal mode changes due to autonomously progressing\n             * through a sequence of operations, on system time-outs or idle delays, or via interactions coming from a\n             * fabric other than the one which last executed a ChangeToMode.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.6.3\n             */\n            currentMode: Attribute(0x1, TlvUInt8, { scene: true, persistent: true }),\n\n            /**\n             * Indicates the desired startup mode for the server when it is supplied with power.\n             *\n             * If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, when the\n             * server is powered up, except in the case when the OnMode attribute overrides the StartUpMode attribute\n             * (see OnModeWithPowerUp).\n             *\n             * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode\n             * attribute shall return to its value prior to the restart.\n             *\n             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.\n             *\n             * If this attribute is not implemented, or is set to the null value, it shall have no effect.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.6.4\n             */\n            startUpMode: OptionalWritableAttribute(0x2, TlvNullable(TlvUInt8), { persistent: true })\n        },\n\n        commands: {\n            /**\n             * This command is used to change device modes.\n             *\n             * On receipt of this command the device shall respond with a ChangeToModeResponse command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.10.7.1\n             */\n            changeToMode: Command(0x0, ModeBase.TlvChangeToModeRequest, 0x0, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which OvenModeCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { onOff: true }, component: OnOffComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is derived from the Mode Base cluster, defining additional mode tags and namespaced enumerated\n     * values for oven devices.\n     *\n     * OvenModeCluster supports optional features that you can enable with the OvenModeCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.11\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const DEPONOFF = { onOff: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n        attributes: {\n            ...Cluster.attributes,\n            onMode: MutableCluster.AsConditional(OnOffComponent.attributes.onMode, { mandatoryIf: [DEPONOFF] })\n        },\n        commands: Cluster.commands\n    });\n\n    /**\n     * This cluster supports all OvenMode features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type OvenModeCluster = OvenMode.Cluster;\nexport const OvenModeCluster = OvenMode.Cluster;\nClusterRegistry.register(OvenMode.Complete);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAA+B;AAC/B,qBAOO;AACP,uBAAyB;AACzB,yBAA4B;AAC5B,0BAAwB;AACxB,sBAAyB;AACzB,6BAAyB;AAEzB,6BAAgC;AAvBhC;AAAA;AAAA;AAAA;AAAA;AAyBO,IAAU;AAAA,CAAV,CAAUA,cAAV;AAMI,MAAK;AAAL,IAAKC,aAAL;AASH,IAAAA,SAAA,WAAQ;AAAA,KATA,UAAAD,UAAA,YAAAA,UAAA;AAYL,MAAK;AAAL,IAAKE,aAAL;AAMH,IAAAA,kBAAA,UAAO,SAAP;AAQA,IAAAA,kBAAA,gBAAa,SAAb;AAQA,IAAAA,kBAAA,WAAQ,SAAR;AAOA,IAAAA,kBAAA,WAAQ,SAAR;AAOA,IAAAA,kBAAA,WAAQ,SAAR;AAKA,IAAAA,kBAAA,oBAAiB,SAAjB;AAKA,IAAAA,kBAAA,qBAAkB,SAAlB;AAOA,IAAAA,kBAAA,aAAU,SAAV;AAOA,IAAAA,kBAAA,cAAW,SAAX;AAKA,IAAAA,kBAAA,WAAQ,SAAR;AAAA,KAjEQ,UAAAF,UAAA,YAAAA,UAAA;AAuEL,EAAMA,UAAA,iBAAiB,qCAAe,UAAU;AAAA,IACnD,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUR,YAAQ,kCAAkB,OAAK,gCAAY,yBAAQ,GAAG,EAAE,YAAY,MAAM,SAAS,KAAK,CAAC;AAAA,IAC7F;AAAA,EACJ,CAAC;AAKM,EAAMA,UAAA,OAAO,qCAAe,UAAU;AAAA,IACzC,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASN,WAAO,6BAAQ,CAAC;AAAA,IACpB;AAAA,IAEA,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWR,oBAAgB,+BAAe,OAAK,0BAAS,gCAAS,eAAe,EAAE,WAAW,GAAG,WAAW,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MActG,iBAAa,0BAAU,GAAK,2BAAU,EAAE,OAAO,MAAM,YAAY,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBvE,iBAAa,0CAA0B,OAAK,gCAAY,yBAAQ,GAAG,EAAE,YAAY,KAAK,CAAC;AAAA,IAC3F;AAAA,IAEA,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQN,kBAAc,wBAAQ,GAAK,gCAAS,wBAAwB,GAAK,4BAAa;AAAA,IAClF;AAAA;AAAA;AAAA;AAAA,IAKA,YAAY,qCAAe,WAAW,EAAE,OAAO,EAAE,OAAO,KAAK,GAAG,WAAWA,UAAA,eAAe,CAAC;AAAA,EAC/F,CAAC;AAKM,EAAMA,UAAA,sBAAkB,sCAAeA,UAAA,IAAI;AAY3C,EAAMA,UAAA,UAAmBA,UAAA;AAChC,QAAM,WAAW,EAAE,OAAO,KAAK;AAKxB,EAAMA,UAAA,uBAAmB,sCAAe;AAAA,IAC3C,IAAIA,UAAA,QAAQ;AAAA,IACZ,MAAMA,UAAA,QAAQ;AAAA,IACd,UAAUA,UAAA,QAAQ;AAAA,IAClB,UAAUA,UAAA,QAAQ;AAAA,IAClB,YAAY;AAAA,MACR,GAAGA,UAAA,QAAQ;AAAA,MACX,QAAQ,qCAAe,cAAcA,UAAA,eAAe,WAAW,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC;AAAA,IACtG;AAAA,IACA,UAAUA,UAAA,QAAQ;AAAA,EACtB,CAAC;AAUM,EAAMA,UAAA,WAAqBA,UAAA;AAAA,GApOrB;AAwOV,MAAM,kBAAkB,SAAS;AACxC,uCAAgB,SAAS,SAAS,QAAQ;",
  "names": ["OvenMode", "Feature", "ModeTag"]
}
