{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ConcentrationMeasurementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, FixedAttribute } from \"../Cluster.js\";\nimport { TlvFloat, TlvEnum, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\n\nexport namespace ConcentrationMeasurement {\n    /**\n     * These are optional features supported by ConcentrationMeasurementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.4\n     */\n    export enum Feature {\n        /**\n         * NumericMeasurement (MEA)\n         *\n         * Cluster supports numeric measurement of substance\n         */\n        NumericMeasurement = \"NumericMeasurement\",\n\n        /**\n         * LevelIndication (LEV)\n         *\n         * Cluster supports basic level indication for substance using the ConcentrationLevel enum\n         */\n        LevelIndication = \"LevelIndication\",\n\n        /**\n         * MediumLevel (MED)\n         *\n         * Cluster supports the Medium Concentration Level\n         */\n        MediumLevel = \"MediumLevel\",\n\n        /**\n         * CriticalLevel (CRI)\n         *\n         * Cluster supports the Critical Concentration Level\n         */\n        CriticalLevel = \"CriticalLevel\",\n\n        /**\n         * PeakMeasurement (PEA)\n         *\n         * Cluster supports peak numeric measurement of substance\n         */\n        PeakMeasurement = \"PeakMeasurement\",\n\n        /**\n         * AverageMeasurement (AVG)\n         *\n         * Cluster supports average numeric measurement of substance\n         */\n        AverageMeasurement = \"AverageMeasurement\"\n    }\n\n    /**\n     * Where mentioned, Billion refers to 10, Trillion refers to 1012 (short scale).\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.5.1\n     */\n    export enum MeasurementUnit {\n        /**\n         * Parts per Million (10)\n         */\n        Ppm = 0,\n\n        /**\n         * Parts per Billion (10)\n         */\n        Ppb = 1,\n\n        /**\n         * Parts per Trillion (1012)\n         */\n        Ppt = 2,\n\n        /**\n         * Milligram per m\n         */\n        Mgm3 = 3,\n\n        /**\n         * Microgram per m\n         */\n        Ugm3 = 4,\n\n        /**\n         * Nanogram per m\n         */\n        Ngm3 = 5,\n\n        /**\n         * Particles per m\n         */\n        Pm3 = 6,\n\n        /**\n         * Becquerel per m\n         */\n        Bqm3 = 7\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.5.3\n     */\n    export enum LevelValue {\n        /**\n         * The level is Unknown\n         */\n        Unknown = 0,\n\n        /**\n         * The level is considered Low\n         */\n        Low = 1,\n\n        /**\n         * The level is considered Medium\n         */\n        Medium = 2,\n\n        /**\n         * The level is considered High\n         */\n        High = 3,\n\n        /**\n         * The level is considered Critical\n         */\n        Critical = 4\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.5.2\n     */\n    export enum MeasurementMedium {\n        /**\n         * The measurement is being made in Air\n         */\n        Air = 0,\n\n        /**\n         * The measurement is being made in Water\n         */\n        Water = 1,\n\n        /**\n         * The measurement is being made in Soil\n         */\n        Soil = 2\n    }\n\n    /**\n     * A ConcentrationMeasurementCluster supports these elements if it supports feature NumericMeasurement.\n     */\n    export const NumericMeasurementComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the most recent measurement as a single-precision floating-point number. MeasuredValue\u2019s unit\n             * is represented by MeasurementUnit.\n             *\n             * A value of null indicates that the measurement is unknown or outside the valid range. MinMeasuredValue\n             * and MaxMeasuredValue define the valid range for MeasuredValue.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.1\n             */\n            measuredValue: Attribute(0x0, TlvNullable(TlvFloat), { default: null }),\n\n            /**\n             * Indicates the minimum value of MeasuredValue that is capable of being measured. A MinMeasuredValue of\n             * null indicates that the MinMeasuredValue is not defined.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.2\n             */\n            minMeasuredValue: Attribute(0x1, TlvNullable(TlvFloat), { default: null }),\n\n            /**\n             * Indicates the maximum value of MeasuredValue that is capable of being measured. A MaxMeasuredValue of\n             * null indicates that the MaxMeasuredValue is not defined.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.3\n             */\n            maxMeasuredValue: Attribute(0x2, TlvNullable(TlvFloat), { default: null }),\n\n            /**\n             * Indicates the range of error or deviation that can be found in MeasuredValue and PeakMeasuredValue. This\n             * is considered a +/- value and should be considered to be in MeasurementUnit.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.8\n             */\n            uncertainty: OptionalAttribute(0x7, TlvFloat),\n\n            /**\n             * Indicates the unit of MeasuredValue. See MeasurementUnitEnum.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.9\n             */\n            measurementUnit: FixedAttribute(0x8, TlvEnum<MeasurementUnit>())\n        }\n    });\n\n    /**\n     * A ConcentrationMeasurementCluster supports these elements if it supports feature PeakMeasurement.\n     */\n    export const PeakMeasurementComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the maximum value of MeasuredValue that has been measured during the PeakMeasuredValueWindow.\n             * If this attribute is provided, the PeakMeasuredValueWindow attribute shall also be provided.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.4\n             */\n            peakMeasuredValue: Attribute(0x3, TlvNullable(TlvFloat), { default: null }),\n\n            /**\n             * Indicates the window of time used for determining the PeakMeasuredValue. The value is in seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.5\n             */\n            peakMeasuredValueWindow: Attribute(0x4, TlvUInt32.bound({ max: 604800 }), { default: 1 })\n        }\n    });\n\n    /**\n     * A ConcentrationMeasurementCluster supports these elements if it supports feature AverageMeasurement.\n     */\n    export const AverageMeasurementComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the average value of MeasuredValue that has been measured during the\n             * AverageMeasuredValueWindow. If this attribute is provided, the AverageMeasuredValueWindow attribute\n             * shall also be provided.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.6\n             */\n            averageMeasuredValue: Attribute(0x5, TlvNullable(TlvFloat), { default: null }),\n\n            /**\n             * Indicates the window of time used for determining the AverageMeasuredValue. The value is in seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.7\n             */\n            averageMeasuredValueWindow: Attribute(0x6, TlvUInt32.bound({ max: 604800 }), { default: 1 })\n        }\n    });\n\n    /**\n     * A ConcentrationMeasurementCluster supports these elements if it supports feature LevelIndication.\n     */\n    export const LevelIndicationComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the level of the substance detected. See LevelValueEnum.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.11\n             */\n            levelValue: Attribute(0xa, TlvEnum<LevelValue>(), { default: LevelValue.Unknown })\n        }\n    });\n\n    /**\n     * ConcentrationMeasurement is a derived cluster, not to be used directly. These elements are present in all\n     * clusters derived from ConcentrationMeasurement.\n     */\n    export const Base = MutableCluster.Component({\n        features: {\n            /**\n             * NumericMeasurement\n             *\n             * Cluster supports numeric measurement of substance\n             */\n            numericMeasurement: BitFlag(0),\n\n            /**\n             * LevelIndication\n             *\n             * Cluster supports basic level indication for substance using the ConcentrationLevel enum\n             */\n            levelIndication: BitFlag(1),\n\n            /**\n             * MediumLevel\n             *\n             * Cluster supports the Medium Concentration Level\n             */\n            mediumLevel: BitFlag(2),\n\n            /**\n             * CriticalLevel\n             *\n             * Cluster supports the Critical Concentration Level\n             */\n            criticalLevel: BitFlag(3),\n\n            /**\n             * PeakMeasurement\n             *\n             * Cluster supports peak numeric measurement of substance\n             */\n            peakMeasurement: BitFlag(4),\n\n            /**\n             * AverageMeasurement\n             *\n             * Cluster supports average numeric measurement of substance\n             */\n            averageMeasurement: BitFlag(5)\n        },\n\n        name: \"ConcentrationMeasurement\",\n        revision: 3,\n\n        attributes: {\n            /**\n             * Indicates the medium in which MeasuredValue is being measured. See MeasurementMediumEnum.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.10.6.10\n             */\n            measurementMedium: FixedAttribute(0x9, TlvEnum<MeasurementMedium>())\n        },\n\n        /**\n         * This metadata controls which ConcentrationMeasurementCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { numericMeasurement: true }, component: NumericMeasurementComponent },\n            { flags: { peakMeasurement: true }, component: PeakMeasurementComponent },\n            { flags: { averageMeasurement: true }, component: AverageMeasurementComponent },\n            { flags: { levelIndication: true }, component: LevelIndicationComponent },\n            { flags: { mediumLevel: true, levelIndication: false }, component: false },\n            { flags: { criticalLevel: true, levelIndication: false }, component: false },\n            { flags: { peakMeasurement: true, numericMeasurement: false }, component: false },\n            { flags: { averageMeasurement: true, numericMeasurement: false }, component: false },\n            { flags: { numericMeasurement: false, levelIndication: false }, component: false }\n        )\n    });\n\n    const MEA = { numericMeasurement: true };\n    const PEA = { peakMeasurement: true };\n    const AVG = { averageMeasurement: true };\n    const LEV = { levelIndication: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster.Component({\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            measuredValue: MutableCluster.AsConditional(\n                NumericMeasurementComponent.attributes.measuredValue,\n                { mandatoryIf: [MEA] }\n            ),\n            minMeasuredValue: MutableCluster.AsConditional(\n                NumericMeasurementComponent.attributes.minMeasuredValue,\n                { mandatoryIf: [MEA] }\n            ),\n            maxMeasuredValue: MutableCluster.AsConditional(\n                NumericMeasurementComponent.attributes.maxMeasuredValue,\n                { mandatoryIf: [MEA] }\n            ),\n            peakMeasuredValue: MutableCluster.AsConditional(\n                PeakMeasurementComponent.attributes.peakMeasuredValue,\n                { mandatoryIf: [PEA] }\n            ),\n            peakMeasuredValueWindow: MutableCluster.AsConditional(\n                PeakMeasurementComponent.attributes.peakMeasuredValueWindow,\n                { mandatoryIf: [PEA] }\n            ),\n            averageMeasuredValue: MutableCluster.AsConditional(\n                AverageMeasurementComponent.attributes.averageMeasuredValue,\n                { mandatoryIf: [AVG] }\n            ),\n            averageMeasuredValueWindow: MutableCluster.AsConditional(\n                AverageMeasurementComponent.attributes.averageMeasuredValueWindow,\n                { mandatoryIf: [AVG] }\n            ),\n            uncertainty: MutableCluster.AsConditional(\n                NumericMeasurementComponent.attributes.uncertainty,\n                { optionalIf: [MEA] }\n            ),\n            measurementUnit: MutableCluster.AsConditional(\n                NumericMeasurementComponent.attributes.measurementUnit,\n                { mandatoryIf: [MEA] }\n            ),\n            levelValue: MutableCluster.AsConditional(\n                LevelIndicationComponent.attributes.levelValue,\n                { mandatoryIf: [LEV] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all ConcentrationMeasurement features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n"],
  "mappings": "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",
  "names": ["ConcentrationMeasurement", "Feature", "MeasurementUnit", "LevelValue", "MeasurementMedium"]
}
