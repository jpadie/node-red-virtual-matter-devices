{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ThermostatCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    OptionalFixedAttribute,\n    OptionalAttribute,\n    WritableAttribute,\n    OptionalWritableAttribute,\n    AccessLevel,\n    FixedAttribute,\n    Command,\n    TlvNoResponse\n} from \"../Cluster.js\";\nimport { OccupancySensing } from \"./OccupancySensingCluster.js\";\nimport {\n    TlvUInt8,\n    TlvBitmap,\n    TlvInt16,\n    TlvInt8,\n    TlvEnum,\n    TlvUInt16,\n    TlvEpochS,\n    TlvUInt32\n} from \"../../tlv/TlvNumber.js\";\nimport { BitsFromPartial, BitFlag, BitField } from \"../../schema/BitmapSchema.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Thermostat {\n    /**\n     * These are optional features supported by ThermostatCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.4\n     */\n    export enum Feature {\n        /**\n         * Heating (HEAT)\n         *\n         * Thermostat is capable of managing a heating device\n         */\n        Heating = \"Heating\",\n\n        /**\n         * Cooling (COOL)\n         *\n         * Thermostat is capable of managing a cooling device\n         */\n        Cooling = \"Cooling\",\n\n        /**\n         * Occupancy (OCC)\n         *\n         * Supports Occupied and Unoccupied setpoints\n         */\n        Occupancy = \"Occupancy\",\n\n        /**\n         * ScheduleConfiguration (SCH)\n         *\n         * Supports remote configuration of a weekly schedule of setpoint transitions\n         */\n        ScheduleConfiguration = \"ScheduleConfiguration\",\n\n        /**\n         * Setback (SB)\n         *\n         * Supports configurable setback (or span)\n         */\n        Setback = \"Setback\",\n\n        /**\n         * AutoMode (AUTO)\n         *\n         * Supports a System Mode of Auto\n         */\n        AutoMode = \"AutoMode\",\n\n        /**\n         * LocalTemperatureNotExposed (LTNE)\n         *\n         * This feature indicates that the Calculated Local Temperature used internally is unavailable to report\n         * externally, for example due to the temperature control being done by a separate subsystem which does not\n         * offer a view into the currently measured temperature, but allows setpoints to be provided.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.4.1\n         */\n        LocalTemperatureNotExposed = \"LocalTemperatureNotExposed\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.22\n     */\n    export enum ThermostatRunningMode {\n        /**\n         * The Thermostat does not generate demand for Cooling or Heating\n         */\n        Off = 0,\n\n        /**\n         * Demand is only generated for Cooling\n         */\n        Cool = 3,\n\n        /**\n         * Demand is only generated for Heating\n         */\n        Heat = 4\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.20\n     */\n    export enum StartOfWeek {\n        Sunday = 0,\n        Monday = 1,\n        Tuesday = 2,\n        Wednesday = 3,\n        Thursday = 4,\n        Friday = 5,\n        Saturday = 6\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.10\n     */\n    export const ScheduleDayOfWeek = {\n        /**\n         * Sunday\n         */\n        sunday: BitFlag(0),\n\n        /**\n         * Monday\n         */\n        monday: BitFlag(1),\n\n        /**\n         * Tuesday\n         */\n        tuesday: BitFlag(2),\n\n        /**\n         * Wednesday\n         */\n        wednesday: BitFlag(3),\n\n        /**\n         * Thursday\n         */\n        thursday: BitFlag(4),\n\n        /**\n         * Friday\n         */\n        friday: BitFlag(5),\n\n        /**\n         * Saturday\n         */\n        saturday: BitFlag(6),\n\n        /**\n         * Away or Vacation\n         */\n        away: BitFlag(7)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.11\n     */\n    export const ScheduleMode = {\n        /**\n         * Adjust Heat Setpoint\n         */\n        heatSetpointPresent: BitFlag(0),\n\n        /**\n         * Adjust Cool Setpoint\n         */\n        coolSetpointPresent: BitFlag(1)\n    };\n\n    /**\n     * This represents a single transition in a Thermostat schedule\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.24\n     */\n    export const TlvWeeklyScheduleTransition = TlvObject({\n        /**\n         * This field shall represent the start time of the schedule transition during the associated day. The time\n         * will be represented by a 16 bits unsigned integer to designate the minutes since midnight. For example, 6am\n         * will be represented by 360 minutes since midnight and 11:30pm will be represented by 1410 minutes since\n         * midnight.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.24.1\n         */\n        transitionTime: TlvField(0, TlvUInt16.bound({ max: 1439 })),\n\n        /**\n         * This field shall represent the heat setpoint to be applied at this associated transition start time.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.24.2\n         */\n        heatSetpoint: TlvField(1, TlvNullable(TlvInt16)),\n\n        /**\n         * This field shall represent the cool setpoint to be applied at this associated transition start time.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.24.3\n         */\n        coolSetpoint: TlvField(2, TlvNullable(TlvInt16))\n    });\n\n    /**\n     * This represents a single transition in a Thermostat schedule\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.24\n     */\n    export interface WeeklyScheduleTransition extends TypeFromSchema<typeof TlvWeeklyScheduleTransition> {}\n\n    /**\n     * Input to the Thermostat setWeeklySchedule command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4\n     */\n    export const TlvSetWeeklyScheduleRequest = TlvObject({\n        /**\n         * This field shall indicate how many individual transitions to expect for this sequence of commands. If a\n         * device supports more than 10 transitions in its schedule they can send this by sending more than 1 \u201CSet\n         * Weekly Schedule\u201D command, each containing the separate information that the device needs to set.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4.1\n         */\n        numberOfTransitionsForSequence: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall represent the day of the week at which all the transitions within the payload of the\n         * command SHOULD be associated to. This field is a bitmap and therefore the associated setpoint could overlap\n         * onto multiple days (you could set one transition time for all \u201Cweek days\u201D or whatever combination of days\n         * the implementation requests).\n         *\n         * Each setpoint transition will begin with the day of week for this transition. There can be up to 10\n         * transitions for each command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4.2\n         */\n        dayOfWeekForSequence: TlvField(1, TlvBitmap(TlvUInt8, ScheduleDayOfWeek)),\n\n        /**\n         * This field shall indicate how the application decodes the setpoint fields of each transition in the\n         * Transitions list.\n         *\n         * If the HeatSetpointPresent bit is On, the HeatSetpoint field shall NOT be null in every entry of the\n         * Transitions list.\n         *\n         * If the HeatSetpointPresent bit is Off, the HeatSetpoint field shall be null in every entry of the\n         * Transitions list.\n         *\n         * If the CoolSetpointPresent bit is On, the CoolSetpoint field shall NOT be null in every entry of the\n         * Transitions list.\n         *\n         * If the CoolSetpointPresent bit is Off, the CoolSetpoint field shall be null in every entry of the\n         * Transitions list.\n         *\n         * At least one of the bits in the Mode For Sequence byte shall be on.\n         *\n         * Both bits must be respected, even if the HEAT or COOL feature is not supported, to ensure the command is\n         * decoded and handled correctly.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4.3\n         */\n        modeForSequence: TlvField(2, TlvBitmap(TlvUInt8, ScheduleMode)),\n\n        /**\n         * This field shall contain the list of setpoint transitions used to update the specified daily schedules\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4.4\n         */\n        transitions: TlvField(3, TlvArray(TlvWeeklyScheduleTransition, { maxLength: 10 }))\n    });\n\n    /**\n     * Input to the Thermostat setWeeklySchedule command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4\n     */\n    export interface SetWeeklyScheduleRequest extends TypeFromSchema<typeof TlvSetWeeklyScheduleRequest> {}\n\n    /**\n     * Input to the Thermostat getWeeklySchedule command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5\n     */\n    export const TlvGetWeeklyScheduleRequest = TlvObject({\n        /**\n         * This field shall indicate the number of days the client would like to return the setpoint values for and\n         * could be any combination of single days or the entire week.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5.1\n         */\n        daysToReturn: TlvField(0, TlvBitmap(TlvUInt8, ScheduleDayOfWeek)),\n\n        /**\n         * This field shall indicate the mode the client would like to return the set point values for and could be any\n         * combination of heat only, cool only or heat & cool.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5.2\n         */\n        modeToReturn: TlvField(1, TlvBitmap(TlvUInt8, ScheduleMode))\n    });\n\n    /**\n     * Input to the Thermostat getWeeklySchedule command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5\n     */\n    export interface GetWeeklyScheduleRequest extends TypeFromSchema<typeof TlvGetWeeklyScheduleRequest> {}\n\n    /**\n     * This command has the same payload format as the Set Weekly Schedule.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.6\n     */\n    export const TlvGetWeeklyScheduleResponse = TlvObject({\n        numberOfTransitionsForSequence: TlvField(0, TlvUInt8),\n        dayOfWeekForSequence: TlvField(1, TlvBitmap(TlvUInt8, ScheduleDayOfWeek)),\n        modeForSequence: TlvField(2, TlvBitmap(TlvUInt8, ScheduleMode)),\n        transitions: TlvField(3, TlvArray(TlvWeeklyScheduleTransition, { maxLength: 10 }))\n    });\n\n    /**\n     * This command has the same payload format as the Set Weekly Schedule.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.6\n     */\n    export interface GetWeeklyScheduleResponse extends TypeFromSchema<typeof TlvGetWeeklyScheduleResponse> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.9\n     */\n    export const RemoteSensing = {\n        /**\n         * Calculated Local Temperature is derived from a remote node\n         */\n        localTemperature: BitFlag(0),\n\n        /**\n         * OutdoorTemperature is derived from a remote node\n         *\n         * This bit shall be supported if the OutdoorTemperature attribute is supported.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.9.1\n         */\n        outdoorTemperature: BitFlag(1),\n\n        /**\n         * Occupancy is derived from a remote node\n         */\n        occupancy: BitFlag(2)\n    };\n\n    /**\n     * NOTE\n     *\n     * CoolingAndHeating\n     *\n     * A thermostat indicating it supports CoolingAndHeating (or CoolingAndHeatingWithReheat) SHOULD be able to request\n     * heating or cooling on demand and will usually support the Auto SystemMode.\n     *\n     * Systems which support cooling or heating, requiring external intervention to change modes or where the whole\n     * building must be in the same mode, SHOULD report CoolingOnly or HeatingOnly based on the current capability.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.18\n     */\n    export enum ControlSequenceOfOperation {\n        /**\n         * Heat and Emergency are not possible\n         */\n        CoolingOnly = 0,\n\n        /**\n         * Heat and Emergency are not possible\n         */\n        CoolingWithReheat = 1,\n\n        /**\n         * Cool and precooling (see Terms) are not possible\n         */\n        HeatingOnly = 2,\n\n        /**\n         * Cool and precooling are not possible\n         */\n        HeatingWithReheat = 3,\n\n        /**\n         * All modes are possible\n         */\n        CoolingAndHeating = 4,\n\n        /**\n         * All modes are possible\n         */\n        CoolingAndHeatingWithReheat = 5\n    }\n\n    /**\n     * Table 35. Interpretation of Heat, Cool and Auto SystemModeEnum Values\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.21\n     */\n    export enum SystemMode {\n        /**\n         * The Thermostat does not generate demand for Cooling or Heating\n         */\n        Off = 0,\n\n        /**\n         * Demand is generated for either Cooling or Heating, as required\n         */\n        Auto = 1,\n\n        /**\n         * Demand is only generated for Cooling\n         */\n        Cool = 3,\n\n        /**\n         * Demand is only generated for Heating\n         */\n        Heat = 4,\n\n        /**\n         * 2nd stage heating is in use to achieve desired temperature\n         */\n        EmergencyHeat = 5,\n\n        /**\n         * (see Terms)\n         */\n        Precooling = 6,\n\n        FanOnly = 7,\n        Dry = 8,\n        Sleep = 9\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.23\n     */\n    export enum TemperatureSetpointHold {\n        /**\n         * Follow scheduling program\n         */\n        SetpointHoldOff = 0,\n\n        /**\n         * Maintain current setpoint, regardless of schedule transitions\n         */\n        SetpointHoldOn = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.7\n     */\n    export const ProgrammingOperationMode = {\n        /**\n         * Schedule programming mode. This enables any programmed weekly schedule configurations.\n         */\n        scheduleActive: BitFlag(0),\n\n        /**\n         * Auto/recovery mode\n         */\n        autoRecovery: BitFlag(1),\n\n        /**\n         * Economy/EnergyStar mode\n         */\n        economy: BitFlag(2)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.8\n     */\n    export const RelayState = {\n        /**\n         * Heat State On\n         */\n        heat: BitFlag(0),\n\n        /**\n         * Cool State On\n         */\n        cool: BitFlag(1),\n\n        /**\n         * Fan State On\n         */\n        fan: BitFlag(2),\n\n        /**\n         * Heat 2nd State On\n         */\n        heatStage2: BitFlag(3),\n\n        /**\n         * Cool 2nd State On\n         */\n        coolStage2: BitFlag(4),\n\n        /**\n         * Fan 2nd State On\n         */\n        fanStage2: BitFlag(5),\n\n        /**\n         * Fan 3rd Stage On\n         */\n        fanStage3: BitFlag(6)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.19\n     */\n    export enum SetpointChangeSource {\n        /**\n         * Manual, user-initiated setpoint change via the thermostat\n         */\n        Manual = 0,\n\n        /**\n         * Schedule/internal programming-initiated setpoint change\n         */\n        Schedule = 1,\n\n        /**\n         * Externally-initiated setpoint change (e.g., DRLC cluster command, attribute write)\n         */\n        External = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.16\n     */\n    export enum AcType {\n        /**\n         * Unknown AC Type\n         */\n        Unknown = 0,\n\n        /**\n         * Cooling and Fixed Speed\n         */\n        CoolingFixed = 1,\n\n        /**\n         * Heat Pump and Fixed Speed\n         */\n        HeatPumpFixed = 2,\n\n        /**\n         * Cooling and Inverter\n         */\n        CoolingInverter = 3,\n\n        /**\n         * Heat Pump and Inverter\n         */\n        HeatPumpInverter = 4\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.15\n     */\n    export enum AcRefrigerantType {\n        /**\n         * Unknown Refrigerant Type\n         */\n        Unknown = 0,\n\n        /**\n         * R22 Refrigerant\n         */\n        R22 = 1,\n\n        /**\n         * R410a Refrigerant\n         */\n        R410A = 2,\n\n        /**\n         * R407c Refrigerant\n         */\n        R407C = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.13\n     */\n    export enum AcCompressorType {\n        /**\n         * Unknown compressor type\n         */\n        Unknown = 0,\n\n        /**\n         * Max working ambient 43 \u00B0C\n         */\n        T1 = 1,\n\n        /**\n         * Max working ambient 35 \u00B0C\n         */\n        T2 = 2,\n\n        /**\n         * Max working ambient 52 \u00B0C\n         */\n        T3 = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.4\n     */\n    export const AcErrorCode = {\n        /**\n         * Compressor Failure or Refrigerant Leakage\n         */\n        compressorFail: BitFlag(0),\n\n        /**\n         * Room Temperature Sensor Failure\n         */\n        roomSensorFail: BitFlag(1),\n\n        /**\n         * Outdoor Temperature Sensor Failure\n         */\n        outdoorSensorFail: BitFlag(2),\n\n        /**\n         * Indoor Coil Temperature Sensor Failure\n         */\n        coilSensorFail: BitFlag(3),\n\n        /**\n         * Fan Failure\n         */\n        fanFail: BitFlag(4)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.14\n     */\n    export enum AcLouverPosition {\n        /**\n         * Fully Closed\n         */\n        Closed = 1,\n\n        /**\n         * Fully Open\n         */\n        Open = 2,\n\n        /**\n         * Quarter Open\n         */\n        Quarter = 3,\n\n        /**\n         * Half Open\n         */\n        Half = 4,\n\n        /**\n         * Three Quarters Open\n         */\n        ThreeQuarters = 5\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.12\n     */\n    export enum AcCapacityFormat {\n        /**\n         * British Thermal Unit per Hour\n         */\n        BtUh = 0\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.17\n     */\n    export enum SetpointRaiseLowerMode {\n        /**\n         * Adjust Heat Setpoint\n         */\n        Heat = 0,\n\n        /**\n         * Adjust Cool Setpoint\n         */\n        Cool = 1,\n\n        /**\n         * Adjust Heat Setpoint and Cool Setpoint\n         */\n        Both = 2\n    }\n\n    /**\n     * Input to the Thermostat setpointRaiseLower command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.1\n     */\n    export const TlvSetpointRaiseLowerRequest = TlvObject({\n        mode: TlvField(0, TlvEnum<SetpointRaiseLowerMode>()),\n        amount: TlvField(1, TlvInt8)\n    });\n\n    /**\n     * Input to the Thermostat setpointRaiseLower command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.1\n     */\n    export interface SetpointRaiseLowerRequest extends TypeFromSchema<typeof TlvSetpointRaiseLowerRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.5\n     */\n    export const AlarmCode = {\n        /**\n         * Initialization failure. The device failed to complete initialization at power-up.\n         */\n        initialization: BitFlag(0),\n\n        /**\n         * Hardware failure\n         */\n        hardware: BitFlag(1),\n\n        /**\n         * Self-calibration failure\n         */\n        selfCalibration: BitFlag(2)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.6\n     */\n    export const HvacSystemType = {\n        /**\n         * Stage of cooling the HVAC system is using.\n         *\n         * These bits shall indicate what stage of cooling the HVAC system is using.\n         *\n         *   \u2022 00 = Cool Stage 1\n         *\n         *   \u2022 01 = Cool Stage 2\n         *\n         *   \u2022 10 = Cool Stage 3\n         *\n         *   \u2022 11 = Reserved\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.6.1\n         */\n        coolingStage: BitField(0, 2),\n\n        /**\n         * Stage of heating the HVAC system is using.\n         *\n         * These bits shall indicate what stage of heating the HVAC system is using.\n         *\n         *   \u2022 00 = Heat Stage 1\n         *\n         *   \u2022 01 = Heat Stage 2\n         *\n         *   \u2022 10 = Heat Stage 3\n         *\n         *   \u2022 11 = Reserved\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.6.2\n         */\n        heatingStage: BitField(2, 2),\n\n        /**\n         * Is the heating type Heat Pump.\n         *\n         * This bit shall indicate whether the HVAC system is conventional or a heat pump.\n         *\n         *   \u2022 0 = Conventional\n         *\n         *   \u2022 1 = Heat Pump\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.6.3\n         */\n        heatingIsHeatPump: BitFlag(4),\n\n        /**\n         * Does the HVAC system use fuel.\n         *\n         * This bit shall indicate whether the HVAC system uses fuel.\n         *\n         *   \u2022 0 = Does not use fuel\n         *\n         *   \u2022 1 = Uses fuel\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.8.6.4\n         */\n        heatingUsesFuel: BitFlag(5)\n    };\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature Occupancy.\n     */\n    export const OccupancyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates whether the heated/cooled space is occupied or not, as measured locally or remotely (over the\n             * network).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.5\n             */\n            occupancy: Attribute(\n                0x2,\n                TlvBitmap(TlvUInt8, OccupancySensing.Occupancy),\n                { default: BitsFromPartial(OccupancySensing.Occupancy, { occupied: true }) }\n            )\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature Heating.\n     */\n    export const HeatingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9\n             */\n            absMinHeatSetpointLimit: OptionalFixedAttribute(0x3, TlvInt16, { default: 700 }),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9\n             */\n            absMaxHeatSetpointLimit: OptionalFixedAttribute(0x4, TlvInt16, { default: 3000 }),\n\n            /**\n             * Indicates the level of heating demanded by the PI loop in percent. This value is 0 when the thermostat\n             * is in \u201Coff\u201D or \u201Ccooling\u201D mode.\n             *\n             * This attribute is reported regularly and may be used to control a heating device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.11\n             */\n            piHeatingDemand: OptionalAttribute(0x8, TlvUInt8.bound({ max: 100 })),\n\n            /**\n             * Indicates the heating mode setpoint when the room is occupied.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute such that these\n             * constraints are violated, a response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the occupancy status of the room is unknown, this attribute shall be used as the heating mode\n             * setpoint.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.15\n             */\n            occupiedHeatingSetpoint: WritableAttribute(\n                0x12,\n                TlvInt16,\n                { scene: true, persistent: true, default: 2000 }\n            ),\n\n            /**\n             * Indicates the minimum level that the heating setpoint may be set to.\n             *\n             * This attribute, and the following three attributes, allow the user to define setpoint limits more\n             * constrictive than the manufacturer imposed ones. Limiting users (e.g., in a commercial building) to such\n             * setpoint limits can help conserve power.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which\n             * conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit\n             * this attribute to be set to the desired value. If an attempt is made to set this attribute to a value\n             * which is not consistent with the constraints and cannot be resolved by modifying setpoints then a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.18\n             */\n            minHeatSetpointLimit: OptionalWritableAttribute(\n                0x15,\n                TlvInt16,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the maximum level that the heating setpoint may be set to.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which\n             * conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit\n             * this attribute to be set to the desired value. If an attempt is made to set this attribute to a value\n             * which is not consistent with the constraints and cannot be resolved by modifying setpoints then a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.19\n             */\n            maxHeatSetpointLimit: OptionalWritableAttribute(\n                0x16,\n                TlvInt16,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature Cooling.\n     */\n    export const CoolingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the absolute minimum level that the cooling setpoint may be set to. This is a limitation\n             * imposed by the manufacturer.\n             *\n             * Refer to Setpoint Limits for constraints\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.8\n             */\n            absMinCoolSetpointLimit: OptionalFixedAttribute(0x5, TlvInt16, { default: 1600 }),\n\n            /**\n             * Indicates the absolute maximum level that the cooling setpoint may be set to. This is a limitation\n             * imposed by the manufacturer.\n             *\n             * Refer to Setpoint Limits for constraints\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.9\n             */\n            absMaxCoolSetpointLimit: OptionalFixedAttribute(0x6, TlvInt16, { default: 3200 }),\n\n            /**\n             * Indicates the level of cooling demanded by the PI (proportional integral) control loop in use by the\n             * thermostat (if any), in percent. This value is 0 when the thermostat is in \u201Coff\u201D or \u201Cheating\u201D mode.\n             *\n             * This attribute is reported regularly and may be used to control a cooling device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.10\n             */\n            piCoolingDemand: OptionalAttribute(0x7, TlvUInt8.bound({ max: 100 })),\n\n            /**\n             * Indicates the cooling mode setpoint when the room is occupied.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute such that these\n             * constraints are violated, a response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the occupancy status of the room is unknown, this attribute shall be used as the cooling mode\n             * setpoint.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.14\n             */\n            occupiedCoolingSetpoint: WritableAttribute(\n                0x11,\n                TlvInt16,\n                { scene: true, persistent: true, default: 2600 }\n            ),\n\n            /**\n             * Indicates the minimum level that the cooling setpoint may be set to.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which\n             * conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit\n             * this attribute to be set to the desired value. If an attempt is made to set this attribute to a value\n             * which is not consistent with the constraints and cannot be resolved by modifying setpoints then a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.20\n             */\n            minCoolSetpointLimit: OptionalWritableAttribute(\n                0x17,\n                TlvInt16,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the maximum level that the cooling setpoint may be set to.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which\n             * conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit\n             * this attribute to be set to the desired value. If an attempt is made to set this attribute to a value\n             * which is not consistent with the constraints and cannot be resolved by modifying setpoints then a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.21\n             */\n            maxCoolSetpointLimit: OptionalWritableAttribute(\n                0x18,\n                TlvInt16,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if doesn't support feature LTNE.\n     */\n    export const NotLocalTemperatureNotExposedComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the offset the Thermostat server shall make to the measured temperature (locally or remotely)\n             * to adjust the Calculated Local Temperature prior to using, displaying or reporting it.\n             *\n             * The purpose of this attribute is to adjust the calibration of the Thermostat server per the user\u2019s\n             * preferences (e.g., to match if there are multiple servers displaying different values for the same HVAC\n             * area) or compensate for variability amongst temperature sensors.\n             *\n             * If a Thermostat client attempts to write LocalTemperatureCalibration attribute to an unsupported value\n             * (e.g., out of the range supported by the Thermostat server), the Thermostat server shall respond with a\n             * status of SUCCESS and set the value of LocalTemperatureCalibration to the upper or lower limit reached.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.13\n             */\n            localTemperatureCalibration: OptionalWritableAttribute(\n                0x10,\n                TlvInt8,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports features Cooling and Occupancy.\n     */\n    export const CoolingAndOccupancyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the cooling mode setpoint when the room is unoccupied.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute such that these\n             * constraints are violated, a response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the occupancy status of the room is unknown, this attribute shall NOT be used.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.16\n             */\n            unoccupiedCoolingSetpoint: WritableAttribute(0x13, TlvInt16, { persistent: true, default: 2600 })\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports features Heating and Occupancy.\n     */\n    export const HeatingAndOccupancyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the heating mode setpoint when the room is unoccupied.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute such that these\n             * constraints are violated, a response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the occupancy status of the room is unknown, this attribute shall NOT be used.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.17\n             */\n            unoccupiedHeatingSetpoint: WritableAttribute(0x14, TlvInt16, { persistent: true, default: 2000 })\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature AutoMode.\n     */\n    export const AutoModeComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * On devices which support the AUTO feature, this attribute shall indicate the minimum difference between\n             * the Heat Setpoint and the Cool Setpoint.\n             *\n             * Refer to Setpoint Limits for constraints. If an attempt is made to set this attribute to a value which\n             * conflicts with setpoint values then those setpoints shall be adjusted by the minimum amount to permit\n             * this attribute to be set to the desired value. If an attempt is made to set this attribute to a value\n             * which is not consistent with the constraints and cannot be resolved by modifying setpoints then a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.22\n             */\n            minSetpointDeadBand: WritableAttribute(0x19, TlvInt8, { persistent: true, writeAcl: AccessLevel.Manage }),\n\n            /**\n             * Indicates the running mode of the thermostat. This attribute uses the same values as SystemModeEnum but\n             * can only be Off, Cool or Heat. This attribute is intended to provide additional information when the\n             * thermostat\u2019s system mode is in auto mode.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.27\n             */\n            thermostatRunningMode: OptionalAttribute(\n                0x1e,\n                TlvEnum<ThermostatRunningMode>(),\n                { default: ThermostatRunningMode.Off }\n            )\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature ScheduleConfiguration.\n     */\n    export const ScheduleConfigurationComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the day of the week that this thermostat considers to be the start of week for weekly setpoint\n             * scheduling.\n             *\n             * This attribute may be able to be used as the base to determine if the device supports weekly scheduling\n             * by reading the attribute. Successful response means that the weekly scheduling is supported.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.28\n             */\n            startOfWeek: FixedAttribute(0x20, TlvEnum<StartOfWeek>()),\n\n            /**\n             * Indicates how many weekly schedule transitions the thermostat is capable of handling.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.29\n             */\n            numberOfWeeklyTransitions: FixedAttribute(0x21, TlvUInt8, { default: 0 }),\n\n            /**\n             * Indicates how many daily schedule transitions the thermostat is capable of handling.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.30\n             */\n            numberOfDailyTransitions: FixedAttribute(0x22, TlvUInt8, { default: 0 })\n        },\n\n        commands: {\n            /**\n             * Upon receipt, the weekly schedule for updating setpoints shall be stored in the thermostat and SHOULD\n             * begin at the time of receipt. A status code shall be sent in response.\n             *\n             * When a command is received that requires a total number of transitions greater than the device supports,\n             * the status of the response shall be INSUFFICIENT_SPACE.\n             *\n             * When any of the setpoints sent in the sequence is out of range (AbsMin/MaxSetPointLimit), or when the\n             * Mode for Sequence field includes a mode not supported by the device, the status of the response shall be\n             * CONSTRAINT_ERROR and no setpoints from the entire sequence SHOULD be used.\n             *\n             * When an overlapping transition is detected, the status of the response shall be FAILURE.\n             *\n             * When a device which does not support multiple days in a command receives a command with more than one\n             * bit set in the DayOfWeekForSequence field, or when a device which does not support multiple modes in a\n             * command receives a command with more than one bit set in the ModeForSequence field, or when the contents\n             * of the Transitions field does not agree with NumberOfTransitionsForSequence, DayOfWeekForSequence or\n             * ModeForSequence, the status of the response shall be INVALID_COMMAND.\n             *\n             * When the transitions could be added successfully, the status of the response shall be SUCCESS.\n             *\n             * The set weekly schedule command is used to update the thermostat weekly setpoint schedule from a\n             * management system. If the thermostat already has a weekly setpoint schedule programmed, then it SHOULD\n             * replace each daily setpoint set as it receives the updates from the management system. For example, if\n             * the thermostat has 4 setpoints for every day of the week and is sent a Set Weekly Schedule command with\n             * one setpoint for Saturday then the thermostat SHOULD remove all 4 setpoints for Saturday and replace\n             * those with the updated setpoint but leave all other days unchanged. If the schedule is larger than what\n             * fits in one frame or contains more than 10 transitions, the schedule shall then be sent using multiple\n             * Set Weekly Schedule Commands.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.4\n             */\n            setWeeklySchedule: Command(\n                0x1,\n                TlvSetWeeklyScheduleRequest,\n                0x1,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Upon receipt, the unit SHOULD send in return the Get Weekly Schedule Response command. The Days to\n             * Return and Mode to Return fields are defined as bitmask for the flexibility to support multiple days and\n             * multiple modes within one command. If thermostat cannot handle incoming command with multiple days\n             * and/or multiple modes within one command, it shall send default response of INVALID_COMMAND in return.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.5\n             */\n            getWeeklySchedule: Command(0x2, TlvGetWeeklyScheduleRequest, 0x0, TlvGetWeeklyScheduleResponse),\n\n            /**\n             * This command is used to clear the weekly schedule. The Clear weekly schedule has no payload.\n             *\n             * Upon receipt, all transitions currently stored shall be cleared and a default response of SUCCESS shall\n             * be sent in response. There are no error responses to this command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.7\n             */\n            clearWeeklySchedule: Command(0x3, TlvNoArguments, 0x3, TlvNoResponse, { invokeAcl: AccessLevel.Manage })\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports feature Setback.\n     */\n    export const SetbackComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the amount that the Thermostat server will allow the Calculated Local Temperature to float\n             * above the OccupiedCoolingSetpoint (i.e., OccupiedCoolingSetpoint + OccupiedSetback) or below the\n             * OccupiedHeatingSetpoint setpoint (i.e., OccupiedHeatingSetpoint \u2013 OccupiedSetback) before initiating a\n             * state change to bring the temperature back to the user\u2019s desired setpoint. This attribute is sometimes\n             * also referred to as the \u201Cspan.\u201D\n             *\n             * The purpose of this attribute is to allow remote configuration of the span between the desired setpoint\n             * and the measured temperature to help prevent over-cycling and reduce energy bills, though this may\n             * result in lower comfort on the part of some users.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * If the Thermostat client attempts to write OccupiedSetback to a value greater than OccupiedSetbackMax,\n             * the Thermostat server shall set its OccupiedSetback value to OccupiedSetbackMax and shall send a Write\n             * Attribute Response command with a Status Code field enumeration of SUCCESS response.\n             *\n             * If the Thermostat client attempts to write OccupiedSetback to a value less than OccupiedSetbackMin, the\n             * Thermostat server shall set its OccupiedSetback value to OccupiedSetbackMin and shall send a Write\n             * Attribute Response command with a Status Code field enumeration of SUCCESS response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.38\n             */\n            occupiedSetback: WritableAttribute(\n                0x34,\n                TlvNullable(TlvUInt8),\n                { persistent: true, default: null, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the minimum value that the Thermostat server will allow the OccupiedSetback attribute to be\n             * configured by a user.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.39\n             */\n            occupiedSetbackMin: FixedAttribute(0x35, TlvNullable(TlvUInt8), { default: null }),\n\n            /**\n             * Indicates the maximum value that the Thermostat server will allow the OccupiedSetback attribute to be\n             * configured by a user.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.40\n             */\n            occupiedSetbackMax: FixedAttribute(0x36, TlvNullable(TlvUInt8), { default: null })\n        }\n    });\n\n    /**\n     * A ThermostatCluster supports these elements if it supports features Setback and Occupancy.\n     */\n    export const SetbackAndOccupancyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the amount that the Thermostat server will allow the Calculated Local Temperature to float\n             * above the UnoccupiedCoolingSetpoint (i.e., UnoccupiedCoolingSetpoint + UnoccupiedSetback) or below the\n             * UnoccupiedHeatingSetpoint setpoint (i.e., UnoccupiedHeatingSetpoint - UnoccupiedSetback) before\n             * initiating a state change to bring the temperature back to the user\u2019s desired setpoint. This attribute\n             * is sometimes also referred to as the \u201Cspan.\u201D\n             *\n             * The purpose of this attribute is to allow remote configuration of the span between the desired setpoint\n             * and the measured temperature to help prevent over-cycling and reduce energy bills, though this may\n             * result in lower comfort on the part of some users.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * If the Thermostat client attempts to write UnoccupiedSetback to a value greater than\n             * UnoccupiedSetbackMax, the Thermostat server shall set its UnoccupiedSetback value to\n             * UnoccupiedSetbackMax and shall send a Write Attribute Response command with a Status Code field\n             * enumeration of SUCCESS response.\n             *\n             * If the Thermostat client attempts to write UnoccupiedSetback to a value less than UnoccupiedSetbackMin,\n             * the Thermostat server shall set its UnoccupiedSetback value to UnoccupiedSetbackMin and shall send a\n             * Write Attribute Response command with a Status Code field enumeration of SUCCESS response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.41\n             */\n            unoccupiedSetback: WritableAttribute(\n                0x37,\n                TlvNullable(TlvUInt8),\n                { persistent: true, default: null, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the minimum value that the Thermostat server will allow the UnoccupiedSetback attribute to be\n             * configured by a user.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.42\n             */\n            unoccupiedSetbackMin: FixedAttribute(0x38, TlvNullable(TlvUInt8), { default: null }),\n\n            /**\n             * Indicates the maximum value that the Thermostat server will allow the UnoccupiedSetback attribute to be\n             * configured by a user.\n             *\n             * The null value indicates the attribute is unused.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.43\n             */\n            unoccupiedSetbackMax: FixedAttribute(0x39, TlvNullable(TlvUInt8), { default: null })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all Thermostat clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x201,\n        name: \"Thermostat\",\n        revision: 6,\n\n        features: {\n            /**\n             * Heating\n             *\n             * Thermostat is capable of managing a heating device\n             */\n            heating: BitFlag(0),\n\n            /**\n             * Cooling\n             *\n             * Thermostat is capable of managing a cooling device\n             */\n            cooling: BitFlag(1),\n\n            /**\n             * Occupancy\n             *\n             * Supports Occupied and Unoccupied setpoints\n             */\n            occupancy: BitFlag(2),\n\n            /**\n             * ScheduleConfiguration\n             *\n             * Supports remote configuration of a weekly schedule of setpoint transitions\n             */\n            scheduleConfiguration: BitFlag(3),\n\n            /**\n             * Setback\n             *\n             * Supports configurable setback (or span)\n             */\n            setback: BitFlag(4),\n\n            /**\n             * AutoMode\n             *\n             * Supports a System Mode of Auto\n             */\n            autoMode: BitFlag(5),\n\n            /**\n             * LocalTemperatureNotExposed\n             *\n             * This feature indicates that the Calculated Local Temperature used internally is unavailable to report\n             * externally, for example due to the temperature control being done by a separate subsystem which does not\n             * offer a view into the currently measured temperature, but allows setpoints to be provided.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.4.1\n             */\n            localTemperatureNotExposed: BitFlag(6)\n        },\n\n        attributes: {\n            /**\n             * Indicates the current Calculated Local Temperature, when available.\n             *\n             *   \u2022 If the LTNE feature is not supported:\n             *\n             *     \u25E6 If the LocalTemperatureCalibration is invalid or currently unavailable, the attribute shall report\n             *       null.\n             *\n             *     \u25E6 If the LocalTemperatureCalibration is valid, the attribute shall report that value.\n             *\n             *   \u2022 Otherwise, if the LTNE feature is supported, there is no feedback externally available for the\n             *     LocalTemperatureCalibration. In that case, the LocalTemperature attribute shall always report null.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.3\n             */\n            localTemperature: Attribute(0x0, TlvNullable(TlvInt16), { default: null }),\n\n            /**\n             * Indicates the outdoor temperature, as measured locally or remotely (over the network).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.4\n             */\n            outdoorTemperature: OptionalAttribute(0x1, TlvNullable(TlvInt16), { default: null }),\n\n            /**\n             * Indicates when the local temperature, outdoor temperature and occupancy are being sensed by remote\n             * networked sensors, rather than internal sensors.\n             *\n             * If the LTNE feature is present in the server, the LocalTemperature RemoteSensing bit value shall always\n             * report a value of 0.\n             *\n             * If the LocalTemperature RemoteSensing bit is written with a value of 1 when the LTNE feature is present,\n             * the write shall fail and the server shall report a CONSTRAINT_ERROR.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.23\n             */\n            remoteSensing: OptionalWritableAttribute(\n                0x1a,\n                TlvBitmap(TlvUInt8, RemoteSensing),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the overall operating environment of the thermostat, and thus the possible system modes that\n             * the thermostat can operate in.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.24\n             */\n            controlSequenceOfOperation: WritableAttribute(\n                0x1b,\n                TlvEnum<ControlSequenceOfOperation>(),\n                {\n                    persistent: true,\n                    default: ControlSequenceOfOperation.CoolingAndHeating,\n                    writeAcl: AccessLevel.Manage\n                }\n            ),\n\n            /**\n             * Indicates the current operating mode of the thermostat. Its value shall be limited by the\n             * ControlSequenceOfOperation attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.25\n             */\n            systemMode: WritableAttribute(\n                0x1c,\n                TlvEnum<SystemMode>(),\n                { scene: true, persistent: true, default: SystemMode.Auto, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the temperature hold status on the thermostat. If hold status is on, the thermostat SHOULD\n             * maintain the temperature setpoint for the current mode until a system mode change. If hold status is\n             * off, the thermostat SHOULD follow the setpoint transitions specified by its internal scheduling program.\n             * If the thermostat supports setpoint hold for a specific duration, it SHOULD also implement the\n             * TemperatureSetpointHoldDuration attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.31\n             */\n            temperatureSetpointHold: OptionalWritableAttribute(\n                0x23,\n                TlvEnum<TemperatureSetpointHold>(),\n                { persistent: true, default: TemperatureSetpointHold.SetpointHoldOff, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the period in minutes for which a setpoint hold is active. Thermostats that support hold for a\n             * specified duration SHOULD implement this attribute. The null value indicates the field is unused. All\n             * other values are reserved.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.32\n             */\n            temperatureSetpointHoldDuration: OptionalWritableAttribute(\n                0x24,\n                TlvNullable(TlvUInt16.bound({ max: 1440 })),\n                { persistent: true, default: null, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the operational state of the thermostat\u2019s programming. The thermostat shall modify its\n             * programming operation when this attribute is modified by a client and update this attribute when its\n             * programming operation is modified locally by a user. The thermostat may support more than one active\n             * ProgrammingOperationModeBitmap. For example, the thermostat may operate simultaneously in Schedule\n             * Programming Mode and Recovery Mode.\n             *\n             * Thermostats which contain a schedule may use this attribute to control how that schedule is used, even\n             * if they do not support the ScheduleConfiguration feature.\n             *\n             * When ScheduleActive is not set, the setpoint is altered only by manual up/down changes at the thermostat\n             * or remotely, not by internal schedule programming.\n             *\n             * NOTE\n             *\n             * Modifying the ScheduleActive bit does not clear or delete previous weekly schedule programming\n             * configurations.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.33\n             */\n            thermostatProgrammingOperationMode: OptionalWritableAttribute(\n                0x25,\n                TlvBitmap(TlvUInt8, ProgrammingOperationMode),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the current relay state of the heat, cool, and fan relays. Unimplemented outputs shall be\n             * treated as if they were Off.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.34\n             */\n            thermostatRunningState: OptionalAttribute(0x29, TlvBitmap(TlvUInt16, RelayState)),\n\n            /**\n             * Indicates the source of the current active OccupiedCoolingSetpoint or OccupiedHeatingSetpoint (i.e., who\n             * or what determined the current setpoint).\n             *\n             * This attribute enables service providers to determine whether changes to setpoints were initiated due to\n             * occupant comfort, scheduled programming or some other source (e.g., electric utility or other service\n             * provider). Because automation services may initiate frequent setpoint changes, this attribute clearly\n             * differentiates the source of setpoint changes made at the thermostat.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.35\n             */\n            setpointChangeSource: OptionalAttribute(\n                0x30,\n                TlvEnum<SetpointChangeSource>(),\n                { default: SetpointChangeSource.Manual }\n            ),\n\n            /**\n             * Indicates the delta between the current active OccupiedCoolingSetpoint or OccupiedHeatingSetpoint and\n             * the previous active setpoint. This attribute is meant to accompany the SetpointChangeSource attribute;\n             * devices implementing SetpointChangeAmount SHOULD also implement SetpointChangeSource.\n             *\n             * The null value indicates that the previous setpoint was unknown.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.36\n             */\n            setpointChangeAmount: OptionalAttribute(0x31, TlvNullable(TlvInt16), { default: null }),\n\n            /**\n             * Indicates the time in UTC at which the SetpointChangeAmount attribute change was recorded.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.37\n             */\n            setpointChangeSourceTimestamp: OptionalAttribute(0x32, TlvEpochS, { default: 0 }),\n\n            /**\n             * Indicates the delta between the Calculated Local Temperature and the OccupiedHeatingSetpoint or\n             * UnoccupiedHeatingSetpoint attributes at which the Thermostat server will operate in emergency heat mode.\n             *\n             * If the difference between the Calculated Local Temperature and OccupiedCoolingSetpoint or\n             * UnoccupiedCoolingSetpoint is greater than or equal to the EmergencyHeatDelta and the Thermostat server\u2019s\n             * SystemMode attribute is in a heating-related mode, then the Thermostat server shall immediately switch\n             * to the SystemMode attribute value that provides the highest stage of heating (e.g., emergency heat) and\n             * continue operating in that running state until the OccupiedHeatingSetpoint value is reached. For example:\n             *\n             *   \u2022 Calculated Local Temperature = 10.0\u00B0C\n             *\n             *   \u2022 OccupiedHeatingSetpoint = 16.0\u00B0C\n             *\n             *   \u2022 EmergencyHeatDelta = 2.0\u00B0C\n             *\n             * \u21D2 OccupiedHeatingSetpoint - Calculated Local Temperature \u2265? EmergencyHeatDelta\n             *\n             * \u21D2 16\u00B0C - 10\u00B0C \u2265? 2\u00B0C\n             *\n             * \u21D2 TRUE >>> Thermostat server changes its SystemMode to operate in 2nd stage or emergency heat mode\n             *\n             * The purpose of this attribute is to provide Thermostat clients the ability to configure rapid heating\n             * when a setpoint is of a specified amount greater than the measured temperature. This allows the heated\n             * space to be quickly heated to the desired level set by the user.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.44\n             */\n            emergencyHeatDelta: OptionalWritableAttribute(\n                0x3a,\n                TlvUInt8,\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the type of Mini Split ACTypeEnum of Mini Split AC is defined depending on how Cooling and\n             * Heating condition is achieved by Mini Split AC.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.45\n             */\n            acType: OptionalWritableAttribute(\n                0x40,\n                TlvEnum<AcType>(),\n                { persistent: true, default: AcType.Unknown, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates capacity of Mini Split AC in terms of the format defined by the ACCapacityFormat attribute\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.46\n             */\n            acCapacity: OptionalWritableAttribute(\n                0x41,\n                TlvUInt16,\n                { persistent: true, default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates type of refrigerant used within the Mini Split AC.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.47\n             */\n            acRefrigerantType: OptionalWritableAttribute(\n                0x42,\n                TlvEnum<AcRefrigerantType>(),\n                { persistent: true, default: AcRefrigerantType.Unknown, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the type of compressor used within the Mini Split AC.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.48\n             */\n            acCompressorType: OptionalWritableAttribute(\n                0x43,\n                TlvEnum<AcCompressorType>(),\n                { persistent: true, default: AcCompressorType.Unknown, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the type of errors encountered within the Mini Split AC.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.49\n             */\n            acErrorCode: OptionalWritableAttribute(\n                0x44,\n                TlvBitmap(TlvUInt32, AcErrorCode),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the position of Louver on the AC.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.50\n             */\n            acLouverPosition: OptionalWritableAttribute(\n                0x45,\n                TlvEnum<AcLouverPosition>(),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates the temperature of the AC coil, as measured locally or remotely (over the network).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.51\n             */\n            acCoilTemperature: OptionalAttribute(0x46, TlvNullable(TlvInt16), { default: null }),\n\n            /**\n             * Indicates the format for the ACCapacity attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.9.52\n             */\n            acCapacityFormat: OptionalWritableAttribute(\n                0x47,\n                TlvEnum<AcCapacityFormat>(),\n                { persistent: true, default: AcCapacityFormat.BtUh, writeAcl: AccessLevel.Manage }\n            )\n        },\n\n        commands: {\n            /**\n             * Upon receipt, the attributes for the indicated setpoint(s) shall have the amount specified in the Amount\n             * field added to them. If the resulting value is outside the limits imposed by MinCoolSetpointLimit,\n             * MaxCoolSetpointLimit, MinHeatSetpointLimit and MaxHeatSetpointLimit, the value is clamped to those\n             * limits. This is not considered an error condition.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3.10.1\n             */\n            setpointRaiseLower: Command(0x0, TlvSetpointRaiseLowerRequest, 0x0, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which ThermostatCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { occupancy: true }, component: OccupancyComponent },\n            { flags: { heating: true }, component: HeatingComponent },\n            { flags: { cooling: true }, component: CoolingComponent },\n            { flags: { localTemperatureNotExposed: false }, component: NotLocalTemperatureNotExposedComponent },\n            { flags: { cooling: true, occupancy: true }, component: CoolingAndOccupancyComponent },\n            { flags: { heating: true, occupancy: true }, component: HeatingAndOccupancyComponent },\n            { flags: { autoMode: true }, component: AutoModeComponent },\n            { flags: { scheduleConfiguration: true }, component: ScheduleConfigurationComponent },\n            { flags: { setback: true }, component: SetbackComponent },\n            { flags: { setback: true, occupancy: true }, component: SetbackAndOccupancyComponent },\n            { flags: { autoMode: true, heating: false }, component: false },\n            { flags: { autoMode: true, cooling: false }, component: false },\n            { flags: { heating: false, cooling: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides an interface to the functionality of a thermostat.\n     *\n     * Per the Matter specification you cannot use {@link ThermostatCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.3\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const OCC = { occupancy: true };\n    const HEAT = { heating: true };\n    const COOL = { cooling: true };\n    const COOL_OCC = { cooling: true, occupancy: true };\n    const HEAT_OCC = { heating: true, occupancy: true };\n    const AUTO = { autoMode: true };\n    const SCH = { scheduleConfiguration: true };\n    const SB = { setback: true };\n    const SB_OCC = { setback: true, occupancy: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            occupancy: MutableCluster.AsConditional(OccupancyComponent.attributes.occupancy, { mandatoryIf: [OCC] }),\n            absMinHeatSetpointLimit: MutableCluster.AsConditional(\n                HeatingComponent.attributes.absMinHeatSetpointLimit,\n                { optionalIf: [HEAT] }\n            ),\n            absMaxHeatSetpointLimit: MutableCluster.AsConditional(\n                HeatingComponent.attributes.absMaxHeatSetpointLimit,\n                { optionalIf: [HEAT] }\n            ),\n            absMinCoolSetpointLimit: MutableCluster.AsConditional(\n                CoolingComponent.attributes.absMinCoolSetpointLimit,\n                { optionalIf: [COOL] }\n            ),\n            absMaxCoolSetpointLimit: MutableCluster.AsConditional(\n                CoolingComponent.attributes.absMaxCoolSetpointLimit,\n                { optionalIf: [COOL] }\n            ),\n            piCoolingDemand: MutableCluster.AsConditional(\n                CoolingComponent.attributes.piCoolingDemand,\n                { optionalIf: [COOL] }\n            ),\n            piHeatingDemand: MutableCluster.AsConditional(\n                HeatingComponent.attributes.piHeatingDemand,\n                { optionalIf: [HEAT] }\n            ),\n            localTemperatureCalibration: MutableCluster.AsConditional(\n                NotLocalTemperatureNotExposedComponent.attributes.localTemperatureCalibration,\n                { optionalIf: [] }\n            ),\n            occupiedCoolingSetpoint: MutableCluster.AsConditional(\n                CoolingComponent.attributes.occupiedCoolingSetpoint,\n                { mandatoryIf: [COOL] }\n            ),\n            occupiedHeatingSetpoint: MutableCluster.AsConditional(\n                HeatingComponent.attributes.occupiedHeatingSetpoint,\n                { mandatoryIf: [HEAT] }\n            ),\n            unoccupiedCoolingSetpoint: MutableCluster.AsConditional(\n                CoolingAndOccupancyComponent.attributes.unoccupiedCoolingSetpoint,\n                { mandatoryIf: [COOL_OCC] }\n            ),\n            unoccupiedHeatingSetpoint: MutableCluster.AsConditional(\n                HeatingAndOccupancyComponent.attributes.unoccupiedHeatingSetpoint,\n                { mandatoryIf: [HEAT_OCC] }\n            ),\n            minHeatSetpointLimit: MutableCluster.AsConditional(\n                HeatingComponent.attributes.minHeatSetpointLimit,\n                { optionalIf: [HEAT] }\n            ),\n            maxHeatSetpointLimit: MutableCluster.AsConditional(\n                HeatingComponent.attributes.maxHeatSetpointLimit,\n                { optionalIf: [HEAT] }\n            ),\n            minCoolSetpointLimit: MutableCluster.AsConditional(\n                CoolingComponent.attributes.minCoolSetpointLimit,\n                { optionalIf: [COOL] }\n            ),\n            maxCoolSetpointLimit: MutableCluster.AsConditional(\n                CoolingComponent.attributes.maxCoolSetpointLimit,\n                { optionalIf: [COOL] }\n            ),\n            minSetpointDeadBand: MutableCluster.AsConditional(\n                AutoModeComponent.attributes.minSetpointDeadBand,\n                { mandatoryIf: [AUTO] }\n            ),\n            thermostatRunningMode: MutableCluster.AsConditional(\n                AutoModeComponent.attributes.thermostatRunningMode,\n                { optionalIf: [AUTO] }\n            ),\n            startOfWeek: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.attributes.startOfWeek,\n                { mandatoryIf: [SCH] }\n            ),\n            numberOfWeeklyTransitions: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.attributes.numberOfWeeklyTransitions,\n                { mandatoryIf: [SCH] }\n            ),\n            numberOfDailyTransitions: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.attributes.numberOfDailyTransitions,\n                { mandatoryIf: [SCH] }\n            ),\n            occupiedSetback: MutableCluster.AsConditional(\n                SetbackComponent.attributes.occupiedSetback,\n                { mandatoryIf: [SB] }\n            ),\n            occupiedSetbackMin: MutableCluster.AsConditional(\n                SetbackComponent.attributes.occupiedSetbackMin,\n                { mandatoryIf: [SB] }\n            ),\n            occupiedSetbackMax: MutableCluster.AsConditional(\n                SetbackComponent.attributes.occupiedSetbackMax,\n                { mandatoryIf: [SB] }\n            ),\n            unoccupiedSetback: MutableCluster.AsConditional(\n                SetbackAndOccupancyComponent.attributes.unoccupiedSetback,\n                { mandatoryIf: [SB_OCC] }\n            ),\n            unoccupiedSetbackMin: MutableCluster.AsConditional(\n                SetbackAndOccupancyComponent.attributes.unoccupiedSetbackMin,\n                { mandatoryIf: [SB_OCC] }\n            ),\n            unoccupiedSetbackMax: MutableCluster.AsConditional(\n                SetbackAndOccupancyComponent.attributes.unoccupiedSetbackMax,\n                { mandatoryIf: [SB_OCC] }\n            )\n        },\n\n        commands: {\n            ...Base.commands,\n            setWeeklySchedule: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.commands.setWeeklySchedule,\n                { mandatoryIf: [SCH] }\n            ),\n            getWeeklySchedule: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.commands.getWeeklySchedule,\n                { mandatoryIf: [SCH] }\n            ),\n            clearWeeklySchedule: MutableCluster.AsConditional(\n                ScheduleConfigurationComponent.commands.clearWeeklySchedule,\n                { mandatoryIf: [SCH] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all Thermostat features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ThermostatCluster = Thermostat.Cluster;\nexport const ThermostatCluster = Thermostat.Cluster;\nClusterRegistry.register(Thermostat.Complete);\n"],
  "mappings": "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",
  "names": ["Thermostat", "Feature", "ThermostatRunningMode", "StartOfWeek", "ControlSequenceOfOperation", "SystemMode", "TemperatureSetpointHold", "SetpointChangeSource", "AcType", "AcRefrigerantType", "AcCompressorType", "AcLouverPosition", "AcCapacityFormat", "SetpointRaiseLowerMode"]
}
