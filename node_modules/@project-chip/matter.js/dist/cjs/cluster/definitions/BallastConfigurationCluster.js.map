{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/BallastConfigurationCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, WritableAttribute, AccessLevel, OptionalWritableAttribute } from \"../Cluster.js\";\nimport { TlvUInt8, TlvBitmap, TlvUInt24 } from \"../../tlv/TlvNumber.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace BallastConfiguration {\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.5.1\n     */\n    export const BallastStatus = {\n        /**\n         * Operational state of the ballast.\n         *\n         * This bit shall indicate whether the ballast is operational.\n         *\n         *   \u2022 0 = The ballast is fully operational\n         *\n         *   \u2022 1 = The ballast is not fully operational\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.5.1.1\n         */\n        ballastNonOperational: BitFlag(0),\n\n        /**\n         * Operational state of the lamps.\n         *\n         * This bit shall indicate whether all lamps is operational.\n         *\n         *   \u2022 0 = All lamps are operational\n         *\n         *   \u2022 1 = One or more lamp is not in its socket or is faulty\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.5.1.2\n         */\n        lampFailure: BitFlag(1)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.5.2\n     */\n    export const LampAlarmMode = {\n        /**\n         * State of LampBurnHours alarm generation\n         *\n         * This bit shall indicate that the LampBurnHours attribute may generate an alarm.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.5.2.1\n         */\n        lampBurnHours: BitFlag(0)\n    };\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x301,\n        name: \"BallastConfiguration\",\n        revision: 4,\n\n        attributes: {\n            /**\n             * This attribute shall specify the minimum light output the ballast can achieve according to the dimming\n             * light curve (see Dimming Curve).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.1\n             */\n            physicalMinLevel: Attribute(0x0, TlvUInt8.bound({ min: 1, max: 254 }), { default: 1 }),\n\n            /**\n             * This attribute shall specify the maximum light output the ballast can achieve according to the dimming\n             * light curve (see Dimming Curve).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.2\n             */\n            physicalMaxLevel: Attribute(0x1, TlvUInt8.bound({ min: 1, max: 254 }), { default: 254 }),\n\n            /**\n             * This attribute shall specify the status of various aspects of the ballast or the connected lights, see\n             * BallastStatusBitmap.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.3\n             */\n            ballastStatus: OptionalAttribute(0x2, TlvBitmap(TlvUInt8, BallastStatus)),\n\n            /**\n             * This attribute shall specify the light output of the ballast according to the dimming light curve (see\n             * Dimming Curve) when the Level Control Cluster\u2019s CurrentLevel attribute equals to 1 (and the On/Off\n             * Cluster\u2019s OnOff attribute equals to TRUE).\n             *\n             * The value of this attribute shall be both greater than or equal to PhysicalMinLevel and less than or\n             * equal to MaxLevel. If an attempt is made to set this attribute to a level where these conditions are not\n             * met, a response shall be returned with status code set to CONSTRAINT_ERROR, and the level shall NOT be\n             * set.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.4\n             */\n            minLevel: WritableAttribute(0x10, TlvUInt8, { writeAcl: AccessLevel.Manage }),\n\n            /**\n             * This attribute shall specify the light output of the ballast according to the dimming light curve\n             *\n             * (see Dimming Curve) when the Level Control Cluster\u2019s CurrentLevel attribute equals to 254 (and the\n             * On/Off Cluster\u2019s OnOff attribute equals to TRUE).\n             *\n             * The value of this attribute shall be both less than or equal to PhysicalMaxLevel and greater than or\n             * equal to MinLevel. If an attempt is made to set this attribute to a level where these conditions are not\n             * met, a response shall be returned with status code set to CONSTRAINT_ERROR, and the level shall NOT be\n             * set.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.5\n             */\n            maxLevel: WritableAttribute(0x11, TlvUInt8, { writeAcl: AccessLevel.Manage }),\n\n            /**\n             * This attribute shall specify the ballast factor, as a percentage, of the ballast/lamp combination, prior\n             * to any adjustment.\n             *\n             * A value of null indicates in invalid value.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.6\n             */\n            intrinsicBallastFactor: OptionalWritableAttribute(\n                0x14,\n                TlvNullable(TlvUInt8),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the multiplication factor, as a percentage, to be applied to the configured\n             * light output of the lamps. A typical use for this attribute is to compensate for reduction in efficiency\n             * over the lifetime of a lamp.\n             *\n             * The light output is given by\n             *\n             * actual light output = configured light output x BallastFactorAdjustment / 100%\n             *\n             * The range for this attribute is manufacturer dependent. If an attempt is made to set this attribute to a\n             * level that cannot be supported, a response shall be returned with status code set to CONSTRAINT_ERROR,\n             * and the level shall NOT be changed. The value of null indicates that ballast factor scaling is not in\n             * use.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.7\n             */\n            ballastFactorAdjustment: OptionalWritableAttribute(\n                0x15,\n                TlvNullable(TlvUInt8.bound({ min: 100 })),\n                { default: null, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the number of lamps connected to this ballast. (Note 1: this number does\n             * not take into account whether lamps are actually in their sockets or not).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.8\n             */\n            lampQuantity: Attribute(0x20, TlvUInt8),\n\n            /**\n             * This attribute shall specify the type of lamps (including their wattage) connected to the ballast.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.9\n             */\n            lampType: OptionalWritableAttribute(\n                0x30,\n                TlvString.bound({ maxLength: 16 }),\n                { default: \"\", writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the name of the manufacturer of the currently connected lamps.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.10\n             */\n            lampManufacturer: OptionalWritableAttribute(\n                0x31,\n                TlvString.bound({ maxLength: 16 }),\n                { default: \"\", writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the number of hours of use the lamps are rated for by the manufacturer.\n             *\n             * A value of null indicates an invalid or unknown time.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.11\n             */\n            lampRatedHours: OptionalWritableAttribute(\n                0x32,\n                TlvNullable(TlvUInt24),\n                { default: null, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the length of time, in hours, the currently connected lamps have been\n             * operated, cumulative since the last re-lamping. Burn hours shall NOT be accumulated if the lamps are off.\n             *\n             * This attribute SHOULD be reset to zero (e.g., remotely) when the lamps are changed. If partially used\n             * lamps are connected, LampBurnHours SHOULD be updated to reflect the burn hours of the lamps.\n             *\n             * A value of null indicates an invalid or unknown time.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.12\n             */\n            lampBurnHours: OptionalWritableAttribute(\n                0x33,\n                TlvNullable(TlvUInt24),\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify which attributes may cause an alarm notification to be generated. Ain each\n             * bit position means that its associated attribute is able to generate an alarm.\n             *\n             * NOTE All alarms are also logged in the alarm table \u2013 see Alarms cluster.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.13\n             */\n            lampAlarmMode: OptionalWritableAttribute(\n                0x34,\n                TlvBitmap(TlvUInt8, LampAlarmMode),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall specify the number of hours the LampBurnHours attribute may reach before an alarm\n             * is generated.\n             *\n             * If the Alarms cluster is not present on the same device this attribute is not used and thus may be\n             * omitted (see Dependencies).\n             *\n             * The Alarm Code field included in the generated alarm shall be 0x01.\n             *\n             * If this attribute has the value of null, then this alarm shall NOT be generated.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3.6.14\n             */\n            lampBurnHoursTripPoint: OptionalWritableAttribute(\n                0x35,\n                TlvNullable(TlvUInt24),\n                { default: null, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * This cluster is used for configuring a lighting ballast.\n     *\n     * NOTE Support for Ballast Configuration cluster is provisional.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.3\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type BallastConfigurationCluster = BallastConfiguration.Cluster;\nexport const BallastConfigurationCluster = BallastConfiguration.Cluster;\nClusterRegistry.register(BallastConfiguration.Complete);\n"],
  "mappings": "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",
  "names": ["BallastConfiguration"]
}
