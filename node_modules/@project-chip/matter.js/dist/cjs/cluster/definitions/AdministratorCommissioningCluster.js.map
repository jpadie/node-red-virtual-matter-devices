{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/AdministratorCommissioningCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command, TlvNoResponse, AccessLevel, Attribute } from \"../Cluster.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvUInt16, TlvEnum, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvVendorId } from \"../../datatype/VendorId.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace AdministratorCommissioning {\n    /**\n     * These are optional features supported by AdministratorCommissioningCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.4\n     */\n    export enum Feature {\n        /**\n         * Basic (BC)\n         *\n         * Node supports Basic Commissioning Method.\n         */\n        Basic = \"Basic\"\n    }\n\n    /**\n     * Input to the AdministratorCommissioning openBasicCommissioningWindow command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.2\n     */\n    export const TlvOpenBasicCommissioningWindowRequest = TlvObject({\n        /**\n         * This field shall specify the time in seconds during which commissioning session establishment is allowed by\n         * the Node. This is known as Open Basic Commissioning Window (OBCW). This timeout shall follow guidance as\n         * specified in the initial Announcement Duration.\n         *\n         * When a Node receives the Open Basic Commissioning Window command, it shall begin advertising on DNS-SD as\n         * described in Section 4.3.1, \u201CCommissionable Node Discovery\u201D and for a time period as described in Section\n         * 11.19.8.2.1, \u201CCommissioningTimeout Field\u201D. When the command is received by a ICD, it shall enter into active\n         * mode. The ICD shall remain in Active Mode as long as one of these conditions is met:\n         *\n         *   \u2022 A commissioning window is open.\n         *\n         *   \u2022 There is an armed fail-safe timer.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.2.1\n         */\n        commissioningTimeout: TlvField(0, TlvUInt16)\n    });\n\n    /**\n     * Input to the AdministratorCommissioning openBasicCommissioningWindow command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.2\n     */\n    export interface OpenBasicCommissioningWindowRequest extends TypeFromSchema<typeof TlvOpenBasicCommissioningWindowRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.5.1\n     */\n    export enum CommissioningWindowStatus {\n        /**\n         * Commissioning window not open\n         */\n        WindowNotOpen = 0,\n\n        /**\n         * An Enhanced Commissioning Method window is open\n         */\n        EnhancedWindowOpen = 1,\n\n        /**\n         * A Basic Commissioning Method window is open\n         */\n        BasicWindowOpen = 2\n    }\n\n    /**\n     * Input to the AdministratorCommissioning openCommissioningWindow command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1\n     */\n    export const TlvOpenCommissioningWindowRequest = TlvObject({\n        /**\n         * This field shall specify the time in seconds during which commissioning session establishment is allowed by\n         * the Node. This is known as Open Commissioning Window (OCW). This timeout value shall follow guidance as\n         * specified in the initial Announcement Duration. The CommissioningTimeout applies only to cessation of any\n         * announcements and to accepting of new commissioning sessions; it does not apply to abortion of connections,\n         * i.e., a commissioning session SHOULD NOT abort prematurely upon expiration of this timeout.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1.1\n         */\n        commissioningTimeout: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall specify an ephemeral PAKE passcode verifier (see Section 3.10, \u201CPassword-Authenticated Key\n         * Exchange (PAKE)\u201D) computed by the existing Administrator to be used for this commissioning. The field is\n         * concatenation of two values (w0 || L) shall be (CRYPTO_GROUP_SIZE_BYTES +\n         * CRYPTO_PUBLIC_KEY_SIZE_BYTES)-octets long as detailed in Crypto_PAKEValues_Responder. It shall be derived\n         * from an ephemeral passcode (See PAKE). It shall be deleted by the Node at the end of commissioning or\n         * expiration of OCW, and shall be deleted by the existing Administrator after sending it to the Node(s).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1.2\n         */\n        pakePasscodeVerifier: TlvField(1, TlvByteString.bound({ length: 97 })),\n\n        /**\n         * This field shall be used by the Node as the long discriminator for DNS-SD advertisement (see Commissioning\n         * Discriminator) for discovery by the new Administrator. The new Administrator can find and filter DNS-SD\n         * records by long discriminator to locate and initiate commissioning with the appropriate Node.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1.3\n         */\n        discriminator: TlvField(2, TlvUInt16.bound({ max: 4095 })),\n\n        /**\n         * This field shall be used by the Node as the PAKE iteration count associated with the ephemeral PAKE passcode\n         * verifier to be used for this commissioning, which shall be sent by the Node to the new Administrator\u2019s\n         * software as response to the PBKDFParamRequest during PASE negotiation.\n         *\n         * The permitted range of values shall match the range specified in Section 3.9, \u201CPassword-Based Key Derivation\n         * Function (PBKDF)\u201D, within the definition of the Crypto_PBKDFParameterSet.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1.4\n         */\n        iterations: TlvField(3, TlvUInt32.bound({ min: 1000, max: 100000 })),\n\n        /**\n         * This field shall be used by the Node as the PAKE Salt associated with the ephemeral PAKE passcode verifier\n         * to be used for this commissioning, which shall be sent by the Node to the new Administrator\u2019s software as\n         * response to the PBKDFParamRequest during PASE negotiation. The constraints on the value shall match those\n         * specified in Section 3.9, \u201CPassword-Based Key Derivation Function (PBKDF)\u201D, within the definition of the\n         * Crypto_PBKDFParameterSet.\n         *\n         * When a Node receives the Open Commissioning Window command, it shall begin advertising on DNS-SD as\n         * described in Section 4.3.1, \u201CCommissionable Node Discovery\u201D and for a time period as described in Section\n         * 11.19.8.1.1, \u201CCommissioningTimeout Field\u201D. When the command is received by a ICD, it shall enter into active\n         * mode. The ICD shall remain in Active Mode as long as one of these conditions is met:\n         *\n         *   \u2022 A commissioning window is open.\n         *\n         *   \u2022 There is an armed fail-safe timer.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1.5\n         */\n        salt: TlvField(4, TlvByteString.bound({ minLength: 16, maxLength: 32 }))\n    });\n\n    /**\n     * Input to the AdministratorCommissioning openCommissioningWindow command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1\n     */\n    export interface OpenCommissioningWindowRequest extends TypeFromSchema<typeof TlvOpenCommissioningWindowRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.6.1\n     */\n    export enum StatusCode {\n        /**\n         * Could not be completed because another commissioning is in progress\n         */\n        Busy = 2,\n\n        /**\n         * Provided PAKE parameters were incorrectly formatted or otherwise invalid\n         */\n        PakeParameterError = 3,\n\n        /**\n         * No commissioning window was currently open\n         */\n        WindowNotOpen = 4\n    }\n\n    /**\n     * A AdministratorCommissioningCluster supports these elements if it supports feature Basic.\n     */\n    export const BasicComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * This command may be used by a current Administrator to instruct a Node to go into commissioning mode, if\n             * the node supports the Basic Commissioning Method. The Basic Commissioning Method specifies a window of\n             * time during which an already commissioned Node accepts PASE sessions. The current Administrator shall\n             * specify a timeout value for the duration of OBCW.\n             *\n             * If a commissioning window is already currently open, this command shall fail with a cluster specific\n             * status code of Busy.\n             *\n             * If the fail-safe timer is currently armed, this command shall fail with a cluster specific status code\n             * of Busy, since it is likely that concurrent commissioning operations from multiple separate\n             * Commissioners are about to take place.\n             *\n             * In case of any other parameter error, this command shall fail with a status code of COMMAND_INVALID.\n             *\n             * The commissioning into a new Fabric completes when the Node successfully receives a\n             * CommissioningComplete command, see Section 5.5, \u201CCommissioning Flows\u201D. The new Administrator shall\n             * discover the Node on the IP network using DNS-based Service Discovery (DNS-SD) for commissioning.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.2\n             */\n            openBasicCommissioningWindow: Command(\n                0x1,\n                TlvOpenBasicCommissioningWindowRequest,\n                0x1,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer, timed: true }\n            )\n        }\n    });\n\n    /**\n     * These elements and properties are present in all AdministratorCommissioning clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x3c,\n        name: \"AdministratorCommissioning\",\n        revision: 1,\n\n        features: {\n            /**\n             * Basic\n             *\n             * Node supports Basic Commissioning Method.\n             */\n            basic: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * Indicates whether a new Commissioning window has been opened by an Administrator, using either the OCW\n             * command or the OBCW command.\n             *\n             * This attribute shall revert to WindowNotOpen upon expiry of a commissioning window.\n             *\n             * Note that an initial commissioning window is not opened using either the OCW command or the OBCW\n             * command, and therefore this attribute shall be set to WindowNotOpen on initial commissioning.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.7.1\n             */\n            windowStatus: Attribute(0x0, TlvEnum<CommissioningWindowStatus>()),\n\n            /**\n             * When the WindowStatus attribute is not set to WindowNotOpen, this attribute shall indicate the\n             * FabricIndex associated with the Fabric scoping of the Administrator that opened the window. This may be\n             * used to cross-reference in the Fabrics attribute of the Node Operational Credentials cluster.\n             *\n             * If, during an open commissioning window, the fabric for the Administrator that opened the window is\n             * removed, then this attribute shall be set to null.\n             *\n             * When the WindowStatus attribute is set to WindowNotOpen, this attribute shall be set to null.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.7.2\n             */\n            adminFabricIndex: Attribute(0x1, TlvNullable(TlvFabricIndex)),\n\n            /**\n             * When the WindowStatus attribute is not set to WindowNotOpen, this attribute shall indicate the Vendor ID\n             * associated with the Fabric scoping of the Administrator that opened the window. This field shall match\n             * the VendorID field of the Fabrics attribute list entry associated with the Administrator having opened\n             * the window, at the time of window opening. If the fabric for the Administrator that opened the window is\n             * removed from the node while the commissioning window is still open, this attribute shall NOT be updated.\n             *\n             * When the WindowStatus attribute is set to WindowNotOpen, this attribute shall be set to null.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.7.3\n             */\n            adminVendorId: Attribute(0x2, TlvNullable(TlvVendorId))\n        },\n\n        commands: {\n            /**\n             * This command is used by a current Administrator to instruct a Node to go into commissioning mode. The\n             * Enhanced Commissioning Method specifies a window of time during which an already commissioned Node\n             * accepts PASE sessions. The current Administrator MUST specify a timeout value for the duration of OCW.\n             *\n             * When OCW expires or commissioning completes, the Node shall remove the Passcode by deleting the PAKE\n             * passcode verifier as well as stop publishing the DNS-SD record corresponding to this command as\n             * described in Section 4.3.1, \u201CCommissionable Node Discovery\u201D. The commissioning into a new Fabric\n             * completes when the Node successfully receives a CommissioningComplete command, see Section 5.5,\n             * \u201CCommissioning Flows\u201D.\n             *\n             * The parameters for OpenCommissioningWindow command are as follows:\n             *\n             * A current Administrator may invoke this command to put a node in commissioning mode for the next\n             * Administrator. On completion, the command shall return a cluster specific status code from the Section\n             * 11.19.6, \u201CStatus Codes\u201D below reflecting success or reasons for failure of the operation. The new\n             * Administrator shall discover the Node on the IP network using DNS-based Service Discovery (DNS-SD) for\n             * commissioning.\n             *\n             * If any format or validity errors related to the PAKEPasscodeVerifier, Iterations or Salt arguments\n             * arise, this command shall fail with a cluster specific status code of PAKEParameterError.\n             *\n             * If a commissioning window is already currently open, this command shall fail with a cluster specific\n             * status code of Busy.\n             *\n             * If the fail-safe timer is currently armed, this command shall fail with a cluster specific status code\n             * of Busy, since it is likely that concurrent commissioning operations from multiple separate\n             * Commissioners are about to take place.\n             *\n             * In case of any other parameter error, this command shall fail with a status code of COMMAND_INVALID.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.1\n             */\n            openCommissioningWindow: Command(\n                0x0,\n                TlvOpenCommissioningWindowRequest,\n                0x0,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer, timed: true }\n            ),\n\n            /**\n             * This command is used by a current Administrator to instruct a Node to revoke any active Open\n             * Commissioning Window or Open Basic Commissioning Window command. This is an idempotent command and the\n             * Node shall (for ECM) delete the temporary PAKEPasscodeVerifier and associated data, and stop publishing\n             * the DNS-SD record associated with the Open Commissioning Window or Open Basic Commissioning Window\n             * command, see Section 4.3.1, \u201CCommissionable Node Discovery\u201D.\n             *\n             * If no commissioning window was open at time of receipt, this command shall fail with a cluster specific\n             * status code of WindowNotOpen.\n             *\n             * If the commissioning window was open and the fail-safe was armed when this command is received, the\n             * device shall immediately expire the fail-safe and perform the cleanup steps outlined in Section\n             * 11.10.6.2.2, \u201CBehavior on expiry of Fail-Safe timer\u201D.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.19.8.3\n             */\n            revokeCommissioning: Command(\n                0x2,\n                TlvNoArguments,\n                0x2,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer, timed: true }\n            )\n        },\n\n        /**\n         * This metadata controls which AdministratorCommissioningCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { basic: true }, component: BasicComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is used to trigger a Node to allow a new Administrator to commission it. It defines Attributes,\n     * Commands and Responses needed for this purpose.\n     *\n     * There are two methods of commissioning, Basic Commissioning which may be supported and is described in Section\n     * 5.6.2, \u201CBasic Commissioning Method (BCM)\u201D and Enhanced Commissioning which shall be supported and is described\n     * in Section 5.6.3, \u201CEnhanced Commissioning Method (ECM)\u201D.\n     *\n     * For the management of Operational Credentials and Trusted Root Certificates, the Node Operational Credentials\n     * cluster is used.\n     *\n     * AdministratorCommissioningCluster supports optional features that you can enable with the\n     * AdministratorCommissioningCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.19\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const BC = { basic: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n        attributes: Cluster.attributes,\n\n        commands: {\n            ...Cluster.commands,\n            openBasicCommissioningWindow: MutableCluster.AsConditional(\n                BasicComponent.commands.openBasicCommissioningWindow,\n                { mandatoryIf: [BC] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all AdministratorCommissioning features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type AdministratorCommissioningCluster = AdministratorCommissioning.Cluster;\nexport const AdministratorCommissioningCluster = AdministratorCommissioning.Cluster;\nClusterRegistry.register(AdministratorCommissioning.Complete);\n"],
  "mappings": "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",
  "names": ["AdministratorCommissioning", "Feature", "CommissioningWindowStatus", "StatusCode"]
}
