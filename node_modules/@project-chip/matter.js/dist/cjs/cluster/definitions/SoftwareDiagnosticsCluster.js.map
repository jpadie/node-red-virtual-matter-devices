{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/SoftwareDiagnosticsCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    Command,\n    TlvNoResponse,\n    AccessLevel,\n    OptionalAttribute,\n    OptionalEvent,\n    EventPriority\n} from \"../Cluster.js\";\nimport { TlvUInt64, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace SoftwareDiagnostics {\n    /**\n     * These are optional features supported by SoftwareDiagnosticsCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.4\n     */\n    export enum Feature {\n        /**\n         * Watermarks (WTRMRK)\n         *\n         * Node makes available the metrics for high watermark related to memory consumption.\n         */\n        Watermarks = \"Watermarks\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1\n     */\n    export const TlvThreadMetrics = TlvObject({\n        /**\n         * The Id field shall be a server-assigned per-thread unique ID that is constant for the duration of the\n         * thread. Efforts SHOULD be made to avoid reusing ID values when possible.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1.1\n         */\n        id: TlvField(0, TlvUInt64),\n\n        /**\n         * The Name field shall be set to a vendor defined name or prefix of the software thread that is static for the\n         * duration of the thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1.2\n         */\n        name: TlvOptionalField(1, TlvString.bound({ maxLength: 8 })),\n\n        /**\n         * The StackFreeCurrent field shall indicate the current amount of stack memory, in bytes, that are not being\n         * utilized on the respective thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1.3\n         */\n        stackFreeCurrent: TlvOptionalField(2, TlvUInt32),\n\n        /**\n         * The StackFreeMinimum field shall indicate the minimum amount of stack memory, in bytes, that has been\n         * available at any point between the current time and this attribute being reset or initialized on the\n         * respective thread. This value shall only be reset upon a Node reboot or upon receiving of the\n         * ResetWatermarks command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1.4\n         */\n        stackFreeMinimum: TlvOptionalField(3, TlvUInt32),\n\n        /**\n         * The StackSize field shall indicate the amount of stack memory, in bytes, that has been allocated for use by\n         * the respective thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1.5\n         */\n        stackSize: TlvOptionalField(4, TlvUInt32)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.5.1\n     */\n    export interface ThreadMetrics extends TypeFromSchema<typeof TlvThreadMetrics> {}\n\n    /**\n     * Body of the SoftwareDiagnostics softwareFault event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1\n     */\n    export const TlvSoftwareFaultEvent = TlvObject({\n        /**\n         * The ID field shall be set to the ID of the software thread in which the last software fault occurred.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1.1\n         */\n        id: TlvField(0, TlvUInt64),\n\n        /**\n         * The Name field shall be set to a manufacturer-specified name or prefix of the software thread in which the\n         * last software fault occurred.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1.2\n         */\n        name: TlvOptionalField(1, TlvString.bound({ maxLength: 8 })),\n\n        /**\n         * The FaultRecording field shall be a manufacturer-specified payload intended to convey information to assist\n         * in further diagnosing or debugging a software fault. The FaultRecording field may be used to convey\n         * information such as, but not limited to, thread backtraces or register contents.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1.3\n         */\n        faultRecording: TlvOptionalField(2, TlvByteString.bound({ maxLength: 1024 }))\n    });\n\n    /**\n     * Body of the SoftwareDiagnostics softwareFault event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1\n     */\n    export interface SoftwareFaultEvent extends TypeFromSchema<typeof TlvSoftwareFaultEvent> {}\n\n    /**\n     * A SoftwareDiagnosticsCluster supports these elements if it supports feature Watermarks.\n     */\n    export const WatermarksComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The CurrentHeapHighWatermark attribute shall indicate the maximum amount of heap memory, in bytes, that\n             * has been used by the Node. This value shall only be reset upon a Node reboot or upon receiving of the\n             * ResetWatermarks command.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.6.4\n             */\n            currentHeapHighWatermark: Attribute(0x3, TlvUInt64)\n        },\n\n        commands: {\n            /**\n             * Receipt of this command shall reset the following values which track high and lower watermarks:\n             *\n             *   \u2022 The StackFreeMinimum field of the ThreadMetrics attribute\n             *\n             *   \u2022 The CurrentHeapHighWatermark attribute This command has no payload.\n             *\n             * Effect on Receipt\n             *\n             * On receipt of this command, the Node shall make the following modifications to attributes it supports:\n             *\n             * If implemented, the server shall set the value of the CurrentHeapHighWatermark attribute to the value of\n             * the CurrentHeapUsed attribute.\n             *\n             * If implemented, the server shall set the value of the StackFreeMinimum field for every thread to the\n             * value of the corresponding thread\u2019s StackFreeCurrent field.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.7.1\n             */\n            resetWatermarks: Command(0x0, TlvNoArguments, 0x0, TlvNoResponse, { invokeAcl: AccessLevel.Manage })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all SoftwareDiagnostics clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x34,\n        name: \"SoftwareDiagnostics\",\n        revision: 1,\n\n        features: {\n            /**\n             * Watermarks\n             *\n             * Node makes available the metrics for high watermark related to memory consumption.\n             */\n            watermarks: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * The ThreadMetrics attribute shall be a list of ThreadMetricsStruct structs. Each active thread on the\n             * Node shall be represented by a single entry within the ThreadMetrics attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.6.1\n             */\n            threadMetrics: OptionalAttribute(0x0, TlvArray(TlvThreadMetrics, { maxLength: 64 }), { default: [] }),\n\n            /**\n             * The CurrentHeapFree attribute shall indicate the current amount of heap memory, in bytes, that are free\n             * for allocation. The effective amount may be smaller due to heap fragmentation or other reasons.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.6.2\n             */\n            currentHeapFree: OptionalAttribute(0x1, TlvUInt64),\n\n            /**\n             * The CurrentHeapUsed attribute shall indicate the current amount of heap memory, in bytes, that is being\n             * used.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.6.3\n             */\n            currentHeapUsed: OptionalAttribute(0x2, TlvUInt64)\n        },\n\n        events: {\n            /**\n             * The SoftwareFault Event shall be generated when a software fault takes place on the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.13.8.1\n             */\n            softwareFault: OptionalEvent(0x0, EventPriority.Info, TlvSoftwareFaultEvent)\n        },\n\n        /**\n         * This metadata controls which SoftwareDiagnosticsCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { watermarks: true }, component: WatermarksComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * The Software Diagnostics Cluster provides a means to acquire standardized diagnostics metrics that may be used\n     * by a Node to assist a user or Administrator in diagnosing potential problems. The Software Diagnostics Cluster\n     * attempts to centralize all metrics that are relevant to the software that may be running on a Node.\n     *\n     * SoftwareDiagnosticsCluster supports optional features that you can enable with the\n     * SoftwareDiagnosticsCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.13\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const WTRMRK = { watermarks: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            currentHeapHighWatermark: MutableCluster.AsConditional(\n                WatermarksComponent.attributes.currentHeapHighWatermark,\n                { mandatoryIf: [WTRMRK] }\n            )\n        },\n\n        commands: {\n            resetWatermarks: MutableCluster.AsConditional(\n                WatermarksComponent.commands.resetWatermarks,\n                { mandatoryIf: [WTRMRK] }\n            )\n        },\n\n        events: Cluster.events\n    });\n\n    /**\n     * This cluster supports all SoftwareDiagnostics features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type SoftwareDiagnosticsCluster = SoftwareDiagnostics.Cluster;\nexport const SoftwareDiagnosticsCluster = SoftwareDiagnostics.Cluster;\nClusterRegistry.register(SoftwareDiagnostics.Complete);\n"],
  "mappings": "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",
  "names": ["SoftwareDiagnostics", "Feature"]
}
