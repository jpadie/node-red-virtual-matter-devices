{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/GeneralCommissioningCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { WritableAttribute, AccessLevel, FixedAttribute, Attribute, Command } from \"../Cluster.js\";\nimport { TlvUInt64, TlvUInt16, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace GeneralCommissioning {\n    /**\n     * This structure provides some constant values that may be of use to all commissioners.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.3\n     */\n    export const TlvBasicCommissioningInfo = TlvObject({\n        /**\n         * This field shall contain a conservative initial duration (in seconds) to set in the FailSafe for the\n         * commissioning flow to complete successfully. This may vary depending on the speed or sleepiness of the\n         * Commissionee. This value, if used in the ArmFailSafe command\u2019s ExpiryLengthSeconds field SHOULD allow a\n         * Commissioner to proceed with a nominal commissioning without having to-rearm the fail-safe, with some margin.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.3.1\n         */\n        failSafeExpiryLengthSeconds: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall contain a conservative value in seconds denoting the maximum total duration for which a\n         * fail safe timer can be re-armed. See Section 11.10.6.2.1, \u201CFail Safe Context\u201D.\n         *\n         * The value of this field shall be greater than or equal to the FailSafeExpiryLengthSeconds. Absent additional\n         * guidelines, it is recommended that the value of this field be aligned with the initial Announcement Duration\n         * and default to 900 seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.3.2\n         */\n        maxCumulativeFailsafeSeconds: TlvField(1, TlvUInt16)\n    });\n\n    /**\n     * This structure provides some constant values that may be of use to all commissioners.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.3\n     */\n    export interface BasicCommissioningInfo extends TypeFromSchema<typeof TlvBasicCommissioningInfo> {}\n\n    /**\n     * This enumeration is used by the RegulatoryConfig and LocationCapability attributes to indicate possible radio\n     * usage.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.2\n     */\n    export enum RegulatoryLocationType {\n        /**\n         * Indoor only\n         */\n        Indoor = 0,\n\n        /**\n         * Outdoor only\n         */\n        Outdoor = 1,\n\n        /**\n         * Indoor/Outdoor\n         */\n        IndoorOutdoor = 2\n    }\n\n    /**\n     * Input to the GeneralCommissioning armFailSafe command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.2\n     */\n    export const TlvArmFailSafeRequest = TlvObject({\n        expiryLengthSeconds: TlvField(0, TlvUInt16),\n        breadcrumb: TlvField(1, TlvUInt64)\n    });\n\n    /**\n     * Input to the GeneralCommissioning armFailSafe command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.2\n     */\n    export interface ArmFailSafeRequest extends TypeFromSchema<typeof TlvArmFailSafeRequest> {}\n\n    /**\n     * This enumeration is used by several response commands in this cluster to indicate particular errors.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.4.1\n     */\n    export enum CommissioningError {\n        /**\n         * No error\n         */\n        Ok = 0,\n\n        /**\n         * Attempting to set regulatory configuration to a region or indoor/outdoor mode for which the server does not\n         * have proper configuration.\n         */\n        ValueOutsideRange = 1,\n\n        /**\n         * Executed CommissioningComplete outside CASE session.\n         */\n        InvalidAuthentication = 2,\n\n        /**\n         * Executed CommissioningComplete when there was no active Fail-Safe context.\n         */\n        NoFailSafe = 3,\n\n        /**\n         * Attempting to arm fail- safe or execute CommissioningComplete from a fabric different than the one\n         * associated with the current fail- safe context.\n         */\n        BusyWithOtherAdmin = 4\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.3\n     */\n    export const TlvArmFailSafeResponse = TlvObject({\n        /**\n         * This field shall contain the result of the operation, based on the behavior specified in the functional\n         * description of the ArmFailSafe command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.3.1\n         */\n        errorCode: TlvField(0, TlvEnum<CommissioningError>()),\n\n        /**\n         * See Section 11.10.6.1, \u201CCommon fields in General Commissioning cluster responses\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.3.2\n         */\n        debugText: TlvField(1, TlvString.bound({ maxLength: 128 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.3\n     */\n    export interface ArmFailSafeResponse extends TypeFromSchema<typeof TlvArmFailSafeResponse> {}\n\n    /**\n     * Input to the GeneralCommissioning setRegulatoryConfig command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.4\n     */\n    export const TlvSetRegulatoryConfigRequest = TlvObject({\n        newRegulatoryConfig: TlvField(0, TlvEnum<RegulatoryLocationType>()),\n        countryCode: TlvField(1, TlvString.bound({ length: 2 })),\n        breadcrumb: TlvField(2, TlvUInt64)\n    });\n\n    /**\n     * Input to the GeneralCommissioning setRegulatoryConfig command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.4\n     */\n    export interface SetRegulatoryConfigRequest extends TypeFromSchema<typeof TlvSetRegulatoryConfigRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.5\n     */\n    export const TlvSetRegulatoryConfigResponse = TlvObject({\n        /**\n         * This field shall contain the result of the operation, based on the behavior specified in the functional\n         * description of the SetRegulatoryConfig command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.5.1\n         */\n        errorCode: TlvField(0, TlvEnum<CommissioningError>()),\n\n        /**\n         * See Section 11.10.6.1, \u201CCommon fields in General Commissioning cluster responses\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.5.2\n         */\n        debugText: TlvField(1, TlvString)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.5\n     */\n    export interface SetRegulatoryConfigResponse extends TypeFromSchema<typeof TlvSetRegulatoryConfigResponse> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.7\n     */\n    export const TlvCommissioningCompleteResponse = TlvObject({\n        /**\n         * This field shall contain the result of the operation, based on the behavior specified in the functional\n         * description of the CommissioningComplete command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.7.1\n         */\n        errorCode: TlvField(0, TlvEnum<CommissioningError>()),\n\n        /**\n         * See Section 11.10.6.1, \u201CCommon fields in General Commissioning cluster responses\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.7.2\n         */\n        debugText: TlvField(1, TlvString)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.7\n     */\n    export interface CommissioningCompleteResponse extends TypeFromSchema<typeof TlvCommissioningCompleteResponse> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x30,\n        name: \"GeneralCommissioning\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * This attribute allows for the storage of a client-provided small payload which Administrators and\n             * Commissioners may write and then subsequently read, to keep track of their own progress. This may be\n             * used by the Commissioner to avoid repeating already-executed actions upon re-establishing a\n             * commissioning link after an error.\n             *\n             * On start/restart of the server, such as when a device is power-cycled, this attribute shall be reset to\n             * zero.\n             *\n             * Some commands related to commissioning also have a side-effect of updating or resetting this attribute\n             * and this is specified in their respective functional descriptions.\n             *\n             * The format of the value within this attribute is unspecified and its value is not otherwise used by the\n             * functioning of any cluster, other than being set as a side-effect of commands where this behavior is\n             * described.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.5.1\n             */\n            breadcrumb: WritableAttribute(0x0, TlvUInt64, { default: 0, writeAcl: AccessLevel.Administer }),\n\n            /**\n             * This attribute shall describe critical parameters needed at the beginning of commissioning flow. See\n             * BasicCommissioningInfo for more information.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.5.2\n             */\n            basicCommissioningInfo: FixedAttribute(0x1, TlvBasicCommissioningInfo),\n\n            /**\n             * Indicates the regulatory configuration for the product.\n             *\n             * Note that the country code is part of Basic Information Cluster and therefore NOT listed on the\n             * RegulatoryConfig attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.5.3\n             */\n            regulatoryConfig: Attribute(0x2, TlvEnum<RegulatoryLocationType>()),\n\n            /**\n             * LocationCapability is statically set by the manufacturer and indicates if this Node needs to be told an\n             * exact RegulatoryLocation. For example a Node which is \"Indoor Only\" would not be certified for outdoor\n             * use at all, and thus there is no need for a commissioner to set or ask the user about whether the device\n             * will be used inside or outside. However a device which states its capability is \"Indoor/Outdoor\" means\n             * it would like clarification if possible.\n             *\n             * For Nodes without radio network interfaces (e.g. Ethernet-only devices), the value IndoorOutdoor shall\n             * always be used.\n             *\n             * The default value of the RegulatoryConfig attribute is the value of LocationCapability attribute. This\n             * means devices always have a safe default value, and Commissioners which choose to implement smarter\n             * handling can.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.5.4\n             */\n            locationCapability: FixedAttribute(\n                0x3,\n                TlvEnum<RegulatoryLocationType>(),\n                { default: RegulatoryLocationType.IndoorOutdoor }\n            ),\n\n            /**\n             * Indicates whether this device supports \"concurrent connection flow\" commissioning mode (see Section 5.5,\n             * \u201CCommissioning Flows\u201D). If false, the device only supports \"non-concurrent connection flow\" mode.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.5.5\n             */\n            supportsConcurrentConnection: FixedAttribute(0x4, TlvBoolean, { default: true })\n        },\n\n        commands: {\n            /**\n             * Success or failure of this command shall be communicated by the ArmFailSafeResponse command, unless some\n             * data model validations caused a failure status code to be issued during the processing of the command.\n             *\n             * If the fail-safe timer is not currently armed, the commissioning window is open, and the command was\n             * received over a CASE session, the command shall leave the current fail-safe state unchanged and\n             * immediately respond with an ArmFailSafeResponse containing an ErrorCode value of BusyWithOtherAdmin.\n             * This is done to allow commissioners, which use PASE connections, the opportunity to use the failsafe\n             * during the relatively short commissioning window.\n             *\n             * Otherwise, the command shall arm or re-arm the \"fail-safe timer\" with an expiry time set for a duration\n             * of ExpiryLengthSeconds, or disarm it, depending on the situation:\n             *\n             *   \u2022 If ExpiryLengthSeconds is 0 and the fail-safe timer was already armed and the accessing fabric\n             *     matches the Fabric currently associated with the fail-safe context, then the fail-safe timer\n             *\n             * shall be immediately expired (see further below for side-effects of expiration).\n             *\n             *   \u2022 If ExpiryLengthSeconds is 0 and the fail-safe timer was not armed, then this command invocation\n             *     shall lead to a success response with no side-effects against the fail-safe context.\n             *\n             *   \u2022 If ExpiryLengthSeconds is non-zero and the fail-safe timer was not currently armed, then the\n             *     fail-safe timer shall be armed for that duration.\n             *\n             *   \u2022 If ExpiryLengthSeconds is non-zero and the fail-safe timer was currently armed, and the accessing\n             *     Fabric matches the fail-safe context\u2019s associated Fabric, then the fail-safe timer shall be re-\n             *     armed to expire in ExpiryLengthSeconds.\n             *\n             *   \u2022 Otherwise, the command shall leave the current fail-safe state unchanged and immediately respond\n             *     with ArmFailSafeResponse containing an ErrorCode value of BusyWithOtherAdmin, indicating a likely\n             *     conflict between commissioners.\n             *\n             * The value of the Breadcrumb field shall be written to the Breadcrumb Attribute on successful execution\n             * of the command.\n             *\n             * If the receiver restarts unexpectedly (e.g., power interruption, software crash, or other reset) the\n             * receiver shall behave as if the fail-safe timer expired and perform the sequence of clean-up steps\n             * listed below.\n             *\n             * On successful execution of the command, the ErrorCode field of the ArmFailSafeResponse shall be set to\n             * OK.\n             *\n             * ### Fail Safe Context\n             *\n             * When first arming the fail-safe timer, a 'Fail Safe Context' shall be created on the receiver, to track\n             * the following state information while the fail-safe is armed:\n             *\n             *   \u2022 The fail-safe timer duration.\n             *\n             *   \u2022 The state of all Network Commissioning Networks attribute configurations, to allow recovery of\n             *     connectivity after Fail-Safe expiry.\n             *\n             *   \u2022 Whether an AddNOC command or UpdateNOC command has taken place.\n             *\n             *   \u2022 A Fabric Index for the fabric-scoping of the context, starting at the accessing fabric index for the\n             *     ArmFailSafe command, and updated with the Fabric Index associated with an AddNOC command or an\n             *     UpdateNOC command being invoked successfully during the ongoing Fail-Safe timer period.\n             *\n             *   \u2022 The operational credentials associated with any Fabric whose configuration is affected by the\n             *     UpdateNOC command.\n             *\n             *   \u2022 Optionally: the previous state of non-fabric-scoped data that is mutated during the fail-safe period.\n             *\n             * Note the following to assist in understanding the above state-keeping, which summarizes other normative\n             * requirements in the respective sections:\n             *\n             *   \u2022 The AddNOC command can only be invoked once per contiguous non-expiring fail-safe timer period, and\n             *     only if no UpdateNOC command was previously processed within the same fail-safe timer period.\n             *\n             *   \u2022 The UpdateNOC command can only be invoked once per contiguous non-expiring fail-safe timer period,\n             *     can only be invoked over a CASE session, and only if no AddNOC command was previously processed in\n             *     the same fail-safe timer period.\n             *\n             * On creation of the Fail Safe Context a second timer shall be created to expire at\n             * MaxCumulativeFailsafeSeconds as specified in BasicCommissioningInfo. This Cumulative Fail Safe Context\n             * timer (CFSC timer) serves to limit the lifetime of any particular Fail Safe Context; it shall NOT be\n             * extended or modified on subsequent invocations of ArmFailSafe associated with this Fail Safe Context.\n             * Upon expiry of the CFSC timer, the receiver shall execute cleanup behavior equivalent to that of\n             * fail-safe timer expiration as detailed in Section 11.10.6.2.2, \u201CBehavior on expiry of Fail-Safe timer\u201D.\n             * Termination of the session prior to the expiration of that timer for any reason (including a successful\n             * end of commissioning or an expiry of a fail-safe timer) shall also delete the CFSC timer.\n             *\n             * ### Behavior on expiry of Fail-Safe timer\n             *\n             * If the fail-safe timer expires before the CommissioningComplete command is successfully invoked, the\n             * following sequence of clean-up steps shall be executed, in order, by the receiver:\n             *\n             *   1. Terminate any open PASE secure session by clearing any associated Secure Session Context at the\n             *       Server.\n             *\n             *   2. Revoke the temporary administrative privileges granted to any open PASE session (see Section\n             *       6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D) at the Server.\n             *\n             *   3. If an AddNOC or UpdateNOC command has been successfully invoked, terminate all CASE sessions\n             *       associated with the Fabric whose Fabric Index is recorded in the Fail-Safe context (see Section\n             *       11.10.6.2, \u201CArmFailSafe Command\u201D) by clearing any associated Secure Session Context at the Server.\n             *\n             *   4. Reset the configuration of all Network Commissioning Networks attribute to their state prior to the\n             *       Fail-Safe being armed.\n             *\n             *   5. If an UpdateNOC command had been successfully invoked, revert the state of operational key pair,\n             *       NOC and ICAC for that Fabric to the state prior to the Fail-Safe timer being armed, for the Fabric\n             *       Index that was the subject of the UpdateNOC command.\n             *\n             *   6. If an AddNOC command had been successfully invoked, achieve the equivalent effect of invoking the\n             *       RemoveFabric command against the Fabric Index stored in the Fail-Safe Context for the Fabric Index\n             *       that was the subject of the AddNOC command. This shall remove all associations to that Fabric\n             *       including all fabric-scoped data, and may possibly factory-reset the device depending on current\n             *       device state. This shall only apply to Fabrics added during the fail-safe period as the result of\n             *       the AddNOC command.\n             *\n             *   7. If the CSRRequest command had been successfully invoked, but no AddNOC or UpdateNOC command had\n             *       been successfully invoked, then the new operational key pair temporarily generated for the\n             *       purposes of NOC addition or update (see Node Operational CSR Procedure) shall be removed as it is\n             *       no longer needed.\n             *\n             *   8. Remove any RCACs added by the AddTrustedRootCertificate command that are not currently referenced\n             *       by any entry in the Fabrics attribute.\n             *\n             *   9. Reset the Breadcrumb attribute to zero.\n             *\n             *   10. Optionally: if no factory-reset resulted from the previous steps, it is recommended that the\n             *\n             * Node rollback the state of all non fabric-scoped data present in the Fail-Safe context.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.2\n             */\n            armFailSafe: Command(\n                0x0,\n                TlvArmFailSafeRequest,\n                0x1,\n                TlvArmFailSafeResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This shall add or update the regulatory configuration in the RegulatoryConfig Attribute to the value\n             * provided in the NewRegulatoryConfig field.\n             *\n             * Success or failure of this command shall be communicated by the SetRegulatoryConfigResponse command,\n             * unless some data model validations caused a failure status code to be issued during the processing of\n             * the command.\n             *\n             * The CountryCode field shall conforms to ISO 3166-1 alpha-2 and shall be used to set the Location\n             * attribute reflected by the Basic Information Cluster.\n             *\n             * If the server limits some of the values (e.g. locked to a particular country, with no regulatory data\n             * for others), then setting regulatory information outside a valid country or location shall still set the\n             * Location attribute reflected by the Basic Information Cluster configuration, but the\n             * SetRegulatoryConfigResponse replied shall have the ErrorCode field set to ValueOutsideRange error.\n             *\n             * If the LocationCapability attribute is not Indoor/Outdoor and the NewRegulatoryConfig value received\n             * does not match either the Indoor or Outdoor fixed value in LocationCapability, then the\n             * SetRegulatoryConfigResponse replied shall have the ErrorCode field set to ValueOutsideRange error and\n             * the RegulatoryConfig attribute and associated internal radio configuration shall remain unchanged.\n             *\n             * If the LocationCapability attribute is set to Indoor/Outdoor, then the RegulatoryConfig attribute shall\n             * be set to match the NewRegulatoryConfig field.\n             *\n             * On successful execution of the command, the ErrorCode field of the SetRegulatoryConfigResponse shall be\n             * set to OK.\n             *\n             * The Breadcrumb field shall be used to atomically set the Breadcrumb attribute on success of this\n             * command, when SetRegulatoryConfigResponse has the ErrorCode field set to OK. If the command fails, the\n             * Breadcrumb attribute shall be left unchanged.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.4\n             */\n            setRegulatoryConfig: Command(\n                0x2,\n                TlvSetRegulatoryConfigRequest,\n                0x3,\n                TlvSetRegulatoryConfigResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command has no data.\n             *\n             * Success or failure of this command shall be communicated by the CommissioningCompleteResponse command,\n             * unless some data model validations caused a failure status code to be issued during the processing of\n             * the command.\n             *\n             * This command signals the Server that the Commissioner or Administrator has successfully completed all\n             * steps needed during the Fail-Safe period, such as commissioning (see Section 5.5, \u201CCommissioning Flows\u201D)\n             * or other Administrator operations requiring usage of the Fail Safe timer. It ensures that the Server is\n             * configured in a state such that it still has all necessary elements to be fully operable within a\n             * Fabric, such as ACL entries (see Access Control Cluster) and operational credentials (see Section 6.4,\n             * \u201CNode Operational Credentials Specification\u201D), and that the Node is reach\n             *\n             * able using CASE (see Section 4.14.2, \u201CCertificate Authenticated Session Establishment (CASE)\u201D) over an\n             * operational network.\n             *\n             * An ErrorCode of NoFailSafe shall be responded to the invoker if the CommissioningComplete command was\n             * received when no Fail-Safe context exists.\n             *\n             * This command is fabric-scoped, so cannot be issued over a session that does not have an associated\n             * fabric, i.e. over PASE session prior to an AddNOC command. In addition, this command is only permitted\n             * over CASE and must be issued by a node associated with the ongoing Fail-Safe context. An ErrorCode of\n             * InvalidAuthentication shall be responded to the invoker if the CommissioningComplete command was\n             * received outside a CASE session (e.g., over Group messaging, or PASE session after AddNOC), or if the\n             * accessing fabric is not the one associated with the ongoing Fail-Safe context.\n             *\n             * This command shall only result in success with an ErrorCode value of OK in the\n             * CommissioningCompleteResponse if received over a CASE session and the accessing fabric index matches the\n             * Fabric Index associated with the current Fail-Safe context. In other words:\n             *\n             *   \u2022 If no AddNOC command had been successfully invoked, the CommissioningComplete command must originate\n             *     from the Fabric that initiated the Fail-Safe context.\n             *\n             *   \u2022 After an AddNOC command has been successfully invoked, the CommissioningComplete command must\n             *     originate from the Fabric which was joined through the execution of that command, which updated the\n             *     Fail-Safe context\u2019s Fabric Index.\n             *\n             * On successful execution of the CommissioningComplete command, where the CommissioningCompleteResponse\n             * has an ErrorCode of OK, the following actions shall be undertaken on the Server:\n             *\n             *   1. The Fail-Safe timer associated with the current Fail-Safe context shall be disarmed.\n             *\n             *   2. The commissioning window at the Server shall be closed.\n             *\n             *   3. Any temporary administrative privileges automatically granted to any open PASE session shall be\n             *      revoked (see Section 6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D).\n             *\n             *   4. The Secure Session Context of any PASE session still established at the Server shall be cleared.\n             *\n             *   5. The Breadcrumb attribute shall be reset to zero.\n             *\n             * After receipt of a CommissioningCompleteResponse with an ErrorCode value of OK, a client cannot expect\n             * any previously established PASE session to still be usable, due to the server having cleared such\n             * sessions.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.10.6.6\n             */\n            commissioningComplete: Command(\n                0x4,\n                TlvNoArguments,\n                0x5,\n                TlvCommissioningCompleteResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        }\n    });\n\n    /**\n     * This cluster is used to manage basic commissioning lifecycle.\n     *\n     * This cluster also represents responsibilities related to commissioning that don\u2019t well fit other commissioning\n     * clusters, like Section 11.9, \u201CNetwork Commissioning Cluster\u201D. It also hosts functionalities those other clusters\n     * may depend on.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.10\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type GeneralCommissioningCluster = GeneralCommissioning.Cluster;\nexport const GeneralCommissioningCluster = GeneralCommissioning.Cluster;\nClusterRegistry.register(GeneralCommissioning.Complete);\n"],
  "mappings": "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",
  "names": ["GeneralCommissioning", "RegulatoryLocationType", "CommissioningError"]
}
