{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/WiFiNetworkDiagnosticsCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, Command, TlvNoResponse, OptionalAttribute, OptionalEvent, EventPriority } from \"../Cluster.js\";\nimport { TlvUInt32, TlvUInt64, TlvEnum, TlvUInt16, TlvInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace WiFiNetworkDiagnostics {\n    /**\n     * These are optional features supported by WiFiNetworkDiagnosticsCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.4\n     */\n    export enum Feature {\n        /**\n         * PacketCounts (PKTCNT)\n         *\n         * Node makes available the counts for the number of received and transmitted packets on the Wi-Fi interface.\n         */\n        PacketCounts = \"PacketCounts\",\n\n        /**\n         * ErrorCounts (ERRCNT)\n         *\n         * Node makes available the counts for the number of errors that have occurred during the reception and\n         * transmission of packets on the Wi-Fi interface.\n         */\n        ErrorCounts = \"ErrorCounts\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.5.1\n     */\n    export enum SecurityType {\n        /**\n         * Indicate the usage of an unspecified Wi-Fi security type\n         */\n        Unspecified = 0,\n\n        /**\n         * Indicate the usage of no Wi-Fi security\n         */\n        None = 1,\n\n        /**\n         * Indicate the usage of WEP Wi-Fi security\n         */\n        Wep = 2,\n\n        /**\n         * Indicate the usage of WPA Wi-Fi security\n         */\n        Wpa = 3,\n\n        /**\n         * Indicate the usage of WPA2 Wi-Fi security\n         */\n        Wpa2 = 4,\n\n        /**\n         * Indicate the usage of WPA3 Wi-Fi security\n         */\n        Wpa3 = 5\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.5.2\n     */\n    export enum WiFiVersion {\n        /**\n         * Indicate the network interface is currently using 802.11a against the wireless access point.\n         */\n        A = 0,\n\n        /**\n         * Indicate the network interface is currently using 802.11b against the wireless access point.\n         */\n        B = 1,\n\n        /**\n         * Indicate the network interface is currently using 802.11g against the wireless access point.\n         */\n        G = 2,\n\n        /**\n         * Indicate the network interface is currently using 802.11n against the wireless access point.\n         */\n        N = 3,\n\n        /**\n         * Indicate the network interface is currently using 802.11ac against the wireless access point.\n         */\n        Ac = 4,\n\n        /**\n         * Indicate the network interface is currently using 802.11ax against the wireless access point.\n         */\n        Ax = 5,\n\n        /**\n         * Indicate the network interface is currently using 802.11ah against the wireless access point.\n         */\n        Ah = 6\n    }\n\n    /**\n     * Body of the WiFiNetworkDiagnostics disconnection event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.1\n     */\n    export const TlvDisconnectionEvent = TlvObject({\n        /**\n         * This field shall contain the Reason Code field value for the Disassociation or Deauthentication event that\n         * caused the disconnection and the value shall align with Table 9-49 \"Reason codes\" of IEEE 802.11-2020.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.1.1\n         */\n        reasonCode: TlvField(0, TlvUInt16)\n    });\n\n    /**\n     * Body of the WiFiNetworkDiagnostics disconnection event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.1\n     */\n    export interface DisconnectionEvent extends TypeFromSchema<typeof TlvDisconnectionEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.5.3\n     */\n    export enum AssociationFailureCause {\n        /**\n         * The reason for the failure is unknown.\n         */\n        Unknown = 0,\n\n        /**\n         * An error occurred during association.\n         */\n        AssociationFailed = 1,\n\n        /**\n         * An error occurred during authentication.\n         */\n        AuthenticationFailed = 2,\n\n        /**\n         * The specified SSID could not be found.\n         */\n        SsidNotFound = 3\n    }\n\n    /**\n     * Body of the WiFiNetworkDiagnostics associationFailure event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.2\n     */\n    export const TlvAssociationFailureEvent = TlvObject({\n        /**\n         * The Status field shall be set to a value from the AssociationFailureCauseEnum.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.2.1\n         */\n        associationFailureCause: TlvField(0, TlvEnum<AssociationFailureCause>()),\n\n        /**\n         * The Status field shall be set to the Status Code value that was present in the last frame related to\n         * association where Status Code was not equal to zero and which caused the failure of a last trial\n         *\n         * attempt, if this last failure was due to one of the following Management frames:\n         *\n         *   \u2022 Association Response (Type 0, Subtype 1)\n         *\n         *   \u2022 Reassociation Response (Type 0, Subtype 3)\n         *\n         *   \u2022 Authentication (Type 0, Subtype 11)\n         *\n         * Table 9-50 \"Status codes\" of IEEE 802.11-2020 contains a description of all values possible.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.2.2\n         */\n        status: TlvField(1, TlvUInt16)\n    });\n\n    /**\n     * Body of the WiFiNetworkDiagnostics associationFailure event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.2\n     */\n    export interface AssociationFailureEvent extends TypeFromSchema<typeof TlvAssociationFailureEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.5.4\n     */\n    export enum ConnectionStatus {\n        /**\n         * Indicate the node is connected\n         */\n        Connected = 0,\n\n        /**\n         * Indicate the node is not connected\n         */\n        NotConnected = 1\n    }\n\n    /**\n     * Body of the WiFiNetworkDiagnostics connectionStatus event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.3\n     */\n    export const TlvConnectionStatusEvent = TlvObject({ connectionStatus: TlvField(0, TlvEnum<ConnectionStatus>()) });\n\n    /**\n     * Body of the WiFiNetworkDiagnostics connectionStatus event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.3\n     */\n    export interface ConnectionStatusEvent extends TypeFromSchema<typeof TlvConnectionStatusEvent> {}\n\n    /**\n     * A WiFiNetworkDiagnosticsCluster supports these elements if it supports feature ErrorCounts.\n     */\n    export const ErrorCountsComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The BeaconLostCount attribute shall indicate the count of the number of missed beacons the Node has\n             * detected. If the Node does not have an ability to count beacons expected and not received, this value\n             * may remain set to zero.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.6\n             */\n            beaconLostCount: Attribute(0x5, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 }),\n\n            /**\n             * The OverrunCount attribute shall indicate the number of packets dropped either at ingress or egress, due\n             * to lack of buffer memory to retain all packets on the network interface. The OverrunCount attribute\n             * shall be reset to 0 upon a reboot of the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.13\n             */\n            overrunCount: Attribute(0xc, TlvNullable(TlvUInt64), { omitChanges: true, default: 0 })\n        },\n\n        commands: {\n            /**\n             * Reception of this command shall reset the following attributes to 0:\n             *\n             *   \u2022 BeaconLostCount\n             *\n             *   \u2022 BeaconRxCount\n             *\n             *   \u2022 PacketMulticastRxCount\n             *\n             *   \u2022 PacketMulticastTxCount\n             *\n             *   \u2022 PacketUnicastRxCount\n             *\n             *   \u2022 PacketUnicastTxCount\n             *\n             * This command has no associated data.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.7.1\n             */\n            resetCounts: Command(0x0, TlvNoArguments, 0x0, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WiFiNetworkDiagnosticsCluster supports these elements if it supports feature PacketCounts.\n     */\n    export const PacketCountsComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The BeaconRxCount attribute shall indicate the count of the number of received beacons. The\n             *\n             * total number of expected beacons that could have been received during the interval since association\n             * SHOULD match the sum of BeaconRxCount and BeaconLostCount. If the Node does not have an ability to\n             * report count of beacons received, this value may remain set to zero.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.7\n             */\n            beaconRxCount: Attribute(0x6, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 }),\n\n            /**\n             * The PacketMulticastRxCount attribute shall indicate the number of multicast packets received by the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.8\n             */\n            packetMulticastRxCount: Attribute(0x7, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 }),\n\n            /**\n             * The PacketMulticastTxCount attribute shall indicate the number of multicast packets transmitted by the\n             * Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.9\n             */\n            packetMulticastTxCount: Attribute(0x8, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 }),\n\n            /**\n             * The PacketUnicastRxCount attribute shall indicate the number of unicast packets received by the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.10\n             */\n            packetUnicastRxCount: Attribute(0x9, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 }),\n\n            /**\n             * The PacketUnicastTxCount attribute shall indicate the number of unicast packets transmitted by the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.11\n             */\n            packetUnicastTxCount: Attribute(0xa, TlvNullable(TlvUInt32), { omitChanges: true, default: 0 })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all WiFiNetworkDiagnostics clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x36,\n        name: \"WiFiNetworkDiagnostics\",\n        revision: 1,\n\n        features: {\n            /**\n             * PacketCounts\n             *\n             * Node makes available the counts for the number of received and transmitted packets on the Wi-Fi\n             * interface.\n             */\n            packetCounts: BitFlag(0),\n\n            /**\n             * ErrorCounts\n             *\n             * Node makes available the counts for the number of errors that have occurred during the reception and\n             * transmission of packets on the Wi-Fi interface.\n             */\n            errorCounts: BitFlag(1)\n        },\n\n        attributes: {\n            /**\n             * The BSSID attribute shall indicate the BSSID for which the Wi-Fi network the Node is currently connected.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.1\n             */\n            bssid: Attribute(0x0, TlvNullable(TlvByteString.bound({ length: 6 })), { default: null }),\n\n            /**\n             * The SecurityType attribute shall indicate the current type of Wi-Fi security used.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.2\n             */\n            securityType: Attribute(0x1, TlvNullable(TlvEnum<SecurityType>()), { default: null }),\n\n            /**\n             * The WiFiVersion attribute shall indicate the current 802.11 standard version in use by the Node, per the\n             * table below.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.3\n             */\n            wiFiVersion: Attribute(0x2, TlvNullable(TlvEnum<WiFiVersion>()), { default: null }),\n\n            /**\n             * The ChannelNumber attribute shall indicate the channel that Wi-Fi communication is currently operating\n             * on.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.4\n             */\n            channelNumber: Attribute(0x3, TlvNullable(TlvUInt16), { default: null }),\n\n            /**\n             * The RSSI attribute shall indicate the current RSSI of the Node\u2019s Wi-Fi radio in dBm.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.5\n             */\n            rssi: Attribute(\n                0x4,\n                TlvNullable(TlvInt8.bound({ min: -120, max: 0 })),\n                { omitChanges: true, default: null }\n            ),\n\n            /**\n             * The CurrentMaxRate attribute shall indicate the current maximum PHY rate of transfer of data in\n             * bits-per-second.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.6.12\n             */\n            currentMaxRate: OptionalAttribute(0xb, TlvNullable(TlvUInt64), { omitChanges: true, default: 0 })\n        },\n\n        events: {\n            /**\n             * The Disconnection Event shall indicate that a Node\u2019s Wi-Fi connection has been disconnected as a result\n             * of de-authenticated or dis-association and indicates the reason.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.1\n             */\n            disconnection: OptionalEvent(0x0, EventPriority.Info, TlvDisconnectionEvent),\n\n            /**\n             * The AssociationFailure event shall indicate that a Node has attempted to connect, or reconnect, to a\n             * Wi-Fi access point, but is unable to successfully associate or authenticate, after exhausting all\n             * internal retries of its supplicant.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.2\n             */\n            associationFailure: OptionalEvent(0x1, EventPriority.Info, TlvAssociationFailureEvent),\n\n            /**\n             * The ConnectionStatus Event shall indicate that a Node\u2019s connection status to a Wi-Fi network has\n             * changed. Connected, in this context, shall mean that a Node acting as a Wi-Fi station is successfully\n             * associated to a Wi-Fi Access Point.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.15.8.3\n             */\n            connectionStatus: OptionalEvent(0x2, EventPriority.Info, TlvConnectionStatusEvent)\n        },\n\n        /**\n         * This metadata controls which WiFiNetworkDiagnosticsCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { errorCounts: true }, component: ErrorCountsComponent },\n            { flags: { packetCounts: true }, component: PacketCountsComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * The Wi-Fi Network Diagnostics Cluster provides a means to acquire standardized diagnostics metrics that may be\n     * used by a Node to assist a user or Administrator in diagnosing potential problems. The Wi-Fi Network Diagnostics\n     * Cluster attempts to centralize all metrics that are relevant to a potential Wi-Fi radio running on a Node.\n     *\n     * WiFiNetworkDiagnosticsCluster supports optional features that you can enable with the\n     * WiFiNetworkDiagnosticsCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.15\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const ERRCNT = { errorCounts: true };\n    const PKTCNT = { packetCounts: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            beaconLostCount: MutableCluster.AsConditional(\n                ErrorCountsComponent.attributes.beaconLostCount,\n                { mandatoryIf: [ERRCNT] }\n            ),\n            beaconRxCount: MutableCluster.AsConditional(\n                PacketCountsComponent.attributes.beaconRxCount,\n                { mandatoryIf: [PKTCNT] }\n            ),\n            packetMulticastRxCount: MutableCluster.AsConditional(\n                PacketCountsComponent.attributes.packetMulticastRxCount,\n                { mandatoryIf: [PKTCNT] }\n            ),\n            packetMulticastTxCount: MutableCluster.AsConditional(\n                PacketCountsComponent.attributes.packetMulticastTxCount,\n                { mandatoryIf: [PKTCNT] }\n            ),\n            packetUnicastRxCount: MutableCluster.AsConditional(\n                PacketCountsComponent.attributes.packetUnicastRxCount,\n                { mandatoryIf: [PKTCNT] }\n            ),\n            packetUnicastTxCount: MutableCluster.AsConditional(\n                PacketCountsComponent.attributes.packetUnicastTxCount,\n                { mandatoryIf: [PKTCNT] }\n            ),\n            overrunCount: MutableCluster.AsConditional(\n                ErrorCountsComponent.attributes.overrunCount,\n                { mandatoryIf: [ERRCNT] }\n            )\n        },\n\n        commands: {\n            resetCounts: MutableCluster.AsConditional(\n                ErrorCountsComponent.commands.resetCounts,\n                { mandatoryIf: [ERRCNT] }\n            )\n        },\n\n        events: Cluster.events\n    });\n\n    /**\n     * This cluster supports all WiFiNetworkDiagnostics features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type WiFiNetworkDiagnosticsCluster = WiFiNetworkDiagnostics.Cluster;\nexport const WiFiNetworkDiagnosticsCluster = WiFiNetworkDiagnostics.Cluster;\nClusterRegistry.register(WiFiNetworkDiagnostics.Complete);\n"],
  "mappings": "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",
  "names": ["WiFiNetworkDiagnostics", "Feature", "SecurityType", "WiFiVersion", "AssociationFailureCause", "ConnectionStatus"]
}
