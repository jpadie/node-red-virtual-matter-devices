{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/SwitchCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, Event, EventPriority, Attribute } from \"../Cluster.js\";\nimport { TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Switch {\n    /**\n     * These are optional features supported by SwitchCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4\n     */\n    export enum Feature {\n        /**\n         * LatchingSwitch (LS)\n         *\n         * This feature is for a switch that maintains its position after being pressed (or turned).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.1\n         */\n        LatchingSwitch = \"LatchingSwitch\",\n\n        /**\n         * MomentarySwitch (MS)\n         *\n         * This feature is for a switch that does not maintain its position after being pressed (or turned). After\n         * releasing, it goes back to its idle position.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.2\n         */\n        MomentarySwitch = \"MomentarySwitch\",\n\n        /**\n         * MomentarySwitchRelease (MSR)\n         *\n         * This feature is for a momentary switch that can distinguish and report release events. When this feature\n         * flag MSR is present, MS shall be present as well.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.3\n         */\n        MomentarySwitchRelease = \"MomentarySwitchRelease\",\n\n        /**\n         * MomentarySwitchLongPress (MSL)\n         *\n         * This feature is for a momentary switch that can distinguish and report long presses from short presses. When\n         * this feature flag MSL is present, MS and MSR shall be present as well.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.4\n         */\n        MomentarySwitchLongPress = \"MomentarySwitchLongPress\",\n\n        /**\n         * MomentarySwitchMultiPress (MSM)\n         *\n         * This feature is for a momentary switch that can distinguish and report double press and potentially multiple\n         * presses with more events, such as triple press, etc. When this feature flag MSM is present, MS and MSR shall\n         * be present as well.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.5\n         */\n        MomentarySwitchMultiPress = \"MomentarySwitchMultiPress\"\n    }\n\n    /**\n     * Body of the Switch multiPressOngoing event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.6\n     */\n    export const TlvMultiPressOngoingEvent = TlvObject({\n        /**\n         * This field shall indicate the new value of the CurrentPosition attribute, i.e. while pressed.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.6.1\n         */\n        newPosition: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall contain:\n         *\n         *   \u2022 a value of 2 when the second press of a multi-press sequence has been detected,\n         *\n         *   \u2022 a value of 3 when the third press of a multi-press sequence has been detected,\n         *\n         *   \u2022 a value of N when the Nth press of a multi-press sequence has been detected.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.6.2\n         */\n        currentNumberOfPressesCounted: TlvField(1, TlvUInt8.bound({ min: 2 }))\n    });\n\n    /**\n     * Body of the Switch multiPressOngoing event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.6\n     */\n    export interface MultiPressOngoingEvent extends TypeFromSchema<typeof TlvMultiPressOngoingEvent> {}\n\n    /**\n     * Body of the Switch multiPressComplete event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.7\n     */\n    export const TlvMultiPressCompleteEvent = TlvObject({\n        previousPosition: TlvField(0, TlvUInt8),\n        totalNumberOfPressesCounted: TlvField(1, TlvUInt8.bound({ min: 1 }))\n    });\n\n    /**\n     * Body of the Switch multiPressComplete event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.7\n     */\n    export interface MultiPressCompleteEvent extends TypeFromSchema<typeof TlvMultiPressCompleteEvent> {}\n\n    /**\n     * Body of the Switch switchLatched event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.1\n     */\n    export const TlvSwitchLatchedEvent = TlvObject({\n        /**\n         * This field shall indicate the new value of the CurrentPosition attribute, i.e. after the move.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.1.1\n         */\n        newPosition: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Body of the Switch switchLatched event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.1\n     */\n    export interface SwitchLatchedEvent extends TypeFromSchema<typeof TlvSwitchLatchedEvent> {}\n\n    /**\n     * Body of the Switch initialPress event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.2\n     */\n    export const TlvInitialPressEvent = TlvObject({\n        /**\n         * This field shall indicate the new value of the CurrentPosition attribute, i.e. while pressed.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.2.1\n         */\n        newPosition: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Body of the Switch initialPress event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.2\n     */\n    export interface InitialPressEvent extends TypeFromSchema<typeof TlvInitialPressEvent> {}\n\n    /**\n     * Body of the Switch longPress event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.3\n     */\n    export const TlvLongPressEvent = TlvObject({\n        /**\n         * This field shall indicate the new value of the CurrentPosition attribute, i.e. while pressed.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.3.1\n         */\n        newPosition: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Body of the Switch longPress event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.3\n     */\n    export interface LongPressEvent extends TypeFromSchema<typeof TlvLongPressEvent> {}\n\n    /**\n     * Body of the Switch longRelease event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.5\n     */\n    export const TlvLongReleaseEvent = TlvObject({\n        /**\n         * This field shall indicate the previous value of the CurrentPosition attribute, i.e. just prior to release.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.5.1\n         */\n        previousPosition: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Body of the Switch longRelease event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.5\n     */\n    export interface LongReleaseEvent extends TypeFromSchema<typeof TlvLongReleaseEvent> {}\n\n    /**\n     * Body of the Switch shortRelease event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.4\n     */\n    export const TlvShortReleaseEvent = TlvObject({\n        /**\n         * This field shall indicate the previous value of the CurrentPosition attribute, i.e. just prior to release.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.4.1\n         */\n        previousPosition: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Body of the Switch shortRelease event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.4\n     */\n    export interface ShortReleaseEvent extends TypeFromSchema<typeof TlvShortReleaseEvent> {}\n\n    /**\n     * A SwitchCluster supports these elements if it supports feature MomentarySwitchMultiPress.\n     */\n    export const MomentarySwitchMultiPressComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates how many consecutive presses can be detected and reported by a momentary switch which supports\n             * multi-press (e.g. it will report the value 3 if it can detect single press, double press and triple\n             * press, but not quad press and beyond).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.5.3\n             */\n            multiPressMax: FixedAttribute(0x2, TlvUInt8.bound({ min: 2 }), { default: 2 })\n        },\n\n        events: {\n            /**\n             * This event shall be generated to indicate how many times the momentary switch has been pressed in a\n             * multi-press sequence, during that sequence. See Multi Press Details below.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.6\n             */\n            multiPressOngoing: Event(0x5, EventPriority.Info, TlvMultiPressOngoingEvent),\n\n            /**\n             * This event shall be generated to indicate how many times the momentary switch has been pressed in a\n             * multi-press sequence, after it has been detected that the sequence has ended. See Multi Press Details.\n             *\n             * The PreviousPosition field shall indicate the previous value of the CurrentPosition attribute, i.e. just\n             * prior to release.\n             *\n             * The TotalNumberOfPressesCounted field shall contain:\n             *\n             *   \u2022 a value of 1 when there was one press in a multi-press sequence (and the sequence has ended),\n             *\n             *     i.e. there was no double press (or more),\n             *\n             *   \u2022 a value of 2 when there were exactly two presses in a multi-press sequence (and the sequence has\n             *     ended),\n             *\n             *   \u2022 a value of 3 when there were exactly three presses in a multi-press sequence (and the sequence has\n             *     ended),\n             *\n             *   \u2022 a value of N when there were exactly N presses in a multi-press sequence (and the sequence has\n             *     ended).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.7\n             */\n            multiPressComplete: Event(0x6, EventPriority.Info, TlvMultiPressCompleteEvent)\n        }\n    });\n\n    /**\n     * A SwitchCluster supports these elements if it supports feature LatchingSwitch.\n     */\n    export const LatchingSwitchComponent = MutableCluster.Component({\n        events: {\n            /**\n             * This event shall be generated, when the latching switch is moved to a new position. It may have been\n             * delayed by debouncing within the switch.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.1\n             */\n            switchLatched: Event(0x0, EventPriority.Info, TlvSwitchLatchedEvent)\n        }\n    });\n\n    /**\n     * A SwitchCluster supports these elements if it supports feature MomentarySwitch.\n     */\n    export const MomentarySwitchComponent = MutableCluster.Component({\n        events: {\n            /**\n             * This event shall be generated, when the momentary switch starts to be pressed (after debouncing).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.2\n             */\n            initialPress: Event(0x1, EventPriority.Info, TlvInitialPressEvent)\n        }\n    });\n\n    /**\n     * A SwitchCluster supports these elements if it supports feature MomentarySwitchLongPress.\n     */\n    export const MomentarySwitchLongPressComponent = MutableCluster.Component({\n        events: {\n            /**\n             * This event shall be generated, when the momentary switch has been pressed for a \"long\" time (this time\n             * interval is manufacturer determined (e.g. since it depends on the switch physics)).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.3\n             */\n            longPress: Event(0x2, EventPriority.Info, TlvLongPressEvent),\n\n            /**\n             * This event shall be generated, when the momentary switch has been released (after debouncing) and after\n             * having been pressed for a long time, i.e. this event shall be generated when the switch is released if a\n             * LongPress event has been generated since the previous InitialPress event. Also see Section 1.13.7,\n             * \u201CSequence of generated events\u201D.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.5\n             */\n            longRelease: Event(0x4, EventPriority.Info, TlvLongReleaseEvent)\n        }\n    });\n\n    /**\n     * A SwitchCluster supports these elements if it supports feature MomentarySwitchRelease.\n     */\n    export const MomentarySwitchReleaseComponent = MutableCluster.Component({\n        events: {\n            /**\n             * This event shall be generated, when the momentary switch has been released (after debouncing).\n             *\n             *   \u2022 If the server supports the Momentary Switch LongPress (MSL) feature, this event shall be generated\n             *     when the switch is released if no LongPress event had been generated since the previous InitialPress\n             *     event.\n             *\n             *   \u2022 If the server does not support the Momentary Switch LongPress (MSL) feature, this event shall be\n             *     generated when the switch is released - even when the switch was pressed for a long time.\n             *\n             *   \u2022 Also see Section 1.13.7, \u201CSequence of generated events\u201D.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.6.4\n             */\n            shortRelease: Event(0x3, EventPriority.Info, TlvShortReleaseEvent)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all Switch clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x3b,\n        name: \"Switch\",\n        revision: 1,\n\n        features: {\n            /**\n             * LatchingSwitch\n             *\n             * This feature is for a switch that maintains its position after being pressed (or turned).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.1\n             */\n            latchingSwitch: BitFlag(0),\n\n            /**\n             * MomentarySwitch\n             *\n             * This feature is for a switch that does not maintain its position after being pressed (or turned). After\n             * releasing, it goes back to its idle position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.2\n             */\n            momentarySwitch: BitFlag(1),\n\n            /**\n             * MomentarySwitchRelease\n             *\n             * This feature is for a momentary switch that can distinguish and report release events. When this feature\n             * flag MSR is present, MS shall be present as well.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.3\n             */\n            momentarySwitchRelease: BitFlag(2),\n\n            /**\n             * MomentarySwitchLongPress\n             *\n             * This feature is for a momentary switch that can distinguish and report long presses from short presses.\n             * When this feature flag MSL is present, MS and MSR shall be present as well.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.4\n             */\n            momentarySwitchLongPress: BitFlag(3),\n\n            /**\n             * MomentarySwitchMultiPress\n             *\n             * This feature is for a momentary switch that can distinguish and report double press and potentially\n             * multiple presses with more events, such as triple press, etc. When this feature flag MSM is present, MS\n             * and MSR shall be present as well.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.4.5\n             */\n            momentarySwitchMultiPress: BitFlag(4)\n        },\n\n        attributes: {\n            /**\n             * Indicates the maximum number of positions the switch has. Any kind of switch has a minimum of 2\n             * positions. Also see Multi Position Details for the case NumberOfPositions>2.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.5.1\n             */\n            numberOfPositions: FixedAttribute(0x0, TlvUInt8.bound({ min: 2 }), { default: 2 }),\n\n            /**\n             * Indicates the position of the switch. The valid range is zero to NumberOfPositions-1. CurrentPosition\n             * value 0 shall be assigned to the default position of the switch: for example the \"open\" state of a\n             * rocker switch, or the \"idle\" state of a push button switch.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13.5.2\n             */\n            currentPosition: Attribute(0x1, TlvUInt8, { persistent: true, default: 0 })\n        },\n\n        /**\n         * This metadata controls which SwitchCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { momentarySwitchMultiPress: true }, component: MomentarySwitchMultiPressComponent },\n            { flags: { latchingSwitch: true }, component: LatchingSwitchComponent },\n            { flags: { momentarySwitch: true }, component: MomentarySwitchComponent },\n            { flags: { momentarySwitchLongPress: true }, component: MomentarySwitchLongPressComponent },\n            { flags: { momentarySwitchRelease: true }, component: MomentarySwitchReleaseComponent },\n            { flags: { momentarySwitchRelease: true, momentarySwitch: false }, component: false },\n            { flags: { momentarySwitchLongPress: true, momentarySwitch: false }, component: false },\n            { flags: { momentarySwitchLongPress: true, momentarySwitchRelease: false }, component: false },\n            { flags: { momentarySwitchMultiPress: true, momentarySwitch: false }, component: false },\n            { flags: { momentarySwitchMultiPress: true, momentarySwitchRelease: false }, component: false },\n            { flags: { latchingSwitch: true, momentarySwitch: true }, component: false },\n            { flags: { latchingSwitch: false, momentarySwitch: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster exposes interactions with a switch device, for the purpose of using those interactions by other\n     * devices.\n     *\n     * Two types of switch devices are supported: latching switch (e.g. rocker switch) and momentary switch (e.g. push\n     * button), distinguished with their feature flags.\n     *\n     * Interactions with the switch device are exposed as attributes (for the latching switch) and as events (for both\n     * types of switches).\n     *\n     * An interested client may subscribe to these attributes/events and thus be informed of the interactions, and can\n     * perform actions based on this, for example by sending commands to perform an action such as controlling a light\n     * or a window shade.\n     *\n     * Per the Matter specification you cannot use {@link SwitchCluster} without enabling certain feature combinations.\n     * You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.13\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const MSM = { momentarySwitchMultiPress: true };\n    const LS = { latchingSwitch: true };\n    const MS = { momentarySwitch: true };\n    const MSL = { momentarySwitchLongPress: true };\n    const MSR = { momentarySwitchRelease: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            multiPressMax: MutableCluster.AsConditional(\n                MomentarySwitchMultiPressComponent.attributes.multiPressMax,\n                { mandatoryIf: [MSM] }\n            )\n        },\n\n        events: {\n            switchLatched: MutableCluster.AsConditional(\n                LatchingSwitchComponent.events.switchLatched,\n                { mandatoryIf: [LS] }\n            ),\n            initialPress: MutableCluster.AsConditional(\n                MomentarySwitchComponent.events.initialPress,\n                { mandatoryIf: [MS] }\n            ),\n            longPress: MutableCluster.AsConditional(\n                MomentarySwitchLongPressComponent.events.longPress,\n                { mandatoryIf: [MSL] }\n            ),\n            shortRelease: MutableCluster.AsConditional(\n                MomentarySwitchReleaseComponent.events.shortRelease,\n                { mandatoryIf: [MSR] }\n            ),\n            longRelease: MutableCluster.AsConditional(\n                MomentarySwitchLongPressComponent.events.longRelease,\n                { mandatoryIf: [MSL] }\n            ),\n            multiPressOngoing: MutableCluster.AsConditional(\n                MomentarySwitchMultiPressComponent.events.multiPressOngoing,\n                { mandatoryIf: [MSM] }\n            ),\n            multiPressComplete: MutableCluster.AsConditional(\n                MomentarySwitchMultiPressComponent.events.multiPressComplete,\n                { mandatoryIf: [MSM] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all Switch features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type SwitchCluster = Switch.Cluster;\nexport const SwitchCluster = Switch.Cluster;\nClusterRegistry.register(Switch.Complete);\n"],
  "mappings": "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",
  "names": ["Switch", "Feature"]
}
