{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/WakeOnLanCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { OptionalFixedAttribute } from \"../Cluster.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace WakeOnLan {\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x503,\n        name: \"WakeOnLan\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * Indicates the current MAC address of the device. Only 48-bit MAC Addresses shall be used for this\n             * attribute as required by the Wake on LAN protocol.\n             *\n             * Format of this attribute shall be an upper-case hex-encoded string representing the hex address, like\n             * 12345678ABCD.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.12.4.1\n             */\n            macAddress: OptionalFixedAttribute(0x0, TlvString.bound({ maxLength: 12 })),\n\n            /**\n             * Indicates the current link-local address of the device. Only 128-bit IPv6 link- local addresses shall be\n             * used for this attribute.\n             *\n             * NOTE\n             *\n             * Some companies may consider MAC Address to be protected data subject to PII handling considerations and\n             * will therefore choose not to include it or read it. The MAC Address can often be determined using ARP in\n             * IPv4 or NDP in IPv6.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.12.4.2\n             */\n            linkLocalAddress: OptionalFixedAttribute(0x1, TlvByteString)\n        }\n    });\n\n    /**\n     * This cluster provides an interface for managing low power mode on a device that supports the Wake On LAN or Wake\n     * On Wireless LAN (WLAN) protocol (see [Wake On LAN]).\n     *\n     * This cluster would be supported on IP devices that have a low power mode AND support the ability to be woken up\n     * using the Wake on LAN or Wake on WLAN protocol. This cluster provides the device MAC address which is a required\n     * input to the Wake on LAN protocol. Besides the MAC address, this cluster provides an optional link-local IPv6\n     * address which is useful to support \"Wake on Direct Packet\" used by some Ethernet and Wi-Fi devices.\n     *\n     * Acting on the MAC address or link-local IPv6 address information does require the caller to be in the same\n     * broadcast domain as the destination. To wake the destination up, the caller sends a multicast-based magic UDP\n     * packet that contains destination\u2019s MAC address in the UDP payload to FF02::1, the IPv6 all-nodes link-local\n     * multicast group address. If the optional link-local address is provided by the destination through this cluster,\n     * the caller also sends the magic UDP packet in unicast to that link-local address. This unicast-based method is\n     * particularly useful for Wi-Fi devices, since due to lack of MAC layer retransmission mechanism, multicast over\n     * Wi-Fi is not as reliable as unicast. If a device provides the link-local address in this cluster, its Ethernet\n     * controller or Wi-Fi radio shall respond to the IPv6 neighbor solicitation message for the link-local address\n     * without the need to wake host CPU up. In order to receive the magic or neighbor solicitation packets in\n     * multicast, the Wi-Fi devices must support Group Temporal Key (GTK) rekey operation in low power mode.\n     *\n     * Most devices automatically enter low power mode based upon inactivity.\n     *\n     * The cluster server for Wake on LAN or Wake on WLAN is implemented by a device that supports the Wake on LAN/WLAN\n     * protocol, such as a TV, Set-top Box, or Smart Speaker.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.12\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type WakeOnLanCluster = WakeOnLan.Cluster;\nexport const WakeOnLanCluster = WakeOnLan.Cluster;\nClusterRegistry.register(WakeOnLan.Complete);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAA+B;AAC/B,qBAAuC;AACvC,uBAAyC;AAEzC,6BAAgC;AAZhC;AAAA;AAAA;AAAA;AAAA;AAcO,IAAU;AAAA,CAAV,CAAUA,eAAV;AAII,EAAMA,WAAA,sBAAkB,sCAAe;AAAA,IAC1C,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUR,gBAAY,uCAAuB,GAAK,2BAAU,MAAM,EAAE,WAAW,GAAG,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAc1E,sBAAkB,uCAAuB,GAAK,8BAAa;AAAA,IAC/D;AAAA,EACJ,CAAC;AA+BM,EAAMA,WAAA,UAAmBA,WAAA;AACzB,EAAMA,WAAA,WAAWA,WAAA;AAAA,GAnEX;AAuEV,MAAM,mBAAmB,UAAU;AAC1C,uCAAgB,SAAS,UAAU,QAAQ;",
  "names": ["WakeOnLan"]
}
