{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ValveConfigurationAndControlCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    OptionalWritableAttribute,\n    OptionalFixedAttribute,\n    WritableAttribute,\n    OptionalAttribute,\n    Command,\n    TlvNoResponse,\n    OptionalEvent,\n    EventPriority\n} from \"../Cluster.js\";\nimport { TlvEpochUs, TlvPercent, TlvUInt8, TlvUInt32, TlvEnum, TlvUInt16, TlvBitmap } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvOptionalField, TlvObject, TlvField } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ValveConfigurationAndControl {\n    /**\n     * These are optional features supported by ValveConfigurationAndControlCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.4\n     */\n    export enum Feature {\n        /**\n         * TimeSync (TS)\n         *\n         * This feature shall indicate that the valve uses Time Synchronization and UTC time to indicate duration and\n         * auto close time.\n         *\n         * This feature shall NOT be supported unless the device supports the Time Synchronization cluster.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.4.1\n         */\n        TimeSync = \"TimeSync\",\n\n        /**\n         * Level (LVL)\n         *\n         * This feature shall indicate that the valve is capable of being adjusted to a specific position, as a\n         * percentage, of its full range of motion.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.4.2\n         */\n        Level = \"Level\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.5.2\n     */\n    export enum ValveState {\n        /**\n         * Valve is in closed position\n         */\n        Closed = 0,\n\n        /**\n         * Valve is in open position\n         */\n        Open = 1,\n\n        /**\n         * Valve is transitioning between closed and open positions or between levels\n         */\n        Transitioning = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.5.1\n     */\n    export const ValveFault = {\n        /**\n         * Unspecified fault detected\n         */\n        generalFault: BitFlag(0),\n\n        /**\n         * Valve is blocked\n         */\n        blocked: BitFlag(1),\n\n        /**\n         * Valve has detected a leak\n         */\n        leaking: BitFlag(2),\n\n        /**\n         * No valve is connected to controller\n         */\n        notConnected: BitFlag(3),\n\n        /**\n         * Short circuit is detected\n         */\n        shortCircuit: BitFlag(4),\n\n        /**\n         * The available current has been exceeded\n         */\n        currentExceeded: BitFlag(5)\n    };\n\n    /**\n     * Input to the ValveConfigurationAndControl open command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.1\n     */\n    export const TlvOpenRequest = TlvObject({\n        /**\n         * This field shall indicate the duration that the valve will remain open for this specific Open command.\n         *\n         * A value of null shall indicate the duration is not set, meaning that the valve will remain open until closed\n         * by the user or some other automation.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.1.1\n         */\n        openDuration: TlvOptionalField(0, TlvNullable(TlvUInt32.bound({ min: 1 }))),\n\n        /**\n         * This field shall indicate the target level used for this specific Open command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.1.2\n         */\n        targetLevel: TlvOptionalField(1, TlvPercent.bound({ min: 1 }))\n    });\n\n    /**\n     * Input to the ValveConfigurationAndControl open command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.1\n     */\n    export interface OpenRequest extends TypeFromSchema<typeof TlvOpenRequest> {}\n\n    /**\n     * Body of the ValveConfigurationAndControl valveStateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.1\n     */\n    export const TlvValveStateChangedEvent = TlvObject({\n        /**\n         * This field shall indicate the new state of the valve.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.1.1\n         */\n        valveState: TlvField(0, TlvEnum<ValveState>()),\n\n        /**\n         * This field shall indicate the new level of the valve.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.1.2\n         */\n        valveLevel: TlvOptionalField(1, TlvPercent)\n    });\n\n    /**\n     * Body of the ValveConfigurationAndControl valveStateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.1\n     */\n    export interface ValveStateChangedEvent extends TypeFromSchema<typeof TlvValveStateChangedEvent> {}\n\n    /**\n     * Body of the ValveConfigurationAndControl valveFault event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.2\n     */\n    export const TlvValveFaultEvent = TlvObject({\n        /**\n         * This field shall indicate the value of the ValveFault attribute, at the time this event is generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.2.1\n         */\n        valveFault: TlvField(0, TlvBitmap(TlvUInt16, ValveFault))\n    });\n\n    /**\n     * Body of the ValveConfigurationAndControl valveFault event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.2\n     */\n    export interface ValveFaultEvent extends TypeFromSchema<typeof TlvValveFaultEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.6.1\n     */\n    export enum StatusCode {\n        /**\n         * The requested action could not be performed due to a fault on the valve.\n         */\n        FailureDueToFault = 2\n    }\n\n    /**\n     * A ValveConfigurationAndControlCluster supports these elements if it supports feature TimeSync.\n     */\n    export const TimeSyncComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the UTC time when the valve will close, depending on value of the OpenDuration attribute.\n             *\n             * Null:\n             *\n             *   \u2022 When OpenDuration is null, or\n             *\n             *   \u2022 When the valve does not have a synchronized UTCTime in the Time Synchronization cluster, or\n             *\n             *   \u2022 When the valve is closed.\n             *\n             * When the value of this attribute is earlier or equal to the current UTC time, the valve shall\n             * automatically transition to its closed position. The behavior of transitioning to the closed position,\n             * shall match the behavior described in the Close command.\n             *\n             * If this attribute is not null and the Time Synchronization cluster receives a SetUTCTime command,\n             * modifying the current UTC time of the device, the value of this attribute shall be adjusted to match the\n             * new UTC time plus the value of the RemainingDuration attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.3\n             */\n            autoCloseTime: Attribute(0x2, TlvNullable(TlvEpochUs), { default: null })\n        }\n    });\n\n    /**\n     * A ValveConfigurationAndControlCluster supports these elements if it supports feature Level.\n     */\n    export const LevelComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the current level of the valve as a percentage value, between fully closed and fully open.\n             * During a transition from one level to another level, the valve SHOULD keep this attribute updated to the\n             * best of its ability, in order to represent the actual level of the valve during the movement.\n             *\n             * A value of 100 percent shall indicate the fully open position. A value of 0 percent shall indicate the\n             * fully closed position.\n             *\n             * A value of null shall indicate that the current state is not known.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.7\n             */\n            currentLevel: Attribute(0x6, TlvNullable(TlvPercent), { default: null }),\n\n            /**\n             * Indicates the target level of the valve as a percentage value, between fully closed and fully open.\n             *\n             * The interpretation of the percentage value is the same as for the CurrentLevel attribute.\n             *\n             * A value of null shall indicate that no target position is set, since the change of level is either done\n             * or failed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.8\n             */\n            targetLevel: Attribute(0x7, TlvNullable(TlvPercent), { default: null }),\n\n            /**\n             * Indicates the default value used for the TargetLevel attribute, when a valve transitions from the closed\n             * to the open state, caused by an Open command, if a TargetLevel field is not present in the Open command.\n             *\n             * If the LevelStep attribute is present and the value of a write interaction to this attribute field is\n             * not 100, the value shall be a supported value as defined by the LevelStep attribute, such that (Value\n             * received in the write interaction) % (Value of LevelStep attribute) equals 0. If the resulting value is\n             * not 0, the requested DefaultOpenLevel value is considered an unsupported value and a CONSTRAINT_ERROR\n             * status shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.9\n             */\n            defaultOpenLevel: OptionalWritableAttribute(\n                0x8,\n                TlvPercent.bound({ min: 1 }),\n                { persistent: true, default: 100 }\n            ),\n\n            /**\n             * Indicates the step size the valve can support.\n             *\n             * The step size defined by this attribute is counted from 0 and the final step towards 100 may be\n             * different than what is defined in this attribute. For example, if the value of this attribute is 15, it\n             * results in these target values being supported; 0, 15, 30, 45, 60, 75, 90 and 100.\n             *\n             * The values of 0 and 100 shall always be supported, regardless of the value of this attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.11\n             */\n            levelStep: OptionalFixedAttribute(0xa, TlvUInt8.bound({ min: 1, max: 50 }), { default: 1 })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all ValveConfigurationAndControl clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x81,\n        name: \"ValveConfigurationAndControl\",\n        revision: 1,\n\n        features: {\n            /**\n             * TimeSync\n             *\n             * This feature shall indicate that the valve uses Time Synchronization and UTC time to indicate duration\n             * and auto close time.\n             *\n             * This feature shall NOT be supported unless the device supports the Time Synchronization cluster.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.4.1\n             */\n            timeSync: BitFlag(0),\n\n            /**\n             * Level\n             *\n             * This feature shall indicate that the valve is capable of being adjusted to a specific position, as a\n             * percentage, of its full range of motion.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.4.2\n             */\n            level: BitFlag(1)\n        },\n\n        attributes: {\n            /**\n             * Indicates the total duration, in seconds, for which the valve will remain open for this current opening.\n             *\n             * A value of null shall indicate the duration is not set, meaning that the valve will remain open until\n             * closed by the user or some other automation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.1\n             */\n            openDuration: Attribute(0x0, TlvNullable(TlvUInt32.bound({ min: 1 })), { default: null }),\n\n            /**\n             * Indicates the default duration, in seconds, for which the valve will remain open, if the OpenDuration\n             * field is not present in the Open command.\n             *\n             * A value of null shall indicate the duration is not set, meaning that the valve will remain open until\n             * closed by the user or some other automation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.2\n             */\n            defaultOpenDuration: WritableAttribute(\n                0x1,\n                TlvNullable(TlvUInt32.bound({ min: 1 })),\n                { persistent: true, default: null }\n            ),\n\n            /**\n             * Indicates the remaining duration, in seconds, until the valve closes. Null:\n             *\n             *   \u2022 When OpenDuration is null, or\n             *\n             *   \u2022 When the valve is closed.\n             *\n             * The value of this attribute shall only be reported in the following cases:\n             *\n             *   \u2022 When it changes from null to any other value and vice versa, or\n             *\n             *   \u2022 When it changes to 0, or\n             *\n             *   \u2022 When it increases, or\n             *\n             *   \u2022 When the closing time changes.\n             *\n             * Meaning that clients SHOULD NOT rely on the reporting of this attribute in order to keep track of the\n             * remaining duration, due to this attribute not being reported during regular countdown.\n             *\n             * When reading this attribute it shall return the remaining duration, in seconds, until the valve closes.\n             *\n             * When the value of this attribute counts down to 0, the valve shall automatically transition to its\n             * closed position. The behavior of transitioning to the closed position shall match the behavior described\n             * in the Close command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.4\n             */\n            remainingDuration: Attribute(0x3, TlvNullable(TlvUInt32), { default: null }),\n\n            /**\n             * Indicates the current state of the valve.\n             *\n             * A value of null shall indicate that the current state is not known.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.5\n             */\n            currentState: Attribute(0x4, TlvNullable(TlvEnum<ValveState>()), { default: null }),\n\n            /**\n             * Indicates the target state, while changing the state, of the valve.\n             *\n             * A value of null shall indicate that no target position is set, since the change in state is either done\n             * or failed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.6\n             */\n            targetState: Attribute(0x5, TlvNullable(TlvEnum<ValveState>()), { default: null }),\n\n            /**\n             * Indicates any faults registered by the valve.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.7.10\n             */\n            valveFault: OptionalAttribute(0x9, TlvBitmap(TlvUInt16, ValveFault))\n        },\n\n        commands: {\n            /**\n             * This command is used to set the valve to its open position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.1\n             */\n            open: Command(0x0, TlvOpenRequest, 0x0, TlvNoResponse),\n\n            /**\n             * This command is used to set the valve to its closed position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.8.2\n             */\n            close: Command(0x1, TlvNoArguments, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when the valve state changed. For level changes, after the end of\n             * movement, for state changes when the new state has been reached.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.1\n             */\n            valveStateChanged: OptionalEvent(0x0, EventPriority.Info, TlvValveStateChangedEvent),\n\n            /**\n             * This event shall be generated when the valve registers or clears a fault, e.g. not being able to\n             * transition to the requested target level or state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6.9.2\n             */\n            valveFault: OptionalEvent(0x1, EventPriority.Info, TlvValveFaultEvent)\n        },\n\n        /**\n         * This metadata controls which ValveConfigurationAndControlCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { timeSync: true }, component: TimeSyncComponent },\n            { flags: { level: true }, component: LevelComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is used to configure a valve.\n     *\n     * ValveConfigurationAndControlCluster supports optional features that you can enable with the\n     * ValveConfigurationAndControlCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.6\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const TS = { timeSync: true };\n    const LVL = { level: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            autoCloseTime: MutableCluster.AsConditional(\n                TimeSyncComponent.attributes.autoCloseTime,\n                { mandatoryIf: [TS] }\n            ),\n            currentLevel: MutableCluster.AsConditional(LevelComponent.attributes.currentLevel, { mandatoryIf: [LVL] }),\n            targetLevel: MutableCluster.AsConditional(LevelComponent.attributes.targetLevel, { mandatoryIf: [LVL] }),\n            defaultOpenLevel: MutableCluster.AsConditional(\n                LevelComponent.attributes.defaultOpenLevel,\n                { optionalIf: [LVL] }\n            ),\n            levelStep: MutableCluster.AsConditional(LevelComponent.attributes.levelStep, { optionalIf: [LVL] })\n        },\n\n        commands: Cluster.commands,\n        events: Cluster.events\n    });\n\n    /**\n     * This cluster supports all ValveConfigurationAndControl features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ValveConfigurationAndControlCluster = ValveConfigurationAndControl.Cluster;\nexport const ValveConfigurationAndControlCluster = ValveConfigurationAndControl.Cluster;\nClusterRegistry.register(ValveConfigurationAndControl.Complete);\n"],
  "mappings": "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",
  "names": ["ValveConfigurationAndControl", "Feature", "ValveState", "StatusCode"]
}
