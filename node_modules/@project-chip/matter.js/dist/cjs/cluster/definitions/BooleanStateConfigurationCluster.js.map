{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/BooleanStateConfigurationCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    WritableAttribute,\n    FixedAttribute,\n    OptionalFixedAttribute,\n    Attribute,\n    OptionalAttribute,\n    Command,\n    TlvNoResponse,\n    Event,\n    EventPriority,\n    OptionalEvent\n} from \"../Cluster.js\";\nimport { TlvUInt8, TlvBitmap, TlvUInt16 } from \"../../tlv/TlvNumber.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace BooleanStateConfiguration {\n    /**\n     * These are optional features supported by BooleanStateConfigurationCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.4\n     */\n    export enum Feature {\n        /**\n         * Visual (VIS)\n         *\n         * Supports visual alarms\n         */\n        Visual = \"Visual\",\n\n        /**\n         * Audible (AUD)\n         *\n         * Supports audible alarms\n         */\n        Audible = \"Audible\",\n\n        /**\n         * AlarmSuppress (SPRS)\n         *\n         * This feature shall indicate that the device is able to suppress the supported alarm modes, when the user\n         * acknowledges the alarm. This is intended to stop visual and/or audible alarms, when the user has become\n         * aware that the sensor is triggered, but it is no longer desired to have the alarm modes active on the\n         * device, e.g.:\n         *\n         *   \u2022 The triggering cause have been resolved by the user, but the sensor has not yet stopped detecting the\n         *     triggering cause.\n         *\n         *   \u2022 The user is not able to address the triggering cause, but is aware of the alarm and suppress/acknowledge\n         *     it be addressed at a later point.\n         *\n         * Acknowledge of alarms will for the remainder of this cluster be referred to as suppress.\n         *\n         * A suppressed alarm is still considered active and will remain so unless it is actively disabled or the\n         * triggering condition is not longer present. The action of suppressing an alarm mode is only applicable to\n         * and is intended to stop the physical alarming, e.g. emitting a sound or blinking a light; it does not impact\n         * alarm reporting in AlarmsActive.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.4.1\n         */\n        AlarmSuppress = \"AlarmSuppress\",\n\n        /**\n         * SensitivityLevel (SENSLVL)\n         *\n         * Supports ability to set sensor sensitivity\n         */\n        SensitivityLevel = \"SensitivityLevel\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.5.1\n     */\n    export const AlarmMode = {\n        /**\n         * Visual alarming\n         */\n        visual: BitFlag(0),\n\n        /**\n         * Audible alarming\n         */\n        audible: BitFlag(1)\n    };\n\n    /**\n     * Input to the BooleanStateConfiguration enableDisableAlarm command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.2\n     */\n    export const TlvEnableDisableAlarmRequest = TlvObject({\n        /**\n         * This field shall indicate the alarm modes to either enable or disable depending on the bit status, as\n         * specified for the AlarmsEnabled attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.2.1\n         */\n        alarmsToEnableDisable: TlvField(0, TlvBitmap(TlvUInt8, AlarmMode))\n    });\n\n    /**\n     * Input to the BooleanStateConfiguration enableDisableAlarm command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.2\n     */\n    export interface EnableDisableAlarmRequest extends TypeFromSchema<typeof TlvEnableDisableAlarmRequest> {}\n\n    /**\n     * Body of the BooleanStateConfiguration alarmsStateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.1\n     */\n    export const TlvAlarmsStateChangedEvent = TlvObject({\n        /**\n         * This field shall indicate the state of active alarm modes, as indicated by the AlarmsActive attribute, at\n         * the time the event was generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.1.1\n         */\n        alarmsActive: TlvField(0, TlvBitmap(TlvUInt8, AlarmMode)),\n\n        /**\n         * This field shall indicate the state of suppressed alarm modes, as indicated by the AlarmsSuppressed\n         * attribute, at the time the event was generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.1.2\n         */\n        alarmsSuppressed: TlvOptionalField(1, TlvBitmap(TlvUInt8, AlarmMode))\n    });\n\n    /**\n     * Body of the BooleanStateConfiguration alarmsStateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.1\n     */\n    export interface AlarmsStateChangedEvent extends TypeFromSchema<typeof TlvAlarmsStateChangedEvent> {}\n\n    /**\n     * Input to the BooleanStateConfiguration suppressAlarm command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.1\n     */\n    export const TlvSuppressAlarmRequest = TlvObject({\n        /**\n         * This field shall indicate the alarm modes to suppress.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.1.1\n         */\n        alarmsToSuppress: TlvField(0, TlvBitmap(TlvUInt8, AlarmMode))\n    });\n\n    /**\n     * Input to the BooleanStateConfiguration suppressAlarm command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.1\n     */\n    export interface SuppressAlarmRequest extends TypeFromSchema<typeof TlvSuppressAlarmRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.5.2\n     */\n    export const SensorFault = {\n        /**\n         * Unspecified fault detected\n         */\n        generalFault: BitFlag(0)\n    };\n\n    /**\n     * Body of the BooleanStateConfiguration sensorFault event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.2\n     */\n    export const TlvSensorFaultEvent = TlvObject({\n        /**\n         * This field shall indicate the value of the SensorFault attribute, at the time this event is generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.2.1\n         */\n        sensorFault: TlvField(0, TlvBitmap(TlvUInt16, SensorFault))\n    });\n\n    /**\n     * Body of the BooleanStateConfiguration sensorFault event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.2\n     */\n    export interface SensorFaultEvent extends TypeFromSchema<typeof TlvSensorFaultEvent> {}\n\n    /**\n     * A BooleanStateConfigurationCluster supports these elements if it supports feature SensitivityLevel.\n     */\n    export const SensitivityLevelComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the currently selected sensitivity level.\n             *\n             * If a write interaction to this attribute contains an unsupported sensitivity value, a CONSTRAINT_ERROR\n             * status shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.1\n             */\n            currentSensitivityLevel: WritableAttribute(0x0, TlvUInt8, { persistent: true }),\n\n            /**\n             * Indicates the number of supported sensitivity levels by the device.\n             *\n             * These supported sensitivity levels shall be ordered by sensitivity, where a value of 0 shall be\n             * considered the lowest sensitivity level (least sensitive) and the highest supported value shall be\n             * considered the highest sensitivity level.\n             *\n             * The number of supported sensitivity levels SHOULD represent unique sensitivity levels supported by the\n             * device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.2\n             */\n            supportedSensitivityLevels: FixedAttribute(0x1, TlvUInt8.bound({ min: 2, max: 10 })),\n\n            /**\n             * Indicates the default sensitivity level selected by the manufacturer.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.3\n             */\n            defaultSensitivityLevel: OptionalFixedAttribute(0x2, TlvUInt8)\n        }\n    });\n\n    /**\n     * A BooleanStateConfigurationCluster supports these elements if it supports features Visual or Audible.\n     */\n    export const VisualOrAudibleComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates which specific alarm modes on the server are currently active. When the sensor is no longer\n             * triggered, this attribute shall be set to the inactive state, by setting the bit to 0, for all supported\n             * alarm modes.\n             *\n             * If an alarm mode is not supported, the bit indicating this alarm mode shall always be 0. A bit shall\n             * indicate whether the alarm mode inactive or not:\n             *\n             *   \u2022 0 = Inactive\n             *\n             *   \u2022 1 = Active\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.4\n             */\n            alarmsActive: Attribute(0x3, TlvBitmap(TlvUInt8, AlarmMode)),\n\n            /**\n             * Indicates the alarm modes that will be emitted if the sensor is triggered. If an alarm mode is not\n             * supported, the bit indicating this alarm mode shall always be 0.\n             *\n             * A bit shall indicate whether the alarm mode is enabled or disabled:\n             *\n             *   \u2022 0 = Disabled\n             *\n             *   \u2022 1 = Enabled\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.6\n             */\n            alarmsEnabled: OptionalAttribute(0x5, TlvBitmap(TlvUInt8, AlarmMode), { persistent: true }),\n\n            /**\n             * Indicates the alarms supported by the sensor. A bit shall indicate whether the alarm mode is supported:\n             *\n             *   \u2022 0 = Not supported\n             *\n             *   \u2022 1 = Supported\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.7\n             */\n            alarmsSupported: FixedAttribute(0x6, TlvBitmap(TlvUInt8, AlarmMode))\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.2\n             */\n            enableDisableAlarm: Command(0x1, TlvEnableDisableAlarmRequest, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated after any bits in the AlarmsActive and/or AlarmsSuppressed attributes\n             * change. This may occur in situations such as when internal processing by the server determines that an\n             * alarm mode becomes active or inactive, or when the SuppressAlarm or EnableDisableAlarm commands are\n             * processed in a way that some alarm modes becomes suppressed, active or inactive.\n             *\n             * If several alarm modes change state at the same time, a single event combining multiple changes may be\n             * emitted instead of multiple events each representing a single change.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.1\n             */\n            alarmsStateChanged: Event(0x0, EventPriority.Info, TlvAlarmsStateChangedEvent)\n        }\n    });\n\n    /**\n     * A BooleanStateConfigurationCluster supports these elements if it supports feature AlarmSuppress.\n     */\n    export const AlarmSuppressComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates which specific alarm modes on the server are currently suppressed. When the sensor is no\n             * longer triggered, this attribute shall be set to the unsuppressed state, by setting the bit to 0, for\n             * all supported alarm modes.\n             *\n             * If an alarm mode is not supported, the bit indicating this alarm mode shall always be 0. A bit shall\n             * indicate whether the alarm mode is suppressed or not:\n             *\n             *   \u2022 0 = Not suppressed\n             *\n             *   \u2022 1 = Suppressed\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.5\n             */\n            alarmsSuppressed: Attribute(0x4, TlvBitmap(TlvUInt8, AlarmMode))\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.7.1\n             */\n            suppressAlarm: Command(0x0, TlvSuppressAlarmRequest, 0x0, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all BooleanStateConfiguration clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x80,\n        name: \"BooleanStateConfiguration\",\n        revision: 1,\n\n        features: {\n            /**\n             * Visual\n             *\n             * Supports visual alarms\n             */\n            visual: BitFlag(0),\n\n            /**\n             * Audible\n             *\n             * Supports audible alarms\n             */\n            audible: BitFlag(1),\n\n            /**\n             * AlarmSuppress\n             *\n             * This feature shall indicate that the device is able to suppress the supported alarm modes, when the user\n             * acknowledges the alarm. This is intended to stop visual and/or audible alarms, when the user has become\n             * aware that the sensor is triggered, but it is no longer desired to have the alarm modes active on the\n             * device, e.g.:\n             *\n             *   \u2022 The triggering cause have been resolved by the user, but the sensor has not yet stopped detecting\n             *     the triggering cause.\n             *\n             *   \u2022 The user is not able to address the triggering cause, but is aware of the alarm and\n             *     suppress/acknowledge it be addressed at a later point.\n             *\n             * Acknowledge of alarms will for the remainder of this cluster be referred to as suppress.\n             *\n             * A suppressed alarm is still considered active and will remain so unless it is actively disabled or the\n             * triggering condition is not longer present. The action of suppressing an alarm mode is only applicable\n             * to and is intended to stop the physical alarming, e.g. emitting a sound or blinking a light; it does not\n             * impact alarm reporting in AlarmsActive.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.4.1\n             */\n            alarmSuppress: BitFlag(2),\n\n            /**\n             * SensitivityLevel\n             *\n             * Supports ability to set sensor sensitivity\n             */\n            sensitivityLevel: BitFlag(3)\n        },\n\n        attributes: {\n            /**\n             * Indicates any faults registered by the device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.6.8\n             */\n            sensorFault: OptionalAttribute(0x7, TlvBitmap(TlvUInt16, SensorFault))\n        },\n\n        events: {\n            /**\n             * This event shall be generated when the device registers or clears a fault.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8.8.2\n             */\n            sensorFault: OptionalEvent(0x1, EventPriority.Info, TlvSensorFaultEvent)\n        },\n\n        /**\n         * This metadata controls which BooleanStateConfigurationCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { sensitivityLevel: true }, component: SensitivityLevelComponent },\n            { flags: { visual: true }, component: VisualOrAudibleComponent },\n            { flags: { audible: true }, component: VisualOrAudibleComponent },\n            { flags: { alarmSuppress: true }, component: AlarmSuppressComponent },\n            { flags: { alarmSuppress: true, visual: true, audible: true }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is used to configure a boolean sensor, including optional state change alarm features and\n     * configuration of the sensitivity level associated with the sensor.\n     *\n     * BooleanStateConfigurationCluster supports optional features that you can enable with the\n     * BooleanStateConfigurationCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.8\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const SENSLVL = { sensitivityLevel: true };\n    const VIS = { visual: true };\n    const AUD = { audible: true };\n    const SPRS = { alarmSuppress: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            currentSensitivityLevel: MutableCluster.AsConditional(\n                SensitivityLevelComponent.attributes.currentSensitivityLevel,\n                { mandatoryIf: [SENSLVL] }\n            ),\n            supportedSensitivityLevels: MutableCluster.AsConditional(\n                SensitivityLevelComponent.attributes.supportedSensitivityLevels,\n                { mandatoryIf: [SENSLVL] }\n            ),\n            defaultSensitivityLevel: MutableCluster.AsConditional(\n                SensitivityLevelComponent.attributes.defaultSensitivityLevel,\n                { optionalIf: [SENSLVL] }\n            ),\n            alarmsActive: MutableCluster.AsConditional(\n                VisualOrAudibleComponent.attributes.alarmsActive,\n                { mandatoryIf: [VIS, AUD] }\n            ),\n            alarmsSuppressed: MutableCluster.AsConditional(\n                AlarmSuppressComponent.attributes.alarmsSuppressed,\n                { mandatoryIf: [SPRS] }\n            ),\n            alarmsEnabled: MutableCluster.AsConditional(\n                VisualOrAudibleComponent.attributes.alarmsEnabled,\n                { optionalIf: [VIS, AUD] }\n            ),\n            alarmsSupported: MutableCluster.AsConditional(\n                VisualOrAudibleComponent.attributes.alarmsSupported,\n                { mandatoryIf: [VIS, AUD] }\n            )\n        },\n\n        commands: {\n            suppressAlarm: MutableCluster.AsConditional(\n                AlarmSuppressComponent.commands.suppressAlarm,\n                { mandatoryIf: [SPRS] }\n            ),\n            enableDisableAlarm: MutableCluster.AsConditional(\n                VisualOrAudibleComponent.commands.enableDisableAlarm,\n                { mandatoryIf: [VIS, AUD] }\n            )\n        },\n\n        events: {\n            ...Cluster.events,\n            alarmsStateChanged: MutableCluster.AsConditional(\n                VisualOrAudibleComponent.events.alarmsStateChanged,\n                { mandatoryIf: [VIS, AUD] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all BooleanStateConfiguration features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type BooleanStateConfigurationCluster = BooleanStateConfiguration.Cluster;\nexport const BooleanStateConfigurationCluster = BooleanStateConfiguration.Cluster;\nClusterRegistry.register(BooleanStateConfiguration.Complete);\n"],
  "mappings": "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",
  "names": ["BooleanStateConfiguration", "Feature"]
}
