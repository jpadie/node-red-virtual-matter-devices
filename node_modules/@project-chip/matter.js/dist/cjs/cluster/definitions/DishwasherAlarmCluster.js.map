{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/DishwasherAlarmCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    FixedAttribute,\n    Command,\n    TlvNoResponse,\n    Attribute,\n    OptionalCommand,\n    Event,\n    EventPriority\n} from \"../Cluster.js\";\nimport { TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { AlarmBase } from \"./AlarmBaseCluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace DishwasherAlarm {\n    /**\n     * These are optional features supported by DishwasherAlarmCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4\n     */\n    export enum Feature {\n        /**\n         * Reset (RESET)\n         *\n         * This feature indicates that alarms can be reset via the Reset command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4.1\n         */\n        Reset = \"Reset\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.4.4.1\n     */\n    export const Alarm = {\n        /**\n         * Water inflow is abnormal\n         */\n        inflowError: BitFlag(0),\n\n        /**\n         * Water draining is abnormal\n         */\n        drainError: BitFlag(1),\n\n        /**\n         * Door or door lock is abnormal\n         */\n        doorError: BitFlag(2),\n\n        /**\n         * Unable to reach normal temperature\n         */\n        tempTooLow: BitFlag(3),\n\n        /**\n         * Temperature is too high\n         */\n        tempTooHigh: BitFlag(4),\n\n        /**\n         * Water level is abnormal\n         */\n        waterLevelError: BitFlag(5)\n    };\n\n    /**\n     * A DishwasherAlarmCluster supports these elements if it supports feature Reset.\n     */\n    export const ResetComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm\n             * will be latched when set, and will not reset to inactive when the underlying condition which caused the\n             * alarm is no longer present, and so requires an explicit reset using the Reset command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.2\n             */\n            latch: FixedAttribute(0x1, TlvUInt32)\n        },\n\n        commands: {\n            /**\n             * This command resets active and latched alarms (if possible). Any generated Notify event shall contain\n             * fields that represent the state of the server after the command has been processed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.1\n             */\n            reset: Command(0x0, AlarmBase.TlvResetRequest, 0x0, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all DishwasherAlarm clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x5d,\n        name: \"DishwasherAlarm\",\n        revision: 1,\n\n        features: {\n            /**\n             * Reset\n             *\n             * This feature indicates that alarms can be reset via the Reset command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4.1\n             */\n            reset: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be\n             * enabled.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.1\n             */\n            mask: Attribute(0x0, TlvUInt32),\n\n            /**\n             * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the\n             * alarm is active, otherwise the alarm is inactive.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.3\n             */\n            state: Attribute(0x2, TlvUInt32),\n\n            /**\n             * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of\n             * true means the alarm is supported, otherwise the alarm is not supported.\n             *\n             * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.4\n             */\n            supported: FixedAttribute(0x3, TlvUInt32)\n        },\n\n        commands: {\n            /**\n             * This command allows a client to request that an alarm be enabled or suppressed at the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.2\n             */\n            modifyEnabledAlarms: OptionalCommand(0x1, AlarmBase.TlvModifyEnabledAlarmsRequest, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when one or more alarms change state, and shall have these fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1\n             */\n            notify: Event(0x0, EventPriority.Info, AlarmBase.TlvNotifyEvent)\n        },\n\n        /**\n         * This metadata controls which DishwasherAlarmCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { reset: true }, component: ResetComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster is a derived cluster of the Alarm Base cluster.\n     *\n     * DishwasherAlarmCluster supports optional features that you can enable with the DishwasherAlarmCluster.with()\n     * factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.4\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const RESET = { reset: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n        attributes: {\n            ...Cluster.attributes,\n            latch: MutableCluster.AsConditional(ResetComponent.attributes.latch, { mandatoryIf: [RESET] })\n        },\n        commands: {\n            ...Cluster.commands,\n            reset: MutableCluster.AsConditional(ResetComponent.commands.reset, { mandatoryIf: [RESET] })\n        },\n        events: Cluster.events\n    });\n\n    /**\n     * This cluster supports all DishwasherAlarm features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type DishwasherAlarmCluster = DishwasherAlarm.Cluster;\nexport const DishwasherAlarmCluster = DishwasherAlarm.Cluster;\nClusterRegistry.register(DishwasherAlarm.Complete);\n"],
  "mappings": "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",
  "names": ["DishwasherAlarm", "Feature"]
}
