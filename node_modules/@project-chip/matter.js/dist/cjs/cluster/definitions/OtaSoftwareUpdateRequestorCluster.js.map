{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OtaSoftwareUpdateRequestorCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    WritableFabricScopedAttribute,\n    AccessLevel,\n    Attribute,\n    OptionalCommand,\n    TlvNoResponse,\n    Event,\n    EventPriority\n} from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvNodeId } from \"../../datatype/NodeId.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvEnum, TlvUInt8, TlvUInt32, TlvUInt16, TlvUInt64, TlvInt64 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvVendorId } from \"../../datatype/VendorId.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OtaSoftwareUpdateRequestor {\n    /**\n     * This structure encodes a fabric-scoped location of an OTA provider on a given fabric.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.4\n     */\n    export const TlvProviderLocation = TlvObject({\n        /**\n         * This field shall contain the Node ID of the OTA Provider to contact within the Fabric identified by the\n         * FabricIndex.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.4.1\n         */\n        providerNodeId: TlvField(1, TlvNodeId),\n\n        /**\n         * This field shall contain the endpoint number which has the OTA Provider device type and OTA\n         *\n         * Software Update Provider cluster server on the ProviderNodeID. This is provided to avoid having to do\n         * discovery of the location of that endpoint by walking over all endpoints and checking their Descriptor\n         * Cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.4.2\n         */\n        endpoint: TlvField(2, TlvEndpointNumber),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * This structure encodes a fabric-scoped location of an OTA provider on a given fabric.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.4\n     */\n    export interface ProviderLocation extends TypeFromSchema<typeof TlvProviderLocation> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2\n     */\n    export enum UpdateState {\n        /**\n         * Current state is not yet determined.\n         *\n         * This value shall indicate that the current state is not yet determined. Nodes SHOULD attempt a better state\n         * reporting.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.1\n         */\n        Unknown = 0,\n\n        /**\n         * Indicate a Node not yet in the process of software update.\n         *\n         * This value shall indicate a Node not yet in the process of software update, for example because it is\n         * awaiting the moment when a query will be made.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.2\n         */\n        Idle = 1,\n\n        /**\n         * Indicate a Node in the process of querying an OTA Provider.\n         *\n         * This value shall indicate a Node in the process of querying an OTA Provider with QueryImage command,\n         * including during the process of awaiting a response to that command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.3\n         */\n        Querying = 2,\n\n        /**\n         * Indicate a Node waiting after a Busy response.\n         *\n         * This value shall indicate a Node waiting because it received a prior QueryImageResponse with a Status field\n         * indicating Busy.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.4\n         */\n        DelayedOnQuery = 3,\n\n        /**\n         * Indicate a Node currently in the process of downloading a software update.\n         *\n         * This value shall indicate a Node currently in the process of downloading a software update.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.5\n         */\n        Downloading = 4,\n\n        /**\n         * Indicate a Node currently in the process of verifying and applying a software update.\n         *\n         * This value shall indicate a Node currently in the process of verifying and applying a software update.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.6\n         */\n        Applying = 5,\n\n        /**\n         * Indicate a Node waiting caused by AwaitNextAction response.\n         *\n         * This value shall indicate a Node waiting because it received a prior ApplyUpdateResponse with an Action\n         * field set to AwaitNextAction.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.7\n         */\n        DelayedOnApply = 6,\n\n        /**\n         * Indicate a Node in the process of recovering to a previous version.\n         *\n         * This value shall indicate a Node in the process of recovering to a previous version from a new version that\n         * was applied, but that could not remain in force, for reasons such as invalid data detected on boot, or\n         * significant runtime issues such as reboot loops. Eventually, the next state seen SHOULD be Unknown or Idle.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.2.8\n         */\n        RollingBack = 7,\n\n        /**\n         * Indicate a Node is capable of user consent.\n         */\n        DelayedOnUserConsent = 8\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.1\n     */\n    export enum AnnouncementReason {\n        /**\n         * An OTA Provider is announcing its presence.\n         *\n         * An OTA Provider is announcing its presence, but there is no implication that an OTA Requestor would have a\n         * new Software Image available if it queried immediately.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.1.1\n         */\n        SimpleAnnouncement = 0,\n\n        /**\n         * An OTA Provider is announcing, either to a single Node or to a group of Nodes, that a new Software Image MAY\n         * be available.\n         *\n         * An OTA Provider is announcing, either to a single Node or to a group of Nodes, that a new Software Image may\n         * be available. The details may only be obtained by executing a OTA Software Update Query procedure. A\n         * receiving OTA Requestor SHOULD only query the indicated OTA Provider at the ProviderLocation at its next\n         * upcoming OTA Provider query.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.1.2\n         */\n        UpdateAvailable = 1,\n\n        /**\n         * An OTA Provider is announcing, either to a single Node or to a group of Nodes, that a new Software Image MAY\n         * be available, which contains an update that needs to be applied urgently.\n         *\n         * An OTA Provider is announcing, either to a single Node or to a group of Nodes, that a new Software Image may\n         * be available, which contains an update that needs to be applied urgently. The details may only be obtained\n         * by executing a OTA Software Update Query procedure. A receiving OTA Requestor SHOULD query the indicated OTA\n         * Provider at the ProviderLocation after a random jitter delay between 1 and 600 seconds. This particular\n         * reason SHOULD only be employed when an urgent update is available, such as an important security update, or\n         * just after initial commissioning of a device, to assist OTA Requestors in more rapidly obtaining updated\n         * software.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.1.3\n         */\n        UrgentUpdateAvailable = 2\n    }\n\n    /**\n     * Input to the OtaSoftwareUpdateRequestor announceOtaProvider command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1\n     */\n    export const TlvAnnounceOtaProviderRequest = TlvObject({\n        /**\n         * This field shall contain the Node ID of a Node implementing the OTA Provider cluster server, on the\n         * accessing fabric.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1.1\n         */\n        providerNodeId: TlvField(0, TlvNodeId),\n\n        /**\n         * This field shall contain the assigned Vendor ID of the Node invoking this command, as it would appear in\n         * that Node\u2019s Basic Information Cluster VendorID attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1.2\n         */\n        vendorId: TlvField(1, TlvVendorId),\n\n        /**\n         * This field shall contain a value expressing the reason for the announcement.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1.3\n         */\n        announcementReason: TlvField(2, TlvEnum<AnnouncementReason>()),\n\n        /**\n         * This optional field, if present, shall consist of a top-level anonymous list; each list element shall have a\n         * profile-specific tag encoded in fully-qualified form. Each list element shall contain a\n         * manufacturer-specific payload, which the Node invoking this command wants to expose to the receiving Node.\n         * This payload may be used for any purpose and SHOULD be as small as practical, especially if invoked to\n         * groups, in order to reduce networking burden of these payloads.\n         *\n         * This field SHOULD only be included if the sending OTA Provider has knowledge that some recipient can make\n         * use of it.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1.4\n         */\n        metadataForNode: TlvOptionalField(3, TlvByteString.bound({ maxLength: 512 })),\n\n        /**\n         * This field shall contain the endpoint number which has the OTA Provider device type and OTA Software Update\n         * Provider cluster server on the ProviderNodeID. This is provided to avoid having to do discovery of the\n         * location of that endpoint by walking over all endpoints and checking their Descriptor Cluster.\n         *\n         * When Generated\n         *\n         * An OTA Provider may invoke this command directly to an OTA Requestor, to announce its presence as an OTA\n         * Provider on the Fabric.\n         *\n         * These announcements, if made, SHOULD be made at most once every 24 hours for any given target Node, to\n         * assist OTA Requestors in discovering available OTA Provider resources, unless the AnnouncementReason is\n         * UrgentUpdateAvailable, in which case this command may be more frequent.\n         *\n         * Any invocation shall be made with a delay of at least 1 second between invocations from a given OTA\n         * Provider, to reduce burden on the networking infrastructure and affect a form of serialized jitter. It is\n         * recommended to offset the first announcement of a round (i.e. new set of announcements after a previous\n         * complete set) by a random delay time with a distribution span of >= 60 seconds to jitter announcement\n         * schedules over time.\n         *\n         * Effect on Receipt\n         *\n         * On receipt of this command, an OTA Requestor SHOULD consider the new ProviderNodeID and AnnouncementReason\n         * to possibly query for new software sooner than it would have with its default behavior.\n         *\n         * The OTA Requestor SHOULD NOT update entries in the DefaultOTAProviders list based on announcements.\n         *\n         * The receiving Node may ignore the content of the announcement if it is unable or unwilling to further query\n         * OTA Providers temporarily, or if its provider list is full. If the announcement is ignored, the response\n         * SHOULD be SUCCESS.\n         *\n         * Depending on the value of the AnnouncementReason field, the OTA Requestor may have to query the OTA\n         * Provider. See Section 11.20.7.6.1.3, \u201CAnnouncementReason Field\u201D for the different values and their meaning.\n         *\n         * If present, the MetadataForNode field\u2019s may be used by a receiving OTA Requestor in any way it deems\n         * satisfactory. The MetadataForNode field SHOULD be empty under most normal operational circumstance, but can\n         * be useful in environments such as field trials or integration test environments to hint at additional\n         * capabilities which OTA Requestors may use in a particular Vendor-specific context.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1.5\n         */\n        endpoint: TlvField(4, TlvEndpointNumber),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * Input to the OtaSoftwareUpdateRequestor announceOtaProvider command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1\n     */\n    export interface AnnounceOtaProviderRequest extends TypeFromSchema<typeof TlvAnnounceOtaProviderRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3\n     */\n    export enum ChangeReason {\n        /**\n         * The reason for a state change is unknown.\n         *\n         * This value shall indicate that the reason for a state change is unknown.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3.1\n         */\n        Unknown = 0,\n\n        /**\n         * The reason for a state change is the success of a prior operation.\n         *\n         * This value shall indicate that the reason for a state change is the success of a prior operation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3.2\n         */\n        Success = 1,\n\n        /**\n         * The reason for a state change is the failure of a prior operation.\n         *\n         * This value shall indicate that the reason for a state change is the failure of a prior operation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3.3\n         */\n        Failure = 2,\n\n        /**\n         * The reason for a state change is a time-out.\n         *\n         * This value shall indicate that the reason for a state change is a time-out condition as determined by the\n         * OTA Requestor.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3.4\n         */\n        TimeOut = 3,\n\n        /**\n         * The reason for a state change is a request by the OTA Provider to wait.\n         *\n         * This value shall indicate that the reason for a state change is a request by the OTA Provider to await for a\n         * delay.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.4.3.5\n         */\n        DelayByProvider = 4\n    }\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor stateTransition event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1\n     */\n    export const TlvStateTransitionEvent = TlvObject({\n        /**\n         * This field shall be set to the state that preceded the transition causing this event to be generated, if\n         * such a state existed. If no previous state exists, the value shall be Unknown.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1.1\n         */\n        previousState: TlvField(0, TlvEnum<UpdateState>()),\n\n        /**\n         * This field shall be set to the state now in effect through the transition causing this event to be generated.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1.2\n         */\n        newState: TlvField(1, TlvEnum<UpdateState>()),\n\n        /**\n         * This field shall be set to the reason why this event was generated.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1.3\n         */\n        reason: TlvField(2, TlvEnum<ChangeReason>()),\n\n        /**\n         * This field shall be set to the target SoftwareVersion which is the subject of the operation, whenever the\n         * NewState is Downloading, Applying or RollingBack. Otherwise TargetSoftwareVersion shall be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1.4\n         */\n        targetSoftwareVersion: TlvField(3, TlvNullable(TlvUInt32))\n    });\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor stateTransition event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1\n     */\n    export interface StateTransitionEvent extends TypeFromSchema<typeof TlvStateTransitionEvent> {}\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor versionApplied event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.2\n     */\n    export const TlvVersionAppliedEvent = TlvObject({\n        /**\n         * This field shall be set to the same value as the one available in the Software Version attribute of the\n         * Basic Information Cluster for the newly executing version.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.2.1\n         */\n        softwareVersion: TlvField(0, TlvUInt32),\n\n        /**\n         * This field shall be set to the ProductID applying to the executing version, as reflected by the Basic\n         * Information Cluster. This can be used to detect a product updating its definition due to a large-scale\n         * functional update that may impact aspects of the product reflected in the DeviceModel schema of the\n         * Distributed Compliance Ledger.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.2.2\n         */\n        productId: TlvField(1, TlvUInt16)\n    });\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor versionApplied event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.2\n     */\n    export interface VersionAppliedEvent extends TypeFromSchema<typeof TlvVersionAppliedEvent> {}\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor downloadError event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3\n     */\n    export const TlvDownloadErrorEvent = TlvObject({\n        /**\n         * This field shall be set to the value of the SoftwareVersion being downloaded, matching the SoftwareVersion\n         * field of the QueryImageResponse that caused the failing download to take place.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3.1\n         */\n        softwareVersion: TlvField(0, TlvUInt32),\n\n        /**\n         * This field shall be set to the number of bytes that have been downloaded during the failing transfer that\n         * caused this event to be generated.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3.2\n         */\n        bytesDownloaded: TlvField(1, TlvUInt64),\n\n        /**\n         * This field shall be set to the nearest integer percent value reflecting how far within the transfer the\n         * failure occurred during the failing transfer that caused this event to be generated, unless the total length\n         * of the transfer is unknown, in which case it shall be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3.3\n         */\n        progressPercent: TlvField(2, TlvNullable(TlvUInt8.bound({ max: 100 }))),\n\n        /**\n         * This field SHOULD be set to some internal product-specific error code, closest in temporal/functional\n         * proximity to the failure that caused this event to be generated. Otherwise, it shall be null. This event\n         * field may be used for debugging purposes and no uniform definition exists related to its meaning.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3.4\n         */\n        platformCode: TlvField(3, TlvNullable(TlvInt64))\n    });\n\n    /**\n     * Body of the OtaSoftwareUpdateRequestor downloadError event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3\n     */\n    export interface DownloadErrorEvent extends TypeFromSchema<typeof TlvDownloadErrorEvent> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x2a,\n        name: \"OtaSoftwareUpdateRequestor\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * This field is a list of ProviderLocation whose entries shall be set by Administrators, either during\n             * Commissioning or at a later time, to set the ProviderLocation for the default OTA Provider Node to use\n             * for software updates on a given Fabric.\n             *\n             * There shall NOT be more than one entry per Fabric. On a list update that would introduce more than one\n             * entry per fabric, the write shall fail with CONSTRAINT_ERROR status code.\n             *\n             * Provider Locations obtained using the AnnounceOTAProvider command shall NOT overwrite values set in the\n             * DefaultOTAProviders attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.5.1\n             */\n            defaultOtaProviders: WritableFabricScopedAttribute(\n                0x0,\n                TlvArray(TlvProviderLocation),\n                { default: [], writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This field shall be set to True if the OTA Requestor is currently able to be updated. Otherwise, it\n             * shall be set to False in case of any condition preventing update being possible, such as insufficient\n             * capacity of an internal battery. This field is merely informational for diagnostics purposes and shall\n             * NOT affect the responses provided by an OTA Provider to an OTA Requestor.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.5.2\n             */\n            updatePossible: Attribute(0x1, TlvBoolean, { default: true }),\n\n            /**\n             * This field shall reflect the current state of the OTA Requestor with regards to obtaining software\n             * updates. See Section 11.20.7.4.2, \u201CUpdateStateEnum Type\u201D for possible values.\n             *\n             * This field SHOULD be updated in a timely manner whenever OTA Requestor internal state updates.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.5.3\n             */\n            updateState: Attribute(0x2, TlvEnum<UpdateState>(), { default: UpdateState.Unknown }),\n\n            /**\n             * This field shall reflect the percentage value of progress, relative to the current UpdateState, if\n             * applicable to the state.\n             *\n             * The value of this field shall be null if a progress indication does not apply to the current state.\n             *\n             * A value of 0 shall indicate that the beginning has occurred. A value of 100 shall indicate completion.\n             *\n             * This field may be updated infrequently. Some care SHOULD be taken by Nodes to avoid over- reporting\n             * progress when this attribute is part of a subscription.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.5.4\n             */\n            updateStateProgress: Attribute(0x3, TlvNullable(TlvUInt8.bound({ max: 100 })), { default: null })\n        },\n\n        commands: {\n            /**\n             * This command may be invoked by Administrators to announce the presence of a particular OTA Provider.\n             *\n             * This command shall be scoped to the accessing fabric.\n             *\n             * If the accessing fabric index is 0, this command shall fail with an UNSUPPORTED_ACCESS status code.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.6.1\n             */\n            announceOtaProvider: OptionalCommand(\n                0x0,\n                TlvAnnounceOtaProviderRequest,\n                0x0,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        },\n\n        events: {\n            /**\n             * This event shall be generated when a change of the UpdateState attribute occurs due to an OTA Requestor\n             * moving through the states necessary to query for updates.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.1\n             */\n            stateTransition: Event(0x0, EventPriority.Info, TlvStateTransitionEvent),\n\n            /**\n             * This event shall be generated whenever a new version starts executing after being applied due to a\n             * software update. This event SHOULD be generated even if a software update was done using means outside\n             * of this cluster.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.2\n             */\n            versionApplied: Event(0x1, EventPriority.Critical, TlvVersionAppliedEvent),\n\n            /**\n             * This event shall be generated whenever an error occurs during OTA Requestor download operation.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7.7.3\n             */\n            downloadError: Event(0x2, EventPriority.Info, TlvDownloadErrorEvent)\n        }\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.7\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type OtaSoftwareUpdateRequestorCluster = OtaSoftwareUpdateRequestor.Cluster;\nexport const OtaSoftwareUpdateRequestorCluster = OtaSoftwareUpdateRequestor.Cluster;\nClusterRegistry.register(OtaSoftwareUpdateRequestor.Complete);\n"],
  "mappings": "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",
  "names": ["OtaSoftwareUpdateRequestor", "UpdateState", "AnnouncementReason", "ChangeReason"]
}
