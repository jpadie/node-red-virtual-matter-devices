{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/UnitLocalizationCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { WritableAttribute, AccessLevel } from \"../Cluster.js\";\nimport { TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace UnitLocalization {\n    /**\n     * These are optional features supported by UnitLocalizationCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.5.4\n     */\n    export enum Feature {\n        /**\n         * TemperatureUnit (TEMP)\n         *\n         * The Node can be configured to use different units of temperature when conveying values to a user.\n         */\n        TemperatureUnit = \"TemperatureUnit\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.5.5.1\n     */\n    export enum TempUnit {\n        /**\n         * Temperature conveyed in Fahrenheit\n         */\n        Fahrenheit = 0,\n\n        /**\n         * Temperature conveyed in Celsius\n         */\n        Celsius = 1,\n\n        /**\n         * Temperature conveyed in Kelvin\n         */\n        Kelvin = 2\n    }\n\n    /**\n     * A UnitLocalizationCluster supports these elements if it supports feature TemperatureUnit.\n     */\n    export const TemperatureUnitComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The TemperatureUnit attribute shall indicate the unit for the Node to use only when conveying\n             * temperature in communication to the user. If provided, this value shall take priority over any unit\n             * implied through the ActiveLocale Attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.5.6.1\n             */\n            temperatureUnit: WritableAttribute(\n                0x0,\n                TlvEnum<TempUnit>(),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * These elements and properties are present in all UnitLocalization clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x2d,\n        name: \"UnitLocalization\",\n        revision: 1,\n\n        features: {\n            /**\n             * TemperatureUnit\n             *\n             * The Node can be configured to use different units of temperature when conveying values to a user.\n             */\n            temperatureUnit: BitFlag(0)\n        },\n\n        /**\n         * This metadata controls which UnitLocalizationCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { temperatureUnit: true }, component: TemperatureUnitComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * Nodes should be expected to be deployed to any and all regions of the world. These global regions may have\n     * differing preferences for the units in which values are conveyed in communication to a\n     *\n     * user. As such, Nodes that visually or audibly convey measurable values to the user need a mechanism by which\n     * they can be configured to use a user\u2019s preferred unit.\n     *\n     * This cluster supports an interface to a Node. It provides attributes for determining and configuring the units\n     * that a Node shall utilize when conveying values in communication to a user.\n     *\n     * UnitLocalizationCluster supports optional features that you can enable with the UnitLocalizationCluster.with()\n     * factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.5\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const TEMP = { temperatureUnit: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            temperatureUnit: MutableCluster.AsConditional(\n                TemperatureUnitComponent.attributes.temperatureUnit,\n                { mandatoryIf: [TEMP] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all UnitLocalization features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type UnitLocalizationCluster = UnitLocalization.Cluster;\nexport const UnitLocalizationCluster = UnitLocalization.Cluster;\nClusterRegistry.register(UnitLocalization.Complete);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,4BAA+B;AAC/B,qBAA+C;AAC/C,uBAAwB;AACxB,0BAAwB;AAExB,6BAAgC;AAbhC;AAAA;AAAA;AAAA;AAAA;AAeO,IAAU;AAAA,CAAV,CAAUA,sBAAV;AAMI,MAAK;AAAL,IAAKC,aAAL;AAMH,IAAAA,SAAA,qBAAkB;AAAA,KANV,UAAAD,kBAAA,YAAAA,kBAAA;AAYL,MAAK;AAAL,IAAKE,cAAL;AAIH,IAAAA,oBAAA,gBAAa,KAAb;AAKA,IAAAA,oBAAA,aAAU,KAAV;AAKA,IAAAA,oBAAA,YAAS,KAAT;AAAA,KAdQ,WAAAF,kBAAA,aAAAA,kBAAA;AAoBL,EAAMA,kBAAA,2BAA2B,qCAAe,UAAU;AAAA,IAC7D,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQR,qBAAiB;AAAA,QACb;AAAA,YACA,0BAAkB;AAAA,QAClB,EAAE,YAAY,MAAM,UAAU,2BAAY,OAAO;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ,CAAC;AAKM,EAAMA,kBAAA,OAAO,qCAAe,UAAU;AAAA,IACzC,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMN,qBAAiB,6BAAQ,CAAC;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY,qCAAe,WAAW,EAAE,OAAO,EAAE,iBAAiB,KAAK,GAAG,WAAWA,kBAAA,yBAAyB,CAAC;AAAA,EACnH,CAAC;AAKM,EAAMA,kBAAA,sBAAkB,sCAAeA,kBAAA,IAAI;AAmB3C,EAAMA,kBAAA,UAAmBA,kBAAA;AAChC,QAAM,OAAO,EAAE,iBAAiB,KAAK;AAK9B,EAAMA,kBAAA,uBAAmB,sCAAe;AAAA,IAC3C,IAAIA,kBAAA,QAAQ;AAAA,IACZ,MAAMA,kBAAA,QAAQ;AAAA,IACd,UAAUA,kBAAA,QAAQ;AAAA,IAClB,UAAUA,kBAAA,QAAQ;AAAA,IAElB,YAAY;AAAA,MACR,iBAAiB,qCAAe;AAAA,QAC5BA,kBAAA,yBAAyB,WAAW;AAAA,QACpC,EAAE,aAAa,CAAC,IAAI,EAAE;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ,CAAC;AAUM,EAAMA,kBAAA,WAAqBA,kBAAA;AAAA,GAjIrB;AAqIV,MAAM,0BAA0B,iBAAiB;AACxD,uCAAgB,SAAS,iBAAiB,QAAQ;",
  "names": ["UnitLocalization", "Feature", "TempUnit"]
}
