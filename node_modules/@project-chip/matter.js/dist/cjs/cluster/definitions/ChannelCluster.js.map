{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ChannelCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, Command, TlvNoResponse, OptionalAttribute } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvUInt16, TlvEnum, TlvEpochS, TlvUInt8, TlvBitmap, TlvInt16 } from \"../../tlv/TlvNumber.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { ContentLauncher } from \"./ContentLauncherCluster.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Channel {\n    /**\n     * These are optional features supported by ChannelCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.4\n     */\n    export enum Feature {\n        /**\n         * ChannelList (CL)\n         *\n         * Provides list of available channels.\n         */\n        ChannelList = \"ChannelList\",\n\n        /**\n         * LineupInfo (LI)\n         *\n         * Provides lineup info, which is a reference to an external source of lineup information.\n         */\n        LineupInfo = \"LineupInfo\",\n\n        /**\n         * ElectronicGuide (EG)\n         *\n         * Provides electronic program guide information.\n         */\n        ElectronicGuide = \"ElectronicGuide\",\n\n        /**\n         * RecordProgram (RP)\n         *\n         * Provides ability to record program.\n         */\n        RecordProgram = \"RecordProgram\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.4\n     */\n    export enum ChannelType {\n        /**\n         * The channel is sourced from a satellite provider.\n         */\n        Satellite = 0,\n\n        /**\n         * The channel is sourced from a cable provider.\n         */\n        Cable = 1,\n\n        /**\n         * The channel is sourced from a terrestrial provider.\n         */\n        Terrestrial = 2,\n\n        /**\n         * The channel is sourced from an OTT provider.\n         */\n        Ott = 3\n    }\n\n    /**\n     * This indicates a channel in a channel lineup.\n     *\n     * While the major and minor numbers in the ChannelInfoStruct support use of ATSC channel format, a lineup may use\n     * other formats which can map into these numeric values.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5\n     */\n    export const TlvChannelInfo = TlvObject({\n        /**\n         * This field shall indicate the channel major number value (for example, using ATSC format). When the channel\n         * number is expressed as a string, such as \"13.1\" or \"256\", the major number would be 13 or 256, respectively.\n         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not\n         * represented by a major or minor number.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.1\n         */\n        majorNumber: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate the channel minor number value (for example, using ATSC format). When the channel\n         * number is expressed as a string, such as \"13.1\" or \"256\", the minor number would be 1 or 0, respectively.\n         * This field is required but shall be set to 0 for channels such as over-the-top channels that are not\n         * represented by a major or minor number.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.2\n         */\n        minorNumber: TlvField(1, TlvUInt16),\n\n        /**\n         * This field shall indicate the marketing name for the channel, such as \u201CThe CW\" or \"Comedy Central\". This\n         * field is optional, but SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.3\n         */\n        name: TlvOptionalField(2, TlvString),\n\n        /**\n         * This field shall indicate the call sign of the channel, such as \"PBS\". This field is optional, but SHOULD be\n         * provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.4\n         */\n        callSign: TlvOptionalField(3, TlvString),\n\n        /**\n         * This field shall indicate the local affiliate call sign, such as \"KCTS\". This field is optional, but\n         *\n         * SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.5\n         */\n        affiliateCallSign: TlvOptionalField(4, TlvString),\n\n        /**\n         * This shall indicate the unique identifier for a specific channel. This field is optional, but SHOULD be\n         * provided when MajorNumber and MinorNumber are not available.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.6\n         */\n        identifier: TlvOptionalField(5, TlvString),\n\n        /**\n         * This shall indicate the type or grouping of a specific channel. This field is optional, but SHOULD be\n         * provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5.7\n         */\n        type: TlvOptionalField(6, TlvEnum<ChannelType>())\n    });\n\n    /**\n     * This indicates a channel in a channel lineup.\n     *\n     * While the major and minor numbers in the ChannelInfoStruct support use of ATSC channel format, a lineup may use\n     * other formats which can map into these numeric values.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.5\n     */\n    export interface ChannelInfo extends TypeFromSchema<typeof TlvChannelInfo> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.2\n     */\n    export enum LineupInfoType {\n        /**\n         * Multi System Operator\n         */\n        Mso = 0\n    }\n\n    /**\n     * The Lineup Info allows references to external lineup sources like Gracenote. The combination of OperatorName,\n     * LineupName, and PostalCode MUST uniquely identify a lineup.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6\n     */\n    export const TlvLineupInfo = TlvObject({\n        /**\n         * This field shall indicate the name of the operator, for example \u201CComcast\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6.1\n         */\n        operatorName: TlvField(0, TlvString),\n\n        /**\n         * This field shall indicate the name of the provider lineup, for example \"Comcast King County\". This field is\n         * optional, but SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6.2\n         */\n        lineupName: TlvOptionalField(1, TlvString),\n\n        /**\n         * This field shall indicate the postal code (zip code) for the location of the device, such as \"98052\". This\n         * field is optional, but SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6.3\n         */\n        postalCode: TlvOptionalField(2, TlvString),\n\n        /**\n         * This field shall indicate the type of lineup. This field is optional, but SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6.4\n         */\n        lineupInfoType: TlvField(3, TlvEnum<LineupInfoType>())\n    });\n\n    /**\n     * The Lineup Info allows references to external lineup sources like Gracenote. The combination of OperatorName,\n     * LineupName, and PostalCode MUST uniquely identify a lineup.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.6\n     */\n    export interface LineupInfo extends TypeFromSchema<typeof TlvLineupInfo> {}\n\n    /**\n     * Input to the Channel changeChannel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.1\n     */\n    export const TlvChangeChannelRequest = TlvObject({\n        /**\n         * This field shall contain a user-input string to match in order to identify the target channel.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.1.1\n         */\n        match: TlvField(0, TlvString)\n    });\n\n    /**\n     * Input to the Channel changeChannel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.1\n     */\n    export interface ChangeChannelRequest extends TypeFromSchema<typeof TlvChangeChannelRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.3\n     */\n    export enum Status {\n        /**\n         * Command succeeded\n         */\n        Success = 0,\n\n        /**\n         * More than one equal match for the ChannelInfoStruct passed in.\n         */\n        MultipleMatches = 1,\n\n        /**\n         * No matches for the ChannelInfoStruct passed in.\n         */\n        NoMatches = 2\n    }\n\n    /**\n     * This command shall be generated in response to a ChangeChannel command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.2\n     */\n    export const TlvChangeChannelResponse = TlvObject({\n        /**\n         * This field shall indicate the status of the command which resulted in this response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.2.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This field shall indicate Optional app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.2.2\n         */\n        data: TlvOptionalField(1, TlvString)\n    });\n\n    /**\n     * This command shall be generated in response to a ChangeChannel command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.2\n     */\n    export interface ChangeChannelResponse extends TypeFromSchema<typeof TlvChangeChannelResponse> {}\n\n    /**\n     * This object defines the pagination structure.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.11\n     */\n    export const TlvPageToken = TlvObject({\n        /**\n         * This field shall indicate the maximum number of entries that should be retrieved from the program guide in a\n         * single response. It allows clients to specify the size of the paginated result set based on their needs.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.11.1\n         */\n        limit: TlvOptionalField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate the cursor that pinpoints the start of the upcoming data page. In a Cursor- based\n         * pagination system, the field acts as a reference point, ensuring the set of results corresponds directly to\n         * the data following the specified cursor. In a Offset-based pagination system, the field, along with limit,\n         * indicate the offset from which entries in the program guide will be retrieved.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.11.2\n         */\n        after: TlvOptionalField(1, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall indicate the cursor that pinpoints the end of the upcoming data page. In a Cursor- based\n         * pagination system, the field acts as a reference point, ensuring the set of results corresponds directly to\n         * the data preceding the specified cursor. In a Offset-based pagination system, the field, along with limit,\n         * indicate the offset from which entries in the program guide will be retrieved.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.11.3\n         */\n        before: TlvOptionalField(2, TlvString.bound({ maxLength: 8192 }))\n    });\n\n    /**\n     * This object defines the pagination structure.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.11\n     */\n    export interface PageToken extends TypeFromSchema<typeof TlvPageToken> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.1\n     */\n    export const RecordingFlag = {\n        /**\n         * The program is scheduled for recording.\n         */\n        scheduled: BitFlag(0),\n\n        /**\n         * The program series is scheduled for recording.\n         */\n        recordSeries: BitFlag(1),\n\n        /**\n         * The program is recorded and available to be played.\n         */\n        recorded: BitFlag(2)\n    };\n\n    /**\n     * Input to the Channel getProgramGuide command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5\n     */\n    export const TlvGetProgramGuideRequest = TlvObject({\n        /**\n         * This field shall indicate the beginning of the time window for which program guide entries are to be\n         * retrieved, as a UTC time. Entries with a start time on or after this value will be included in the results.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.1\n         */\n        startTime: TlvField(0, TlvEpochS),\n\n        /**\n         * This field shall indicate the end of the time window for which program guide entries are to be retrieved, as\n         * a UTC time. Entries with an end time on or before this value will be included in the results. This field can\n         * represent a past or future value but shall be greater than the StartTime.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.2\n         */\n        endTime: TlvField(1, TlvEpochS),\n\n        /**\n         * This field shall indicate the set of channels for which program guide entries should be fetched. By\n         * providing a list of channels in this field, the response will only include entries corresponding to the\n         * specified channels.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.3\n         */\n        channelList: TlvOptionalField(2, TlvArray(TlvChannelInfo, { maxLength: 255 })),\n\n        /**\n         * This field shall indicate the pagination token used for managing pagination progression.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.4\n         */\n        pageToken: TlvOptionalField(3, TlvNullable(TlvPageToken)),\n\n        /**\n         * This field shall indicate the flags of the programs for which entries should be fetched.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.5\n         */\n        recordingFlag: TlvOptionalField(5, TlvNullable(TlvBitmap(TlvUInt8, RecordingFlag))),\n\n        /**\n         * This field shall indicate the list of additional external content identifiers.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.6\n         */\n        externalIdList: TlvOptionalField(6, TlvArray(ContentLauncher.TlvAdditionalInfo, { maxLength: 255 })),\n\n        /**\n         * This field shall indicate Optional app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5.7\n         */\n        data: TlvOptionalField(7, TlvByteString.bound({ maxLength: 8092 }))\n    });\n\n    /**\n     * Input to the Channel getProgramGuide command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5\n     */\n    export interface GetProgramGuideRequest extends TypeFromSchema<typeof TlvGetProgramGuideRequest> {}\n\n    /**\n     * This object defines the paging structure that includes the previous and next pagination tokens.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.12\n     */\n    export const TlvChannelPaging = TlvObject({\n        /**\n         * This field shall indicate the token to retrieve the preceding page. Absence of this field denotes the\n         * response as the initial page.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.12.1\n         */\n        previousToken: TlvOptionalField(0, TlvNullable(TlvPageToken)),\n\n        /**\n         * This field shall indicate the token to retrieve the next page. Absence of this field denotes the response as\n         * the last page.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.12.2\n         */\n        nextToken: TlvOptionalField(1, TlvNullable(TlvPageToken))\n    });\n\n    /**\n     * This object defines the paging structure that includes the previous and next pagination tokens.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.12\n     */\n    export interface ChannelPaging extends TypeFromSchema<typeof TlvChannelPaging> {}\n\n    /**\n     * This object provides the episode information related to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.9\n     */\n    export const TlvSeriesInfo = TlvObject({\n        /**\n         * This field shall represent the season of the series associated to the program.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.9.1\n         */\n        season: TlvField(0, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall represent the episode of the program.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.9.2\n         */\n        episode: TlvField(1, TlvString.bound({ maxLength: 256 }))\n    });\n\n    /**\n     * This object provides the episode information related to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.9\n     */\n    export interface SeriesInfo extends TypeFromSchema<typeof TlvSeriesInfo> {}\n\n    /**\n     * This object defines the category associated to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.8\n     */\n    export const TlvProgramCategory = TlvObject({\n        /**\n         * This field shall represent the category or genre of the program. Ex. News.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.8.1\n         */\n        category: TlvField(0, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall represent the sub-category or sub-genre of the program. Ex. Local.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.8.2\n         */\n        subCategory: TlvOptionalField(1, TlvString.bound({ maxLength: 256 }))\n    });\n\n    /**\n     * This object defines the category associated to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.8\n     */\n    export interface ProgramCategory extends TypeFromSchema<typeof TlvProgramCategory> {}\n\n    /**\n     * This object provides the cast information related to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.10\n     */\n    export const TlvProgramCast = TlvObject({\n        /**\n         * This field shall represent the name of the cast member.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.10.1\n         */\n        name: TlvField(0, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall represent the role of the cast member. Ex. Actor, Director.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.10.2\n         */\n        role: TlvField(1, TlvString.bound({ maxLength: 256 }))\n    });\n\n    /**\n     * This object provides the cast information related to a program.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.10\n     */\n    export interface ProgramCast extends TypeFromSchema<typeof TlvProgramCast> {}\n\n    /**\n     * This indicates a program within an electronic program guide (EPG).\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7\n     */\n    export const TlvProgram = TlvObject({\n        /**\n         * This field shall indicate a unique identifier for a program within an electronic program guide list. The\n         * identifier shall be unique across multiple channels.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.1\n         */\n        identifier: TlvField(0, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall indicate the channel associated to the program.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.2\n         */\n        channel: TlvField(1, TlvChannelInfo),\n\n        /**\n         * This field shall indicate an epoch time in seconds indicating the start time of a program, as a UTC time.\n         * This field can represent a past or future value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.3\n         */\n        startTime: TlvField(2, TlvEpochS),\n\n        /**\n         * This field shall indicate an epoch time in seconds indicating the end time of a program, as a UTC time. This\n         * field can represent a past or future value but shall be greater than the StartTime.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.4\n         */\n        endTime: TlvField(3, TlvEpochS),\n\n        /**\n         * This field shall indicate the title or name for the specific program. For example, \u201CMCIS: Los Angeles\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.5\n         */\n        title: TlvField(4, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall indicate the subtitle for the specific program. For example, \u201CMaybe Today\" which is an\n         * episode name for \u201CMCIS: Los Angeles\u201D. This field is optional but shall be provided if applicable and known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.6\n         */\n        subtitle: TlvOptionalField(5, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall indicate the brief description for the specific program. For example, a description of an\n         * episode. This field is optional but shall be provided if known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.7\n         */\n        description: TlvOptionalField(6, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall indicate the audio language for the specific program. The value is a string containing one\n         * of the standard Tags for Identifying Languages RFC 5646. This field is optional but shall be provided if\n         * known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.8\n         */\n        audioLanguages: TlvOptionalField(7, TlvArray(TlvString, { maxLength: 10 })),\n\n        /**\n         * This field shall be used for indicating the level of parental guidance recommended for of a particular\n         * program. This can be any rating system used in the country or region where the program is\n         *\n         * broadcast. For example, in the United States \u201CTV-PG\u201D may contain material that parents can find not suitable\n         * for younger children but can be accepted in general for older children. This field is optional but shall be\n         * provided if known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.9\n         */\n        ratings: TlvOptionalField(8, TlvArray(TlvString, { maxLength: 255 })),\n\n        /**\n         * This field shall represent a url of a thumbnail that clients can use to render an image for the program.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.10\n         */\n        thumbnailUrl: TlvOptionalField(9, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall represent a url of a poster that clients can use to render an image for the program on the\n         * detail view.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.11\n         */\n        posterArtUrl: TlvOptionalField(10, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall represent the DVB-I url associated to the program.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.12\n         */\n        dvbiUrl: TlvOptionalField(11, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall be a string, in ISO 8601 format, representing the date on which the program was released.\n         * This field is optional but when provided, the year shall be provided as part of the string.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.13\n         */\n        releaseDate: TlvOptionalField(12, TlvString.bound({ maxLength: 30 })),\n\n        /**\n         * This field shall represent a string providing additional information on the parental guidance. This field is\n         * optional.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.14\n         */\n        parentalGuidanceText: TlvOptionalField(13, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall represent the recording status of the program. This field is required if the RecordProgram\n         * feature is set.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.15\n         */\n        recordingFlag: TlvOptionalField(14, TlvBitmap(TlvUInt8, RecordingFlag)),\n\n        /**\n         * This field shall represent the information of a series such as season and episode number. This field is\n         * optional but SHOULD be provided if the program represents a series and this information is available.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.16\n         */\n        seriesInfo: TlvOptionalField(15, TlvNullable(TlvSeriesInfo)),\n\n        /**\n         * This field shall represent the category of a particular program. This field is optional but shall be\n         * provided if known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.17\n         */\n        categoryList: TlvOptionalField(16, TlvArray(TlvProgramCategory, { maxLength: 255 })),\n\n        /**\n         * This field shall represent a list of the cast or the crew on the program. A single cast member may have more\n         * than one role. This field is optional but shall be provided if known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.18\n         */\n        castList: TlvOptionalField(17, TlvArray(TlvProgramCast, { maxLength: 255 })),\n\n        /**\n         * This field shall indicate the list of additional external content identifiers.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7.19\n         */\n        externalIdList: TlvOptionalField(18, TlvArray(ContentLauncher.TlvAdditionalInfo, { maxLength: 255 }))\n    });\n\n    /**\n     * This indicates a program within an electronic program guide (EPG).\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.5.7\n     */\n    export interface Program extends TypeFromSchema<typeof TlvProgram> {}\n\n    /**\n     * This command is a response to the GetProgramGuide command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.6\n     */\n    export const TlvProgramGuideResponse = TlvObject({\n        /**\n         * This field shall indicate the necessary pagination attributes that define information for both the\n         * succeeding and preceding data pages.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.6.1\n         */\n        paging: TlvField(0, TlvChannelPaging),\n\n        /**\n         * This field shall indicate the list of programs.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.6.2\n         */\n        programList: TlvField(1, TlvArray(TlvProgram))\n    });\n\n    /**\n     * This command is a response to the GetProgramGuide command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.6\n     */\n    export interface ProgramGuideResponse extends TypeFromSchema<typeof TlvProgramGuideResponse> {}\n\n    /**\n     * Input to the Channel recordProgram command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7\n     */\n    export const TlvRecordProgramRequest = TlvObject({\n        /**\n         * This field shall indicate the program identifier for the program that should be recorded. This value is\n         * provided by the identifier field in ProgramStruct.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7.1\n         */\n        programIdentifier: TlvField(0, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall indicate whether the whole series associated to the program should be recorded. For\n         * example, invoking record program on an episode with that flag set to true, the target should schedule record\n         * the whole series.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7.2\n         */\n        shouldRecordSeries: TlvField(1, TlvBoolean),\n\n        /**\n         * This field, if present, shall indicate the list of additional external content identifiers.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7.3\n         */\n        externalIdList: TlvOptionalField(2, TlvArray(ContentLauncher.TlvAdditionalInfo, { maxLength: 255 })),\n\n        /**\n         * This field, if present, shall indicate app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7.4\n         */\n        data: TlvOptionalField(3, TlvByteString.bound({ maxLength: 8092 }))\n    });\n\n    /**\n     * Input to the Channel recordProgram command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7\n     */\n    export interface RecordProgramRequest extends TypeFromSchema<typeof TlvRecordProgramRequest> {}\n\n    /**\n     * Input to the Channel cancelRecordProgram command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8\n     */\n    export const TlvCancelRecordProgramRequest = TlvObject({\n        /**\n         * This field shall indicate the program identifier for the program that should be cancelled from recording.\n         * This value is provided by the identifier field in ProgramStruct.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8.1\n         */\n        programIdentifier: TlvField(0, TlvString.bound({ maxLength: 255 })),\n\n        /**\n         * This field shall indicate whether the whole series associated to the program should be cancelled from\n         * recording. For example, invoking record program on an episode with that flag set to true, the target should\n         * schedule record the whole series.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8.2\n         */\n        shouldRecordSeries: TlvField(1, TlvBoolean),\n\n        /**\n         * This field, if present, shall indicate the list of additional external content identifiers.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8.3\n         */\n        externalIdList: TlvOptionalField(2, TlvArray(ContentLauncher.TlvAdditionalInfo, { maxLength: 255 })),\n\n        /**\n         * This field, if present, shall indicate app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8.4\n         */\n        data: TlvOptionalField(3, TlvByteString.bound({ maxLength: 8092 }))\n    });\n\n    /**\n     * Input to the Channel cancelRecordProgram command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8\n     */\n    export interface CancelRecordProgramRequest extends TypeFromSchema<typeof TlvCancelRecordProgramRequest> {}\n\n    /**\n     * Input to the Channel changeChannelByNumber command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3\n     */\n    export const TlvChangeChannelByNumberRequest = TlvObject({\n        /**\n         * This field shall indicate the channel major number value (ATSC format) to which the channel should change.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3.1\n         */\n        majorNumber: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate the channel minor number value (ATSC format) to which the channel should change.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3.2\n         */\n        minorNumber: TlvField(1, TlvUInt16)\n    });\n\n    /**\n     * Input to the Channel changeChannelByNumber command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3\n     */\n    export interface ChangeChannelByNumberRequest extends TypeFromSchema<typeof TlvChangeChannelByNumberRequest> {}\n\n    /**\n     * Input to the Channel skipChannel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.4\n     */\n    export const TlvSkipChannelRequest = TlvObject({\n        /**\n         * This field shall indicate the number of steps to increase (Count is positive) or decrease (Count is\n         * negative) the current channel.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.4.1\n         */\n        count: TlvField(0, TlvInt16)\n    });\n\n    /**\n     * Input to the Channel skipChannel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.4\n     */\n    export interface SkipChannelRequest extends TypeFromSchema<typeof TlvSkipChannelRequest> {}\n\n    /**\n     * A ChannelCluster supports these elements if it supports feature ChannelList.\n     */\n    export const ChannelListComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall provide the list of supported channels.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.6.1\n             */\n            channelList: Attribute(0x0, TlvArray(TlvChannelInfo), { default: [] })\n        }\n    });\n\n    /**\n     * A ChannelCluster supports these elements if it supports feature LineupInfo.\n     */\n    export const LineupInfoComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall identify the channel lineup using external data sources.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.6.2\n             */\n            lineup: Attribute(0x1, TlvNullable(TlvLineupInfo), { default: null })\n        }\n    });\n\n    /**\n     * A ChannelCluster supports these elements if it supports features ChannelList or LineupInfo.\n     */\n    export const ChannelListOrLineupInfoComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Change the channel to the channel case-insensitive exact matching the value passed as an argument.\n             *\n             * The match priority order shall be: Identifier, AffiliateCallSign, CallSign, Name, Number. In the match\n             * string, the Channel number should be presented in the \"Major.Minor\" format, such as \"13.1\".\n             *\n             * Upon receipt, this shall generate a ChangeChannelResponse command.\n             *\n             * Upon success, the CurrentChannel attribute, if supported, shall be updated to reflect the change.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.1\n             */\n            changeChannel: Command(0x0, TlvChangeChannelRequest, 0x1, TlvChangeChannelResponse)\n        }\n    });\n\n    /**\n     * A ChannelCluster supports these elements if it supports feature ElectronicGuide.\n     */\n    export const ElectronicGuideComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * This command retrieves the program guide. It accepts several filter parameters to return specific\n             * schedule and program information from a content app. The command shall receive in response a\n             * ProgramGuideResponse. Standard error codes shall be used when arguments provided are not\n             *\n             * valid. For example, if StartTime is greater than EndTime, the status code INVALID_ACTION shall be\n             * returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5\n             */\n            getProgramGuide: Command(0x4, TlvGetProgramGuideRequest, 0x5, TlvProgramGuideResponse)\n        }\n    });\n\n    /**\n     * A ChannelCluster supports these elements if it supports features RecordProgram and ElectronicGuide.\n     */\n    export const RecordProgramAndElectronicGuideComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Record a specific program or series when it goes live. This functionality enables DVR recording features.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7\n             */\n            recordProgram: Command(0x6, TlvRecordProgramRequest, 0x6, TlvNoResponse),\n\n            /**\n             * Cancel recording for a specific program or series.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8\n             */\n            cancelRecordProgram: Command(0x7, TlvCancelRecordProgramRequest, 0x7, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all Channel clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x504,\n        name: \"Channel\",\n        revision: 2,\n\n        features: {\n            /**\n             * ChannelList\n             *\n             * Provides list of available channels.\n             */\n            channelList: BitFlag(0),\n\n            /**\n             * LineupInfo\n             *\n             * Provides lineup info, which is a reference to an external source of lineup information.\n             */\n            lineupInfo: BitFlag(1),\n\n            /**\n             * ElectronicGuide\n             *\n             * Provides electronic program guide information.\n             */\n            electronicGuide: BitFlag(2),\n\n            /**\n             * RecordProgram\n             *\n             * Provides ability to record program.\n             */\n            recordProgram: BitFlag(3)\n        },\n\n        attributes: {\n            /**\n             * This attribute shall contain the current channel. When supported but a channel is not currently tuned to\n             * (if a content application is in foreground), the value of the field shall be null.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.6.3\n             */\n            currentChannel: OptionalAttribute(0x2, TlvNullable(TlvChannelInfo), { default: null })\n        },\n\n        commands: {\n            /**\n             * Change the channel to the channel with the given Number in the ChannelList attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3\n             */\n            changeChannelByNumber: Command(0x2, TlvChangeChannelByNumberRequest, 0x2, TlvNoResponse),\n\n            /**\n             * This command provides channel up and channel down functionality, but allows channel index jumps of size\n             * Count.\n             *\n             * When the value of the increase or decrease is larger than the number of channels remaining in the given\n             * direction, then the behavior shall be to return to the beginning (or end) of the channel list and\n             * continue. For example, if the current channel is at index 0 and count value of -1 is given, then the\n             * current channel should change to the last channel.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.4\n             */\n            skipChannel: Command(0x3, TlvSkipChannelRequest, 0x3, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which ChannelCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { channelList: true }, component: ChannelListComponent },\n            { flags: { lineupInfo: true }, component: LineupInfoComponent },\n            { flags: { channelList: true }, component: ChannelListOrLineupInfoComponent },\n            { flags: { lineupInfo: true }, component: ChannelListOrLineupInfoComponent },\n            { flags: { electronicGuide: true }, component: ElectronicGuideComponent },\n            {\n                flags: { recordProgram: true, electronicGuide: true },\n                component: RecordProgramAndElectronicGuideComponent\n            }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster provides an interface for controlling the current Channel on a device or endpoint.\n     *\n     * This cluster server would be supported on Video Player devices or endpoints that allow Channel control such as a\n     * Content App. This cluster provides a list of available channels and provides commands for absolute and relative\n     * channel changes.\n     *\n     * The cluster server for Channel is implemented by an endpoint that controls the current Channel.\n     *\n     * ChannelCluster supports optional features that you can enable with the ChannelCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const CL = { channelList: true };\n    const LI = { lineupInfo: true };\n    const EG = { electronicGuide: true };\n    const RP_EG = { recordProgram: true, electronicGuide: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            channelList: MutableCluster.AsConditional(\n                ChannelListComponent.attributes.channelList,\n                { mandatoryIf: [CL] }\n            ),\n            lineup: MutableCluster.AsConditional(LineupInfoComponent.attributes.lineup, { mandatoryIf: [LI] })\n        },\n\n        commands: {\n            ...Cluster.commands,\n            changeChannel: MutableCluster.AsConditional(\n                ChannelListOrLineupInfoComponent.commands.changeChannel,\n                { mandatoryIf: [CL, LI] }\n            ),\n            getProgramGuide: MutableCluster.AsConditional(\n                ElectronicGuideComponent.commands.getProgramGuide,\n                { mandatoryIf: [EG] }\n            ),\n            recordProgram: MutableCluster.AsConditional(\n                RecordProgramAndElectronicGuideComponent.commands.recordProgram,\n                { mandatoryIf: [RP_EG] }\n            ),\n            cancelRecordProgram: MutableCluster.AsConditional(\n                RecordProgramAndElectronicGuideComponent.commands.cancelRecordProgram,\n                { mandatoryIf: [RP_EG] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all Channel features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ChannelCluster = Channel.Cluster;\nexport const ChannelCluster = Channel.Cluster;\nClusterRegistry.register(Channel.Complete);\n"],
  "mappings": "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",
  "names": ["Channel", "Feature", "ChannelType", "LineupInfoType", "Status"]
}
