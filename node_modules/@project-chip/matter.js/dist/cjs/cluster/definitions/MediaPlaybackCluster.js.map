{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/MediaPlaybackCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, Command, TlvNoResponse, OptionalCommand, OptionalEvent, EventPriority } from \"../Cluster.js\";\nimport { TlvEpochUs, TlvUInt64, TlvFloat, TlvEnum, TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace MediaPlayback {\n    /**\n     * These are optional features supported by MediaPlaybackCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4\n     */\n    export enum Feature {\n        /**\n         * AdvancedSeek (AS)\n         *\n         * This feature provides access to the time offset location within current playback media and allows for\n         * jumping to a specific location using time offsets. This enables clients to implement more advanced media\n         * seeking behavior in their user interface, for instance a \"seek bar\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.1\n         */\n        AdvancedSeek = \"AdvancedSeek\",\n\n        /**\n         * VariableSpeed (VS)\n         *\n         * This feature is for a device which supports variable speed playback on media that supports it.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.2\n         */\n        VariableSpeed = \"VariableSpeed\",\n\n        /**\n         * TextTracks (TT)\n         *\n         * This feature is for a device or app that supports Text Tracks.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.3\n         */\n        TextTracks = \"TextTracks\",\n\n        /**\n         * AudioTracks (AT)\n         *\n         * This feature is for a device or app that supports Audio Tracks.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.4\n         */\n        AudioTracks = \"AudioTracks\",\n\n        /**\n         * AudioAdvance (AA)\n         *\n         * This feature is for a device or app that supports playing audio during fast and slow advance and rewind\n         * (e.g., while playback speed is not 1). A device that supports this feature may only support playing audio\n         * during certain speeds.\n         *\n         * A cluster implementing AA shall implement AS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.5\n         */\n        AudioAdvance = \"AudioAdvance\"\n    }\n\n    /**\n     * This structure defines a playback position within a media stream being played.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.4\n     */\n    export const TlvPlaybackPosition = TlvObject({\n        /**\n         * This field shall indicate the time when the position was last updated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.4.1\n         */\n        updatedAt: TlvField(0, TlvEpochUs),\n\n        /**\n         * This field shall indicate the associated discrete position within the media stream, in milliseconds from the\n         * beginning of the stream, being associated with the time indicated by the UpdatedAt field. The Position shall\n         * not be greater than the duration of the media if duration is specified. The Position shall not be greater\n         * than the time difference between current time and start time of the media when start time is specified.\n         *\n         * A value of null shall indicate that playback position is not applicable for the current state of the media\n         * playback (For example : Live media with no known duration and where seek is not supported).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.4.2\n         */\n        position: TlvField(1, TlvNullable(TlvUInt64))\n    });\n\n    /**\n     * This structure defines a playback position within a media stream being played.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.4\n     */\n    export interface PlaybackPosition extends TypeFromSchema<typeof TlvPlaybackPosition> {}\n\n    /**\n     * Input to the MediaPlayback seek command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.11\n     */\n    export const TlvSeekRequest = TlvObject({\n        /**\n         * This field shall indicate the position (in milliseconds) in the media to seek to. In case the position falls\n         * in the middle of a frame, the server shall set the position to the beginning of that frame and set the\n         * SampledPosition attribute on the cluster accordingly. If the position falls before the earliest valid\n         * position or beyond the furthest valid position to which a client may seek back or forward to respectively,\n         * the status of SEEK_OUT_OF_RANGE shall be returned and no change shall be made to the position of the\n         * playback.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.11.1\n         */\n        position: TlvField(0, TlvUInt64)\n    });\n\n    /**\n     * Input to the MediaPlayback seek command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.11\n     */\n    export interface SeekRequest extends TypeFromSchema<typeof TlvSeekRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.2\n     */\n    export enum Status {\n        /**\n         * Succeeded\n         */\n        Success = 0,\n\n        /**\n         * Requested playback command is invalid in the current playback state.\n         */\n        InvalidStateForCommand = 1,\n\n        /**\n         * Requested playback command is not allowed in the current playback state. For example, attempting to\n         * fast-forward during a commercial might return NotAllowed.\n         */\n        NotAllowed = 2,\n\n        /**\n         * This endpoint is not active for playback.\n         */\n        NotActive = 3,\n\n        /**\n         * The FastForward or Rewind Command was issued but the media is already playing back at the fastest speed\n         * supported by the server in the respective direction.\n         */\n        SpeedOutOfRange = 4,\n\n        /**\n         * The Seek Command was issued with a value of position outside of the allowed seek range of the media.\n         */\n        SeekOutOfRange = 5\n    }\n\n    /**\n     * This command shall be generated in response to various Playback Commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.12\n     */\n    export const TlvPlaybackResponse = TlvObject({\n        /**\n         * This field shall indicate the status of the command which resulted in this response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.12.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This field shall indicate Optional app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.12.2\n         */\n        data: TlvOptionalField(1, TlvString)\n    });\n\n    /**\n     * This command shall be generated in response to various Playback Commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.12\n     */\n    export interface PlaybackResponse extends TypeFromSchema<typeof TlvPlaybackResponse> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.3\n     */\n    export enum Characteristic {\n        /**\n         * Textual information meant for display when no other text representation is selected. It is used to clarify\n         * dialogue, alternate languages, texted graphics or location/person IDs that are not otherwise covered in the\n         * dubbed/localized audio.\n         */\n        ForcedSubtitles = 0,\n\n        /**\n         * Textual or audio media component containing a textual description (intended for audio synthesis) or an audio\n         * description describing a visual component\n         */\n        DescribesVideo = 1,\n\n        /**\n         * Simplified or reduced captions as specified in [United States Code Title 47 CFR 79.103(c)(9)].\n         */\n        EasyToRead = 2,\n\n        /**\n         * A media characteristic that indicates that a track selection option includes frame-based content.\n         */\n        FrameBased = 3,\n\n        /**\n         * Main media component(s) which is/are intended for presentation if no other information is provided\n         */\n        MainProgram = 4,\n\n        /**\n         * A media characteristic that indicates that a track or media selection option contains original content.\n         */\n        OriginalContent = 5,\n\n        /**\n         * A media characteristic that indicates that a track or media selection option contains a language translation\n         * and verbal interpretation of spoken dialog.\n         */\n        VoiceOverTranslation = 6,\n\n        /**\n         * Textual media component containing transcriptions of spoken dialog and auditory cues such as sound effects\n         * and music for the hearing impaired.\n         */\n        Caption = 7,\n\n        /**\n         * Textual transcriptions of spoken dialog.\n         */\n        Subtitle = 8,\n\n        /**\n         * Textual media component containing transcriptions of spoken dialog and auditory cues such as sound effects\n         * and music for the hearing impaired.\n         */\n        Alternate = 9,\n\n        /**\n         * Media content component that is supplementary to a media content component of a different media component\n         * type.\n         */\n        Supplementary = 10,\n\n        /**\n         * Experience that contains a commentary (e.g. director\u2019s commentary) (typically audio)\n         */\n        Commentary = 11,\n\n        /**\n         * Experience that contains an element that is presented in a different language from the original (e.g. dubbed\n         * audio, translated captions)\n         */\n        DubbedTranslation = 12,\n\n        /**\n         * Textual or audio media component containing a textual description (intended for audio synthesis) or an audio\n         * description describing a visual component\n         */\n        Description = 13,\n\n        /**\n         * Media component containing information intended to be processed by application specific elements.\n         */\n        Metadata = 14,\n\n        /**\n         * Experience containing an element for improved intelligibility of the dialogue.\n         */\n        EnhancedAudioIntelligibility = 15,\n\n        /**\n         * Experience that provides information, about a current emergency, that is intended to enable the protection\n         * of life, health, safety, and property, and may also include critical details regarding the emergency and how\n         * to respond to the emergency.\n         */\n        Emergency = 16,\n\n        /**\n         * Textual representation of a songs\u2019 lyrics, usually in the same language as the associated song as specified\n         * in [SMPTE ST 2067-2].\n         */\n        Karaoke = 17\n    }\n\n    /**\n     * This structure includes the attributes associated with a Text/Audio Track\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.6\n     */\n    export const TlvTrackAttributes = TlvObject({\n        /**\n         * The value is a String containing one of the standard Tags for Identifying Languages RFC 5646, which\n         * identifies the primary language used in the Track.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.6.1\n         */\n        languageCode: TlvField(0, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This is a list of enumerated CharacteristicEnum values that indicate a purpose, trait or feature associated\n         * with the Track. A value of null shall indicate that there are no Characteristics corresponding to the Track.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.6.2\n         */\n        characteristics: TlvOptionalField(1, TlvNullable(TlvArray(TlvEnum<Characteristic>()))),\n\n        /**\n         * The value is a String containing a user displayable name for the Track. A value of null shall indicate that\n         * there is no DisplayName corresponding to the Track.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.6.3\n         */\n        displayName: TlvOptionalField(2, TlvNullable(TlvString.bound({ maxLength: 256 })))\n    });\n\n    /**\n     * This structure includes the attributes associated with a Text/Audio Track\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.6\n     */\n    export interface TrackAttributes extends TypeFromSchema<typeof TlvTrackAttributes> {}\n\n    /**\n     * This structure defines a uniquely identifiable Text Track or Audio Track.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.5\n     */\n    export const TlvTrack = TlvObject({\n        /**\n         * This field shall indicate the Identifier for the Track which is unique within the Track catalog. The Track\n         * catalog contains all the Text/Audio tracks corresponding to the main media content.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.5.1\n         */\n        id: TlvField(0, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This field shall indicate the Attributes associated to the Track, like languageCode.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.5.2\n         */\n        trackAttributes: TlvField(1, TlvTrackAttributes)\n    });\n\n    /**\n     * This structure defines a uniquely identifiable Text Track or Audio Track.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.5\n     */\n    export interface Track extends TypeFromSchema<typeof TlvTrack> {}\n\n    /**\n     * Input to the MediaPlayback activateAudioTrack command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13\n     */\n    export const TlvActivateAudioTrackRequest = TlvObject({\n        /**\n         * This field shall indicate the Audio Track to activate.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13.1\n         */\n        trackId: TlvField(0, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This value is the index field of the OutputInfoStruct from the OutputList attribute (from the AudioOutput\n         * cluster) and indicates which audio output the Audio Track should be played on. This field is absent for Text\n         * Tracks and only present for Audio Tracks. A value of null shall indicate that the server can choose the\n         * audio output(s) to play the Audio Track on.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13.2\n         */\n        audioOutputIndex: TlvOptionalField(1, TlvNullable(TlvUInt8))\n    });\n\n    /**\n     * Input to the MediaPlayback activateAudioTrack command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13\n     */\n    export interface ActivateAudioTrackRequest extends TypeFromSchema<typeof TlvActivateAudioTrackRequest> {}\n\n    /**\n     * Input to the MediaPlayback activateTextTrack command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.14\n     */\n    export const TlvActivateTextTrackRequest = TlvObject({\n        /**\n         * This field shall indicate the Text Track to activate.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.14.1\n         */\n        trackId: TlvField(0, TlvString.bound({ maxLength: 32 }))\n    });\n\n    /**\n     * Input to the MediaPlayback activateTextTrack command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.14\n     */\n    export interface ActivateTextTrackRequest extends TypeFromSchema<typeof TlvActivateTextTrackRequest> {}\n\n    /**\n     * Input to the MediaPlayback rewind command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.7\n     */\n    export const TlvRewindRequest = TlvObject({\n        /**\n         * This field shall indicate whether audio should be unmuted by the player during rewind.\n         *\n         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted,\n         * turned down to a low level and/or unplugged.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.7.1\n         */\n        audioAdvanceUnmuted: TlvOptionalField(0, TlvBoolean)\n    });\n\n    /**\n     * Input to the MediaPlayback rewind command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.7\n     */\n    export interface RewindRequest extends TypeFromSchema<typeof TlvRewindRequest> {}\n\n    /**\n     * Input to the MediaPlayback fastForward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.8\n     */\n    export const TlvFastForwardRequest = TlvObject({\n        /**\n         * This field shall indicate whether audio should be unmuted by the player during fast forward.\n         *\n         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted,\n         * turned down to a low level and/or unplugged.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.8.1\n         */\n        audioAdvanceUnmuted: TlvOptionalField(0, TlvBoolean)\n    });\n\n    /**\n     * Input to the MediaPlayback fastForward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.8\n     */\n    export interface FastForwardRequest extends TypeFromSchema<typeof TlvFastForwardRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.5.1\n     */\n    export enum PlaybackState {\n        /**\n         * Media is currently playing (includes FF and REW)\n         */\n        Playing = 0,\n\n        /**\n         * Media is currently paused\n         */\n        Paused = 1,\n\n        /**\n         * Media is not currently playing\n         */\n        NotPlaying = 2,\n\n        /**\n         * Media is not currently buffering and playback will start when buffer has been filled\n         */\n        Buffering = 3\n    }\n\n    /**\n     * Input to the MediaPlayback skipForward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.9\n     */\n    export const TlvSkipForwardRequest = TlvObject({\n        /**\n         * This field shall indicate the duration of the time span to skip forward in the media, in milliseconds. In\n         * case the resulting position falls in the middle of a frame, the server shall set the position to the\n         * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant\n         * position falls beyond the furthest valid position in the media the client may seek forward to, the position\n         * should be set to that furthest valid position. If the SampledPosition attribute is supported it shall be\n         * updated on the cluster accordingly.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.9.1\n         */\n        deltaPositionMilliseconds: TlvField(0, TlvUInt64)\n    });\n\n    /**\n     * Input to the MediaPlayback skipForward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.9\n     */\n    export interface SkipForwardRequest extends TypeFromSchema<typeof TlvSkipForwardRequest> {}\n\n    /**\n     * Input to the MediaPlayback skipBackward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.10\n     */\n    export const TlvSkipBackwardRequest = TlvObject({\n        /**\n         * This field shall indicate the duration of the time span to skip backward in the media, in milliseconds. In\n         * case the resulting position falls in the middle of a frame, the server shall set the position to the\n         * beginning of that frame and set the SampledPosition attribute on the cluster accordingly. If the resultant\n         * position falls before the earliest valid position to which a client may seek back to, the position should be\n         * set to that earliest valid position. If the SampledPosition attribute is supported it shall be updated on\n         * the cluster accordingly.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.10.1\n         */\n        deltaPositionMilliseconds: TlvField(0, TlvUInt64)\n    });\n\n    /**\n     * Input to the MediaPlayback skipBackward command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.10\n     */\n    export interface SkipBackwardRequest extends TypeFromSchema<typeof TlvSkipBackwardRequest> {}\n\n    /**\n     * Body of the MediaPlayback stateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1\n     */\n    export const TlvStateChangedEvent = TlvObject({\n        /**\n         * This field shall indicate the updated playback state as defined by the CurrentState attribute, and has the\n         * same constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.1\n         */\n        currentState: TlvField(0, TlvEnum<PlaybackState>()),\n\n        /**\n         * This field shall indicate the updated start time as defined by the StartTime attribute, and has the same\n         * constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.2\n         */\n        startTime: TlvOptionalField(1, TlvEpochUs),\n\n        /**\n         * This field shall indicate the updated duration as defined by the Duration attribute, and has the same\n         * constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.3\n         */\n        duration: TlvOptionalField(2, TlvUInt64),\n\n        /**\n         * This field shall indicate the updated position of playback as defined by the SampledPosition attribute, and\n         * has the same constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.4\n         */\n        sampledPosition: TlvOptionalField(3, TlvPlaybackPosition),\n\n        /**\n         * This field shall indicate the updated speed at which the current media is being played as defined by the\n         * PlaybackSpeed attribute, and has the same constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.5\n         */\n        playbackSpeed: TlvOptionalField(4, TlvFloat),\n\n        /**\n         * This field shall indicate the updated start of the seek range end as defined by the SeekRangeEnd attribute,\n         * and has the same constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.7\n         */\n        seekRangeEnd: TlvOptionalField(5, TlvUInt64),\n\n        /**\n         * This field shall indicate the updated start of the seek range start as defined by the SeekRangeStart\n         * attribute, and has the same constraint as that attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.6\n         */\n        seekRangeStart: TlvOptionalField(6, TlvUInt64),\n\n        /**\n         * This field shall indicate Optional app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.8\n         */\n        data: TlvOptionalField(7, TlvByteString.bound({ maxLength: 900 })),\n\n        /**\n         * This field shall indicate whether audio is unmuted by the player due to a FF or REW command. This field is\n         * only meaningful when the PlaybackSpeed is present and not equal to 0 (paused) or 1 (normal playback).\n         * Typically the value will be false (muted), however, some players will play audio during certain fast forward\n         * and rewind speeds, and in these cases, the value will be true (not muted).\n         *\n         * A value of true does not guarantee that audio can be heard by the user since the speaker may be muted,\n         * turned down to a low level and/or unplugged.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1.9\n         */\n        audioAdvanceUnmuted: TlvOptionalField(8, TlvBoolean)\n    });\n\n    /**\n     * Body of the MediaPlayback stateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1\n     */\n    export interface StateChangedEvent extends TypeFromSchema<typeof TlvStateChangedEvent> {}\n\n    /**\n     * A MediaPlaybackCluster supports these elements if it supports feature AdvancedSeek.\n     */\n    export const AdvancedSeekComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the start time of the media, in case the media has a fixed start time (for example, live\n             * stream or television broadcast), or null when start time does not apply to the current media (for\n             * example, video-on-demand). This time is a UTC time. The client needs to handle conversion to local time,\n             * as required, taking in account time zone and possible local DST offset.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.2\n             */\n            startTime: Attribute(0x1, TlvNullable(TlvEpochUs), { default: null }),\n\n            /**\n             * Indicates the duration, in milliseconds, of the current media being played back\n             *\n             * or null when duration is not applicable (for example, in live streaming content with no known duration).\n             * This attribute shall never be 0.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.3\n             */\n            duration: Attribute(0x2, TlvNullable(TlvUInt64), { default: null }),\n\n            /**\n             * Indicates the position of playback (Position field) at the time (UpdateAt field) specified in the\n             * attribute. The client may use the SampledPosition attribute to compute the current position within the\n             * media stream based on the PlaybackSpeed, PlaybackPositionStruct.UpdatedAt and\n             * PlaybackPositionStruct.Position fields. To enable this, the SampledPosition attribute shall be updated\n             * whenever a change in either the playback speed or the playback position is triggered outside the normal\n             * playback of the media. The events which may cause this to happen include:\n             *\n             *   \u2022 Starting or resumption of playback\n             *\n             *   \u2022 Seeking\n             *\n             *   \u2022 Skipping forward or backward\n             *\n             *   \u2022 Fast-forwarding or rewinding\n             *\n             *   \u2022 Updating of playback speed as a result of explicit request, or as a result of buffering events\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.4\n             */\n            sampledPosition: Attribute(0x3, TlvNullable(TlvPlaybackPosition), { default: null }),\n\n            /**\n             * Indicates the speed at which the current media is being played. The new PlaybackSpeed shall be reflected\n             * in this attribute whenever any of the following occurs:\n             *\n             *   \u2022 Starting of playback\n             *\n             *   \u2022 Resuming of playback\n             *\n             *   \u2022 Fast-forwarding\n             *\n             *   \u2022 Rewinding\n             *\n             * The PlaybackSpeed shall reflect the ratio of time elapsed in the media to the actual time taken for the\n             * playback assuming no changes to media playback (for example buffering events or requests to\n             * pause/rewind/forward).\n             *\n             *   \u2022 A value for PlaybackSpeed of 1 shall indicate normal playback where, for example, playback for 1\n             *     second causes the media to advance by 1 second within the duration of the media.\n             *\n             *   \u2022 A value for PlaybackSpeed which is greater than 0 shall indicate that as playback is happening the\n             *     media is currently advancing in time within the duration of the media.\n             *\n             *   \u2022 A value for PlaybackSpeed which is less than 0 shall indicate that as playback is happening the\n             *     media is currently going back in time within the duration of the media.\n             *\n             *   \u2022 A value for PlaybackSpeed of 0 shall indicate that the media is currently not playing back. When the\n             *     CurrentState attribute has the value of PAUSED, NOT_PLAYING or BUFFERING, the PlaybackSpeed shall be\n             *     set to 0 to reflect that the media is not playing.\n             *\n             * Following examples illustrate the PlaybackSpeed attribute values in various conditions.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.5\n             */\n            playbackSpeed: Attribute(0x4, TlvFloat, { default: 0 }),\n\n            /**\n             * Indicates the furthest forward valid position to which a client may seek forward, in milliseconds from\n             * the start of the media. When the media has an associated StartTime, a value of null shall indicate that\n             * a seek forward is valid only until the current time within the media, using a position computed from the\n             * difference between the current time offset and StartTime, in milliseconds from start of the media,\n             * truncating fractional milliseconds towards 0. A value of Nas when StartTime is not specified shall\n             * indicate that seeking forward is not allowed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.7\n             */\n            seekRangeEnd: Attribute(0x5, TlvNullable(TlvUInt64), { default: null }),\n\n            /**\n             * Indicates the earliest valid position to which a client may seek back, in milliseconds from start of the\n             * media. A value of Nas shall indicate that seeking backwards is not allowed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.6\n             */\n            seekRangeStart: Attribute(0x6, TlvNullable(TlvUInt64), { default: null })\n        },\n\n        commands: {\n            /**\n             * Upon receipt, this shall change the playback position in the media to the given position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.11\n             */\n            seek: Command(0xb, TlvSeekRequest, 0xa, TlvPlaybackResponse)\n        }\n    });\n\n    /**\n     * A MediaPlaybackCluster supports these elements if it supports feature AudioTracks.\n     */\n    export const AudioTracksComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * ActiveTrack refers to the Audio track currently set and being used for the streaming media. A value of\n             * null shall indicate that no Audio Track corresponding to the current media is currently being played.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.8\n             */\n            activeAudioTrack: Attribute(0x7, TlvNullable(TlvTrack), { default: null }),\n\n            /**\n             * AvailableAudioTracks refers to the list of Audio tracks available for the current title being played. A\n             * value of null shall indicate that no Audio Tracks corresponding to the current media are selectable by\n             * the client.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.9\n             */\n            availableAudioTracks: Attribute(0x8, TlvNullable(TlvArray(TlvTrack)), { default: null })\n        },\n\n        commands: {\n            /**\n             * Upon receipt, the server shall set the active Audio Track to the one identified by the TrackID in the\n             * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not\n             * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,\n             * the server will return an error status of INVALID_ARGUMENT.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.13\n             */\n            activateAudioTrack: Command(0xc, TlvActivateAudioTrackRequest, 0xc, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A MediaPlaybackCluster supports these elements if it supports feature TextTracks.\n     */\n    export const TextTracksComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * ActiveTrack refers to the Text track currently set and being used for the streaming media. This can be\n             * nil. A value of null shall indicate that no Text Track corresponding to the current media is currently\n             * being displayed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.10\n             */\n            activeTextTrack: Attribute(0x9, TlvNullable(TlvTrack), { default: null }),\n\n            /**\n             * AvailableTextTracks refers to the list of Text tracks available for the current title being played. This\n             * can be an empty list. A value of null shall indicate that no Text Tracks corresponding to the current\n             * media are selectable by the client.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.11\n             */\n            availableTextTracks: Attribute(0xa, TlvNullable(TlvArray(TlvTrack)), { default: null })\n        },\n\n        commands: {\n            /**\n             * Upon receipt, the server shall set the active Text Track to the one identified by the TrackID in the\n             * Track catalog for the streaming media. If the TrackID does not exist in the Track catalog, OR does not\n             * correspond to the streaming media OR no media is being streamed at the time of receipt of this command,\n             * the server shall return an error status of INVALID_ARGUMENT.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.14\n             */\n            activateTextTrack: Command(0xd, TlvActivateTextTrackRequest, 0xd, TlvNoResponse),\n\n            /**\n             * If a Text Track is active (i.e. being displayed), upon receipt of this command, the server shall stop\n             * displaying it.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.15\n             */\n            deactivateTextTrack: Command(0xe, TlvNoArguments, 0xe, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A MediaPlaybackCluster supports these elements if it supports feature VariableSpeed.\n     */\n    export const VariableSpeedComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Upon receipt, this shall start playback of the media backward in case the media is currently playing in\n             * the forward direction or is not playing. If the playback is already happening in the backwards direction\n             * receipt of this command shall increase the speed of the media playback backwards.\n             *\n             * Different \"rewind\" speeds may be reflected on the media playback device based upon the number of\n             * sequential calls to this function and the capability of the device. This is to avoid needing to define\n             * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be\n             * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media\n             * being played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED\n             * shall be returned. If the playback speed has reached the maximum supported speed for media playing\n             * backwards, the status of SPEED_OUT_OF_RANGE shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.7\n             */\n            rewind: Command(0x6, TlvRewindRequest, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall start playback of the media in the forward direction in case the media is\n             *\n             * currently playing in the backward direction or is not playing. If the playback is already happening in\n             * the forward direction receipt of this command shall increase the speed of the media playback.\n             *\n             * Different \"fast-forward\" speeds may be reflected on the media playback device based upon the number of\n             * sequential calls to this function and the capability of the device. This is to avoid needing to define\n             * every speed (multiple fast, slow motion, etc). If the PlaybackSpeed attribute is supported it shall be\n             * updated to reflect the new speed of playback. If the playback speed cannot be changed for the media\n             * being played(for example, in live streaming content not supporting seek), the status of NOT_ALLOWED\n             * shall be returned. If the playback speed has reached the maximum supported speed for media playing\n             * forward, the status of SPEED_OUT_OF_RANGE shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.8\n             */\n            fastForward: Command(0x7, TlvFastForwardRequest, 0xa, TlvPlaybackResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all MediaPlayback clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x506,\n        name: \"MediaPlayback\",\n        revision: 2,\n\n        features: {\n            /**\n             * AdvancedSeek\n             *\n             * This feature provides access to the time offset location within current playback media and allows for\n             * jumping to a specific location using time offsets. This enables clients to implement more advanced media\n             * seeking behavior in their user interface, for instance a \"seek bar\".\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.1\n             */\n            advancedSeek: BitFlag(0),\n\n            /**\n             * VariableSpeed\n             *\n             * This feature is for a device which supports variable speed playback on media that supports it.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.2\n             */\n            variableSpeed: BitFlag(1),\n\n            /**\n             * TextTracks\n             *\n             * This feature is for a device or app that supports Text Tracks.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.3\n             */\n            textTracks: BitFlag(2),\n\n            /**\n             * AudioTracks\n             *\n             * This feature is for a device or app that supports Audio Tracks.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.4\n             */\n            audioTracks: BitFlag(3),\n\n            /**\n             * AudioAdvance\n             *\n             * This feature is for a device or app that supports playing audio during fast and slow advance and rewind\n             * (e.g., while playback speed is not 1). A device that supports this feature may only support playing\n             * audio during certain speeds.\n             *\n             * A cluster implementing AA shall implement AS.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.4.5\n             */\n            audioAdvance: BitFlag(4)\n        },\n\n        attributes: {\n            /**\n             * Indicates the current playback state of media.\n             *\n             * During fast-forward, rewind, and other seek operations; this attribute shall be set to PLAYING.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.6.1\n             */\n            currentState: Attribute(0x0, TlvEnum<PlaybackState>())\n        },\n\n        commands: {\n            /**\n             * Upon receipt, this shall play media. If content is currently in a FastForward or Rewind state. Play\n             * shall return media to normal playback speed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.1\n             */\n            play: Command(0x0, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall pause playback of the media.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.2\n             */\n            pause: Command(0x1, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall stop playback of the media. User-visible outcome is context-specific. This may\n             * navigate the user back to the location from where the media was originally launched.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.3\n             */\n            stop: Command(0x2, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall Start Over with the current media playback item.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.4\n             */\n            startOver: OptionalCommand(0x3, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall cause the handler to be invoked for \"Previous\". User experience is\n             * context-specific. This will often Go back to the previous media playback item.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.5\n             */\n            previous: OptionalCommand(0x4, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall cause the handler to be invoked for \"Next\". User experience is context-\n             * specific. This will often Go forward to the next media playback item.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.6\n             */\n            next: OptionalCommand(0x5, TlvNoArguments, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall Skip forward in the media by the given number of milliseconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.9\n             */\n            skipForward: OptionalCommand(0x8, TlvSkipForwardRequest, 0xa, TlvPlaybackResponse),\n\n            /**\n             * Upon receipt, this shall Skip backward in the media by the given number of milliseconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.7.10\n             */\n            skipBackward: OptionalCommand(0x9, TlvSkipBackwardRequest, 0xa, TlvPlaybackResponse)\n        },\n\n        events: {\n            /**\n             * If supported, this event shall be generated when there is a change in any of the supported attributes of\n             * the Media Playback cluster.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10.8.1\n             */\n            stateChanged: OptionalEvent(0x0, EventPriority.Info, TlvStateChangedEvent)\n        },\n\n        /**\n         * This metadata controls which MediaPlaybackCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { advancedSeek: true }, component: AdvancedSeekComponent },\n            { flags: { audioTracks: true }, component: AudioTracksComponent },\n            { flags: { textTracks: true }, component: TextTracksComponent },\n            { flags: { variableSpeed: true }, component: VariableSpeedComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster provides an interface for controlling Media Playback (PLAY, PAUSE, etc) on a media device such as a\n     * TV, Set-top Box, or Smart Speaker.\n     *\n     * This cluster server would be supported on Video Player devices or endpoints that provide media playback, such as\n     * a Content App. This cluster provides an interface for controlling Media Playback.\n     *\n     * MediaPlaybackCluster supports optional features that you can enable with the MediaPlaybackCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.10\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const AS = { advancedSeek: true };\n    const AT = { audioTracks: true };\n    const TT = { textTracks: true };\n    const VS = { variableSpeed: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            startTime: MutableCluster.AsConditional(AdvancedSeekComponent.attributes.startTime, { mandatoryIf: [AS] }),\n            duration: MutableCluster.AsConditional(AdvancedSeekComponent.attributes.duration, { mandatoryIf: [AS] }),\n            sampledPosition: MutableCluster.AsConditional(\n                AdvancedSeekComponent.attributes.sampledPosition,\n                { mandatoryIf: [AS] }\n            ),\n            playbackSpeed: MutableCluster.AsConditional(\n                AdvancedSeekComponent.attributes.playbackSpeed,\n                { mandatoryIf: [AS] }\n            ),\n            seekRangeEnd: MutableCluster.AsConditional(\n                AdvancedSeekComponent.attributes.seekRangeEnd,\n                { mandatoryIf: [AS] }\n            ),\n            seekRangeStart: MutableCluster.AsConditional(\n                AdvancedSeekComponent.attributes.seekRangeStart,\n                { mandatoryIf: [AS] }\n            ),\n            activeAudioTrack: MutableCluster.AsConditional(\n                AudioTracksComponent.attributes.activeAudioTrack,\n                { mandatoryIf: [AT] }\n            ),\n            availableAudioTracks: MutableCluster.AsConditional(\n                AudioTracksComponent.attributes.availableAudioTracks,\n                { mandatoryIf: [AT] }\n            ),\n            activeTextTrack: MutableCluster.AsConditional(\n                TextTracksComponent.attributes.activeTextTrack,\n                { mandatoryIf: [TT] }\n            ),\n            availableTextTracks: MutableCluster.AsConditional(\n                TextTracksComponent.attributes.availableTextTracks,\n                { mandatoryIf: [TT] }\n            )\n        },\n\n        commands: {\n            ...Cluster.commands,\n            rewind: MutableCluster.AsConditional(VariableSpeedComponent.commands.rewind, { mandatoryIf: [VS] }),\n            fastForward: MutableCluster.AsConditional(\n                VariableSpeedComponent.commands.fastForward,\n                { mandatoryIf: [VS] }\n            ),\n            seek: MutableCluster.AsConditional(AdvancedSeekComponent.commands.seek, { mandatoryIf: [AS] }),\n            activateAudioTrack: MutableCluster.AsConditional(\n                AudioTracksComponent.commands.activateAudioTrack,\n                { mandatoryIf: [AT] }\n            ),\n            activateTextTrack: MutableCluster.AsConditional(\n                TextTracksComponent.commands.activateTextTrack,\n                { mandatoryIf: [TT] }\n            ),\n            deactivateTextTrack: MutableCluster.AsConditional(\n                TextTracksComponent.commands.deactivateTextTrack,\n                { mandatoryIf: [TT] }\n            )\n        },\n\n        events: Cluster.events\n    });\n\n    /**\n     * This cluster supports all MediaPlayback features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type MediaPlaybackCluster = MediaPlayback.Cluster;\nexport const MediaPlaybackCluster = MediaPlayback.Cluster;\nClusterRegistry.register(MediaPlayback.Complete);\n"],
  "mappings": "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",
  "names": ["MediaPlayback", "Feature", "Status", "Characteristic", "PlaybackState"]
}
