{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ColorControlCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    Command,\n    TlvNoResponse,\n    OptionalAttribute,\n    OptionalWritableAttribute,\n    AccessLevel,\n    WritableAttribute,\n    FixedAttribute,\n    OptionalFixedAttribute\n} from \"../Cluster.js\";\nimport { TlvUInt8, TlvEnum, TlvUInt16, TlvBitmap, TlvInt16 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { BitFlag, BitField } from \"../../schema/BitmapSchema.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ColorControl {\n    /**\n     * These are optional features supported by ColorControlCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.5\n     */\n    export enum Feature {\n        /**\n         * HueSaturation (HS)\n         *\n         * Supports color specification via hue/saturation.\n         */\n        HueSaturation = \"HueSaturation\",\n\n        /**\n         * EnhancedHue (EHUE)\n         *\n         * Enhanced hue is supported.\n         */\n        EnhancedHue = \"EnhancedHue\",\n\n        /**\n         * ColorLoop (CL)\n         *\n         * Color loop is supported.\n         */\n        ColorLoop = \"ColorLoop\",\n\n        /**\n         * Xy (XY)\n         *\n         * Supports color specification via XY.\n         */\n        Xy = \"Xy\",\n\n        /**\n         * ColorTemperature (CT)\n         *\n         * Supports specification of color temperature.\n         */\n        ColorTemperature = \"ColorTemperature\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4.2\n     */\n    export enum Direction {\n        ShortestDistance = 0,\n        LongestDistance = 1,\n        Up = 2,\n        Down = 3\n    }\n\n    /**\n     * The value of the ColorControl options attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.11\n     */\n    export const Options = { executeIfOff: BitFlag(0) };\n\n    /**\n     * Input to the ColorControl moveToHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4\n     */\n    export const TlvMoveToHueRequest = TlvObject({\n        /**\n         * The Hue field specifies the hue to be moved to.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4.1\n         */\n        hue: TlvField(0, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * The Direction field shall be one of the non-reserved values in Values of the Direction Field.\n         *\n         * ### Table 17. Values of the Direction Field\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4.2\n         */\n        direction: TlvField(1, TlvEnum<Direction>()),\n\n        /**\n         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to move to the new\n         * hue.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4.3\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveToHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4\n     */\n    export interface MoveToHueRequest extends TypeFromSchema<typeof TlvMoveToHueRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5.1\n     */\n    export enum MoveMode {\n        Stop = 0,\n        Up = 1,\n        Down = 3\n    }\n\n    /**\n     * Input to the ColorControl moveHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5\n     */\n    export const TlvMoveHueRequest = TlvObject({\n        /**\n         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode\n         * field is equal to 0 (Stop), the Rate field shall be ignored.\n         *\n         * ### Table 18. Values of the MoveMode Field\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5.1\n         */\n        moveMode: TlvField(0, TlvEnum<MoveMode>()),\n\n        /**\n         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device\u2019s hue of\n         * one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of zero, the\n         * command has no effect and a response command shall be sent in response, with the status code set to\n         * INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5.2\n         */\n        rate: TlvField(1, TlvUInt8),\n\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5\n     */\n    export interface MoveHueRequest extends TypeFromSchema<typeof TlvMoveHueRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6.1\n     */\n    export enum StepMode {\n        Up = 1,\n        Down = 3\n    }\n\n    /**\n     * Input to the ColorControl stepHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6\n     */\n    export const TlvStepHueRequest = TlvObject({\n        /**\n         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.\n         *\n         * ### Table 20. Values of the StepMode Field\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6.1\n         */\n        stepMode: TlvField(0, TlvEnum<StepMode>()),\n\n        /**\n         * The change to be added to (or subtracted from) the current value of the device\u2019s hue.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6.2\n         */\n        stepSize: TlvField(1, TlvUInt8),\n\n        /**\n         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the\n         * step. A step is a change in the device\u2019s hue of \u2018Step size\u2019 units.\n         *\n         * NOTE\n         *\n         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime\n         * data fields in other clusters / commands.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6.3\n         */\n        transitionTime: TlvField(2, TlvUInt8),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl stepHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6\n     */\n    export interface StepHueRequest extends TypeFromSchema<typeof TlvStepHueRequest> {}\n\n    /**\n     * Input to the ColorControl moveToSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.7\n     */\n    export const TlvMoveToSaturationRequest = TlvObject({\n        saturation: TlvField(0, TlvUInt8.bound({ max: 254 })),\n        transitionTime: TlvField(1, TlvUInt16.bound({ max: 65534 })),\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveToSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.7\n     */\n    export interface MoveToSaturationRequest extends TypeFromSchema<typeof TlvMoveToSaturationRequest> {}\n\n    /**\n     * Input to the ColorControl moveSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.8\n     */\n    export const TlvMoveSaturationRequest = TlvObject({\n        /**\n         * The MoveMode field shall be one of the non-reserved values in Values of the MoveMode Field. If the MoveMode\n         * field is equal to 0 (Stop), the Rate field shall be ignored.\n         *\n         * ### Table 22. Values of the MoveMode Field\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.8.1\n         */\n        moveMode: TlvField(0, TlvEnum<MoveMode>()),\n\n        /**\n         * The Rate field specifies the rate of movement in steps per second. A step is a change in the device\u2019s\n         * saturation of one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of\n         * zero, the command has no effect and a response command shall be sent in response, with the status code set\n         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.8.2\n         */\n        rate: TlvField(1, TlvUInt8),\n\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.8\n     */\n    export interface MoveSaturationRequest extends TypeFromSchema<typeof TlvMoveSaturationRequest> {}\n\n    /**\n     * Input to the ColorControl stepSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9\n     */\n    export const TlvStepSaturationRequest = TlvObject({\n        /**\n         * The StepMode field shall be one of the non-reserved values in Values of the StepMode Field.\n         *\n         * ### Table 24. Values of the StepMode Field\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9.1\n         */\n        stepMode: TlvField(0, TlvEnum<StepMode>()),\n\n        /**\n         * The change to be added to (or subtracted from) the current value of the device\u2019s saturation.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9.2\n         */\n        stepSize: TlvField(1, TlvUInt8),\n\n        /**\n         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the\n         * step. A step is a change in the device\u2019s saturation of \u2018Step size\u2019 units.\n         *\n         * NOTE\n         *\n         * Here the TransitionTime data field is of data type uint8, where uint16 is more common for TransitionTime\n         * data fields in other clusters / commands.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9.3\n         */\n        transitionTime: TlvField(2, TlvUInt8),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl stepSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9\n     */\n    export interface StepSaturationRequest extends TypeFromSchema<typeof TlvStepSaturationRequest> {}\n\n    /**\n     * Input to the ColorControl moveToHueAndSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.10\n     */\n    export const TlvMoveToHueAndSaturationRequest = TlvObject({\n        hue: TlvField(0, TlvUInt8.bound({ max: 254 })),\n        saturation: TlvField(1, TlvUInt8.bound({ max: 254 })),\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveToHueAndSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.10\n     */\n    export interface MoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvMoveToHueAndSaturationRequest> {}\n\n    /**\n     * Input to the ColorControl moveToColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.11\n     */\n    export const TlvMoveToColorRequest = TlvObject({\n        colorX: TlvField(0, TlvUInt16.bound({ max: 65279 })),\n        colorY: TlvField(1, TlvUInt16.bound({ max: 65279 })),\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveToColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.11\n     */\n    export interface MoveToColorRequest extends TypeFromSchema<typeof TlvMoveToColorRequest> {}\n\n    /**\n     * Input to the ColorControl moveColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.12\n     */\n    export const TlvMoveColorRequest = TlvObject({\n        /**\n         * The RateX field specifies the rate of movement in steps per second. A step is a change in the device\u2019s\n         * CurrentX attribute of one unit.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.12.1\n         */\n        rateX: TlvField(0, TlvInt16),\n\n        /**\n         * The RateY field specifies the rate of movement in steps per second. A step is a change in the device\u2019s\n         * CurrentY attribute of one unit.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.12.2\n         */\n        rateY: TlvField(1, TlvInt16),\n\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.12\n     */\n    export interface MoveColorRequest extends TypeFromSchema<typeof TlvMoveColorRequest> {}\n\n    /**\n     * Input to the ColorControl stepColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.13\n     */\n    export const TlvStepColorRequest = TlvObject({\n        stepX: TlvField(0, TlvInt16),\n        stepY: TlvField(1, TlvInt16),\n\n        /**\n         * The TransitionTime field specifies, in 1/10ths of a second, the time that shall be taken to perform the\n         * color change.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.13.2\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl stepColor command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.13\n     */\n    export interface StepColorRequest extends TypeFromSchema<typeof TlvStepColorRequest> {}\n\n    /**\n     * Input to the ColorControl moveToColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.14\n     */\n    export const TlvMoveToColorTemperatureRequest = TlvObject({\n        colorTemperatureMireds: TlvField(0, TlvUInt16.bound({ max: 65279 })),\n        transitionTime: TlvField(1, TlvUInt16.bound({ max: 65534 })),\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveToColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.14\n     */\n    export interface MoveToColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveToColorTemperatureRequest> {}\n\n    /**\n     * Input to the ColorControl moveColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21\n     */\n    export const TlvMoveColorTemperatureRequest = TlvObject({\n        /**\n         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see\n         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21.1\n         */\n        moveMode: TlvField(0, TlvEnum<MoveMode>()),\n\n        /**\n         * The Rate field specifies the rate of movement in steps per second. A step is a change in the color\n         * temperature of a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field\n         * has a value of zero, the command has no effect and a response command shall be sent in response, with the\n         * status code set to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21.2\n         */\n        rate: TlvField(1, TlvUInt16),\n\n        /**\n         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (\u2261\n         * an upper bound on the color temperature in kelvins) for the current move operation\n         *\n         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds\n         *\n         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the\n         * ColorTemperatureMinimumMireds field it shall be clipped so that the above invariant is satisfied. If the\n         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound\n         * for the ColorTemperatureMireds attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21.3\n         */\n        colorTemperatureMinimumMireds: TlvField(2, TlvUInt16.bound({ max: 65279 })),\n\n        /**\n         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (\u2261\n         * a lower bound on the color temperature in kelvins) for the current move operation\n         *\n         * ColorTemperatureMireds <= ColorTemperatureMaximumMireds field <= ColorTempPhysicalMaxMireds\n         *\n         * As such if the move operation takes the ColorTemperatureMireds attribute towards the value of the\n         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the\n         * ColorTemperatureMaximumMireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper bound\n         * for the ColorTemperatureMireds attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21.4\n         */\n        colorTemperatureMaximumMireds: TlvField(3, TlvUInt16.bound({ max: 65279 })),\n\n        optionsMask: TlvField(4, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(5, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl moveColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21\n     */\n    export interface MoveColorTemperatureRequest extends TypeFromSchema<typeof TlvMoveColorTemperatureRequest> {}\n\n    /**\n     * Input to the ColorControl stepColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22\n     */\n    export const TlvStepColorTemperatureRequest = TlvObject({\n        /**\n         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see\n         * sub-clause StepHue Command).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22.1\n         */\n        stepMode: TlvField(0, TlvEnum<StepMode>()),\n\n        /**\n         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the\n         * device\u2019s color temperature.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22.2\n         */\n        stepSize: TlvField(1, TlvUInt16),\n\n        /**\n         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform\n         * the step. A step is a change to the device\u2019s color temperature of a magnitude corresponding to the StepSize\n         * field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22.3\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        /**\n         * The ColorTemperatureMinimumMireds field specifies a lower bound on the ColorTemperatureMireds attribute (\u2261\n         * an upper bound on the color temperature in kelvins) for the current step operation\n         *\n         * ColorTempPhysicalMinMireds <= ColorTemperatureMinimumMireds field <= ColorTemperatureMireds\n         *\n         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the Color\n         * Temperature Minimum Mireds field it shall be clipped so that the above invariant is satisfied. If the\n         * ColorTemperatureMinimumMireds field is set to 0, ColorTempPhysicalMinMireds shall be used as the lower bound\n         * for the ColorTemperatureMireds attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22.4\n         */\n        colorTemperatureMinimumMireds: TlvField(3, TlvUInt16.bound({ max: 65279 })),\n\n        /**\n         * The ColorTemperatureMaximumMireds field specifies an upper bound on the ColorTemperatureMireds attribute (\u2261\n         * a lower bound on the color temperature in kelvins) for the current step operation\n         *\n         * ColorTemperatureMireds \u2264 ColorTemperatureMaximumMireds field \u2264 ColorTempPhysicalMaxMireds\n         *\n         * As such if the step operation takes the ColorTemperatureMireds attribute towards the value of the\n         * ColorTemperatureMaximumMireds field it shall be clipped so that the above invariant is satisfied. If the\n         * ColorTemperatureMaximum Mireds field is set to 0, ColorTempPhysicalMaxMireds shall be used as the upper\n         * bound for the ColorTemperatureMireds attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22.5\n         */\n        colorTemperatureMaximumMireds: TlvField(4, TlvUInt16.bound({ max: 65279 })),\n\n        optionsMask: TlvField(5, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(6, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl stepColorTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22\n     */\n    export interface StepColorTemperatureRequest extends TypeFromSchema<typeof TlvStepColorTemperatureRequest> {}\n\n    /**\n     * Input to the ColorControl enhancedMoveToHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15\n     */\n    export const TlvEnhancedMoveToHueRequest = TlvObject({\n        /**\n         * The EnhancedHue field specifies the target extended hue for the lamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15.1\n         */\n        enhancedHue: TlvField(0, TlvUInt16),\n\n        /**\n         * This field is identical to the Direction field of the MoveToHue command of the Color Control cluster (see\n         * sub-clause Use of the OptionsMask and OptionsOverride fields).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15.2\n         */\n        direction: TlvField(1, TlvEnum<Direction>()),\n\n        /**\n         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster\n         * (see sub-clause Use of the OptionsMask and OptionsOverride fields).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15.3\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl enhancedMoveToHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15\n     */\n    export interface EnhancedMoveToHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueRequest> {}\n\n    /**\n     * Input to the ColorControl enhancedMoveHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.16\n     */\n    export const TlvEnhancedMoveHueRequest = TlvObject({\n        /**\n         * This field is identical to the MoveMode field of the MoveHue command of the Color Control cluster (see\n         * sub-clause MoveHue Command). If the MoveMode field is equal to 0 (Stop), the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.16.1\n         */\n        moveMode: TlvField(0, TlvEnum<MoveMode>()),\n\n        /**\n         * The Rate field specifies the rate of movement in steps per second. A step is a change in the extended hue of\n         * a device by one unit. If the MoveMode field is set to 1 (up) or 3 (down) and the Rate field has a value of\n         * zero, the command has no effect and a response command shall be sent in response, with the status code set\n         * to INVALID_COMMAND. If the MoveMode field is set to 0 (stop) the Rate field shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.16.2\n         */\n        rate: TlvField(1, TlvUInt16),\n\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl enhancedMoveHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.16\n     */\n    export interface EnhancedMoveHueRequest extends TypeFromSchema<typeof TlvEnhancedMoveHueRequest> {}\n\n    /**\n     * Input to the ColorControl enhancedStepHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17\n     */\n    export const TlvEnhancedStepHueRequest = TlvObject({\n        /**\n         * This field is identical to the StepMode field of the StepHue command of the Color Control cluster (see\n         * sub-clause StepHue Command).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17.1\n         */\n        stepMode: TlvField(0, TlvEnum<StepMode>()),\n\n        /**\n         * The StepSize field specifies the change to be added to (or subtracted from) the current value of the\n         * device\u2019s enhanced hue.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17.2\n         */\n        stepSize: TlvField(1, TlvUInt16),\n\n        /**\n         * The TransitionTime field specifies, in units of 1/10ths of a second, the time that shall be taken to perform\n         * the step. A step is a change to the device\u2019s enhanced hue of a magnitude corresponding to the StepSize field.\n         *\n         * NOTE\n         *\n         * Here TransitionTime data field is of data type uint16, while the TransitionTime data field of the StepHue\n         * command is of data type uint8.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17.3\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl enhancedStepHue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17\n     */\n    export interface EnhancedStepHueRequest extends TypeFromSchema<typeof TlvEnhancedStepHueRequest> {}\n\n    /**\n     * Input to the ColorControl enhancedMoveToHueAndSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18\n     */\n    export const TlvEnhancedMoveToHueAndSaturationRequest = TlvObject({\n        /**\n         * The EnhancedHue field specifies the target extended hue for the lamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18.1\n         */\n        enhancedHue: TlvField(0, TlvUInt16),\n\n        /**\n         * This field is identical to the Saturation field of the MoveToHueAndSaturation command of the Color Control\n         * cluster (see sub-clause MoveToHueAndSaturation Command).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18.2\n         */\n        saturation: TlvField(1, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * This field is identical to the TransitionTime field of the MoveToHue command of the Color Control cluster\n         * (see sub-clause MoveToHueAndSaturation Command).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18.3\n         */\n        transitionTime: TlvField(2, TlvUInt16.bound({ max: 65534 })),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl enhancedMoveToHueAndSaturation command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18\n     */\n    export interface EnhancedMoveToHueAndSaturationRequest extends TypeFromSchema<typeof TlvEnhancedMoveToHueAndSaturationRequest> {}\n\n    /**\n     * The value of the ColorControl colorLoopActive attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.14\n     */\n    export enum ColorLoopActive {\n        Inactive = 0,\n        Active = 1\n    }\n\n    /**\n     * The value of the ColorControl colorLoopDirection attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.15\n     */\n    export enum ColorLoopDirection {\n        Decrement = 0,\n        Increment = 1\n    }\n\n    /**\n     * The value of ColorControl.updateFlags\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.1\n     */\n    export const UpdateFlags = {\n        updateAction: BitFlag(0),\n        updateDirection: BitFlag(1),\n        updateTime: BitFlag(2),\n        updateStartHue: BitFlag(3),\n        reserved: BitField(4, 4)\n    };\n\n    /**\n     * The value of ColorControl.action\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.2\n     */\n    export enum Action {\n        DeActivateTheColorLoop = 0,\n        ActivateTheColorLoopFromTheValueInTheColorLoopStartEnhancedHueField = 1,\n        ActivateTheColorLoopFromTheValueOfTheEnhancedCurrentHueAttribute = 2\n    }\n\n    /**\n     * The value of ColorControl.direction\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.3\n     */\n    export enum ColorLoopSetDirection {\n        DecrementTheHueInTheColorLoop = 0,\n        IncrementTheHueInTheColorLoop = 1\n    }\n\n    /**\n     * Input to the ColorControl colorLoopSet command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19\n     */\n    export const TlvColorLoopSetRequest = TlvObject({\n        /**\n         * The UpdateFlags field specifies which color loop attributes to update before the color loop is started. This\n         * field shall be formatted as illustrated in Format of the UpdateFlags Field of the ColorLoopSet Command.\n         *\n         * ### Table 28. Format of the UpdateFlags Field of the ColorLoopSet Command\n         *\n         * The UpdateAction sub-field is 1 bit in length and specifies whether the device shall adhere to the action\n         * field in order to process the command. If this sub-field is set to 1, the device shall adhere to the action\n         * field. If this sub-field is set to 0, the device shall ignore the Action field.\n         *\n         * The UpdateDirection sub-field is 1 bit in length and specifies whether the device shall update the\n         * ColorLoopDirection attribute with the Direction field. If this sub-field is set to 1, the device shall\n         * update the value of the ColorLoopDirection attribute with the value of the Direction field. If this\n         * sub-field is set to 0, the device shall ignore the Direction field.\n         *\n         * The UpdateTime sub-field is 1 bit in length and specifies whether the device shall update the ColorLoopTime\n         * attribute with the Time field. If this sub-field is set to 1, the device shall update the value of the\n         * ColorLoopTime attribute with the value of the Time field. If this sub-field is set to 0, the device shall\n         * ignore the Time field.\n         *\n         * The UpdateStartHue sub-field is 1 bit in length and specifies whether the device shall update the\n         * ColorLoopStartEnhancedHue attribute with the StartHue field. If this sub-field is set to 1, the device shall\n         * update the value of the ColorLoopStartEnhancedHue attribute with the value of the StartHue field. If this\n         * sub-field is set to 0, the device shall ignore the StartHue field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.1\n         */\n        updateFlags: TlvField(0, TlvBitmap(TlvUInt8, UpdateFlags)),\n\n        /**\n         * The Action field specifies the action to take for the color loop if the UpdateAction sub-field of the\n         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of\n         * the Action Field of the ColorLoopSet Command.\n         *\n         * ### Table 29. Values of the Action Field of the ColorLoopSet Command\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.2\n         */\n        action: TlvField(1, TlvEnum<Action>()),\n\n        /**\n         * The Direction field specifies the direction for the color loop if the Update Direction field of the\n         * UpdateFlags field is set to 1. This field shall be set to one of the non-reserved values listed in Values of\n         * the Direction Field of the ColorLoopSet Command.\n         *\n         * ### Table 30. Values of the Direction Field of the ColorLoopSet Command\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.3\n         */\n        direction: TlvField(2, TlvEnum<ColorLoopSetDirection>()),\n\n        /**\n         * The Time field specifies the number of seconds over which to perform a full color loop if the UpdateTime\n         * sub-field of the UpdateFlags field is set to 1.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19.4\n         */\n        time: TlvField(3, TlvUInt16),\n\n        startHue: TlvField(4, TlvUInt16),\n        optionsMask: TlvField(5, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(6, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl colorLoopSet command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19\n     */\n    export interface ColorLoopSetRequest extends TypeFromSchema<typeof TlvColorLoopSetRequest> {}\n\n    /**\n     * Input to the ColorControl stopMoveStep command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.20\n     */\n    export const TlvStopMoveStepRequest = TlvObject({\n        optionsMask: TlvField(0, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(1, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the ColorControl stopMoveStep command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.20\n     */\n    export interface StopMoveStepRequest extends TypeFromSchema<typeof TlvStopMoveStepRequest> {}\n\n    /**\n     * The value of the ColorControl driftCompensation attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.7\n     */\n    export enum DriftCompensation {\n        None = 0,\n        OtherUnknown = 1,\n        TemperatureMonitoring = 2,\n        OpticalLuminanceMonitoringAndFeedback = 3,\n        OpticalColorMonitoringAndFeedback = 4\n    }\n\n    /**\n     * The value of the ColorControl colorMode attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.10\n     */\n    export enum ColorMode {\n        CurrentHueAndCurrentSaturation = 0,\n        CurrentXAndCurrentY = 1,\n        ColorTemperatureMireds = 2\n    }\n\n    /**\n     * The value of the ColorControl enhancedColorMode attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.13\n     */\n    export enum EnhancedColorMode {\n        CurrentHueAndCurrentSaturation = 0,\n        CurrentXAndCurrentY = 1,\n        ColorTemperatureMireds = 2,\n        EnhancedCurrentHueAndCurrentSaturation = 3\n    }\n\n    /**\n     * The value of the ColorControl colorCapabilities attribute\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.19\n     */\n    export const ColorCapabilities = {\n        hueSaturation: BitFlag(0),\n        enhancedHue: BitFlag(1),\n        colorLoop: BitFlag(2),\n        xy: BitFlag(3),\n        colorTemperature: BitFlag(4)\n    };\n\n    /**\n     * A ColorControlCluster supports these elements if it supports feature HueSaturation.\n     */\n    export const HueSaturationComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The CurrentHue attribute contains the current hue value of the light. It is updated as fast as practical\n             * during commands that change the hue.\n             *\n             * The hue in degrees shall be related to the CurrentHue attribute by the relationship: Hue = CurrentHue x\n             * 360 / 254 (CurrentHue in the range 0 to 254 inclusive)\n             *\n             * If this attribute is implemented then the CurrentSaturation and ColorMode attributes shall also be\n             * implemented.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.2\n             */\n            currentHue: Attribute(0x0, TlvUInt8.bound({ max: 254 }), { persistent: true, default: 0 }),\n\n            /**\n             * The CurrentSaturation attribute holds the current saturation value of the light. It is updated as fast\n             * as practical during commands that change the saturation.\n             *\n             * The saturation shall be related to the CurrentSaturation attribute by the relationship: Saturation =\n             * CurrentSaturation/254 (CurrentSaturation in the range 0 to 254 inclusive)\n             *\n             * If this attribute is implemented then the CurrentHue and ColorMode attributes shall also be implemented.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.3\n             */\n            currentSaturation: Attribute(\n                0x1,\n                TlvUInt8.bound({ max: 254 }),\n                { scene: true, persistent: true, default: 0 }\n            )\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.4\n             */\n            moveToHue: Command(0x0, TlvMoveToHueRequest, 0x0, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.5\n             */\n            moveHue: Command(0x1, TlvMoveHueRequest, 0x1, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.6\n             */\n            stepHue: Command(0x2, TlvStepHueRequest, 0x2, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.7\n             */\n            moveToSaturation: Command(0x3, TlvMoveToSaturationRequest, 0x3, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.8\n             */\n            moveSaturation: Command(0x4, TlvMoveSaturationRequest, 0x4, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.9\n             */\n            stepSaturation: Command(0x5, TlvStepSaturationRequest, 0x5, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.10\n             */\n            moveToHueAndSaturation: Command(0x6, TlvMoveToHueAndSaturationRequest, 0x6, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A ColorControlCluster supports these elements if it supports feature Xy.\n     */\n    export const XyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The CurrentX attribute contains the current value of the normalized chromaticity value x, as defined in\n             * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.\n             *\n             * The value of x shall be related to the CurrentX attribute by the relationship x = CurrentX / 65536\n             * (CurrentX in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.5\n             */\n            currentX: Attribute(\n                0x3,\n                TlvUInt16.bound({ max: 65279 }),\n                { scene: true, persistent: true, default: 24939 }\n            ),\n\n            /**\n             * The CurrentY attribute contains the current value of the normalized chromaticity value y, as defined in\n             * the CIE xyY Color Space. It is updated as fast as practical during commands that change the color.\n             *\n             * The value of y shall be related to the CurrentY attribute by the relationship y = CurrentY / 65536\n             * (CurrentY in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.6\n             */\n            currentY: Attribute(\n                0x4,\n                TlvUInt16.bound({ max: 65279 }),\n                { scene: true, persistent: true, default: 24701 }\n            )\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.11\n             */\n            moveToColor: Command(0x7, TlvMoveToColorRequest, 0x7, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.12\n             */\n            moveColor: Command(0x8, TlvMoveColorRequest, 0x8, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.13\n             */\n            stepColor: Command(0x9, TlvStepColorRequest, 0x9, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A ColorControlCluster supports these elements if it supports feature ColorTemperature.\n     */\n    export const ColorTemperatureComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The ColorTemperatureMireds attribute contains a scaled inverse of the current value of the color\n             * temperature. The unit of ColorTemperatureMireds is the mired (micro reciprocal degree), a.k.a. mirek\n             * (micro reciprocal kelvin). It is updated as fast as practical during commands that change the color.\n             *\n             * The color temperature value in kelvins shall be related to the ColorTemperatureMireds attribute in\n             * mireds by the relationship\n             *\n             * Color temperature in kelvins = 1,000,000 / ColorTemperatureMireds, where ColorTemperatureMireds is in\n             * the range 1 to 65279 mireds inclusive, giving a color temperature range from 1,000,000 kelvins to 15.32\n             * kelvins.\n             *\n             * If this attribute is implemented then the ColorMode attribute shall also be implemented.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.9\n             */\n            colorTemperatureMireds: Attribute(0x7, TlvUInt16, { scene: true, persistent: true, default: 250 }),\n\n            /**\n             * The ColorTempPhysicalMinMireds attribute indicates the minimum mired value supported by the hardware.\n             * ColorTempPhysicalMinMireds corresponds to the maximum color temperature in kelvins supported by the\n             * hardware. ColorTempPhysicalMinMireds <= ColorTemperatureMireds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.20\n             */\n            colorTempPhysicalMinMireds: Attribute(0x400b, TlvUInt16.bound({ max: 65279 }), { default: 0 }),\n\n            /**\n             * The ColorTempPhysicalMaxMireds attribute indicates the maximum mired value supported by the hardware.\n             * ColorTempPhysicalMaxMireds corresponds to the minimum color temperature in kelvins supported by the\n             * hardware. ColorTemperatureMireds <= ColorTempPhysicalMaxMireds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.21\n             */\n            colorTempPhysicalMaxMireds: Attribute(0x400c, TlvUInt16.bound({ max: 65279 }), { default: 65279 }),\n\n            /**\n             * The CoupleColorTempToLevelMinMireds attribute specifies a lower bound on the value of the\n             * ColorTemperatureMireds attribute for the purposes of coupling the ColorTemperatureMireds attribute to\n             * the CurrentLevel attribute when the CoupleColorTempToLevel bit of the Options attribute of the Level\n             * Control cluster is equal to 1. When coupling the ColorTemperatureMireds attribute to the CurrentLevel\n             * attribute, this value shall correspond to a CurrentLevel value of 0xFE (100%).\n             *\n             * This attribute shall be set such that the following relationship exists: ColorTempPhysicalMinMireds \u2264\n             * CoupleColorTempToLevelMinMireds \u2264 ColorTemperatureMireds\n             *\n             * Note that since this attribute is stored as a micro reciprocal degree (mired) value (i.e. color\n             * temperature in kelvins = 1,000,000 / CoupleColorTempToLevelMinMireds), the\n             * CoupleColorTempToLevelMinMireds attribute corresponds to an upper bound on the value of the color\n             * temperature in kelvins supported by the device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.22\n             */\n            coupleColorTempToLevelMinMireds: OptionalAttribute(0x400d, TlvUInt16),\n\n            /**\n             * The StartUpColorTemperatureMireds attribute shall define the desired startup color temperature value a\n             * lamp shall use when it is supplied with power and this value shall be reflected in the\n             * ColorTemperatureMireds attribute. In addition, the ColorMode and EnhancedColorMode attributes shall be\n             * set to 0x02 (color temperature). The values of the StartUpColorTemperatureMireds attribute are listed in\n             * the table below,\n             *\n             * Table 12. Values of the StartUpColorTemperatureMireds attribute\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.23\n             */\n            startUpColorTemperatureMireds: OptionalWritableAttribute(\n                0x4010,\n                TlvNullable(TlvUInt16.bound({ max: 65279 })),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.14\n             */\n            moveToColorTemperature: Command(0xa, TlvMoveToColorTemperatureRequest, 0xa, TlvNoResponse),\n\n            /**\n             * The MoveColorTemperature command allows the color temperature of a lamp to be moved at a specified rate.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.21\n             */\n            moveColorTemperature: Command(0x4b, TlvMoveColorTemperatureRequest, 0x4b, TlvNoResponse),\n\n            /**\n             * The StepColorTemperature command allows the color temperature of a lamp to be stepped with a specified\n             * step size.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.22\n             */\n            stepColorTemperature: Command(0x4c, TlvStepColorTemperatureRequest, 0x4c, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A ColorControlCluster supports these elements if it supports feature EnhancedHue.\n     */\n    export const EnhancedHueComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The EnhancedCurrentHue attribute represents non-equidistant steps along the CIE 1931 color triangle, and\n             * it provides 16-bits precision.\n             *\n             * The upper 8 bits of this attribute shall be used as an index in the implementation specific XY lookup\n             * table to provide the non-equidistance steps. The lower 8 bits shall be used to interpolate between these\n             * steps in a linear way in order to provide color zoom for the user.\n             *\n             * To provide compatibility with standard ZCL, the CurrentHue attribute shall contain a hue value in the\n             * range 0 to 254, calculated from the EnhancedCurrentHue attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.12\n             */\n            enhancedCurrentHue: Attribute(0x4000, TlvUInt16, { scene: true, persistent: true, default: 0 })\n        },\n\n        commands: {\n            /**\n             * The EnhancedMoveToHue command allows lamps to be moved in a smooth continuous transition from their\n             * current hue to a target hue.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.15\n             */\n            enhancedMoveToHue: Command(0x40, TlvEnhancedMoveToHueRequest, 0x40, TlvNoResponse),\n\n            /**\n             * The EnhancedMoveHue command allows lamps to be moved in a continuous stepped transition from their\n             * current hue to a target hue.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.16\n             */\n            enhancedMoveHue: Command(0x41, TlvEnhancedMoveHueRequest, 0x41, TlvNoResponse),\n\n            /**\n             * The EnhancedStepHue command allows lamps to be moved in a stepped transition from their current hue to a\n             * target hue, resulting in a linear transition through XY space.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.17\n             */\n            enhancedStepHue: Command(0x42, TlvEnhancedStepHueRequest, 0x42, TlvNoResponse),\n\n            /**\n             * The EnhancedMoveToHueAndSaturation command allows lamps to be moved in a smooth continuous transition\n             * from their current hue to a target hue and from their current saturation to a target saturation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.18\n             */\n            enhancedMoveToHueAndSaturation: Command(\n                0x43,\n                TlvEnhancedMoveToHueAndSaturationRequest,\n                0x43,\n                TlvNoResponse\n            )\n        }\n    });\n\n    /**\n     * A ColorControlCluster supports these elements if it supports feature ColorLoop.\n     */\n    export const ColorLoopComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * The ColorLoopActive attribute specifies the current active status of the color loop. If this attribute\n             * has the value 0, the color loop shall not be active. If this attribute has the value 1, the color loop\n             * shall be active. All other values (2 to 254) are reserved.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.14\n             */\n            colorLoopActive: Attribute(\n                0x4002,\n                TlvEnum<ColorLoopActive>(),\n                { scene: true, persistent: true, default: ColorLoopActive.Inactive }\n            ),\n\n            /**\n             * The ColorLoopDirection attribute specifies the current direction of the color loop. If this attribute\n             * has the value 0, the EnhancedCurrentHue attribute shall be decremented. If this attribute has the value\n             * 1, the EnhancedCurrentHue attribute shall be incremented. All other values (2 to 254) are reserved.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.15\n             */\n            colorLoopDirection: Attribute(\n                0x4003,\n                TlvEnum<ColorLoopDirection>(),\n                { scene: true, persistent: true, default: ColorLoopDirection.Decrement }\n            ),\n\n            /**\n             * The ColorLoopTime attribute specifies the number of seconds it shall take to perform a full color loop,\n             * i.e., to cycle all values of the EnhancedCurrentHue attribute (between 0 and 0xFFFE).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.16\n             */\n            colorLoopTime: Attribute(0x4004, TlvUInt16, { scene: true, persistent: true, default: 25 }),\n\n            /**\n             * The ColorLoopStartEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute from\n             * which the color loop shall be started.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.17\n             */\n            colorLoopStartEnhancedHue: Attribute(0x4005, TlvUInt16, { default: 8960 }),\n\n            /**\n             * The ColorLoopStoredEnhancedHue attribute specifies the value of the EnhancedCurrentHue attribute before\n             * the color loop was started. Once the color loop is complete, the EnhancedCurrentHue attribute shall be\n             * restored to this value.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.18\n             */\n            colorLoopStoredEnhancedHue: Attribute(0x4006, TlvUInt16, { default: 0 })\n        },\n\n        commands: {\n            /**\n             * The Color Loop Set command allows a color loop to be activated such that the color lamp cycles through\n             * its range of hues.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.19\n             */\n            colorLoopSet: Command(0x44, TlvColorLoopSetRequest, 0x44, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A ColorControlCluster supports these elements if it supports features HueSaturation, Xy or ColorTemperature.\n     */\n    export const HueSaturationOrXyOrColorTemperatureComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * The StopMoveStep command is provided to allow MoveTo and Step commands to be stopped. (Note this\n             * automatically provides symmetry to the Level Control cluster.)\n             *\n             * NOTE the StopMoveStep command has no effect on an active color loop.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.11.20\n             */\n            stopMoveStep: Command(0x47, TlvStopMoveStepRequest, 0x47, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all ColorControl clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x300,\n        name: \"ColorControl\",\n        revision: 6,\n\n        features: {\n            /**\n             * HueSaturation\n             *\n             * Supports color specification via hue/saturation.\n             */\n            hueSaturation: BitFlag(0),\n\n            /**\n             * EnhancedHue\n             *\n             * Enhanced hue is supported.\n             */\n            enhancedHue: BitFlag(1),\n\n            /**\n             * ColorLoop\n             *\n             * Color loop is supported.\n             */\n            colorLoop: BitFlag(2),\n\n            /**\n             * Xy\n             *\n             * Supports color specification via XY.\n             */\n            xy: BitFlag(3),\n\n            /**\n             * ColorTemperature\n             *\n             * Supports specification of color temperature.\n             */\n            colorTemperature: BitFlag(4)\n        },\n\n        attributes: {\n            /**\n             * The RemainingTime attribute holds the time remaining, in 1/10ths of a second, until the currently active\n             * command will be complete.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.4\n             */\n            remainingTime: OptionalAttribute(0x2, TlvUInt16, { default: 0 }),\n\n            /**\n             * The DriftCompensation attribute indicates what mechanism, if any, is in use for compensation for\n             * color/intensity drift over time. It shall be one of the non-reserved values in Values of the\n             * DriftCompensation Attribute.\n             *\n             * ### Table 8. Values of the DriftCompensation Attribute\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.7\n             */\n            driftCompensation: OptionalAttribute(0x5, TlvEnum<DriftCompensation>()),\n\n            /**\n             * The CompensationText attribute holds a textual indication of what mechanism, if any, is in use to\n             * compensate for color/intensity drift over time.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.8\n             */\n            compensationText: OptionalAttribute(0x6, TlvString.bound({ maxLength: 254 })),\n\n            /**\n             * The ColorMode attribute indicates which attributes are currently determining the color of the device.\n             *\n             * The value of the ColorMode attribute cannot be written directly - it is set upon reception of any\n             * command in section Commands to the appropriate mode for that command.\n             *\n             * Table 9. Values of the ColorMode Attribute\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.10\n             */\n            colorMode: Attribute(\n                0x8,\n                TlvEnum<ColorMode>(),\n                { persistent: true, default: ColorMode.CurrentXAndCurrentY }\n            ),\n\n            /**\n             * The Options attribute is meant to be changed only during commissioning. The Options attribute is a\n             * bitmap that determines the default behavior of some cluster commands. Each command that is dependent on\n             * the Options attribute shall first construct a temporary Options bitmap that is in effect during the\n             * command processing. The temporary Options bitmap has the same format and meaning as the Options\n             * attribute, but includes any bits that may be overridden by command fields.\n             *\n             * Below is the format and description of the Options attribute and temporary Options bitmap and the effect\n             * on dependent commands.\n             *\n             * Table 10. Options Attribute\n             *\n             * ExecuteIfOff Options bit: Command execution shall NOT continue beyond the Options processing if all of\n             * these criteria are true:\n             *\n             *   \u2022 The On/Off cluster exists on the same endpoint as this cluster.\n             *\n             *   \u2022 The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.\n             *\n             *   \u2022 The value of the ExecuteIfOff bit is 0.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.11\n             */\n            options: WritableAttribute(0xf, TlvBitmap(TlvUInt8, Options)),\n\n            /**\n             * The NumberOfPrimaries attribute contains the number of color primaries implemented on this device. A\n             * value of null shall indicate that the number of primaries is unknown.\n             *\n             * Where this attribute is implemented, the attributes below for indicating the \u201Cx\u201D and \u201Cy\u201D color values of\n             * the primaries shall also be implemented for each of the primaries from 1 to NumberOfPrimaries, without\n             * leaving gaps. Implementation of the Primary1Intensity attribute and subsequent intensity attributes is\n             * optional.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8.1\n             */\n            numberOfPrimaries: FixedAttribute(0x10, TlvNullable(TlvUInt8.bound({ max: 6 }))),\n\n            /**\n             * The Primary1X attribute contains the normalized chromaticity value x for this primary, as defined in the\n             * CIE xyY Color Space.\n             *\n             * The value of x shall be related to the Primary1X attribute by the relationship x = Primary1X / 65536\n             * (Primary1X in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8.2\n             */\n            primary1X: OptionalFixedAttribute(0x11, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * The Primary1Y attribute contains the normalized chromaticity value y for this primary, as defined in the\n             * CIE xyY Color Space.\n             *\n             * The value of y shall be related to the Primary1Y attribute by the relationship y = Primary1Y / 65536\n             * (Primary1Y in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8.3\n             */\n            primary1Y: OptionalFixedAttribute(0x12, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * The Primary1intensity attribute contains a representation of the maximum intensity of this primary as\n             * defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast Configuration\n             * Cluster), normalized such that the primary with the highest maximum intensity contains the value 0xFE.\n             *\n             * A value of null shall indicate that this primary is not available.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8.4\n             */\n            primary1Intensity: OptionalFixedAttribute(0x13, TlvNullable(TlvUInt8)),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary2X: OptionalFixedAttribute(0x15, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary2Y: OptionalFixedAttribute(0x16, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary2Intensity: OptionalFixedAttribute(0x17, TlvNullable(TlvUInt8)),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary3X: OptionalFixedAttribute(0x19, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary3Y: OptionalFixedAttribute(0x1a, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.8\n             */\n            primary3Intensity: OptionalFixedAttribute(0x1b, TlvNullable(TlvUInt8)),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary4X: OptionalFixedAttribute(0x20, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary4Y: OptionalFixedAttribute(0x21, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary4Intensity: OptionalFixedAttribute(0x22, TlvNullable(TlvUInt8)),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary5X: OptionalFixedAttribute(0x24, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary5Y: OptionalFixedAttribute(0x25, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary5Intensity: OptionalFixedAttribute(0x26, TlvNullable(TlvUInt8)),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary6X: OptionalFixedAttribute(0x28, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary6Y: OptionalFixedAttribute(0x29, TlvUInt16.bound({ max: 65279 })),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.9\n             */\n            primary6Intensity: OptionalFixedAttribute(0x2a, TlvNullable(TlvUInt8)),\n\n            /**\n             * The WhitePointX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color\n             * Space, of the current white point of the device.\n             *\n             * The value of x shall be related to the WhitePointX attribute by the relationship x = WhitePointX / 65536\n             * (WhitePointX in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10.1\n             */\n            whitePointX: OptionalWritableAttribute(\n                0x30,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The WhitePointY attribute contains the normalized chromaticity value y, as defined in the CIE xyY\n             *\n             * Color Space, of the current white point of the device.\n             *\n             * The value of y shall be related to the WhitePointY attribute by the relationship y = WhitePointY / 65536\n             * (WhitePointY in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10.2\n             */\n            whitePointY: OptionalWritableAttribute(\n                0x31,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The ColorPointRX attribute contains the normalized chromaticity value x, as defined in the CIE xyY Color\n             * Space, of the red color point of the device.\n             *\n             * The value of x shall be related to the ColorPointRX attribute by the relationship x = ColorPointRX /\n             * 65536 (ColorPointRX in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10.3\n             */\n            colorPointRx: OptionalWritableAttribute(\n                0x32,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The ColorPointRY attribute contains the normalized chromaticity value y, as defined in the CIE xyY Color\n             * Space, of the red color point of the device.\n             *\n             * The value of y shall be related to the ColorPointRY attribute by the relationship y = ColorPointRY /\n             * 65536 (ColorPointRY in the range 0 to 65279 inclusive)\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10.4\n             */\n            colorPointRy: OptionalWritableAttribute(\n                0x33,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The ColorPointRIntensity attribute contains a representation of the relative intensity of the red color\n             * point as defined in the Dimming Light Curve in the Ballast Configuration cluster (see Ballast\n             * Configuration Cluster), normalized such that the color point with the highest relative intensity\n             * contains the value 0xFE.\n             *\n             * A value of null shall indicate an invalid value.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10.5\n             */\n            colorPointRIntensity: OptionalWritableAttribute(\n                0x34,\n                TlvNullable(TlvUInt8),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointGx: OptionalWritableAttribute(\n                0x36,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointGy: OptionalWritableAttribute(\n                0x37,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointGIntensity: OptionalWritableAttribute(\n                0x38,\n                TlvNullable(TlvUInt8),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointBx: OptionalWritableAttribute(\n                0x3a,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointBy: OptionalWritableAttribute(\n                0x3b,\n                TlvUInt16.bound({ max: 65279 }),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.10\n             */\n            colorPointBIntensity: OptionalWritableAttribute(\n                0x3c,\n                TlvNullable(TlvUInt8),\n                { writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The EnhancedColorMode attribute specifies which attributes are currently determining the color of the\n             * device, as detailed in Values of the EnhancedColorMode Attribute.\n             *\n             * ### Table 11. Values of the EnhancedColorMode Attribute\n             *\n             * To provide compatibility with standard ZCL, the original ColorMode attribute shall indicate \u2018CurrentHue\n             * and CurrentSaturation\u2019 when the light uses the EnhancedCurrentHue attribute. If the ColorMode attribute\n             * is changed, e.g., due to one of the standard Color Control cluster commands defined in the ZCL, its new\n             * value shall be copied to the EnhancedColorMode attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.13\n             */\n            enhancedColorMode: Attribute(\n                0x4001,\n                TlvEnum<EnhancedColorMode>(),\n                { scene: true, persistent: true, default: EnhancedColorMode.CurrentXAndCurrentY }\n            ),\n\n            /**\n             * Bits 0-4 of the ColorCapabilities attribute shall have the same values as the corresponding bits of the\n             * FeatureMap attribute. All other bits in ColorCapabilities shall be 0.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2.7.19\n             */\n            colorCapabilities: Attribute(0x400a, TlvBitmap(TlvUInt16, ColorCapabilities))\n        },\n\n        /**\n         * This metadata controls which ColorControlCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { hueSaturation: true }, component: HueSaturationComponent },\n            { flags: { xy: true }, component: XyComponent },\n            { flags: { colorTemperature: true }, component: ColorTemperatureComponent },\n            { flags: { enhancedHue: true }, component: EnhancedHueComponent },\n            { flags: { colorLoop: true }, component: ColorLoopComponent },\n            { flags: { hueSaturation: true }, component: HueSaturationOrXyOrColorTemperatureComponent },\n            { flags: { xy: true }, component: HueSaturationOrXyOrColorTemperatureComponent },\n            { flags: { colorTemperature: true }, component: HueSaturationOrXyOrColorTemperatureComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * ColorControlCluster supports optional features that you can enable with the ColorControlCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 3.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const HS = { hueSaturation: true };\n    const XY = { xy: true };\n    const CT = { colorTemperature: true };\n    const EHUE = { enhancedHue: true };\n    const CL = { colorLoop: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            currentHue: MutableCluster.AsConditional(\n                HueSaturationComponent.attributes.currentHue,\n                { mandatoryIf: [HS] }\n            ),\n            currentSaturation: MutableCluster.AsConditional(\n                HueSaturationComponent.attributes.currentSaturation,\n                { mandatoryIf: [HS] }\n            ),\n            currentX: MutableCluster.AsConditional(XyComponent.attributes.currentX, { mandatoryIf: [XY] }),\n            currentY: MutableCluster.AsConditional(XyComponent.attributes.currentY, { mandatoryIf: [XY] }),\n            colorTemperatureMireds: MutableCluster.AsConditional(\n                ColorTemperatureComponent.attributes.colorTemperatureMireds,\n                { mandatoryIf: [CT] }\n            ),\n            enhancedCurrentHue: MutableCluster.AsConditional(\n                EnhancedHueComponent.attributes.enhancedCurrentHue,\n                { mandatoryIf: [EHUE] }\n            ),\n            colorLoopActive: MutableCluster.AsConditional(\n                ColorLoopComponent.attributes.colorLoopActive,\n                { mandatoryIf: [CL] }\n            ),\n            colorLoopDirection: MutableCluster.AsConditional(\n                ColorLoopComponent.attributes.colorLoopDirection,\n                { mandatoryIf: [CL] }\n            ),\n            colorLoopTime: MutableCluster.AsConditional(\n                ColorLoopComponent.attributes.colorLoopTime,\n                { mandatoryIf: [CL] }\n            ),\n            colorLoopStartEnhancedHue: MutableCluster.AsConditional(\n                ColorLoopComponent.attributes.colorLoopStartEnhancedHue,\n                { mandatoryIf: [CL] }\n            ),\n            colorLoopStoredEnhancedHue: MutableCluster.AsConditional(\n                ColorLoopComponent.attributes.colorLoopStoredEnhancedHue,\n                { mandatoryIf: [CL] }\n            ),\n            colorTempPhysicalMinMireds: MutableCluster.AsConditional(\n                ColorTemperatureComponent.attributes.colorTempPhysicalMinMireds,\n                { mandatoryIf: [CT] }\n            ),\n            colorTempPhysicalMaxMireds: MutableCluster.AsConditional(\n                ColorTemperatureComponent.attributes.colorTempPhysicalMaxMireds,\n                { mandatoryIf: [CT] }\n            ),\n            coupleColorTempToLevelMinMireds: MutableCluster.AsConditional(\n                ColorTemperatureComponent.attributes.coupleColorTempToLevelMinMireds,\n                { optionalIf: [CT] }\n            ),\n            startUpColorTemperatureMireds: MutableCluster.AsConditional(\n                ColorTemperatureComponent.attributes.startUpColorTemperatureMireds,\n                { optionalIf: [CT] }\n            )\n        },\n\n        commands: {\n            moveToHue: MutableCluster.AsConditional(HueSaturationComponent.commands.moveToHue, { mandatoryIf: [HS] }),\n            moveHue: MutableCluster.AsConditional(HueSaturationComponent.commands.moveHue, { mandatoryIf: [HS] }),\n            stepHue: MutableCluster.AsConditional(HueSaturationComponent.commands.stepHue, { mandatoryIf: [HS] }),\n            moveToSaturation: MutableCluster.AsConditional(\n                HueSaturationComponent.commands.moveToSaturation,\n                { mandatoryIf: [HS] }\n            ),\n            moveSaturation: MutableCluster.AsConditional(\n                HueSaturationComponent.commands.moveSaturation,\n                { mandatoryIf: [HS] }\n            ),\n            stepSaturation: MutableCluster.AsConditional(\n                HueSaturationComponent.commands.stepSaturation,\n                { mandatoryIf: [HS] }\n            ),\n            moveToHueAndSaturation: MutableCluster.AsConditional(\n                HueSaturationComponent.commands.moveToHueAndSaturation,\n                { mandatoryIf: [HS] }\n            ),\n            moveToColor: MutableCluster.AsConditional(XyComponent.commands.moveToColor, { mandatoryIf: [XY] }),\n            moveColor: MutableCluster.AsConditional(XyComponent.commands.moveColor, { mandatoryIf: [XY] }),\n            stepColor: MutableCluster.AsConditional(XyComponent.commands.stepColor, { mandatoryIf: [XY] }),\n            moveToColorTemperature: MutableCluster.AsConditional(\n                ColorTemperatureComponent.commands.moveToColorTemperature,\n                { mandatoryIf: [CT] }\n            ),\n            enhancedMoveToHue: MutableCluster.AsConditional(\n                EnhancedHueComponent.commands.enhancedMoveToHue,\n                { mandatoryIf: [EHUE] }\n            ),\n            enhancedMoveHue: MutableCluster.AsConditional(\n                EnhancedHueComponent.commands.enhancedMoveHue,\n                { mandatoryIf: [EHUE] }\n            ),\n            enhancedStepHue: MutableCluster.AsConditional(\n                EnhancedHueComponent.commands.enhancedStepHue,\n                { mandatoryIf: [EHUE] }\n            ),\n            enhancedMoveToHueAndSaturation: MutableCluster.AsConditional(\n                EnhancedHueComponent.commands.enhancedMoveToHueAndSaturation,\n                { mandatoryIf: [EHUE] }\n            ),\n            colorLoopSet: MutableCluster.AsConditional(ColorLoopComponent.commands.colorLoopSet, { mandatoryIf: [CL] }),\n            stopMoveStep: MutableCluster.AsConditional(\n                HueSaturationOrXyOrColorTemperatureComponent.commands.stopMoveStep,\n                { mandatoryIf: [HS, XY, CT] }\n            ),\n            moveColorTemperature: MutableCluster.AsConditional(\n                ColorTemperatureComponent.commands.moveColorTemperature,\n                { mandatoryIf: [CT] }\n            ),\n            stepColorTemperature: MutableCluster.AsConditional(\n                ColorTemperatureComponent.commands.stepColorTemperature,\n                { mandatoryIf: [CT] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all ColorControl features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ColorControlCluster = ColorControl.Cluster;\nexport const ColorControlCluster = ColorControl.Cluster;\nClusterRegistry.register(ColorControl.Complete);\n"],
  "mappings": "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",
  "names": ["ColorControl", "Feature", "Direction", "MoveMode", "StepMode", "ColorLoopActive", "ColorLoopDirection", "Action", "ColorLoopSetDirection", "DriftCompensation", "ColorMode", "EnhancedColorMode"]
}
