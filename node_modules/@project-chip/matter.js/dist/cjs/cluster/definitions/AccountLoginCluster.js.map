{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/AccountLoginCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command, AccessLevel, TlvNoResponse, OptionalEvent, EventPriority } from \"../Cluster.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNodeId } from \"../../datatype/NodeId.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace AccountLogin {\n    /**\n     * Input to the AccountLogin getSetupPin command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.1\n     */\n    export const TlvGetSetupPinRequest = TlvObject({\n        /**\n         * This field shall specify the client\u2019s Temporary Account Identifier. The length of this field shall be at\n         * least 16 characters to protect the account holder against password guessing attacks.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.1.1\n         */\n        tempAccountIdentifier: TlvField(0, TlvString.bound({ minLength: 16, maxLength: 100 }))\n    });\n\n    /**\n     * Input to the AccountLogin getSetupPin command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.1\n     */\n    export interface GetSetupPinRequest extends TypeFromSchema<typeof TlvGetSetupPinRequest> {}\n\n    /**\n     * This message is sent in response to the GetSetupPIN command, and contains the Setup PIN code, or null when the\n     * account identified in the request does not match the active account of the running Content App.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.2\n     */\n    export const TlvGetSetupPinResponse = TlvObject({\n        /**\n         * This field shall provide the setup PIN code as a text string at least 8 characters in length or empty string\n         * to indicate that the accounts do not match.\n         *\n         * NOTE\n         *\n         * Newer cluster clients should be aware that AccountLogin cluster version 1 specified an 11 digit minimum\n         * length.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.2.1\n         */\n        setupPin: TlvField(0, TlvString)\n    });\n\n    /**\n     * This message is sent in response to the GetSetupPIN command, and contains the Setup PIN code, or null when the\n     * account identified in the request does not match the active account of the running Content App.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.2\n     */\n    export interface GetSetupPinResponse extends TypeFromSchema<typeof TlvGetSetupPinResponse> {}\n\n    /**\n     * Input to the AccountLogin login command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3\n     */\n    export const TlvLoginRequest = TlvObject({\n        /**\n         * This field shall specify the client\u2019s temporary account identifier.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3.1\n         */\n        tempAccountIdentifier: TlvField(0, TlvString.bound({ minLength: 16, maxLength: 100 })),\n\n        /**\n         * This field shall provide the setup PIN code as a text string at least 8 characters in length.\n         *\n         * NOTE\n         *\n         * Newer cluster clients should be aware that AccountLogin cluster version 1 specified an 11 digit minimum\n         * length.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3.2\n         */\n        setupPin: TlvField(1, TlvString.bound({ minLength: 8 })),\n\n        /**\n         * This optional field shall provide the Node ID of the Client. This field can be used by the Content App to\n         * keep track of Nodes which currently have access to it.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3.3\n         */\n        node: TlvOptionalField(2, TlvNodeId)\n    });\n\n    /**\n     * Input to the AccountLogin login command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3\n     */\n    export interface LoginRequest extends TypeFromSchema<typeof TlvLoginRequest> {}\n\n    /**\n     * Input to the AccountLogin logout command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.4\n     */\n    export const TlvLogoutRequest = TlvObject({\n        /**\n         * This optional field shall provide the Node ID of the Client. This field can be used by the Content\n         *\n         * App to keep track of Nodes which currently have access to it.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.4.1\n         */\n        node: TlvOptionalField(0, TlvNodeId)\n    });\n\n    /**\n     * Input to the AccountLogin logout command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.4\n     */\n    export interface LogoutRequest extends TypeFromSchema<typeof TlvLogoutRequest> {}\n\n    /**\n     * Body of the AccountLogin loggedOut event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.5.1\n     */\n    export const TlvLoggedOutEvent = TlvObject({\n        /**\n         * This field shall provide the Node ID corresponding to the user account that has logged out, if that Node ID\n         * is available. If it is NOT available, this field shall NOT be present in the event.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.5.1.1\n         */\n        node: TlvOptionalField(0, TlvNodeId)\n    });\n\n    /**\n     * Body of the AccountLogin loggedOut event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.5.1\n     */\n    export interface LoggedOutEvent extends TypeFromSchema<typeof TlvLoggedOutEvent> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x50e,\n        name: \"AccountLogin\",\n        revision: 2,\n\n        commands: {\n            /**\n             * The purpose of this command is to determine if the active user account of the given Content App matches\n             * the active user account of a given Commissionee, and when it does, return a Setup PIN code which can be\n             * used for password-authenticated session establishment (PASE) with the Commissionee.\n             *\n             * For example, a Video Player with a Content App Platform may invoke this command on one of its Content\n             * App endpoints to facilitate commissioning of a Phone App made by the same vendor as the Content App. If\n             * the accounts match, then the Content App may return a setup code that can be used\n             *\n             * by the Video Player to commission the Phone App without requiring the user to physically input a setup\n             * code.\n             *\n             * The account match is determined by the Content App using a method which is outside the scope of this\n             * specification and will typically involve a central service which is in communication with both the\n             * Content App and the Commissionee. The GetSetupPIN command is needed in order to provide the\n             * Commissioner/Admin with a Setup PIN when this Commissioner/Admin is operated by a different vendor from\n             * the Content App.\n             *\n             * This method is used to facilitate Setup PIN exchange (for PASE) between Commissioner and Commissionee\n             * when the same user account is active on both nodes. With this method, the Content App satisfies proof of\n             * possession related to commissioning by requiring the same user account to be active on both Commissionee\n             * and Content App, while the Commissioner/Admin ensures user consent by prompting the user prior to\n             * invocation of the command.\n             *\n             * Upon receipt of this command, the Content App checks if the account associated with the Temporary\n             * Account Identifier sent by the client is the same account that is active on itself. If the accounts are\n             * the same, then the Content App returns the GetSetupPIN Response which includes a Setup PIN that may be\n             * used for PASE with the Commissionee.\n             *\n             * The Temporary Account Identifier for a Commissionee may be populated with the Rotating ID field of the\n             * client\u2019s commissionable node advertisement (see Rotating Device Identifier section in [MatterCore])\n             * encoded as an octet string where the octets of the Rotating Device Identifier are encoded as 2-character\n             * sequences by representing each octet\u2019s value as a 2-digit hexadecimal number, using uppercase letters.\n             *\n             * The Setup PIN is a character string so that it can accommodate different future formats, including\n             * alpha-numeric encodings. For a Commissionee it shall be populated with the Manual Pairing Code (see\n             * Manual Pairing Code section in [MatterCore]) encoded as a string (11 characters) or the Passcode portion\n             * of the Manual Pairing Code (when less than 11 characters) .\n             *\n             * The server shall implement rate limiting to prevent brute force attacks. No more than 10 unique requests\n             * in a 10 minute period shall be allowed; a command response status of FAILURE should sent for additional\n             * commands received within the 10 minute period. Because access to this command is limited to nodes with\n             * Admin-level access, and the user is prompted for consent prior to Commissioning, there are in place\n             * multiple obstacles to successfully mounting a brute force attack. A Content App that supports this\n             * command shall ensure that the Temporary Account Identifier used by its clients is not valid for more\n             * than 10 minutes.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.1\n             */\n            getSetupPin: Command(\n                0x0,\n                TlvGetSetupPinRequest,\n                0x1,\n                TlvGetSetupPinResponse,\n                { invokeAcl: AccessLevel.Administer, timed: true }\n            ),\n\n            /**\n             * The purpose of this command is to allow the Content App to assume the user account of a given\n             * Commissionee by leveraging the Setup PIN code input by the user during the commissioning process.\n             *\n             * For example, a Video Player with a Content App Platform may invoke this command on one of its Content\n             * App endpoints after the commissioning has completed of a Phone App made by the same vendor as the\n             * Content App. The Content App may determine whether the Temporary Account Identifier maps to an account\n             * with a corresponding Setup PIN and, if so, it may automatically login to the account for the\n             * corresponding user. The end result is that a user performs commissioning of a Phone App to a Video\n             * Player by inputting the Setup PIN for the Phone App into the Video Player UX. Once commissioning has\n             * completed, the Video Player invokes this command to allow the corresponding Content App to assume the\n             * same user account as the Phone App.\n             *\n             * The verification of Setup PIN for the given Temporary Account Identifier is determined by the Content\n             * App using a method which is outside the scope of this specification and will typically involve a central\n             * service which is in communication with both the Content App and the Commissionee. Implementations of\n             * such a service should impose aggressive time outs for any mapping of Temporary Account Identifier to\n             * Setup PIN in order to prevent accidental login due to delayed invocation.\n             *\n             * Upon receipt, the Content App checks if the account associated with the client\u2019s Temp Account Identifier\n             * has a current active Setup PIN with the given value. If the Setup PIN is valid for the user account\n             * associated with the Temp Account Identifier, then the Content App may make that user account active.\n             *\n             * The Temporary Account Identifier for a Commissionee may be populated with the Rotating ID field of the\n             * client\u2019s commissionable node advertisement encoded as an octet string where the octets of the Rotating\n             * Device Identifier are encoded as 2-character sequences by representing each octet\u2019s value as a 2-digit\n             * hexadecimal number, using uppercase letters.\n             *\n             * The Setup PIN for a Commissionee may be populated with the Manual Pairing Code encoded as a string of\n             * decimal numbers (11 characters) or the Passcode portion of the Manual Pairing Code encoded as a string\n             * of decimal numbers (8 characters) .\n             *\n             * The server shall implement rate limiting to prevent brute force attacks. No more than 10 unique requests\n             * in a 10 minute period shall be allowed; a command response status of FAILURE should sent for additional\n             * commands received within the 10 minute period. Because access to this command is limited to nodes with\n             * Admin-level access, and the user is involved when obtaining the SetupPIN, there are in place multiple\n             * obstacles to successfully mounting a brute force attack. A Content App that supports this command shall\n             * ensure that the Temporary Account Identifier used by its clients is not valid for more than 10 minutes.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.3\n             */\n            login: Command(\n                0x2,\n                TlvLoginRequest,\n                0x2,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer, timed: true }\n            ),\n\n            /**\n             * The purpose of this command is to instruct the Content App to clear the current user account. This\n             * command SHOULD be used by clients of a Content App to indicate the end of a user session.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.4.4\n             */\n            logout: Command(0x3, TlvLogoutRequest, 0x3, TlvNoResponse, { timed: true })\n        },\n\n        events: {\n            /**\n             * This event can be used by the Content App to indicate that the current user has logged out. In response\n             * to this event, the Fabric Admin shall remove access to this Content App by the specified Node. If no\n             * Node is provided, then the Fabric Admin shall remove access to all non-Admin Nodes.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2.5.1\n             */\n            loggedOut: OptionalEvent(\n                0x0,\n                EventPriority.Critical,\n                TlvLoggedOutEvent,\n                { readAcl: AccessLevel.Administer }\n            )\n        }\n    });\n\n    /**\n     * This cluster provides commands that facilitate user account login on a Content App or a node. For example, a\n     * Content App running on a Video Player device, which is represented as an endpoint (see Device Type Library\n     * document), can use this cluster to help make the user account on the Content App match the user account on the\n     * Client.\n     *\n     * Often a fabric administrator will facilitate commissioning of a Client (such as a Casting Video Client), and\n     * invoke commands on the AccountLogin cluster on the Content App associated with that client. Specifically:\n     *\n     *   1. GetSetupPIN in order to attempt to obtain the Passcode for commissioning.\n     *\n     *   2. Login in order to let the Content App know that commissioning has completed. The Content App can use\n     *      information provided in this command in order to determine the user account associated with the client, and\n     *      potentially assume that user account.\n     *\n     *   3. Logout in order to let the Content App know that client access has been removed, and potentially clear the\n     *      current user account.\n     *\n     * The cluster server for this cluster may be supported on each endpoint that represents a Content App on a Video\n     * Player device.\n     *\n     * See Device Type Library document for details of how a Content App, represented as an endpoint on\n     *\n     * the Video Player device, may implement the cluster server for this cluster to simplify account login for its\n     * users.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type AccountLoginCluster = AccountLogin.Cluster;\nexport const AccountLoginCluster = AccountLogin.Cluster;\nClusterRegistry.register(AccountLogin.Complete);\n"],
  "mappings": "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",
  "names": ["AccountLogin"]
}
