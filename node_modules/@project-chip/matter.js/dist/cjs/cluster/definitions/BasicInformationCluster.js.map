{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/BasicInformationCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    FixedAttribute,\n    WritableAttribute,\n    AccessLevel,\n    OptionalFixedAttribute,\n    OptionalWritableAttribute,\n    OptionalAttribute,\n    Event,\n    EventPriority,\n    OptionalEvent\n} from \"../Cluster.js\";\nimport { TlvUInt16, TlvUInt32, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvVendorId } from \"../../datatype/VendorId.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace BasicInformation {\n    /**\n     * This structure provides constant values related to overall global capabilities of this Node, that are not\n     * cluster-specific.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.4\n     */\n    export const TlvCapabilityMinima = TlvObject({\n        /**\n         * This field shall indicate the actual minimum number of concurrent CASE sessions that are supported per\n         * fabric.\n         *\n         * This value shall NOT be smaller than the required minimum indicated in Section 4.14.2.8, \u201CMinimal Number of\n         * CASE Sessions\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.4.1\n         */\n        caseSessionsPerFabric: TlvField(0, TlvUInt16.bound({ min: 3 })),\n\n        /**\n         * This field shall indicate the actual minimum number of concurrent subscriptions supported per fabric.\n         *\n         * This value shall NOT be smaller than the required minimum indicated in Section 8.5.1, \u201CSubscribe\n         * Transaction\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.4.2\n         */\n        subscriptionsPerFabric: TlvField(1, TlvUInt16.bound({ min: 3 }))\n    });\n\n    /**\n     * This structure provides constant values related to overall global capabilities of this Node, that are not\n     * cluster-specific.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.4\n     */\n    export interface CapabilityMinima extends TypeFromSchema<typeof TlvCapabilityMinima> {}\n\n    /**\n     * The data type of ProductFinishEnum is derived from enum8.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.1\n     */\n    export enum ProductFinish {\n        /**\n         * Product has some other finish not listed below.\n         */\n        Other = 0,\n\n        /**\n         * Product has a matte finish.\n         */\n        Matte = 1,\n\n        /**\n         * Product has a satin finish.\n         */\n        Satin = 2,\n\n        /**\n         * Product has a polished or shiny finish.\n         */\n        Polished = 3,\n\n        /**\n         * Product has a rugged finish.\n         */\n        Rugged = 4,\n\n        /**\n         * Product has a fabric finish.\n         */\n        Fabric = 5\n    }\n\n    /**\n     * The data type of ColorEnum is derived from enum8.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.2\n     */\n    export enum Color {\n        /**\n         * Approximately RGB #000000.\n         */\n        Black = 0,\n\n        /**\n         * Approximately RGB #000080.\n         */\n        Navy = 1,\n\n        /**\n         * Approximately RGB #008000.\n         */\n        Green = 2,\n\n        /**\n         * Approximately RGB #008080.\n         */\n        Teal = 3,\n\n        /**\n         * Approximately RGB #800080.\n         */\n        Maroon = 4,\n\n        /**\n         * Approximately RGB #800080.\n         */\n        Purple = 5,\n\n        /**\n         * Approximately RGB #808000.\n         */\n        Olive = 6,\n\n        /**\n         * Approximately RGB #808080.\n         */\n        Gray = 7,\n\n        /**\n         * Approximately RGB #0000FF.\n         */\n        Blue = 8,\n\n        /**\n         * Approximately RGB #00FF00.\n         */\n        Lime = 9,\n\n        /**\n         * Approximately RGB #00FFFF.\n         */\n        Aqua = 10,\n\n        /**\n         * Approximately RGB #FF0000.\n         */\n        Red = 11,\n\n        /**\n         * Approximately RGB #FF00FF.\n         */\n        Fuchsia = 12,\n\n        /**\n         * Approximately RGB #FFFF00.\n         */\n        Yellow = 13,\n\n        /**\n         * Approximately RGB #FFFFFF.\n         */\n        White = 14,\n\n        /**\n         * Typical hardware \"Nickel\" color.\n         */\n        Nickel = 15,\n\n        /**\n         * Typical hardware \"Chrome\" color.\n         */\n        Chrome = 16,\n\n        /**\n         * Typical hardware \"Brass\" color.\n         */\n        Brass = 17,\n\n        /**\n         * Typical hardware \"Copper\" color.\n         */\n        Copper = 18,\n\n        /**\n         * Typical hardware \"Silver\" color.\n         */\n        Silver = 19,\n\n        /**\n         * Typical hardware \"Gold\" color.\n         */\n        Gold = 20\n    }\n\n    /**\n     * This structure provides a description of the product\u2019s appearance.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.3\n     */\n    export const TlvProductAppearance = TlvObject({\n        /**\n         * This field shall indicate the visible finish of the product.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.3.1\n         */\n        finish: TlvField(0, TlvEnum<ProductFinish>()),\n\n        /**\n         * This field indicates the representative color of the visible parts of the product. If the product has no\n         * representative color, the field shall be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.3.2\n         */\n        primaryColor: TlvField(1, TlvNullable(TlvEnum<Color>()))\n    });\n\n    /**\n     * This structure provides a description of the product\u2019s appearance.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.4.3\n     */\n    export interface ProductAppearance extends TypeFromSchema<typeof TlvProductAppearance> {}\n\n    /**\n     * Body of the BasicInformation startUp event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.1\n     */\n    export const TlvStartUpEvent = TlvObject({\n        /**\n         * This field shall be set to the same value as the one available in the SoftwareVersion attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.1.1\n         */\n        softwareVersion: TlvField(0, TlvUInt32)\n    });\n\n    /**\n     * Body of the BasicInformation startUp event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.1\n     */\n    export interface StartUpEvent extends TypeFromSchema<typeof TlvStartUpEvent> {}\n\n    /**\n     * Body of the BasicInformation leave event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.3\n     */\n    export const TlvLeaveEvent = TlvObject({\n        /**\n         * This field shall contain the local Fabric Index of the fabric which the node is about to leave.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.3.1\n         */\n        fabricIndex: TlvField(0, TlvFabricIndex)\n    });\n\n    /**\n     * Body of the BasicInformation leave event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.3\n     */\n    export interface LeaveEvent extends TypeFromSchema<typeof TlvLeaveEvent> {}\n\n    /**\n     * Body of the BasicInformation reachableChanged event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.4\n     */\n    export const TlvReachableChangedEvent = TlvObject({\n        /**\n         * This field shall indicate the value of the Reachable attribute after it was changed.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.4.1\n         */\n        reachableNewValue: TlvField(0, TlvBoolean)\n    });\n\n    /**\n     * Body of the BasicInformation reachableChanged event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.4\n     */\n    export interface ReachableChangedEvent extends TypeFromSchema<typeof TlvReachableChangedEvent> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x28,\n        name: \"BasicInformation\",\n        revision: 3,\n\n        attributes: {\n            /**\n             * This attribute shall be set to the revision number of the Data Model against which the Node is\n             * certified. The value of this attribute shall be one of the valid values listed in Section 7.1.1,\n             * \u201CRevision History\u201D.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.1\n             */\n            dataModelRevision: FixedAttribute(0x0, TlvUInt16),\n\n            /**\n             * This attribute shall specify a human readable (displayable) name of the vendor for the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.2\n             */\n            vendorName: FixedAttribute(0x1, TlvString.bound({ maxLength: 32 })),\n\n            /**\n             * This attribute shall specify the Vendor ID.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.3\n             */\n            vendorId: FixedAttribute(0x2, TlvVendorId),\n\n            /**\n             * This attribute shall specify a human readable (displayable) name of the model for the Node such as the\n             * model number (or other identifier) assigned by the vendor.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.4\n             */\n            productName: FixedAttribute(0x3, TlvString.bound({ maxLength: 32 })),\n\n            /**\n             * This attribute shall specify the Product ID assigned by the vendor that is unique to the specific\n             * product of the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.5\n             */\n            productId: FixedAttribute(0x4, TlvUInt16),\n\n            /**\n             * Indicates a user defined name for the Node. This attribute SHOULD be set during initial commissioning\n             * and may be updated by further reconfigurations.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.6\n             */\n            nodeLabel: WritableAttribute(\n                0x5,\n                TlvString.bound({ maxLength: 32 }),\n                { persistent: true, default: \"\", writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute shall be an ISO 3166-1 alpha-2 code to represent the country, dependent territory, or\n             * special area of geographic interest in which the Node is located at the time of the attribute being set.\n             * This attribute shall be set during initial commissioning (unless already set) and may be updated by\n             * further reconfigurations. This attribute may affect some regulatory aspects of the Node\u2019s operation,\n             * such as radio transmission power levels in given spectrum allocation bands if technologies where this is\n             * applicable are used. The Location\u2019s region code shall be interpreted in a case-insensitive manner. If\n             * the Node cannot understand the location code with which it was configured, or the location code has not\n             * yet been configured, it shall configure itself in a region- agnostic manner as determined by the vendor,\n             * avoiding region-specific assumptions as much as is practical. The special value XX shall indicate that\n             * region-agnostic mode is used.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.7\n             */\n            location: WritableAttribute(\n                0x6,\n                TlvString.bound({ length: 2 }),\n                { persistent: true, default: \"XX\", writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This attribute shall specify the version number of the hardware of the Node. The meaning of its value,\n             * and the versioning scheme, are vendor defined.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.8\n             */\n            hardwareVersion: FixedAttribute(0x7, TlvUInt16, { default: 0 }),\n\n            /**\n             * This attribute shall specify the version number of the hardware of the Node. The meaning of its value,\n             * and the versioning scheme, are vendor defined. The HardwareVersionString attribute shall be used to\n             * provide a more user-friendly value than that represented by the HardwareVersion attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.9\n             */\n            hardwareVersionString: FixedAttribute(0x8, TlvString.bound({ minLength: 1, maxLength: 64 })),\n\n            /**\n             * This attribute shall contain the current version number for the software running on this Node.\n             *\n             * The version number can be compared using a total ordering to determine if a version is logically newer\n             * than another one. A larger value of SoftwareVersion is newer than a lower value, from the perspective of\n             * software updates (see Section 11.20.3.3, \u201CAvailability of Software Images\u201D). Nodes may query this field\n             * to determine the currently running version of software on another given Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.10\n             */\n            softwareVersion: FixedAttribute(0x9, TlvUInt32, { default: 0 }),\n\n            /**\n             * This attribute shall contain a current human-readable representation for the software running on the\n             * Node. This version information may be conveyed to users. The maximum length of the SoftwareVersionString\n             * attribute is 64 bytes of UTF-8 characters. The contents SHOULD only use simple 7-bit ASCII alphanumeric\n             * and punctuation characters, so as to simplify the conveyance of the value to a variety of cultures.\n             *\n             * Examples of version strings include \"1.0\", \"1.2.3456\", \"1.2-2\", \"1.0b123\", \"1.2_3\".\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.11\n             */\n            softwareVersionString: FixedAttribute(0xa, TlvString.bound({ minLength: 1, maxLength: 64 })),\n\n            /**\n             * This attribute shall specify the date that the Node was manufactured. The first 8 characters shall\n             * specify the date of manufacture of the Node in international date notation according to ISO 8601, i.e.,\n             * YYYYMMDD, e.g., 20060814. The final 8 characters may include country, factory, line, shift or other\n             * related information at the option of the vendor. The format of this information is vendor defined.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.12\n             */\n            manufacturingDate: OptionalFixedAttribute(0xb, TlvString.bound({ minLength: 8, maxLength: 16 })),\n\n            /**\n             * This attribute shall specify a human-readable (displayable) vendor assigned part number for the Node\n             * whose meaning and numbering scheme is vendor defined.\n             *\n             * Multiple products (and hence PartNumbers) can share a ProductID. For instance, there may be different\n             * packaging (with different PartNumbers) for different regions; also different colors of a product might\n             * share the ProductID but may have a different PartNumber.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.13\n             */\n            partNumber: OptionalFixedAttribute(0xc, TlvString.bound({ maxLength: 32 })),\n\n            /**\n             * This attribute shall specify a link to a product specific web page. The syntax of the ProductURL\n             * attribute shall follow the syntax as specified in RFC 3986 [https://tools.ietf.org/html/rfc3986]. The\n             * specified URL SHOULD resolve to a maintained web page available for the lifetime of the product. The\n             * maximum length of the ProductUrl attribute is 256 ASCII characters.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.14\n             */\n            productUrl: OptionalFixedAttribute(0xd, TlvString.bound({ maxLength: 256 })),\n\n            /**\n             * This attribute shall specify a vendor specific human readable (displayable) product label. The\n             * ProductLabel attribute may be used to provide a more user-friendly value than that represented by the\n             * ProductName attribute. The ProductLabel attribute SHOULD NOT include the name of the vendor as defined\n             * within the VendorName attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.15\n             */\n            productLabel: OptionalFixedAttribute(0xe, TlvString.bound({ maxLength: 64 })),\n\n            /**\n             * This attribute shall specify a human readable (displayable) serial number.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.16\n             */\n            serialNumber: OptionalFixedAttribute(0xf, TlvString.bound({ maxLength: 32 })),\n\n            /**\n             * This attribute shall allow a local Node configuration to be disabled. When this attribute is set to True\n             * the Node shall disable the ability to configure the Node through an on-Node user interface. The value of\n             * the LocalConfigDisabled attribute shall NOT in any way modify, disable, or otherwise affect the user\u2019s\n             * ability to trigger a factory reset on the Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.17\n             */\n            localConfigDisabled: OptionalWritableAttribute(\n                0x10,\n                TlvBoolean,\n                { persistent: true, default: false, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute (when used) shall indicate whether the Node can be reached. For a native Node this is\n             * implicitly True (and its use is optional).\n             *\n             * Its main use case is in the derived Bridged Device Basic Information cluster where it is used to\n             * indicate whether the bridged device is reachable by the bridge over the non-native network.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.18\n             */\n            reachable: OptionalAttribute(0x11, TlvBoolean, { default: true }),\n\n            /**\n             * This attribute (when used) shall indicate a unique identifier for the device, which is constructed in a\n             * manufacturer specific manner.\n             *\n             * It may be constructed using a permanent device identifier (such as device MAC address) as basis. In\n             * order to prevent tracking,\n             *\n             *   \u2022 it SHOULD NOT be identical to (or easily derived from) such permanent device identifier\n             *\n             *   \u2022 it SHOULD be updated when the device is factory reset\n             *\n             *   \u2022 it shall not be identical to the SerialNumber attribute\n             *\n             *   \u2022 it shall not be printed on the product or delivered with the product The value does not need to be\n             *     human readable.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.19\n             */\n            uniqueId: OptionalFixedAttribute(0x12, TlvString.bound({ maxLength: 32 })),\n\n            /**\n             * This attribute shall provide the minimum guaranteed value for some system-wide resource capabilities\n             * that are not otherwise cluster-specific and do not appear elsewhere. This attribute may be used by\n             * clients to optimize communication with Nodes by allowing them to use more than the strict minimum values\n             * required by this specification, wherever available.\n             *\n             * The values supported by the server in reality may be larger than the values provided in this attribute,\n             * such as if a server is not resource-constrained at all. However, clients SHOULD only rely on the amounts\n             * provided in this attribute.\n             *\n             * Note that since the fixed values within this attribute may change over time, both increasing and\n             * decreasing, as software versions change for a given Node, clients SHOULD take care not to assume forever\n             * unchanging values and SHOULD NOT cache this value permanently at Commissioning time.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.20\n             */\n            capabilityMinima: FixedAttribute(\n                0x13,\n                TlvCapabilityMinima,\n                { default: { caseSessionsPerFabric: 3, subscriptionsPerFabric: 3 } }\n            ),\n\n            /**\n             * This attribute shall provide information about the appearance of the product, which could be useful to a\n             * user trying to locate or identify the node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.21\n             */\n            productAppearance: OptionalFixedAttribute(0x14, TlvProductAppearance),\n\n            /**\n             * This attribute shall contain the current version number for the specification version this Node was\n             * certified against. The version number can be compared using a total ordering to determine if a version\n             * is logically newer than another one. A larger value of SpecificationVersion is newer than a lower value.\n             *\n             * Nodes may query this field to determine the currently supported version of the specification on another\n             * given Node.\n             *\n             * The format of this number is segmented as its four component bytes. Bit positions for the fields are as\n             * follows:\n             *\n             * For example, a SpecificationVersion value of 0x0102AA00 is composed of 4 version components,\n             * representing a version 1.2.170.0.\n             *\n             * In the example above:\n             *\n             *   \u2022 Major version is the uppermost byte (0x01).\n             *\n             *   \u2022 Minor version is the following byte (0x02).\n             *\n             *   \u2022 Patch version is 170/0xAA.\n             *\n             *   \u2022 Reserved1 value is 0.\n             *\n             * The initial revision (1.0) of this specification (1.0) was 0x01000000. Matter Spring 2024 release (1.3)\n             * was 0x01030000.\n             *\n             * If the SpecificationVersion is absent or zero, such as in Basic Information cluster revisions prior to\n             * Revision 3, the specification version cannot be properly inferred unless other heuristics are employed.\n             *\n             * Comparison of SpecificationVersion shall always include the total value over 32 bits, without masking\n             * reserved parts.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.22\n             */\n            specificationVersion: FixedAttribute(0x15, TlvUInt32, { default: 0 }),\n\n            /**\n             * Indicates the maximum number of elements in a single InvokeRequests list (see Section 8.8.2, \u201CInvoke\n             * Request Action\u201D) that the Node is able to process. Note that since this attribute may change over time,\n             * both increasing and decreasing, as software versions change for a given Node, clients SHOULD take care\n             * not to assume forever unchanging values and SHOULD NOT\n             *\n             * cache this value permanently at Commissioning time.\n             *\n             * If the MaxPathsPerInvoke attribute is absent or zero, such as in Basic Information cluster revisions\n             * prior to Revision 3, clients shall assume a value of 1.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.5.23\n             */\n            maxPathsPerInvoke: FixedAttribute(0x16, TlvUInt16.bound({ min: 1 }), { default: 1 })\n        },\n\n        events: {\n            /**\n             * The StartUp event shall be generated by a Node as soon as reasonable after completing a boot or reboot\n             * process. The StartUp event SHOULD be the first Data Model event recorded by the Node after it completes\n             * a boot or reboot process.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.1\n             */\n            startUp: Event(0x0, EventPriority.Critical, TlvStartUpEvent),\n\n            /**\n             * The ShutDown event SHOULD be generated by a Node prior to any orderly shutdown sequence on a best-effort\n             * basis. When a ShutDown event is generated, it SHOULD be the last Data Model event recorded by the Node.\n             * This event SHOULD be delivered urgently to current subscribers on a best- effort basis. Any subsequent\n             * incoming interactions to the Node may be dropped until the completion of a future boot or reboot process.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.2\n             */\n            shutDown: OptionalEvent(0x1, EventPriority.Critical, TlvNoArguments),\n\n            /**\n             * The Leave event SHOULD be generated by a Node prior to permanently leaving a given Fabric, such as when\n             * the RemoveFabric command is invoked for a given fabric, or triggered by factory reset or some other\n             * manufacturer specific action to disable or reset the operational data in the Node. When a Leave event is\n             * generated, it SHOULD be assumed that the fabric recorded in the event is no longer usable, and\n             * subsequent interactions targeting that fabric will most likely fail.\n             *\n             * Upon receipt of Leave Event on a subscription, the receiving Node may update other nodes in the\n             *\n             * fabric by removing related bindings, access control list entries and other data referencing the leaving\n             * Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.3\n             */\n            leave: OptionalEvent(0x2, EventPriority.Info, TlvLeaveEvent),\n\n            /**\n             * This event shall be supported if and only if the Reachable attribute is supported.\n             *\n             * This event (when supported) shall be generated when there is a change in the Reachable attribute.\n             *\n             * Its main use case is in the derived Bridged Device Basic Information cluster.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.1.6.4\n             */\n            reachableChanged: OptionalEvent(0x3, EventPriority.Info, TlvReachableChangedEvent)\n        }\n    });\n\n    /**\n     * This cluster provides attributes and events for determining basic information about Nodes, which supports both\n     * Commissioning and operational determination of Node characteristics, such as Vendor ID, Product ID and serial\n     * number, which apply to the whole Node.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.1\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type BasicInformationCluster = BasicInformation.Cluster;\nexport const BasicInformationCluster = BasicInformation.Cluster;\nClusterRegistry.register(BasicInformation.Complete);\n"],
  "mappings": "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",
  "names": ["BasicInformation", "ProductFinish", "Color"]
}
