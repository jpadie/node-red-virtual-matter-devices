"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DishwasherAlarmCluster_exports = {};
__export(DishwasherAlarmCluster_exports, {
  DishwasherAlarm: () => DishwasherAlarm,
  DishwasherAlarmCluster: () => DishwasherAlarmCluster
});
module.exports = __toCommonJS(DishwasherAlarmCluster_exports);
var import_MutableCluster = require("../mutation/MutableCluster.js");
var import_Cluster = require("../Cluster.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_AlarmBaseCluster = require("./AlarmBaseCluster.js");
var import_BitmapSchema = require("../../schema/BitmapSchema.js");
var import_ClusterRegistry = require("../ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var DishwasherAlarm;
((DishwasherAlarm2) => {
  let Feature;
  ((Feature2) => {
    Feature2["Reset"] = "Reset";
  })(Feature = DishwasherAlarm2.Feature || (DishwasherAlarm2.Feature = {}));
  DishwasherAlarm2.Alarm = {
    /**
     * Water inflow is abnormal
     */
    inflowError: (0, import_BitmapSchema.BitFlag)(0),
    /**
     * Water draining is abnormal
     */
    drainError: (0, import_BitmapSchema.BitFlag)(1),
    /**
     * Door or door lock is abnormal
     */
    doorError: (0, import_BitmapSchema.BitFlag)(2),
    /**
     * Unable to reach normal temperature
     */
    tempTooLow: (0, import_BitmapSchema.BitFlag)(3),
    /**
     * Temperature is too high
     */
    tempTooHigh: (0, import_BitmapSchema.BitFlag)(4),
    /**
     * Water level is abnormal
     */
    waterLevelError: (0, import_BitmapSchema.BitFlag)(5)
  };
  DishwasherAlarm2.ResetComponent = import_MutableCluster.MutableCluster.Component({
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm
       * will be latched when set, and will not reset to inactive when the underlying condition which caused the
       * alarm is no longer present, and so requires an explicit reset using the Reset command.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.2
       */
      latch: (0, import_Cluster.FixedAttribute)(1, import_TlvNumber.TlvUInt32)
    },
    commands: {
      /**
       * This command resets active and latched alarms (if possible). Any generated Notify event shall contain
       * fields that represent the state of the server after the command has been processed.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.7.1
       */
      reset: (0, import_Cluster.Command)(0, import_AlarmBaseCluster.AlarmBase.TlvResetRequest, 0, import_Cluster.TlvNoResponse)
    }
  });
  DishwasherAlarm2.Base = import_MutableCluster.MutableCluster.Component({
    id: 93,
    name: "DishwasherAlarm",
    revision: 1,
    features: {
      /**
       * Reset
       *
       * This feature indicates that alarms can be reset via the Reset command.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.4.1
       */
      reset: (0, import_BitmapSchema.BitFlag)(0)
    },
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be
       * enabled.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.1
       */
      mask: (0, import_Cluster.Attribute)(0, import_TlvNumber.TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the
       * alarm is active, otherwise the alarm is inactive.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.3
       */
      state: (0, import_Cluster.Attribute)(2, import_TlvNumber.TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of
       * true means the alarm is supported, otherwise the alarm is not supported.
       *
       * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.4
       */
      supported: (0, import_Cluster.FixedAttribute)(3, import_TlvNumber.TlvUInt32)
    },
    commands: {
      /**
       * This command allows a client to request that an alarm be enabled or suppressed at the server.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.7.2
       */
      modifyEnabledAlarms: (0, import_Cluster.OptionalCommand)(1, import_AlarmBaseCluster.AlarmBase.TlvModifyEnabledAlarmsRequest, 1, import_Cluster.TlvNoResponse)
    },
    events: {
      /**
       * This event shall be generated when one or more alarms change state, and shall have these fields:
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.8.1
       */
      notify: (0, import_Cluster.Event)(0, import_Cluster.EventPriority.Info, import_AlarmBaseCluster.AlarmBase.TlvNotifyEvent)
    },
    /**
     * This metadata controls which DishwasherAlarmCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: import_MutableCluster.MutableCluster.Extensions({ flags: { reset: true }, component: DishwasherAlarm2.ResetComponent })
  });
  DishwasherAlarm2.ClusterInstance = (0, import_MutableCluster.MutableCluster)(DishwasherAlarm2.Base);
  DishwasherAlarm2.Cluster = DishwasherAlarm2.ClusterInstance;
  const RESET = { reset: true };
  DishwasherAlarm2.CompleteInstance = (0, import_MutableCluster.MutableCluster)({
    id: DishwasherAlarm2.Cluster.id,
    name: DishwasherAlarm2.Cluster.name,
    revision: DishwasherAlarm2.Cluster.revision,
    features: DishwasherAlarm2.Cluster.features,
    attributes: {
      ...DishwasherAlarm2.Cluster.attributes,
      latch: import_MutableCluster.MutableCluster.AsConditional(DishwasherAlarm2.ResetComponent.attributes.latch, { mandatoryIf: [RESET] })
    },
    commands: {
      ...DishwasherAlarm2.Cluster.commands,
      reset: import_MutableCluster.MutableCluster.AsConditional(DishwasherAlarm2.ResetComponent.commands.reset, { mandatoryIf: [RESET] })
    },
    events: DishwasherAlarm2.Cluster.events
  });
  DishwasherAlarm2.Complete = DishwasherAlarm2.CompleteInstance;
})(DishwasherAlarm || (DishwasherAlarm = {}));
const DishwasherAlarmCluster = DishwasherAlarm.Cluster;
import_ClusterRegistry.ClusterRegistry.register(DishwasherAlarm.Complete);
//# sourceMappingURL=DishwasherAlarmCluster.js.map
