{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/GroupKeyManagementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport {\n    WritableFabricScopedAttribute,\n    AccessLevel,\n    FabricScopedAttribute,\n    FixedAttribute,\n    Command,\n    TlvNoResponse\n} from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvGroupId } from \"../../datatype/GroupId.js\";\nimport { TlvUInt16, TlvEnum, TlvEpochUs } from \"../../tlv/TlvNumber.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace GroupKeyManagement {\n    /**\n     * These are optional features supported by GroupKeyManagementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.4\n     */\n    export enum Feature {\n        /**\n         * CacheAndSync (CS)\n         *\n         * The ability to support CacheAndSync security policy and MCSP.\n         */\n        CacheAndSync = \"CacheAndSync\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.3\n     */\n    export const TlvGroupKeyMap = TlvObject({\n        /**\n         * This field uniquely identifies the group within the scope of the given Fabric.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.3.1\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * This field references the set of group keys that generate operational group keys for use with this group, as\n         * specified in Section 4.16.3.5.1, \u201CGroup Key Set ID\u201D.\n         *\n         * A GroupKeyMapStruct shall NOT accept GroupKeySetID of 0, which is reserved for the IPK.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.3.2\n         */\n        groupKeySetId: TlvField(2, TlvUInt16.bound({ min: 1 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.3\n     */\n    export interface GroupKeyMap extends TypeFromSchema<typeof TlvGroupKeyMap> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.5\n     */\n    export const TlvGroupInfoMap = TlvObject({\n        /**\n         * This field uniquely identifies the group within the scope of the given Fabric.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.5.1\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * This field provides the list of Endpoint IDs on the Node to which messages to this group shall be forwarded.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.5.2\n         */\n        endpoints: TlvField(2, TlvArray(TlvEndpointNumber, { minLength: 1 })),\n\n        /**\n         * This field provides a name for the group. This field shall contain the last GroupName written for a given\n         * GroupId on any Endpoint via the Groups cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.5.3\n         */\n        groupName: TlvOptionalField(3, TlvString.bound({ maxLength: 16 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.5\n     */\n    export interface GroupInfoMap extends TypeFromSchema<typeof TlvGroupInfoMap> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.1\n     */\n    export enum GroupKeySecurityPolicy {\n        /**\n         * Message counter synchronization using trust-first\n         */\n        TrustFirst = 0,\n\n        /**\n         * Message counter synchronization using cache-and-sync\n         */\n        CacheAndSync = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.2\n     */\n    export enum GroupKeyMulticastPolicy {\n        /**\n         * Indicates filtering of multicast messages for a specific Group ID\n         *\n         * The 16-bit Group Identifier of the Multicast Address shall be the Group ID of the group.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.2.1\n         */\n        PerGroupId = 0,\n\n        /**\n         * Indicates not filtering of multicast messages\n         *\n         * The 16-bit Group Identifier of the Multicast Address shall be 0xFFFF.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.2.2\n         */\n        AllNodes = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4\n     */\n    export const TlvGroupKeySet = TlvObject({\n        /**\n         * This field shall provide the fabric-unique index for the associated group key set, as specified in Section\n         * 4.16.3.5.1, \u201CGroup Key Set ID\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.1\n         */\n        groupKeySetId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall provide the security policy for an operational group key set.\n         *\n         * When CacheAndSync is not supported in the FeatureMap of this cluster, any action attempting to set\n         * CacheAndSync in the GroupKeySecurityPolicy field shall fail with an INVALID_COMMAND error.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.2\n         */\n        groupKeySecurityPolicy: TlvField(1, TlvEnum<GroupKeySecurityPolicy>()),\n\n        /**\n         * This field, if not null, shall be the root credential used in the derivation of an operational group key for\n         * epoch slot 0 of the given group key set. If EpochKey0 is not null, EpochStartTime0 shall NOT be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.3\n         */\n        epochKey0: TlvField(2, TlvNullable(TlvByteString.bound({ length: 16 }))),\n\n        /**\n         * This field, if not null, shall define when EpochKey0 becomes valid as specified by Section 4.16.3, \u201CEpoch\n         * Keys\u201D. Units are absolute UTC time in microseconds encoded using the epoch-us representation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.4\n         */\n        epochStartTime0: TlvField(3, TlvNullable(TlvEpochUs)),\n\n        /**\n         * This field, if not null, shall be the root credential used in the derivation of an operational group\n         *\n         * key for epoch slot 1 of the given group key set. If EpochKey1 is not null, EpochStartTime1 shall NOT be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.5\n         */\n        epochKey1: TlvField(4, TlvNullable(TlvByteString.bound({ length: 16 }))),\n\n        /**\n         * This field, if not null, shall define when EpochKey1 becomes valid as specified by Section 4.16.3, \u201CEpoch\n         * Keys\u201D. Units are absolute UTC time in microseconds encoded using the epoch-us representation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.6\n         */\n        epochStartTime1: TlvField(5, TlvNullable(TlvEpochUs)),\n\n        /**\n         * This field, if not null, shall be the root credential used in the derivation of an operational group key for\n         * epoch slot 2 of the given group key set. If EpochKey2 is not null, EpochStartTime2 shall NOT be null.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.7\n         */\n        epochKey2: TlvField(6, TlvNullable(TlvByteString.bound({ length: 16 }))),\n\n        /**\n         * This field, if not null, shall define when EpochKey2 becomes valid as specified by Section 4.16.3, \u201CEpoch\n         * Keys\u201D. Units are absolute UTC time in microseconds encoded using the epoch-us representation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.8\n         */\n        epochStartTime2: TlvField(7, TlvNullable(TlvEpochUs)),\n\n        /**\n         * This field specifies how the IPv6 Multicast Address shall be formed for groups using this operational group\n         * key set.\n         *\n         * The PerGroupID method maximizes filtering of multicast messages, so that receiving nodes receive only\n         * multicast messages for groups to which they are subscribed.\n         *\n         * The AllNodes method minimizes the number of multicast addresses to which a receiver node needs to subscribe.\n         *\n         * NOTE\n         *\n         * Support for GroupKeyMulticastPolicy is provisional. Correct default behavior is that implied by value\n         * PerGroupID.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4.9\n         */\n        groupKeyMulticastPolicy: TlvOptionalField(8, TlvEnum<GroupKeyMulticastPolicy>())\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.5.4\n     */\n    export interface GroupKeySet extends TypeFromSchema<typeof TlvGroupKeySet> {}\n\n    /**\n     * Input to the GroupKeyManagement keySetWrite command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.1\n     */\n    export const TlvKeySetWriteRequest = TlvObject({ groupKeySet: TlvField(0, TlvGroupKeySet) });\n\n    /**\n     * Input to the GroupKeyManagement keySetWrite command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.1\n     */\n    export interface KeySetWriteRequest extends TypeFromSchema<typeof TlvKeySetWriteRequest> {}\n\n    /**\n     * Input to the GroupKeyManagement keySetRead command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.2\n     */\n    export const TlvKeySetReadRequest = TlvObject({ groupKeySetId: TlvField(0, TlvUInt16) });\n\n    /**\n     * Input to the GroupKeyManagement keySetRead command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.2\n     */\n    export interface KeySetReadRequest extends TypeFromSchema<typeof TlvKeySetReadRequest> {}\n\n    /**\n     * This command shall be generated in response to the KeySetRead command, if a valid Group Key Set was found. It\n     * shall contain the configuration of the requested Group Key Set, with the EpochKey0, EpochKey1 and EpochKey2 key\n     * contents replaced by null.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.3\n     */\n    export const TlvKeySetReadResponse = TlvObject({ groupKeySet: TlvField(0, TlvGroupKeySet) });\n\n    /**\n     * This command shall be generated in response to the KeySetRead command, if a valid Group Key Set was found. It\n     * shall contain the configuration of the requested Group Key Set, with the EpochKey0, EpochKey1 and EpochKey2 key\n     * contents replaced by null.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.3\n     */\n    export interface KeySetReadResponse extends TypeFromSchema<typeof TlvKeySetReadResponse> {}\n\n    /**\n     * Input to the GroupKeyManagement keySetRemove command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.4\n     */\n    export const TlvKeySetRemoveRequest = TlvObject({ groupKeySetId: TlvField(0, TlvUInt16) });\n\n    /**\n     * Input to the GroupKeyManagement keySetRemove command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.4\n     */\n    export interface KeySetRemoveRequest extends TypeFromSchema<typeof TlvKeySetRemoveRequest> {}\n\n    /**\n     * This command shall be generated in response to KeySetReadAllIndices and it shall contain the list of\n     * GroupKeySetID for all Group Key Sets associated with the scoped Fabric.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.6\n     */\n    export const TlvKeySetReadAllIndicesResponse = TlvObject({\n        /**\n         * This field references the set of group keys that generate operational group keys for use with the accessing\n         * fabric.\n         *\n         * Each entry in GroupKeySetIDs is a GroupKeySetID field.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.6.1\n         */\n        groupKeySetIDs: TlvField(0, TlvArray(TlvUInt16))\n    });\n\n    /**\n     * This command shall be generated in response to KeySetReadAllIndices and it shall contain the list of\n     * GroupKeySetID for all Group Key Sets associated with the scoped Fabric.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.6\n     */\n    export interface KeySetReadAllIndicesResponse extends TypeFromSchema<typeof TlvKeySetReadAllIndicesResponse> {}\n\n    /**\n     * These elements and properties are present in all GroupKeyManagement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x3f,\n        name: \"GroupKeyManagement\",\n        revision: 2,\n\n        features: {\n            /**\n             * CacheAndSync\n             *\n             * The ability to support CacheAndSync security policy and MCSP.\n             */\n            cacheAndSync: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * This attribute is a list of GroupKeyMapStruct entries. Each entry associates a logical Group Id with a\n             * particular group key set.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.6.1\n             */\n            groupKeyMap: WritableFabricScopedAttribute(\n                0x0,\n                TlvArray(TlvGroupKeyMap),\n                { persistent: true, default: [], writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute is a list of GroupInfoMapStruct entries. Each entry provides read-only information about\n             * how a given logical Group ID maps to a particular set of endpoints, and a name for the group. The\n             * content of this attribute reflects data managed via the Groups cluster (see AppClusters), and is in\n             * general terms referred to as the 'node-wide Group Table'.\n             *\n             * The GroupTable shall NOT contain any entry whose GroupInfoMapStruct has an empty Endpoints list. If a\n             * RemoveGroup or RemoveAllGroups command causes the removal of a group mapping from its last mapped\n             * endpoint, the entire GroupTable entry for that given GroupId shall be removed.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.6.2\n             */\n            groupTable: FabricScopedAttribute(0x1, TlvArray(TlvGroupInfoMap), { default: [] }),\n\n            /**\n             * Indicates the maximum number of groups that this node supports per fabric. The value of this attribute\n             * shall be set to be no less than the required minimum supported groups as specified in Group Limits. The\n             * length of the GroupKeyMap and GroupTable list attributes shall NOT exceed the value of the\n             * MaxGroupsPerFabric attribute multiplied by the number of supported fabrics.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.6.3\n             */\n            maxGroupsPerFabric: FixedAttribute(0x2, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the maximum number of group key sets this node supports per fabric. The value of this\n             * attribute shall be set according to the minimum number of group key sets to support as specified in\n             * Group Limits.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.6.4\n             */\n            maxGroupKeysPerFabric: FixedAttribute(0x3, TlvUInt16.bound({ min: 1 }), { default: 1 })\n        },\n\n        commands: {\n            /**\n             * This command is used by Administrators to set the state of a given Group Key Set, including atomically\n             * updating the state of all epoch keys.\n             *\n             * Effect on Receipt\n             *\n             * The following validations shall be done against the content of the GroupKeySet field:\n             *\n             *   \u2022 If the EpochKey0 field is null or its associated EpochStartTime0 field is null, then this command\n             *     shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If the EpochKey0 field\u2019s length is not exactly 16 bytes, then this command shall fail with a\n             *     CONSTRAINT_ERROR status code responded to the client.\n             *\n             *   \u2022 If the EpochStartTime0 is set to 0, then this command shall fail with an INVALID_COMMAND status code\n             *     responded to the client. Note that internally, a GroupKeySetStruct\u2019s EpochStartTime0 may be set to\n             *     zero, due to the behavior of the AddNOC command which synthesizes a GroupKeySetStruct (see\n             *     IPKValue). However, the value 0 is illegal in the GroupKeySet field sent by a client.\n             *\n             *   \u2022 If the EpochKey1 field is not null, then the EpochKey0 field shall NOT be null. Otherwise this\n             *     command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If the EpochKey1 field is not null, and the field\u2019s length is not exactly 16 bytes, then this\n             *     command shall fail with a CONSTRAINT_ERROR status code responded to the client.\n             *\n             *   \u2022 If the EpochKey1 field is not null, its associated EpochStartTime1 field shall NOT be null and shall\n             *     contain a later epoch start time than the epoch start time found in the EpochStartTime0 field.\n             *     Otherwise this command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If exactly one of the EpochKey1 or EpochStartTime1 is null, rather than both being null, or neither\n             *     being null, then this command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If the EpochKey2 field is not null, then the EpochKey1 and EpochKey0 fields shall NOT be null.\n             *     Otherwise this command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If the EpochKey2 field is not null, and the field\u2019s length is not exactly 16 bytes, then this\n             *     command shall fail with a CONSTRAINT_ERROR status code responded to the client.\n             *\n             *   \u2022 If the EpochKey2 field is not null, its associated EpochStartTime2 field shall NOT be null and shall\n             *     contain a later epoch start time than the epoch start time found in the EpochStartTime1 field.\n             *     Otherwise this command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             *   \u2022 If exactly one of the EpochKey2 or EpochStartTime2 is null, rather than both being null, or neither\n             *     being null, then this command shall fail with an INVALID_COMMAND status code responded to the client.\n             *\n             * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKeySetID as\n             * that provided in the GroupKeySet field, then the contents of that group key set shall be replaced. A\n             * replacement shall be done by executing the equivalent of entirely removing the previous Group Key Set\n             * with the given GroupKeySetID, followed by an addition of a Group Key Set with the provided\n             * configuration. Otherwise, if the GroupKeySetID did not match an existing entry, a new Group Key Set\n             * associated with the accessing fabric shall be created with the provided data. The Group Key Set shall be\n             * written to non-volatile storage.\n             *\n             * Upon completion, this command shall send a status code back to the initiator:\n             *\n             *   \u2022 If the Group Key Set was properly installed or updated on the Node, the status code shall be\n             *\n             * set to SUCCESS.\n             *\n             *   \u2022 If there are insufficient resources on the receiver to store an additional Group Key Set, the status\n             *     code shall be set to RESOURCE_EXHAUSTED (see group key limits);\n             *\n             *   \u2022 Otherwise, this status code shall be set to FAILURE.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.1\n             */\n            keySetWrite: Command(0x0, TlvKeySetWriteRequest, 0x0, TlvNoResponse, { invokeAcl: AccessLevel.Administer }),\n\n            /**\n             * This command is used by Administrators to read the state of a given Group Key Set.\n             *\n             * Effect on Receipt\n             *\n             * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKeySetID as\n             * that provided in the GroupKeySetID field, then the contents of that Group Key Set shall be sent in a\n             * KeySetReadResponse command, but with the EpochKey0, EpochKey1 and EpochKey2 fields replaced by null.\n             *\n             * Otherwise, if the GroupKeySetID does not refer to a Group Key Set associated with the accessing fabric,\n             * then this command shall fail with a NOT_FOUND status code.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.2\n             */\n            keySetRead: Command(\n                0x1,\n                TlvKeySetReadRequest,\n                0x2,\n                TlvKeySetReadResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command is used by Administrators to remove all state of a given Group Key Set.\n             *\n             * Effect on Receipt\n             *\n             * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKey\n             *\n             * SetID as that provided in the GroupKeySetID field, then the contents of that Group Key Set shall be\n             * removed, including all epoch keys it contains.\n             *\n             * If there exist any entries for the accessing fabric within the GroupKeyMap attribute that refer to the\n             * GroupKeySetID just removed, then these entries shall be removed from that list.\n             *\n             * This command shall fail with an INVALID_COMMAND status code back to the initiator if the GroupKeySetID\n             * being removed is 0, which is the Key Set associated with the Identity Protection Key (IPK). The only\n             * method to remove the IPK is usage of the RemoveFabric command or any operation which causes the\n             * equivalent of a RemoveFabric to occur by side-effect.\n             *\n             * This command shall send a SUCCESS status code back to the initiator on success, or NOT_FOUND if the\n             * GroupKeySetID requested did not exist.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.4\n             */\n            keySetRemove: Command(\n                0x3,\n                TlvKeySetRemoveRequest,\n                0x3,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command is used by Administrators to query a list of all Group Key Sets associated with the\n             * accessing fabric.\n             *\n             * NOTE Field 0 for this command is reserved and shall NOT be used.\n             *\n             * Effect on Receipt\n             *\n             * Upon receipt, this command shall iterate all stored GroupKeySetStruct associated with the accessing\n             * fabric and generate a KeySetReadAllIndicesResponse command containing the list of GroupKeySetID values\n             * from those structs.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.5\n             */\n            keySetReadAllIndices: Command(\n                0x4,\n                TlvNoArguments,\n                0x5,\n                TlvKeySetReadAllIndicesResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        },\n\n        /**\n         * This metadata controls which GroupKeyManagementCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions()\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * The Group Key Management cluster manages group keys for the node. The cluster is scoped to the node and is a\n     * singleton for the node. This cluster maintains a list of groups supported by the node. Each group list entry\n     * supports a single group, with a single group ID and single group key. Duplicate groups are not allowed in the\n     * list. Additions or removal of a group entry are performed via modifications of the list. Such modifications\n     * require Administer privilege.\n     *\n     * Each group entry includes a membership list of zero of more endpoints that are members of the group on the node.\n     * Modification of this membership list is done via the Groups cluster, which is scoped to an endpoint. Please see\n     * the System Model specification for more information on groups.\n     *\n     * GroupKeyManagementCluster supports optional features that you can enable with the\n     * GroupKeyManagementCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type GroupKeyManagementCluster = GroupKeyManagement.Cluster;\nexport const GroupKeyManagementCluster = GroupKeyManagement.Cluster;\nClusterRegistry.register(GroupKeyManagement.Complete);\n"],
  "mappings": "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",
  "names": ["GroupKeyManagement", "Feature", "GroupKeySecurityPolicy", "GroupKeyMulticastPolicy"]
}
