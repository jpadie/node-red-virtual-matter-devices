"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var RvcOperationalStateCluster_exports = {};
__export(RvcOperationalStateCluster_exports, {
  RvcOperationalState: () => RvcOperationalState,
  RvcOperationalStateCluster: () => RvcOperationalStateCluster
});
module.exports = __toCommonJS(RvcOperationalStateCluster_exports);
var import_MutableCluster = require("../mutation/MutableCluster.js");
var import_Cluster = require("../Cluster.js");
var import_TlvArray = require("../../tlv/TlvArray.js");
var import_TlvString = require("../../tlv/TlvString.js");
var import_TlvNullable = require("../../tlv/TlvNullable.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_OperationalStateCluster = require("./OperationalStateCluster.js");
var import_TlvNoArguments = require("../../tlv/TlvNoArguments.js");
var import_ClusterRegistry = require("../ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var RvcOperationalState;
((RvcOperationalState2) => {
  let OperationalState;
  ((OperationalState2) => {
    OperationalState2[OperationalState2["SeekingCharger"] = 64] = "SeekingCharger";
    OperationalState2[OperationalState2["Charging"] = 65] = "Charging";
    OperationalState2[OperationalState2["Docked"] = 66] = "Docked";
  })(OperationalState = RvcOperationalState2.OperationalState || (RvcOperationalState2.OperationalState = {}));
  let ErrorState;
  ((ErrorState2) => {
    ErrorState2[ErrorState2["FailedToFindChargingDock"] = 64] = "FailedToFindChargingDock";
    ErrorState2[ErrorState2["Stuck"] = 65] = "Stuck";
    ErrorState2[ErrorState2["DustBinMissing"] = 66] = "DustBinMissing";
    ErrorState2[ErrorState2["DustBinFull"] = 67] = "DustBinFull";
    ErrorState2[ErrorState2["WaterTankEmpty"] = 68] = "WaterTankEmpty";
    ErrorState2[ErrorState2["WaterTankMissing"] = 69] = "WaterTankMissing";
    ErrorState2[ErrorState2["WaterTankLidOpen"] = 70] = "WaterTankLidOpen";
    ErrorState2[ErrorState2["MopCleaningPadMissing"] = 71] = "MopCleaningPadMissing";
  })(ErrorState = RvcOperationalState2.ErrorState || (RvcOperationalState2.ErrorState = {}));
  RvcOperationalState2.ClusterInstance = (0, import_MutableCluster.MutableCluster)({
    id: 97,
    name: "RvcOperationalState",
    revision: 2,
    attributes: {
      /**
       * Indicates a list of names of different phases that the device can go through for the selected function
       * or mode. The list may not be in sequence order. For example in a washing machine this could include
       * items such as "pre-soak", "rinse", and "spin". These phases are manufacturer specific and may change
       * when a different function or mode is selected.
       *
       * A null value indicates that the device does not present phases during its operation. When this
       * attribute’s value is null, the CurrentPhase attribute shall also be set to null.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.1
       */
      phaseList: (0, import_Cluster.Attribute)(0, (0, import_TlvNullable.TlvNullable)((0, import_TlvArray.TlvArray)(import_TlvString.TlvString, { maxLength: 32 }))),
      /**
       * This attribute represents the current phase of operation being performed by the server. This shall be
       * the positional index representing the value from the set provided in the PhaseList Attribute, where the
       * first item in that list is an index of 0. Thus, this attribute shall have a maximum value that is
       * "length(PhaseList) - 1".
       *
       * Null if the PhaseList attribute is null or if the PhaseList attribute is an empty list.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.2
       */
      currentPhase: (0, import_Cluster.Attribute)(1, (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt8)),
      /**
       * Indicates the estimated time left before the operation is completed, in seconds. Changes to this value
       * shall NOT be reported in a subscription (note the C Quality). A Client implementation may periodically
       * poll this value to ensure alignment of any local rendering of the CountdownTime with the device provided
       * value.
       *
       * A value of 0 means that the operation has completed.
       *
       * When this attribute is null, that represents that there is no time currently defined until operation
       * completion. This may happen, for example, because no operation is in progress or because the completion
       * time is unknown.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.3
       */
      countdownTime: (0, import_Cluster.OptionalAttribute)(
        2,
        (0, import_TlvNullable.TlvNullable)(import_TlvNumber.TlvUInt32.bound({ max: 259200 })),
        { omitChanges: true, default: null }
      ),
      /**
       * This attribute describes the set of possible operational states that the device exposes. An operational
       * state is a fundamental device state such as Running or Error. Details of the phase of a device when, for
       * example, in a state of Running are provided by the CurrentPhase attribute.
       *
       * All devices shall, at a minimum, expose the set of states matching the commands that are also supported
       * by the cluster instance, in addition to Error. The set of possible device states are defined in the
       * OperationalStateEnum. A device type requiring implementation of this cluster shall define the set of
       * states that are applicable to that specific device type.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.4
       */
      operationalStateList: (0, import_Cluster.Attribute)(
        3,
        (0, import_TlvArray.TlvArray)(import_OperationalStateCluster.OperationalState.TlvOperationalStateStruct),
        { default: [] }
      ),
      /**
       * This attribute specifies the current operational state of a device. This shall be populated with a valid
       * OperationalStateID from the set of values in the OperationalStateList Attribute.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.5
       */
      operationalState: (0, import_Cluster.Attribute)(4, import_TlvNumber.TlvUInt8),
      /**
       * This attribute shall specify the details of any current error condition being experienced on the device
       * when the OperationalState attribute is populated with Error. Please see ErrorStateStruct for general
       * requirements on the population of this attribute.
       *
       * When there is no error detected, this shall have an ErrorStateID of NoError.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.5.6
       */
      operationalError: (0, import_Cluster.Attribute)(5, import_OperationalStateCluster.OperationalState.TlvErrorState)
    },
    commands: {
      /**
       * On receipt of this command, the device shall start seeking the charging dock, if possible in the current
       * state of the device.
       *
       * If this command is received when already in the SeekingCharger state the device shall respond with an
       * OperationalCommandResponse command with an ErrorStateID of NoError but the command shall have no other
       * effect.
       *
       * A device that receives this command in any state which does not allow seeking the charger, such as
       * Charging or Docked, shall respond with an OperationalCommandResponse command with an ErrorStateID of
       * CommandInvalidInState and shall have no other effect.
       *
       * Otherwise, on success:
       *
       *   • The OperationalState attribute shall be set to SeekingCharger.
       *
       *   • The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 7.4.5.1
       */
      goHome: (0, import_Cluster.OptionalCommand)(128, import_TlvNoArguments.TlvNoArguments, 4, import_OperationalStateCluster.OperationalState.TlvOperationalCommandResponse)
    },
    events: {
      /**
       * This event is generated when a reportable error condition is detected. A device that generates this
       * event shall also set the OperationalState attribute to Error, indicating an error condition.
       *
       * This event shall contain the following fields:
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.7.1
       */
      operationalError: (0, import_Cluster.Event)(0, import_Cluster.EventPriority.Critical, import_OperationalStateCluster.OperationalState.TlvOperationalErrorEvent),
      /**
       * This event is generated when the overall operation ends, successfully or otherwise. For example, the
       * completion of a cleaning operation in a Robot Vacuum Cleaner, or the completion of a wash cycle in a
       * Washing Machine.
       *
       * This event shall contain the following fields:
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.14.7.2
       */
      operationCompletion: (0, import_Cluster.OptionalEvent)(
        1,
        import_Cluster.EventPriority.Info,
        import_OperationalStateCluster.OperationalState.TlvOperationCompletionEvent
      )
    }
  });
  RvcOperationalState2.Cluster = RvcOperationalState2.ClusterInstance;
  RvcOperationalState2.Complete = RvcOperationalState2.Cluster;
})(RvcOperationalState || (RvcOperationalState = {}));
const RvcOperationalStateCluster = RvcOperationalState.Cluster;
import_ClusterRegistry.ClusterRegistry.register(RvcOperationalState.Complete);
//# sourceMappingURL=RvcOperationalStateCluster.js.map
