"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var RvcRunModeCluster_exports = {};
__export(RvcRunModeCluster_exports, {
  RvcRunMode: () => RvcRunMode,
  RvcRunModeCluster: () => RvcRunModeCluster
});
module.exports = __toCommonJS(RvcRunModeCluster_exports);
var import_MutableCluster = require("../mutation/MutableCluster.js");
var import_BitmapSchema = require("../../schema/BitmapSchema.js");
var import_Cluster = require("../Cluster.js");
var import_TlvArray = require("../../tlv/TlvArray.js");
var import_ModeBaseCluster = require("./ModeBaseCluster.js");
var import_TlvNumber = require("../../tlv/TlvNumber.js");
var import_ClusterRegistry = require("../ClusterRegistry.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
var RvcRunMode;
((RvcRunMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = RvcRunMode2.Feature || (RvcRunMode2.Feature = {}));
  let ModeChangeStatus;
  ((ModeChangeStatus2) => {
    ModeChangeStatus2[ModeChangeStatus2["Stuck"] = 65] = "Stuck";
    ModeChangeStatus2[ModeChangeStatus2["DustBinMissing"] = 66] = "DustBinMissing";
    ModeChangeStatus2[ModeChangeStatus2["DustBinFull"] = 67] = "DustBinFull";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankEmpty"] = 68] = "WaterTankEmpty";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankMissing"] = 69] = "WaterTankMissing";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankLidOpen"] = 70] = "WaterTankLidOpen";
    ModeChangeStatus2[ModeChangeStatus2["MopCleaningPadMissing"] = 71] = "MopCleaningPadMissing";
    ModeChangeStatus2[ModeChangeStatus2["BatteryLow"] = 72] = "BatteryLow";
  })(ModeChangeStatus = RvcRunMode2.ModeChangeStatus || (RvcRunMode2.ModeChangeStatus = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["Idle"] = 16384] = "Idle";
    ModeTag2[ModeTag2["Cleaning"] = 16385] = "Cleaning";
    ModeTag2[ModeTag2["Mapping"] = 16386] = "Mapping";
  })(ModeTag = RvcRunMode2.ModeTag || (RvcRunMode2.ModeTag = {}));
  RvcRunMode2.Base = import_MutableCluster.MutableCluster.Component({
    id: 84,
    name: "RvcRunMode",
    revision: 2,
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
       * same endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.4.1
       */
      onOff: (0, import_BitmapSchema.BitFlag)(0)
    },
    attributes: {
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.2.6
       */
      supportedModes: (0, import_Cluster.FixedAttribute)(
        0,
        (0, import_TlvArray.TlvArray)(import_ModeBaseCluster.ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 }),
        { default: [] }
      ),
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.2.6
       */
      currentMode: (0, import_Cluster.Attribute)(1, import_TlvNumber.TlvUInt8, { scene: true, persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.7.1
       */
      changeToMode: (0, import_Cluster.Command)(0, import_ModeBaseCluster.ModeBase.TlvChangeToModeRequest, 0, import_Cluster.TlvNoResponse)
    },
    /**
     * This metadata controls which RvcRunModeCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: import_MutableCluster.MutableCluster.Extensions()
  });
  RvcRunMode2.ClusterInstance = (0, import_MutableCluster.MutableCluster)(RvcRunMode2.Base);
  RvcRunMode2.Cluster = RvcRunMode2.ClusterInstance;
  RvcRunMode2.Complete = RvcRunMode2.Cluster;
})(RvcRunMode || (RvcRunMode = {}));
const RvcRunModeCluster = RvcRunMode.Cluster;
import_ClusterRegistry.ClusterRegistry.register(RvcRunMode.Complete);
//# sourceMappingURL=RvcRunModeCluster.js.map
