/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../mutation/MutableCluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { FixedAttribute, Attribute, WritableAttribute, Command } from "../Cluster.js";
import { Identity } from "../../util/Type.js";
export declare namespace DishwasherMode {
    /**
     * These are optional features supported by DishwasherModeCluster.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 1.10.4
     */
    enum Feature {
        /**
         * OnOff (DEPONOFF)
         *
         * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the same
         * endpoint. See OnMode for more information.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
         */
        OnOff = "OnOff"
    }
    enum ModeTag {
        /**
         * The normal regime of operation.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.3.6.1.1
         */
        Normal = 16384,
        /**
         * Mode optimized for washing heavily-soiled dishes.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.3.6.1.2
         */
        Heavy = 16385,
        /**
         * Mode optimized for light washing.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.3.6.1.3
         */
        Light = 16386
    }
    /**
     * These elements and properties are present in all DishwasherMode clusters.
     */
    const Base: {
        readonly id: 89;
        readonly name: "DishwasherMode";
        readonly revision: 2;
        readonly features: {
            /**
             * OnOff
             *
             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
             * same endpoint. See OnMode for more information.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
             */
            readonly onOff: BitFlag;
        };
        readonly attributes: {
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly supportedModes: FixedAttribute<import("../../tlv/TlvObject.js").TypeFromFields<{
                label: import("../../tlv/TlvObject.js").FieldType<string>;
                mode: import("../../tlv/TlvObject.js").FieldType<number>;
                modeTags: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                    mfgCode: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/VendorId.js").VendorId>;
                    value: import("../../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly currentMode: Attribute<number, any>;
            /**
             * If this attribute is supported, the device SHOULD initially set this to one of the supported modes that
             * has the Normal tag associated with it. See the Mode Base cluster specification for full details about
             * the StartUpMode attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5.1
             */
            readonly startUpMode: WritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly onMode: WritableAttribute<number, any>;
        };
        readonly commands: {
            /**
             * This command is used to change device modes.
             *
             * On receipt of this command the device shall respond with a ChangeToModeResponse command.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
             */
            readonly changeToMode: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                newMode: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
        /**
         * This metadata controls which DishwasherModeCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 89;
        readonly name: "DishwasherMode";
        readonly revision: 2;
        readonly features: {
            /**
             * OnOff
             *
             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
             * same endpoint. See OnMode for more information.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
             */
            readonly onOff: BitFlag;
        };
        readonly attributes: {
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly supportedModes: FixedAttribute<import("../../tlv/TlvObject.js").TypeFromFields<{
                label: import("../../tlv/TlvObject.js").FieldType<string>;
                mode: import("../../tlv/TlvObject.js").FieldType<number>;
                modeTags: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                    mfgCode: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/VendorId.js").VendorId>;
                    value: import("../../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly currentMode: Attribute<number, any>;
            /**
             * If this attribute is supported, the device SHOULD initially set this to one of the supported modes that
             * has the Normal tag associated with it. See the Mode Base cluster specification for full details about
             * the StartUpMode attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5.1
             */
            readonly startUpMode: WritableAttribute<number, any>;
            /**
             * @see {@link MatterSpecification.v13.Cluster} § 8.3.5
             */
            readonly onMode: WritableAttribute<number, any>;
        };
        readonly commands: {
            /**
             * This command is used to change device modes.
             *
             * On receipt of this command the device shall respond with a ChangeToModeResponse command.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
             */
            readonly changeToMode: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                newMode: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
        /**
         * This metadata controls which DishwasherModeCluster elements matter.js activates for specific feature
         * combinations.
         */
        readonly extensions: readonly [];
    }, []>;
    /**
     * This cluster is derived from the Mode Base cluster, defining additional mode tags and namespaced enumerated
     * values for dishwasher devices.
     *
     * DishwasherModeCluster supports optional features that you can enable with the DishwasherModeCluster.with()
     * factory method.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 8.3
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    const Complete: Cluster;
}
export type DishwasherModeCluster = DishwasherMode.Cluster;
export declare const DishwasherModeCluster: DishwasherMode.Cluster;
//# sourceMappingURL=DishwasherModeCluster.d.ts.map