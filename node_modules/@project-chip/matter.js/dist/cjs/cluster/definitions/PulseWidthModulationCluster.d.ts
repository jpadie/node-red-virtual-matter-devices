/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../mutation/MutableCluster.js";
import { LevelControl } from "./LevelControlCluster.js";
import { ClusterType } from "../ClusterType.js";
import { Identity } from "../../util/Type.js";
export declare namespace PulseWidthModulation {
    const Base: {
        readonly id: 28;
        readonly name: "PulseWidthModulation";
        readonly revision: 5;
        readonly features: {
            readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
            readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
            readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
            readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
            readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("../Cluster.js").Attribute<number, any>;
                    readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("../Cluster.js").Attribute<number, any>;
                    readonly minFrequency: import("../Cluster.js").Attribute<number, any>;
                    readonly maxFrequency: import("../Cluster.js").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                        frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly supportedFeatures: {
            readonly onOff: true;
        };
        readonly base: ClusterType.Of<{
            readonly id: 28;
            readonly name: "PulseWidthModulation";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
            readonly extensions: readonly [{
                readonly flags: {
                    readonly lighting: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly remainingTime: import("../Cluster.js").Attribute<number, any>;
                        readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                        readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly lighting: false;
                };
                readonly component: {
                    readonly attributes: {
                        readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                    };
                };
            }, {
                readonly flags: {
                    readonly frequency: true;
                };
                readonly component: {
                    readonly attributes: {
                        readonly currentFrequency: import("../Cluster.js").Attribute<number, any>;
                        readonly minFrequency: import("../Cluster.js").Attribute<number, any>;
                        readonly maxFrequency: import("../Cluster.js").Attribute<number, any>;
                    };
                    readonly commands: {
                        readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                            frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                        }>, void, any>;
                    };
                };
            }];
        }>;
        readonly id: 28;
        readonly name: "PulseWidthModulation";
        readonly revision: 5;
        readonly features: {
            readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
            readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
            readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
        };
        readonly attributes: {
            readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
            readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
            readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly extensions: readonly [{
            readonly flags: {
                readonly lighting: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly remainingTime: import("../Cluster.js").Attribute<number, any>;
                    readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                    readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                };
            };
        }, {
            readonly flags: {
                readonly lighting: false;
            };
            readonly component: {
                readonly attributes: {
                    readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                };
            };
        }, {
            readonly flags: {
                readonly frequency: true;
            };
            readonly component: {
                readonly attributes: {
                    readonly currentFrequency: import("../Cluster.js").Attribute<number, any>;
                    readonly minFrequency: import("../Cluster.js").Attribute<number, any>;
                    readonly maxFrequency: import("../Cluster.js").Attribute<number, any>;
                };
                readonly commands: {
                    readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                        frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                    }>, void, any>;
                };
            };
        }];
    }, [{
        readonly attributes: {
            readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any>;
        };
    }]>;
    /**
     * This alias specializes the semantics of {@link LevelControl.Base}.
     *
     * PulseWidthModulationCluster supports optional features that you can enable with the
     * PulseWidthModulationCluster.with() factory method.
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * This cluster supports all PulseWidthModulation features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active
     * features is legal per the Matter specification.
     */
    const CompleteInstance: MutableCluster<{
        readonly id: 28;
        readonly name: "PulseWidthModulation";
        readonly revision: 5;
        readonly features: {
            readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
            readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
            readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
        };
        readonly supportedFeatures: {};
        readonly attributes: import("../../util/Type.js").Merge<{
            readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lighting: boolean;
                }];
            };
            readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | [{
                    lighting: boolean;
                }];
                readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
            };
            readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    lighting: boolean;
                }];
            };
            readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
            readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            }>, never>;
            readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
            readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
            readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
            readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
            readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
            readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
            readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
            }>, any>;
            readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
            readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
            readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
        }, import("../Cluster.js").GlobalAttributes<{
            readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
            readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
            readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
        }>>;
        readonly commands: {
            readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                frequency: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    frequency: boolean;
                }];
            };
            readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                level: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
            readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
                optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>>;
            }>, void, any>;
        };
        readonly events: {};
        readonly unknown: false;
        readonly base: undefined;
        readonly extensions: undefined;
        readonly with: <const SelectionT extends import("../export.js").ClusterComposer.FeatureSelection<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>>>(...selection: SelectionT) => import("../export.js").ClusterComposer.Of<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>, SelectionT>;
        readonly alter: <const AlterationsT extends import("../export.js").ElementModifier.Alterations<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>>>(alterations: AlterationsT) => import("../export.js").ElementModifier.WithAlterations<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>, AlterationsT>;
        readonly set: <const ValuesT extends {
            currentLevel: number | null;
            options: {
                executeIfOff?: boolean | undefined;
                coupleColorTempToLevel?: boolean | undefined;
            };
            onLevel: number | null;
            remainingTime?: number | undefined;
            minLevel?: number | undefined;
            currentFrequency?: number | undefined;
            minFrequency?: number | undefined;
            maxFrequency?: number | undefined;
            startUpCurrentLevel?: number | null | undefined;
            maxLevel?: number | undefined;
            onOffTransitionTime?: number | undefined;
            onTransitionTime?: number | null | undefined;
            offTransitionTime?: number | null | undefined;
            defaultMoveRate?: number | null | undefined;
        }>(values: ValuesT) => import("../export.js").ElementModifier.WithValues<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>, ValuesT>;
        readonly enable: <const FlagsT extends import("../export.js").ElementModifier.ElementFlags<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>>>(flags: FlagsT) => import("../export.js").ElementModifier.WithFlags<ClusterType.Of<{
            readonly id: import("../../util/Type.js").Branded<8, "ClusterId">;
            readonly name: "LevelControl";
            readonly revision: 5;
            readonly features: {
                readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
            };
            readonly attributes: {
                readonly remainingTime: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly minLevel: import("../Cluster.js").OptionalAttribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | [{
                        lighting: boolean;
                    }];
                    readonly mandatoryIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                };
                readonly currentFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly minFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly maxFrequency: import("../Cluster.js").Attribute<number, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly startUpCurrentLevel: import("../Cluster.js").WritableAttribute<number | null, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        lighting: boolean;
                    }];
                };
                readonly clusterRevision: import("../Cluster.js").Attribute<number, never>;
                readonly featureMap: import("../Cluster.js").Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    readonly onOff: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly lighting: import("../../schema/BitmapSchema.js").BitFlag;
                    readonly frequency: import("../../schema/BitmapSchema.js").BitFlag;
                }>, never>;
                readonly attributeList: import("../Cluster.js").Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
                readonly eventList: import("../Cluster.js").Attribute<import("../../datatype/EventId.js").EventId[], never>;
                readonly acceptedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly generatedCommandList: import("../Cluster.js").Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
                readonly currentLevel: import("../Cluster.js").Attribute<number | null, any>;
                readonly maxLevel: import("../Cluster.js").OptionalAttribute<number, any>;
                readonly options: import("../Cluster.js").WritableAttribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                    executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                    coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                }>, any>;
                readonly onOffTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number, any>;
                readonly onLevel: import("../Cluster.js").WritableAttribute<number | null, any>;
                readonly onTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly offTransitionTime: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
                readonly defaultMoveRate: import("../Cluster.js").OptionalWritableAttribute<number | null, any>;
            };
            readonly commands: {
                readonly moveToClosestFrequency: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    frequency: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any> & {
                    readonly optional: true;
                    readonly isConditional: true;
                    readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                    readonly mandatoryIf: [] | [{
                        frequency: boolean;
                    }];
                };
                readonly moveToLevel: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly move: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly step: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stop: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveToLevelWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    level: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly moveWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    moveMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.MoveMode>;
                    rate: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stepWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    stepMode: import("../../tlv/TlvObject.js").FieldType<LevelControl.StepMode>;
                    stepSize: import("../../tlv/TlvObject.js").FieldType<number>;
                    transitionTime: import("../../tlv/TlvObject.js").FieldType<number | null>;
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
                readonly stopWithOnOff: import("../Cluster.js").Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    optionsMask: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                    optionsOverride: import("../../tlv/TlvObject.js").FieldType<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                        executeIfOff: import("../../schema/BitmapSchema.js").BitFlag;
                        coupleColorTempToLevel: import("../../schema/BitmapSchema.js").BitFlag;
                    }>>;
                }>, void, any>;
            };
        }>, FlagsT>;
    }, []>;
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type PulseWidthModulationCluster = PulseWidthModulation.Cluster;
export declare const PulseWidthModulationCluster: PulseWidthModulation.Cluster;
//# sourceMappingURL=PulseWidthModulationCluster.d.ts.map