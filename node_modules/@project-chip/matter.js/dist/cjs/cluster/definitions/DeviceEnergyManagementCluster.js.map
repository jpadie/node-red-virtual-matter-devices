{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/DeviceEnergyManagementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, Command, TlvNoResponse, Event, EventPriority, FixedAttribute } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport {\n    TlvInt64,\n    TlvUInt32,\n    TlvEnum,\n    TlvUInt16,\n    TlvEpochS,\n    TlvInt32,\n    TlvUInt8,\n    TlvInt8\n} from \"../../tlv/TlvNumber.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace DeviceEnergyManagement {\n    /**\n     * These are optional features supported by DeviceEnergyManagementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4\n     */\n    export enum Feature {\n        /**\n         * PowerAdjustment (PA)\n         *\n         * For Energy Smart Appliances (ESA) the definition of being 'smart' mandates that they can report their\n         * current power adjustment capability and have an EMS request a temporary adjustment. This may typically be to\n         * curtail power requirements during peak periods, but can also be used to turn on an ESA if there is excess\n         * renewable or local generation (Solar PV).\n         *\n         * For example, a home may have solar PV which often produces more power than the home requires,\n         *\n         * resulting in the excess power flowing into the grid. This excess power naturally fluctuates when clouds pass\n         * overhead and other loads in the home are switched on and off.\n         *\n         * EVSE Example: An EMS may therefore be able to turn on the EVSE (if the vehicle is plugged in) and can start\n         * charging the vehicle, and periodically modify the charging power depending on PV generation and other home\n         * loads, so as to minimize import and export to the grid.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.1\n         */\n        PowerAdjustment = \"PowerAdjustment\",\n\n        /**\n         * PowerForecastReporting (PFR)\n         *\n         * For Energy Smart Appliances (ESA) the definition of being 'smart' implies that they can report their\n         * indicative forecast power demands or generation, to a greater or lesser extent. For some ESAs this is highly\n         * predictable (in terms of both power and time), in other appliances this is more challenging and only a basic\n         * level of forecast is possible.\n         *\n         * Forecasts are defined from a current time, using a slot format, where the slot is akin to a relatively\n         * constant operating mode.\n         *\n         * Washing machine example: a washing machine may have stages of a washing cycle: heating, tumbling, rinse and\n         * spin stages. At each stage, the approximate minimum and maximum power consumption may be known, as well as\n         * the duration of that stage.\n         *\n         * In some circumstances the ESA may allow the stage to be delayed or paused (subject to safety and\n         * manufacturer\u2019s discretion and user preferences).\n         *\n         * Typically, appliances with a heating element cannot have their power consumption adjusted and can only be\n         * paused or delayed.\n         *\n         * Some ESAs may not be flexible other than a delayed cycle start (for example, once the washing cycle has been\n         * started then they run continuously until the cycle completes).\n         *\n         * Appliances that only support the PowerForecastReporting and not any of the adjustment features may indicate\n         * that they are not flexible in the forecast slot format.\n         *\n         * The PowerForecastReporting and the adjustment features aim to align to the [SAREF4ENER] ontology.\n         *\n         * Inverter driven ESAs: some inverter driven ESAs can consume or generate a variable amount of power.\n         *\n         * For example, a single phase EVSE can be adjusted in the range of 6-32Amps in 0.6 Amp steps in EU or on a\n         * hardwired 120V supply in the range of 6-15 Amps in US.\n         *\n         * For example, a home battery may be adjusted to charge or discharge in steps of 1W.\n         *\n         * For example, a heat pump may be able to modulate its compressor inverter between 20-100% of its rated power.\n         *\n         * The ESA indicates its power adjustment range and its nominal power consumption as part of its Forecast.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.2\n         */\n        PowerForecastReporting = \"PowerForecastReporting\",\n\n        /**\n         * StateForecastReporting (SFR)\n         *\n         * Some ESAs do not know their actual power consumption, but do know the state of operation. Like the\n         * PowerForecastingReporting feature, this uses the same slot structure mechanism to indicate a change in state\n         * vs time.\n         *\n         * An external observing EMS may have access to real-time meter readings, and could learn the typical power\n         * consumption based on the advertised internal state of the ESA.\n         *\n         * To enable this capability, the ESA shall report its internal operational state using an manufacturer\n         * specific value.\n         *\n         * Once the EMS has built a model of the state vs observed power consumption, it may request a forecast\n         * adjustment for particular times of the day, encouraging the ESA to use power at alternative times.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.3\n         */\n        StateForecastReporting = \"StateForecastReporting\",\n\n        /**\n         * StartTimeAdjustment (STA)\n         *\n         * ESAs which support the Start Time Adjustment feature, allow an EMS to recommend a change to the start time\n         * of the energy transfer that the ESA has previously suggested it would use.\n         *\n         * Washing machine example: A Washing Machine may have been set to start a wash cycle at 9pm when the variable\n         * tariff normally reduces.\n         *\n         * However, the EMS is aware that a grid event has occurred, making it cheaper to run the cycle at a later\n         * time, but the washing machine is not aware of this.\n         *\n         * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the washing\n         * machine has a power profile suggesting it will start the wash cycle at 9pm, but the EMS now knows that the\n         * grid event means it will be cheaper to delay the start until 11pm.\n         *\n         * The EMS can then optimize the cost by asking the washing machine to delay starting the wash cycle until 11pm.\n         *\n         * It does this by sending a StartTimeAdjustRequest to the washing machine to request delaying the start of the\n         * washing cycle.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.4\n         */\n        StartTimeAdjustment = \"StartTimeAdjustment\",\n\n        /**\n         * Pausable (PAU)\n         *\n         * ESAs which support the Pausable feature, allow an EMS to recommend a pause in the middle of a forecast power\n         * profile that the ESA is currently using.\n         *\n         * Washing machine example: A Washing Machine is in operation, and starting its water heating step.\n         *\n         * However, the EMS becomes aware from the smart meter that the total home load on the grid is close to\n         * exceeding its allowed total grid load.\n         *\n         * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the washing\n         * machine has a power profile suggesting its current step in the wash cycle is using power to heat the water,\n         * but that this step can be paused.\n         *\n         * The EMS can then reduce the grid load by asking the washing machine to pause the wash cycle for a short\n         * duration.\n         *\n         * It does this by sending a PauseRequest to the washing machine to request pausing the current step of the\n         * forecast power usage for a period to allow other home loads to finish before resuming the washing cycle.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.5\n         */\n        Pausable = \"Pausable\",\n\n        /**\n         * ForecastAdjustment (FA)\n         *\n         * ESAs which support the Forecast adjustment feature, allow an EMS to recommend a change to the start,\n         * duration and/or power level limits of the steps of the power profile that the ESA has previously suggested\n         * it would use.\n         *\n         * Heat pump and Solar PV example: A heat pump may have the ability to heat hot water as well as heating the\n         * home. The heat pump scheduling system may have determined that the home will be unoccupied during the day,\n         * or that the indoor temperature is above the set-point and so it knows that it will not need to heat the home.\n         *\n         * However, the hot water tank is likely to need to be reheated before the homeowner comes home in the evening.\n         * The heat pump is not aware that the property also has a solar PV inverter which is also an ESA that is\n         * communicating with the EMS.\n         *\n         * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the heat pump\n         * has a power profile suggesting it needs to heat hot water around 6pm. The solar PV inverter has forecast\n         * that it will generate 3.6kW of power during the middle of the day and into the afternoon before the sun goes\n         * down.\n         *\n         * The EMS can then optimize the home considering other non-ESA loads and can ask the heat pump to heat the hot\n         * water around 3pm when it has forecast that excess solar power will be available.\n         *\n         * It does this by sending a ModifyForecastRequest to the heat pump and asks the heat pump to expect to run at\n         * a lower power consumption (within the solar excess power) which requires the heat pump to run for a longer\n         * duration to achieve its required energy demand.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.6\n         */\n        ForecastAdjustment = \"ForecastAdjustment\",\n\n        /**\n         * ConstraintBasedAdjustment (CON)\n         *\n         * ESAs which support the Constraint-Based Adjustment feature allow an EMS to inform the ESA of periods during\n         * which power usage should be modified (for example when the EMS has been made aware that the grid supplier\n         * has requested reduced energy usage due to overall peak grid demand) and may cause the ESA to modify the\n         * intended power profile has previously suggested it would use.\n         *\n         * EVSE example: An EVSE scheduling system may have determined that the vehicle would be charged starting at a\n         * moderate rate at 1am, so that it has enough charge by the time it is needed later that morning.\n         *\n         * However, the DSR service provider has informed the EMS that due to high forecast winds it is now forecast\n         * that there will be very cheap energy available from wind generation between 2am and 3am.\n         *\n         * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the\n         *\n         * EVSE has a power profile suggesting it plans to start charging the vehicle at 1am.\n         *\n         * The EMS can then try to reduce the cost of charging the EV by informing the EVSE of the desire to increase\n         * the charging between scheduled times.\n         *\n         * It does this by sending a RequestConstraintBasedForecast to the EVSE and asks it to run at a higher\n         * NominalPower consumption during the constraint period, which may require it to decrease its charge rate\n         * outside the constraint period to achieve its required energy demand.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.7\n         */\n        ConstraintBasedAdjustment = \"ConstraintBasedAdjustment\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9\n     */\n    export const TlvPowerAdjust = TlvObject({\n        /**\n         * This field shall indicate the minimum power that the ESA can have its power adjusted to.\n         *\n         * Note that this is a signed value. Negative values indicate power flows away from loads (e.g. charging a\n         * battery inverter).\n         *\n         * MinPower shall be less than MaxPower.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9.1\n         */\n        minPower: TlvField(0, TlvInt64),\n\n        /**\n         * This field shall indicate the maximum power that the ESA can have its power adjusted to.\n         *\n         * Note that this is a signed value. Negative values indicate power flows away from loads (e.g. charging a\n         * battery inverter).\n         *\n         * MinPower shall be less than MaxPower.\n         *\n         * For example, if the charging current of an EVSE can be adjusted within the range of 6A to 32A on a 230V\n         * supply, then the power adjustment range is between 1380W and 7360W. Here the MinPower would be 1380W, and\n         * MaxPower would be 7360W.\n         *\n         * For example, if a battery storage inverter can discharge between 0 to 3000W towards a load, then its\n         * MinPower would be 0W and its MaxPower would be 3000W.\n         *\n         * In another example, if a battery storage inverter can charge its internal battery, between 0W and 2000W.\n         * Here power is flowing away from the home loads, so the power values need to be negative. As such the\n         * MinPower becomes -2000W and MaxPower becomes 0W.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9.2\n         */\n        maxPower: TlvField(1, TlvInt64),\n\n        /**\n         * This field shall indicate the minimum duration, in seconds, that a controller may invoke an ESA power\n         * adjustment. Manufacturers may use this to as an anti-cycling capability to avoid controllers from rapidly\n         * making power adjustments.\n         *\n         * Note that MinDuration shall be less than MaxDuration.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9.3\n         */\n        minDuration: TlvField(2, TlvUInt32),\n\n        /**\n         * This field shall indicate the maximum duration, in seconds, that a controller may invoke an ESA power\n         * adjustment. Manufacturers may use this to protect the user experience, to avoid over heating of the ESA,\n         * ensuring that there is sufficient headroom to use or store energy in the ESA or for any other reason.\n         *\n         * Note that MinDuration shall be less than MaxDuration.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9.4\n         */\n        maxDuration: TlvField(3, TlvUInt32)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.9\n     */\n    export interface PowerAdjust extends TypeFromSchema<typeof TlvPowerAdjust> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.6\n     */\n    export enum AdjustmentCause {\n        /**\n         * The adjustment is to optimize the local energy usage\n         */\n        LocalOptimization = 0,\n\n        /**\n         * The adjustment is to optimize the grid energy usage\n         */\n        GridOptimization = 1\n    }\n\n    /**\n     * Input to the DeviceEnergyManagement powerAdjustRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1\n     */\n    export const TlvPowerAdjustRequest = TlvObject({\n        /**\n         * This field shall indicate the power that the ESA shall use during the adjustment period.\n         *\n         * This value shall be between the MinPower and MaxPower fields of the PowerAdjustStruct in the\n         * PowerAdjustmentCapability attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1.1\n         */\n        power: TlvField(0, TlvInt64),\n\n        /**\n         * This field shall indicate the duration that the ESA shall maintain the requested power for.\n         *\n         * This value shall be between the MinDuration and MaxDuration fields of the PowerAdjustStruct in the\n         * PowerAdjustmentCapability attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1.2\n         */\n        duration: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the cause of the request from the EMS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1.3\n         */\n        cause: TlvField(2, TlvEnum<AdjustmentCause>())\n    });\n\n    /**\n     * Input to the DeviceEnergyManagement powerAdjustRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1\n     */\n    export interface PowerAdjustRequest extends TypeFromSchema<typeof TlvPowerAdjustRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.5\n     */\n    export enum Cause {\n        /**\n         * The ESA completed the power adjustment as requested\n         */\n        NormalCompletion = 0,\n\n        /**\n         * The ESA was set to offline\n         */\n        Offline = 1,\n\n        /**\n         * The ESA has developed a fault could not complete the adjustment\n         */\n        Fault = 2,\n\n        /**\n         * The user has disabled the ESA\u2019s flexibility capability\n         */\n        UserOptOut = 3,\n\n        /**\n         * The adjustment was cancelled by a client\n         */\n        Cancelled = 4\n    }\n\n    /**\n     * Body of the DeviceEnergyManagement powerAdjustEnd event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2\n     */\n    export const TlvPowerAdjustEndEvent = TlvObject({\n        /**\n         * This field shall indicate the reason why the power adjustment session ended.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2.1\n         */\n        cause: TlvField(0, TlvEnum<Cause>()),\n\n        /**\n         * This field shall indicate the number of seconds that the power adjustment session lasted before ending.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2.2\n         */\n        duration: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the approximate energy used by the ESA during the session.\n         *\n         * For example, if the ESA was on and was adjusted to be switched off, then this shall be 0W. If this was a\n         * battery inverter that was requested to charge it would have a negative energy use. If this was a normal load\n         * that was turned on, then it will have positive value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2.3\n         */\n        energyUse: TlvField(2, TlvInt64)\n    });\n\n    /**\n     * Body of the DeviceEnergyManagement powerAdjustEnd event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2\n     */\n    export interface PowerAdjustEndEvent extends TypeFromSchema<typeof TlvPowerAdjustEndEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.1\n     */\n    export enum CostType {\n        /**\n         * Financial cost\n         *\n         * This value shall indicate that the cost is related to the financial cost to provide the energy.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.1.1\n         */\n        Financial = 0,\n\n        /**\n         * Grid CO2e grams cost\n         *\n         * This value shall indicate that the cost is related to greenhouse gas emissions (in grams of CO2e).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.1.2\n         */\n        GhgEmissions = 1,\n\n        /**\n         * Consumer comfort impact cost\n         *\n         * This value shall indicate that the cost is related to some abstract sense of comfort expressed by the\n         * consumer; a higher value indicates more discomfort. For example, a consumer may be more comfortable knowing\n         * that their EV is charged earlier in the day in case there is a sudden need to depart and drive to the\n         * hospital. Or the consumer may feel inconvenienced by the fact that they need to wait for the washing machine\n         * to finish its load so that they can use it again.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.1.3\n         */\n        Comfort = 2,\n\n        /**\n         * Temperature impact cost\n         *\n         * This value shall indicate that the cost is related to the temperature of the home or water being at its\n         * setpoint. Some consumers may be more sensitive to being too hot or too cold.\n         *\n         * This is expressed in degrees Celsius.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.1.4\n         */\n        Temperature = 3\n    }\n\n    /**\n     * This indicates a generic mechanism for expressing cost to run an appliance, in terms of financial, GHG\n     * emissions, comfort value etc.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8\n     */\n    export const TlvCost = TlvObject({\n        /**\n         * This field shall indicate the type of cost being represented (see CostTypeEnum).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8.1\n         */\n        costType: TlvField(0, TlvEnum<CostType>()),\n\n        /**\n         * This field shall indicate the value of the cost. This may be negative (indicating that it is not a cost, but\n         * a free benefit).\n         *\n         * For example, if the Value was -302 and DecimalPoints was 2, then this would represent a benefit of 3.02.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8.2\n         */\n        value: TlvField(1, TlvInt32),\n\n        /**\n         * This field shall indicate the number of digits to the right of the decimal point in the Value field. For\n         * example, if the Value was 102 and DecimalPoints was 2, then this would represent a cost of 1.02.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8.3\n         */\n        decimalPoints: TlvField(2, TlvUInt8),\n\n        /**\n         * Indicates the currency for the value in the Value field. The value of the currency field shall match the\n         * values defined by [ISO 4217].\n         *\n         * This is an optional field. It shall be included if CostType is Financial.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8.4\n         */\n        currency: TlvOptionalField(3, TlvUInt16.bound({ max: 999 }))\n    });\n\n    /**\n     * This indicates a generic mechanism for expressing cost to run an appliance, in terms of financial, GHG\n     * emissions, comfort value etc.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.8\n     */\n    export interface Cost extends TypeFromSchema<typeof TlvCost> {}\n\n    /**\n     * This indicates a specific stage of an ESA\u2019s operation.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11\n     */\n    export const TlvSlot = TlvObject({\n        /**\n         * This field shall indicate the minimum time (in seconds) that the appliance expects to be in this slot for.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.1\n         */\n        minDuration: TlvField(0, TlvUInt32),\n\n        /**\n         * This field shall indicate the maximum time (in seconds) that the appliance expects to be in this slot for.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.2\n         */\n        maxDuration: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the expected time (in seconds) that the appliance expects to be in this slot for.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.3\n         */\n        defaultDuration: TlvField(2, TlvUInt32),\n\n        /**\n         * This field shall indicate the time (in seconds) that has already elapsed whilst in this slot. If the slot\n         * has not yet been started, then it shall be 0. Once the slot has been completed, then this reflects how much\n         * time was spent in this slot.\n         *\n         * When subscribed to, a change in this field value shall NOT cause the Forecast attribute to be updated since\n         * this value may change every 1 second.\n         *\n         * When the Forecast attribute is read, then this value shall be the most recent value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.4\n         */\n        elapsedSlotTime: TlvField(3, TlvUInt32),\n\n        /**\n         * This field shall indicate the time (in seconds) that is estimated to be remaining.\n         *\n         * Note that it may not align to the DefaultDuration - ElapsedSlotTime since an appliance may have revised its\n         * planned operation based on conditions.\n         *\n         * When subscribed to, a change in this field value shall NOT cause the Forecast attribute to be updated, since\n         * this value may change every 1 second.\n         *\n         * Note that if the ESA is currently paused, then this value shall not change.\n         *\n         * When the Forecast attribute is read, then this value shall be the most recent value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.5\n         */\n        remainingSlotTime: TlvField(4, TlvUInt32),\n\n        slotIsPauseable: TlvOptionalField(5, TlvBoolean),\n\n        /**\n         * This field shall indicate the shortest period that the slot can be paused for. This can be set to avoid\n         * controllers trying to pause ESAs for short periods and then resuming operation in a cyclic fashion which may\n         * damage or cause excess energy to be consumed with restarting of an operation.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.7\n         */\n        minPauseDuration: TlvOptionalField(6, TlvUInt32),\n\n        /**\n         * This field shall indicate the longest period that the slot can be paused for.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.8\n         */\n        maxPauseDuration: TlvOptionalField(7, TlvUInt32),\n\n        /**\n         * This field shall indicate a manufacturer defined value indicating the state of the ESA.\n         *\n         * This may be used by an observing EMS which also has access to the metering data to ascertain the typical\n         * power drawn when the ESA is in a manufacturer defined state.\n         *\n         * Some appliances, such as smart thermostats, may not know how much power is being drawn by the HVAC system,\n         * but do know what they have asked the HVAC system to do.\n         *\n         * Manufacturers can use this value to indicate a variety of states in an unspecified way. For example, they\n         * may choose to use values between 0-100 as a percentage of compressor modulation, or could use these values\n         * as Enum states meaning heating with fan, heating without fan etc.\n         *\n         * NOTE An ESA shall always use the same value to represent the same operating state.\n         *\n         * By providing this information a smart EMS may be able to learn the observed power draw when the ESA is put\n         * into a specific state. It can potentially then use the information in the PowerForecastReporting data to\n         * predict the power draw from the appliance and potentially ask it to modify its timing via one of the\n         * adjustment request commands, or adjust other ESAs power to compensate.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.9\n         */\n        manufacturerEsaState: TlvOptionalField(8, TlvUInt16),\n\n        /**\n         * This field shall indicate the expected power that the appliance will use during this slot. It may be\n         * considered the average value over the slot, and some variation from this would be expected (for example, as\n         * it is ramping up).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.10\n         */\n        nominalPower: TlvOptionalField(9, TlvInt64),\n\n        /**\n         * This field shall indicate the lowest power that the appliance expects to use during this slot. (e.g. during\n         * a ramp up it may be 0W).\n         *\n         * Some appliances (e.g. battery inverters which can charge and discharge) may have a negative power.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.11\n         */\n        minPower: TlvOptionalField(10, TlvInt64),\n\n        /**\n         * This field shall indicate the maximum power that the appliance expects to use during this slot. (e.g. during\n         * a ramp up it may be 0W). This field ignores the effects of short-lived inrush currents.\n         *\n         * Some appliances (e.g. battery inverters which can charge and discharge) may have a negative power.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.12\n         */\n        maxPower: TlvOptionalField(11, TlvInt64),\n\n        /**\n         * This field shall indicate the expected energy that the appliance expects to use or produce during this slot.\n         *\n         * Some appliances (e.g. battery inverters which can charge and discharge) may have a negative energy.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.13\n         */\n        nominalEnergy: TlvOptionalField(12, TlvInt64),\n\n        /**\n         * This field shall indicate the current estimated cost for operating.\n         *\n         * For example, if the device has access to an Energy pricing server it may be able to use the tariff to\n         * estimate the cost of energy for this slot in the power forecast.\n         *\n         * When an Energy Management System requests a change in the schedule, then the device may suggest a change in\n         * the cost as a result of shifting its energy. This can allow a demand side response service to be informed of\n         * the relative cost to use energy at a different time.\n         *\n         * The Costs field is a list of CostStruct structures which allows multiple CostTypeEnum and Values to be\n         * shared by the energy appliance. These could be based on GHG emissions, comfort value for the consumer etc.\n         *\n         * For example, comfort could be expressed in abstract units or in currency. A water heater that is heated\n         * earlier in the day is likely to lose some of its heat before it is needed, which could require a top-up\n         * heating event to occur later in the day (which may incur additional cost).\n         *\n         * If the ESA cannot calculate its cost for any reason (such as losing its connection to a Price server) it may\n         * omit this field. This is treated as extra meta data that an EMS may use to optimize a system.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.14\n         */\n        costs: TlvOptionalField(13, TlvArray(TlvCost, { maxLength: 5 })),\n\n        /**\n         * This field shall indicate the minimum power that the appliance can be requested to use.\n         *\n         * For example, some EVSEs cannot be switched on to charge below 6A which may equate to ~1.3kW in EU markets.\n         * If the slot indicates a NominalPower of 0W (indicating it is expecting to be off), this allows an ESA to\n         * indicate it could be switched on to charge, but this would be the minimum power limit it can be set to.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.15\n         */\n        minPowerAdjustment: TlvOptionalField(14, TlvInt64),\n\n        /**\n         * This field shall indicate the maximum power that the appliance can be requested to use.\n         *\n         * For example, an EVSE may be limited by its electrical supply to 32A which would be ~7.6kW in EU markets. If\n         * the slot indicates a NominalPower of 0W (indicating it is expecting to be off), this allows an ESA to\n         * indicate it could be switched on to charge, but this would be the maximum power limit it can be set to.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.16\n         */\n        maxPowerAdjustment: TlvOptionalField(15, TlvInt64),\n\n        /**\n         * This field shall indicate the minimum time, in seconds, that the slot can be requested to shortened to.\n         *\n         * For example, if the slot indicates a NominalPower of 0W (indicating it is expecting to be off), this would\n         * allow an ESA to specify the minimum time it could be switched on for. This is to help protect the appliance\n         * from being damaged by short cycling times.\n         *\n         * For example, a heat pump compressor may have a minimum cycle time of order a few minutes.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.17\n         */\n        minDurationAdjustment: TlvOptionalField(16, TlvUInt32),\n\n        /**\n         * This field shall indicate the maximum time, in seconds, that the slot can be requested to extended to.\n         *\n         * For example, if the slot indicates a NominalPower of 0W (indicating it is expecting to be off), this allows\n         * an ESA to specify the maximum time it could be switched on for. This may allow a battery or water heater to\n         * indicate the maximum duration that it can charge for before becoming full. In the case of a battery inverter\n         * which can be discharged, it may equally indicate the maximum time the battery could be discharged for (at\n         * the MaxPowerAdjustment power level).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11.18\n         */\n        maxDurationAdjustment: TlvOptionalField(17, TlvUInt32)\n    });\n\n    /**\n     * This indicates a specific stage of an ESA\u2019s operation.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.11\n     */\n    export interface Slot extends TypeFromSchema<typeof TlvSlot> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.7\n     */\n    export enum ForecastUpdateReason {\n        /**\n         * The update was due to internal ESA device optimization\n         */\n        InternalOptimization = 0,\n\n        /**\n         * The update was due to local EMS optimization\n         */\n        LocalOptimization = 1,\n\n        /**\n         * The update was due to grid optimization\n         */\n        GridOptimization = 2\n    }\n\n    /**\n     * This indicates a list of 'slots' describing the overall timing of the ESA\u2019s planned energy and power use, with\n     * different power and energy demands per slot. For example, slots might be used to describe the distinct stages of\n     * a washing machine cycle.\n     *\n     * Where an ESA does not know the actual power and energy use of the system, it may support the SFR\n     *\n     * feature and instead report its internal state.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10\n     */\n    export const TlvForecast = TlvObject({\n        /**\n         * This field shall indicate the sequence number for the current forecast. If the ESA updates a forecast, it\n         * shall monotonically increase this value.\n         *\n         * The ESA does not need to persist this value across reboots, since the EMS SHOULD be able to detect that any\n         * previous subscriptions are lost if a device reboots. The loss of a subscription and subsequent\n         * re-subscription allows the EMS to learn about any new forecasts.\n         *\n         * The value of ForecastId is allowed to wrap.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.1\n         */\n        forecastId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate which element of the Slots list is currently active in the Forecast sequence. A\n         * null value indicates that the sequence has not yet started.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.2\n         */\n        activeSlotNumber: TlvField(1, TlvNullable(TlvUInt16)),\n\n        /**\n         * This field shall indicate the planned start time, in UTC, for the entire Forecast.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.3\n         */\n        startTime: TlvField(2, TlvEpochS),\n\n        /**\n         * This field shall indicate the planned end time, in UTC, for the entire Forecast.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.4\n         */\n        endTime: TlvField(3, TlvEpochS),\n\n        /**\n         * This field shall indicate the earliest start time, in UTC, that the entire Forecast can be shifted to.\n         *\n         * A null value indicates that it can be started immediately.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.5\n         */\n        earliestStartTime: TlvOptionalField(4, TlvNullable(TlvEpochS)),\n\n        /**\n         * This field shall indicate the latest end time, in UTC, for the entire Forecast.\n         *\n         * e.g. for an EVSE charging session, this may indicate the departure time for the vehicle, by which time the\n         * charging session must end.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.6\n         */\n        latestEndTime: TlvOptionalField(5, TlvEpochS),\n\n        /**\n         * This field shall indicate that some part of the Forecast can be paused. It aims to allow a client to read\n         * this flag and if it is false, then none of the slots contain SlotIsPausable set to true. This can save a\n         * client from having to check each slot in the list.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.7\n         */\n        isPauseable: TlvField(6, TlvBoolean),\n\n        /**\n         * This field shall contain a list of SlotStructs.\n         *\n         * It shall contain at least 1 entry, and a maximum of 10.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.8\n         */\n        slots: TlvField(7, TlvArray(TlvSlot, { maxLength: 10 })),\n\n        /**\n         * This field shall contain the reason the current Forecast was generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10.9\n         */\n        forecastUpdateReason: TlvField(8, TlvEnum<ForecastUpdateReason>())\n    });\n\n    /**\n     * This indicates a list of 'slots' describing the overall timing of the ESA\u2019s planned energy and power use, with\n     * different power and energy demands per slot. For example, slots might be used to describe the distinct stages of\n     * a washing machine cycle.\n     *\n     * Where an ESA does not know the actual power and energy use of the system, it may support the SFR\n     *\n     * feature and instead report its internal state.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.10\n     */\n    export interface Forecast extends TypeFromSchema<typeof TlvForecast> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.4\n     */\n    export enum OptOutState {\n        /**\n         * The user has not opted out of either local or grid optimizations\n         */\n        NoOptOut = 0,\n\n        /**\n         * The user has opted out of local EMS optimizations only\n         */\n        LocalOptOut = 1,\n\n        /**\n         * The user has opted out of grid EMS optimizations only\n         */\n        GridOptOut = 2,\n\n        /**\n         * The user has opted out of all external optimizations\n         */\n        OptOut = 3\n    }\n\n    /**\n     * Input to the DeviceEnergyManagement pauseRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.4\n     */\n    export const TlvPauseRequest = TlvObject({\n        /**\n         * This field shall indicate the duration that the ESA shall be paused for. This value shall be between the\n         * MinPauseDuration and MaxPauseDuration indicated in the ActiveSlotNumber index in the Slots list in the\n         * Forecast.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.4.1\n         */\n        duration: TlvField(0, TlvUInt32),\n\n        /**\n         * This field shall indicate the cause of the request from the EMS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.4.2\n         */\n        cause: TlvField(1, TlvEnum<AdjustmentCause>())\n    });\n\n    /**\n     * Input to the DeviceEnergyManagement pauseRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.4\n     */\n    export interface PauseRequest extends TypeFromSchema<typeof TlvPauseRequest> {}\n\n    /**\n     * Body of the DeviceEnergyManagement resumed event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.4\n     */\n    export const TlvResumedEvent = TlvObject({\n        /**\n         * This field shall indicate the reason why the pause ended.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.4.1\n         */\n        cause: TlvField(0, TlvEnum<Cause>())\n    });\n\n    /**\n     * Body of the DeviceEnergyManagement resumed event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.4\n     */\n    export interface ResumedEvent extends TypeFromSchema<typeof TlvResumedEvent> {}\n\n    /**\n     * Input to the DeviceEnergyManagement startTimeAdjustRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.3\n     */\n    export const TlvStartTimeAdjustRequest = TlvObject({\n        /**\n         * This field shall indicate the requested start time, in UTC, that the client would like the appliance to\n         * shift its Forecast to. This value MUST be in the future.\n         *\n         * A client can estimate the entire Forecast sequence duration by computing the EndTime - StartTime fields from\n         * the Forecast attribute, and therefore avoid scheduling the start time too late.\n         *\n         * This value shall be after the EarliestStartTime in the Forecast attribute. The new EndTime, that can be\n         * computed from the RequestedStartTime and the Forecast sequence duration, shall be before the LatestEndTime.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.3.1\n         */\n        requestedStartTime: TlvField(0, TlvEpochS),\n\n        /**\n         * This field shall indicate the cause of the request from the EMS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.3.2\n         */\n        cause: TlvField(1, TlvEnum<AdjustmentCause>())\n    });\n\n    /**\n     * Input to the DeviceEnergyManagement startTimeAdjustRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.3\n     */\n    export interface StartTimeAdjustRequest extends TypeFromSchema<typeof TlvStartTimeAdjustRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.12\n     */\n    export const TlvSlotAdjustment = TlvObject({\n        /**\n         * This field shall indicate the index into the Slots list within the Forecast that is to be modified. It shall\n         * be less than the actual length of the Slots list (implicitly it must be in the range 0 to 9 based on the\n         * maximum length of the Slots list constraint).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.12.1\n         */\n        slotIndex: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall indicate the new requested power that the ESA shall operate at. It MUST be between the\n         * MinPowerAdjustment and MaxPowerAdjustment for the slot as advertised by the ESA.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.12.2\n         */\n        nominalPower: TlvField(1, TlvInt64),\n\n        /**\n         * This field shall indicate the new requested duration, in seconds, that the ESA shall extend or shorten the\n         * slot duration to. It MUST be between the MinDurationAdjustment and MaxDurationAdjustment for the slot as\n         * advertised by the ESA.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.12.3\n         */\n        duration: TlvField(2, TlvUInt32)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.12\n     */\n    export interface SlotAdjustment extends TypeFromSchema<typeof TlvSlotAdjustment> {}\n\n    /**\n     * Input to the DeviceEnergyManagement modifyForecastRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6\n     */\n    export const TlvModifyForecastRequest = TlvObject({\n        /**\n         * This field shall indicate the ForecastId that is to be modified.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6.1\n         */\n        forecastId: TlvField(0, TlvUInt32),\n\n        /**\n         * This field shall contain a list of SlotAdjustment parameters that should be modified in the corresponding\n         * Forecast with matching ForecastId.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6.2\n         */\n        slotAdjustments: TlvField(1, TlvArray(TlvSlotAdjustment, { maxLength: 10 })),\n\n        /**\n         * This field shall indicate the cause of the request from the EMS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6.3\n         */\n        cause: TlvField(2, TlvEnum<AdjustmentCause>())\n    });\n\n    /**\n     * Input to the DeviceEnergyManagement modifyForecastRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6\n     */\n    export interface ModifyForecastRequest extends TypeFromSchema<typeof TlvModifyForecastRequest> {}\n\n    /**\n     * The ConstraintsStruct allows a client to inform an ESA about a constraint period (such as a grid event, or\n     * perhaps excess solar PV). The format allows the client to suggest that the ESA can either turn up its energy\n     * consumption, or turn down its energy consumption during this period.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13\n     */\n    export const TlvConstraints = TlvObject({\n        /**\n         * This field shall indicate the start time of the constraint period that the client wishes the ESA to compute\n         * a new Forecast.\n         *\n         * This value is in UTC and MUST be in the future.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13.1\n         */\n        startTime: TlvField(0, TlvEpochS),\n\n        /**\n         * This field shall indicate the duration of the constraint in seconds.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13.2\n         */\n        duration: TlvField(1, TlvUInt32.bound({ min: 0, max: 86400 })),\n\n        /**\n         * This field shall indicate the nominal power that client wishes the ESA to operate at during the constrained\n         * period. It MUST be between the AbsMinPower and AbsMaxPower attributes as advertised by the ESA if it\n         * supports PFR.\n         *\n         * This is a signed value and can be used to indicate charging or discharging. If the ESA does NOT support PFR\n         * this value shall be ignored by the ESA.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13.3\n         */\n        nominalPower: TlvOptionalField(2, TlvInt64),\n\n        /**\n         * This field shall indicate the maximum energy that can be transferred to or from the ESA during the\n         * constraint period.\n         *\n         * This is a signed value and can be used to indicate charging or discharging. If the ESA does NOT support PFR\n         * this value may be ignored by the ESA.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13.4\n         */\n        maximumEnergy: TlvOptionalField(3, TlvInt64),\n\n        /**\n         * This field shall indicate the turn up or turn down nature that the grid wants as the outcome by the ESA\n         * during the constraint period.\n         *\n         * This is expressed as a signed value between -100 to +100. A value of 0 would indicate no bias to using more\n         * or less energy. A negative value indicates a request to use less energy. A positive value indicates a\n         * request to use more energy.\n         *\n         * Note that the mapping between values and operation is manufacturer specific.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13.5\n         */\n        loadControl: TlvOptionalField(4, TlvInt8)\n    });\n\n    /**\n     * The ConstraintsStruct allows a client to inform an ESA about a constraint period (such as a grid event, or\n     * perhaps excess solar PV). The format allows the client to suggest that the ESA can either turn up its energy\n     * consumption, or turn down its energy consumption during this period.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.13\n     */\n    export interface Constraints extends TypeFromSchema<typeof TlvConstraints> {}\n\n    /**\n     * Input to the DeviceEnergyManagement requestConstraintBasedForecast command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.7\n     */\n    export const TlvRequestConstraintBasedForecastRequest = TlvObject({\n        /**\n         * This field shall indicate the series of turn up or turn down power requests that the ESA is being asked to\n         * constrain its operation within.\n         *\n         * For example, a grid event which requires devices to reduce power (turn down) between 4pm and 6pm and due to\n         * excess power on the grid overnight, may request ESAs to increase their power demand (turn up) between\n         * midnight and 6am.\n         *\n         * If this ESA supports PFR this would have 2 entries in the list as follows:\n         *\n         * If this ESA supports SFR where it does not know the actual power, but has an understanding of the functions\n         * that use more energy, it could be requested to use more or less energy using the LoadControl field as\n         * follows:\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.7.1\n         */\n        constraints: TlvField(0, TlvArray(TlvConstraints, { maxLength: 10 })),\n\n        /**\n         * This field shall indicate the cause of the request from the EMS.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.7.2\n         */\n        cause: TlvField(1, TlvEnum<AdjustmentCause>())\n    });\n\n    /**\n     * Input to the DeviceEnergyManagement requestConstraintBasedForecast command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.7\n     */\n    export interface RequestConstraintBasedForecastRequest extends TypeFromSchema<typeof TlvRequestConstraintBasedForecastRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.2\n     */\n    export enum EsaType {\n        /**\n         * EV Supply Equipment\n         */\n        Evse = 0,\n\n        /**\n         * Space heating appliance\n         */\n        SpaceHeating = 1,\n\n        /**\n         * Water heating appliance\n         */\n        WaterHeating = 2,\n\n        /**\n         * Space cooling appliance\n         */\n        SpaceCooling = 3,\n\n        /**\n         * Space heating and cooling appliance\n         */\n        SpaceHeatingCooling = 4,\n\n        /**\n         * Battery Electric Storage System\n         */\n        BatteryStorage = 5,\n\n        /**\n         * Solar PV inverter\n         */\n        SolarPv = 6,\n\n        /**\n         * Fridge / Freezer\n         */\n        FridgeFreezer = 7,\n\n        /**\n         * Washing Machine\n         */\n        WashingMachine = 8,\n\n        /**\n         * Dishwasher\n         */\n        Dishwasher = 9,\n\n        /**\n         * Cooking appliance\n         */\n        Cooking = 10,\n\n        /**\n         * Home water pump (e.g. drinking well)\n         */\n        HomeWaterPump = 11,\n\n        /**\n         * Irrigation water pump\n         */\n        IrrigationWaterPump = 12,\n\n        /**\n         * Pool pump\n         */\n        PoolPump = 13,\n\n        /**\n         * Other appliance type\n         */\n        Other = 255\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.7.3\n     */\n    export enum EsaState {\n        /**\n         * The ESA is not available to the EMS (e.g. start- up, maintenance mode)\n         */\n        Offline = 0,\n\n        /**\n         * The ESA is working normally and can be controlled by the EMS\n         */\n        Online = 1,\n\n        /**\n         * The ESA has developed a fault and cannot provide service\n         */\n        Fault = 2,\n\n        /**\n         * The ESA is in the middle of a power adjustment event\n         */\n        PowerAdjustActive = 3,\n\n        /**\n         * The ESA is currently paused by a client using the PauseRequest command\n         */\n        Paused = 4\n    }\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports feature PowerAdjustment.\n     */\n    export const PowerAdjustmentComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates how the ESA can be adjusted at the current time. This attribute SHOULD be updated regularly by\n             * ESAs.\n             *\n             * For example, a battery storage inverter may need to regulate its internal temperature, or the charging\n             * rate of the battery may be limited due to cold temperatures, or a change in the state of charge of the\n             * battery may mean that the maximum charging or discharging rate is limited.\n             *\n             * An empty list shall indicate that no power adjustment is currently possible.\n             *\n             * Multiple entries in the list allow to indicate that permutations of scenarios may be possible.\n             *\n             * For example, a 10kWh battery could be at 80% state of charge. If charging at 2kW, then it would be full\n             * in 1 hour. However, it could be discharged at 2kW for 4 hours.\n             *\n             * In this example the list of PowerAdjustStructs allows multiple scenarios to be offered as follows:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.6\n             */\n            powerAdjustmentCapability: Attribute(\n                0x5,\n                TlvNullable(TlvArray(TlvPowerAdjust, { maxLength: 8 })),\n                { default: null }\n            )\n        },\n\n        commands: {\n            /**\n             * Allows a client to request an adjustment in the power consumption of an ESA for a specified duration.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.1\n             */\n            powerAdjustRequest: Command(0x0, TlvPowerAdjustRequest, 0x0, TlvNoResponse),\n\n            /**\n             * Allows a client to cancel an ongoing PowerAdjustmentRequest operation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.2\n             */\n            cancelPowerAdjustRequest: Command(0x1, TlvNoArguments, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when the Power Adjustment session is started.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.1\n             */\n            powerAdjustStart: Event(0x0, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when the Power Adjustment session ends.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.2\n             */\n            powerAdjustEnd: Event(0x1, EventPriority.Info, TlvPowerAdjustEndEvent)\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports features PowerForecastReporting or\n     * StateForecastReporting.\n     */\n    export const PowerForecastReportingOrStateForecastReportingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute allows an ESA to share its intended forecast with a client (such as an Energy Management\n             * System).\n             *\n             * A null value indicates that there is no forecast currently available\n             *\n             * yet been selected by the user).\n             *\n             * A server may reset this value attribute to null on a reboot, and it does not need to persist any\n             * previous forecasts.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.7\n             */\n            forecast: Attribute(0x6, TlvNullable(TlvForecast), { default: null })\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports features PowerAdjustment,\n     * StartTimeAdjustment, Pausable, ForecastAdjustment or ConstraintBasedAdjustment.\n     */\n    export const PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the current Opt-Out state of the ESA. The ESA may have a local user interface to allow the\n             * user to control this OptOutState. An EMS may subscribe to the OptOutState to get notified about changes\n             * in operational state.\n             *\n             * If the ESA is in the LocalOptOut or OptOut states, so it cannot be controlled by an EMS for local\n             * optimization reasons, it shall reject any commands which have the AdjustmentCauseEnum value\n             * LocalOptimization. If the ESA is in the GridOptOut or OptOut states, so it cannot be controlled by an\n             * EMS for grid optimization reasons, it shall reject any commands which have the AdjustmentCauseEnum value\n             * GridOptimization. If the ESA is in the LocalOptOut, GridOptOut, or NoOptOut states, the device is still\n             * permitted to optimize its own energy usage, for example, using tariff information it may obtain.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.8\n             */\n            optOutState: Attribute(0x7, TlvEnum<OptOutState>(), { default: OptOutState.NoOptOut })\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports feature Pausable.\n     */\n    export const PausableComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Allows a client to temporarily pause an operation and reduce the ESAs energy demand.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.4\n             */\n            pauseRequest: Command(0x3, TlvPauseRequest, 0x3, TlvNoResponse),\n\n            /**\n             * Allows a client to cancel the PauseRequest command and enable earlier resumption of operation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.5\n             */\n            resumeRequest: Command(0x4, TlvNoArguments, 0x4, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when the ESA enters the Paused state. There is no data for this event.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.3\n             */\n            paused: Event(0x2, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when the ESA leaves the Paused state and resumes operation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.10.4\n             */\n            resumed: Event(0x3, EventPriority.Info, TlvResumedEvent)\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports feature StartTimeAdjustment.\n     */\n    export const StartTimeAdjustmentComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Allows a client to adjust the start time of a Forecast sequence that has not yet started operation (i.e.\n             * where the current Forecast StartTime is in the future).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.3\n             */\n            startTimeAdjustRequest: Command(0x2, TlvStartTimeAdjustRequest, 0x2, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports feature ForecastAdjustment.\n     */\n    export const ForecastAdjustmentComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Allows a client to modify a Forecast within the limits allowed by the ESA.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.6\n             */\n            modifyForecastRequest: Command(0x5, TlvModifyForecastRequest, 0x5, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports feature ConstraintBasedAdjustment.\n     */\n    export const ConstraintBasedAdjustmentComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Allows a client to ask the ESA to recompute its Forecast based on power and time constraints.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.7\n             */\n            requestConstraintBasedForecast: Command(0x6, TlvRequestConstraintBasedForecastRequest, 0x6, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A DeviceEnergyManagementCluster supports these elements if it supports features StartTimeAdjustment,\n     * ForecastAdjustment or ConstraintBasedAdjustment.\n     */\n    export const StartTimeAdjustmentOrForecastAdjustmentOrConstraintBasedAdjustmentComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Allows a client to request cancellation of a previous adjustment request in a StartTimeAdjustRequest,\n             * ModifyForecastRequest or RequestConstraintBasedForecast command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.9.8\n             */\n            cancelRequest: Command(0x7, TlvNoArguments, 0x7, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all DeviceEnergyManagement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x98,\n        name: \"DeviceEnergyManagement\",\n        revision: 3,\n\n        features: {\n            /**\n             * PowerAdjustment\n             *\n             * For Energy Smart Appliances (ESA) the definition of being 'smart' mandates that they can report their\n             * current power adjustment capability and have an EMS request a temporary adjustment. This may typically\n             * be to curtail power requirements during peak periods, but can also be used to turn on an ESA if there is\n             * excess renewable or local generation (Solar PV).\n             *\n             * For example, a home may have solar PV which often produces more power than the home requires,\n             *\n             * resulting in the excess power flowing into the grid. This excess power naturally fluctuates when clouds\n             * pass overhead and other loads in the home are switched on and off.\n             *\n             * EVSE Example: An EMS may therefore be able to turn on the EVSE (if the vehicle is plugged in) and can\n             * start charging the vehicle, and periodically modify the charging power depending on PV generation and\n             * other home loads, so as to minimize import and export to the grid.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.1\n             */\n            powerAdjustment: BitFlag(0),\n\n            /**\n             * PowerForecastReporting\n             *\n             * For Energy Smart Appliances (ESA) the definition of being 'smart' implies that they can report their\n             * indicative forecast power demands or generation, to a greater or lesser extent. For some ESAs this is\n             * highly predictable (in terms of both power and time), in other appliances this is more challenging and\n             * only a basic level of forecast is possible.\n             *\n             * Forecasts are defined from a current time, using a slot format, where the slot is akin to a relatively\n             * constant operating mode.\n             *\n             * Washing machine example: a washing machine may have stages of a washing cycle: heating, tumbling, rinse\n             * and spin stages. At each stage, the approximate minimum and maximum power consumption may be known, as\n             * well as the duration of that stage.\n             *\n             * In some circumstances the ESA may allow the stage to be delayed or paused (subject to safety and\n             * manufacturer\u2019s discretion and user preferences).\n             *\n             * Typically, appliances with a heating element cannot have their power consumption adjusted and can only\n             * be paused or delayed.\n             *\n             * Some ESAs may not be flexible other than a delayed cycle start (for example, once the washing cycle has\n             * been started then they run continuously until the cycle completes).\n             *\n             * Appliances that only support the PowerForecastReporting and not any of the adjustment features may\n             * indicate that they are not flexible in the forecast slot format.\n             *\n             * The PowerForecastReporting and the adjustment features aim to align to the [SAREF4ENER] ontology.\n             *\n             * Inverter driven ESAs: some inverter driven ESAs can consume or generate a variable amount of power.\n             *\n             * For example, a single phase EVSE can be adjusted in the range of 6-32Amps in 0.6 Amp steps in EU or on a\n             * hardwired 120V supply in the range of 6-15 Amps in US.\n             *\n             * For example, a home battery may be adjusted to charge or discharge in steps of 1W.\n             *\n             * For example, a heat pump may be able to modulate its compressor inverter between 20-100% of its rated\n             * power.\n             *\n             * The ESA indicates its power adjustment range and its nominal power consumption as part of its Forecast.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.2\n             */\n            powerForecastReporting: BitFlag(1),\n\n            /**\n             * StateForecastReporting\n             *\n             * Some ESAs do not know their actual power consumption, but do know the state of operation. Like the\n             * PowerForecastingReporting feature, this uses the same slot structure mechanism to indicate a change in\n             * state vs time.\n             *\n             * An external observing EMS may have access to real-time meter readings, and could learn the typical power\n             * consumption based on the advertised internal state of the ESA.\n             *\n             * To enable this capability, the ESA shall report its internal operational state using an manufacturer\n             * specific value.\n             *\n             * Once the EMS has built a model of the state vs observed power consumption, it may request a forecast\n             * adjustment for particular times of the day, encouraging the ESA to use power at alternative times.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.3\n             */\n            stateForecastReporting: BitFlag(2),\n\n            /**\n             * StartTimeAdjustment\n             *\n             * ESAs which support the Start Time Adjustment feature, allow an EMS to recommend a change to the start\n             * time of the energy transfer that the ESA has previously suggested it would use.\n             *\n             * Washing machine example: A Washing Machine may have been set to start a wash cycle at 9pm when the\n             * variable tariff normally reduces.\n             *\n             * However, the EMS is aware that a grid event has occurred, making it cheaper to run the cycle at a later\n             * time, but the washing machine is not aware of this.\n             *\n             * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the\n             * washing machine has a power profile suggesting it will start the wash cycle at 9pm, but the EMS now\n             * knows that the grid event means it will be cheaper to delay the start until 11pm.\n             *\n             * The EMS can then optimize the cost by asking the washing machine to delay starting the wash cycle until\n             * 11pm.\n             *\n             * It does this by sending a StartTimeAdjustRequest to the washing machine to request delaying the start of\n             * the washing cycle.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.4\n             */\n            startTimeAdjustment: BitFlag(3),\n\n            /**\n             * Pausable\n             *\n             * ESAs which support the Pausable feature, allow an EMS to recommend a pause in the middle of a forecast\n             * power profile that the ESA is currently using.\n             *\n             * Washing machine example: A Washing Machine is in operation, and starting its water heating step.\n             *\n             * However, the EMS becomes aware from the smart meter that the total home load on the grid is close to\n             * exceeding its allowed total grid load.\n             *\n             * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the\n             * washing machine has a power profile suggesting its current step in the wash cycle is using power to heat\n             * the water, but that this step can be paused.\n             *\n             * The EMS can then reduce the grid load by asking the washing machine to pause the wash cycle for a short\n             * duration.\n             *\n             * It does this by sending a PauseRequest to the washing machine to request pausing the current step of the\n             * forecast power usage for a period to allow other home loads to finish before resuming the washing cycle.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.5\n             */\n            pausable: BitFlag(4),\n\n            /**\n             * ForecastAdjustment\n             *\n             * ESAs which support the Forecast adjustment feature, allow an EMS to recommend a change to the start,\n             * duration and/or power level limits of the steps of the power profile that the ESA has previously\n             * suggested it would use.\n             *\n             * Heat pump and Solar PV example: A heat pump may have the ability to heat hot water as well as heating\n             * the home. The heat pump scheduling system may have determined that the home will be unoccupied during\n             * the day, or that the indoor temperature is above the set-point and so it knows that it will not need to\n             * heat the home.\n             *\n             * However, the hot water tank is likely to need to be reheated before the homeowner comes home in the\n             * evening. The heat pump is not aware that the property also has a solar PV inverter which is also an ESA\n             * that is communicating with the EMS.\n             *\n             * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the heat\n             * pump has a power profile suggesting it needs to heat hot water around 6pm. The solar PV inverter has\n             * forecast that it will generate 3.6kW of power during the middle of the day and into the afternoon before\n             * the sun goes down.\n             *\n             * The EMS can then optimize the home considering other non-ESA loads and can ask the heat pump to heat the\n             * hot water around 3pm when it has forecast that excess solar power will be available.\n             *\n             * It does this by sending a ModifyForecastRequest to the heat pump and asks the heat pump to expect to run\n             * at a lower power consumption (within the solar excess power) which requires the heat pump to run for a\n             * longer duration to achieve its required energy demand.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.6\n             */\n            forecastAdjustment: BitFlag(5),\n\n            /**\n             * ConstraintBasedAdjustment\n             *\n             * ESAs which support the Constraint-Based Adjustment feature allow an EMS to inform the ESA of periods\n             * during which power usage should be modified (for example when the EMS has been made aware that the grid\n             * supplier has requested reduced energy usage due to overall peak grid demand) and may cause the ESA to\n             * modify the intended power profile has previously suggested it would use.\n             *\n             * EVSE example: An EVSE scheduling system may have determined that the vehicle would be charged starting\n             * at a moderate rate at 1am, so that it has enough charge by the time it is needed later that morning.\n             *\n             * However, the DSR service provider has informed the EMS that due to high forecast winds it is now\n             * forecast that there will be very cheap energy available from wind generation between 2am and 3am.\n             *\n             * The EMS first requests the Forecast data from each of its registered ESAs. It determines that the\n             *\n             * EVSE has a power profile suggesting it plans to start charging the vehicle at 1am.\n             *\n             * The EMS can then try to reduce the cost of charging the EV by informing the EVSE of the desire to\n             * increase the charging between scheduled times.\n             *\n             * It does this by sending a RequestConstraintBasedForecast to the EVSE and asks it to run at a higher\n             * NominalPower consumption during the constraint period, which may require it to decrease its charge rate\n             * outside the constraint period to achieve its required energy demand.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.4.7\n             */\n            constraintBasedAdjustment: BitFlag(6)\n        },\n\n        attributes: {\n            /**\n             * Indicates the type of ESA.\n             *\n             * This attribute enables an EMS to understand some of the basic properties about how the energy may be\n             * consumed, generated, and stored by the ESA.\n             *\n             * For example, the heat energy converted by a heat pump will naturally be lost through the building to the\n             * outdoor environment relatively quickly, compared to storing heat in a well-insulated hot water tank.\n             * Similarly, battery storage and EVs can store electrical energy for much longer durations.\n             *\n             * This attribute can also help the EMS display information to a user and to make basic assumptions about\n             * typical best use of energy. For example, an EVSE may not always have an EV plugged in, so knowing the\n             * type of ESA that is being controlled can allow advanced energy management strategies.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.1\n             */\n            esaType: FixedAttribute(0x0, TlvEnum<EsaType>(), { default: EsaType.Other }),\n\n            /**\n             * Indicates whether the ESA is classed as a generator or load. This allows an EMS to understand whether\n             * the power values reported by the ESA need to have their sign inverted when dealing with forecasts and\n             * adjustments.\n             *\n             * For example, a solar PV inverter (being a generator) may produce positive values to indicate generation,\n             * however an EMS when predicting the total home load would need to subtract these positive values from the\n             * loads to compute a net import at the grid meter.\n             *\n             * For example, a home battery storage system (BESS) which needs to charge the battery and then discharge\n             * to the home loads, would be classed as a generator. These types of devices shall have this field set to\n             * true. When generating its forecast or advertising its PowerAdjustmentCapability, the power values shall\n             * be positive to indicate discharging to the loads in the home, and negative to indicate when it is\n             * charging its battery.\n             *\n             * GRID meter = \u03A3 LoadPowers - \u03A3 GeneratorPowers\n             *\n             * Example:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.2\n             */\n            esaCanGenerate: FixedAttribute(0x1, TlvBoolean, { default: false }),\n\n            /**\n             * Indicates the current state of the ESA.\n             *\n             * If the ESA is in the Offline or Fault state it cannot be controlled by an EMS, and may not be able to\n             * report its Forecast information. An EMS may subscribe to the ESAState to get notified about changes in\n             * operational state.\n             *\n             * The ESA may have a local user interface to allow a service technician to put the ESA into Offline mode,\n             * for example to avoid the EMS accidentally starting or stopping the appliance when it is being serviced\n             * or tested.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.3\n             */\n            esaState: Attribute(0x2, TlvEnum<EsaState>(), { default: EsaState.Offline }),\n\n            /**\n             * Indicates the minimum electrical power that the ESA can consume when switched on. This does not include\n             * when in power save or standby modes.\n             *\n             * Note that for Generator ESAs that can charge an internal battery (such as a battery storage inverter),\n             * the AbsMinPower will be a negative number representing the maximum power that the ESA can charge its\n             * internal battery.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.4\n             */\n            absMinPower: Attribute(0x3, TlvInt64, { default: 0 }),\n\n            /**\n             * Indicates the maximum electrical power that the ESA can consume when switched on.\n             *\n             * The value of the AbsMaxPower attribute shall be limited\n             *\n             * AbsMaxPower >= AbsMinPower\n             *\n             * Note that for Generator ESAs that can discharge a battery to loads in the home (such as a battery\n             * storage inverter), the AbsMaxPower will be a positive number representing the maximum power at which the\n             * ESA can discharge its internal battery.\n             *\n             * For example, a battery storage inverter that can charge its battery at a maximum power of 2000W and can\n             * discharge the battery at a maximum power of 3000W, would have a AbsMinPower: -2000, AbsMaxPower: 3000W.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2.8.5\n             */\n            absMaxPower: Attribute(0x4, TlvInt64, { default: 0 })\n        },\n\n        /**\n         * This metadata controls which DeviceEnergyManagementCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { powerAdjustment: true }, component: PowerAdjustmentComponent },\n            {\n                flags: { powerForecastReporting: true },\n                component: PowerForecastReportingOrStateForecastReportingComponent\n            },\n            {\n                flags: { stateForecastReporting: true },\n                component: PowerForecastReportingOrStateForecastReportingComponent\n            },\n            {\n                flags: { powerAdjustment: true },\n                component: PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { startTimeAdjustment: true },\n                component: PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { pausable: true },\n                component: PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { forecastAdjustment: true },\n                component: PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { constraintBasedAdjustment: true },\n                component: PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            { flags: { pausable: true }, component: PausableComponent },\n            { flags: { startTimeAdjustment: true }, component: StartTimeAdjustmentComponent },\n            { flags: { forecastAdjustment: true }, component: ForecastAdjustmentComponent },\n            { flags: { constraintBasedAdjustment: true }, component: ConstraintBasedAdjustmentComponent },\n            {\n                flags: { startTimeAdjustment: true },\n                component: StartTimeAdjustmentOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { forecastAdjustment: true },\n                component: StartTimeAdjustmentOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            {\n                flags: { constraintBasedAdjustment: true },\n                component: StartTimeAdjustmentOrForecastAdjustmentOrConstraintBasedAdjustmentComponent\n            },\n            { flags: { feature: false, startTimeAdjustment: true, stateForecastReporting: false }, component: false },\n            { flags: { feature: false, pausable: true, stateForecastReporting: false }, component: false },\n            { flags: { feature: false, forecastAdjustment: true, stateForecastReporting: false }, component: false },\n            {\n                flags: { feature: false, constraintBasedAdjustment: true, stateForecastReporting: false },\n                component: false\n            },\n            { flags: { feature: false, startTimeAdjustment: true, powerForecastReporting: false }, component: false },\n            { flags: { feature: false, pausable: true, powerForecastReporting: false }, component: false },\n            { flags: { feature: false, forecastAdjustment: true, powerForecastReporting: false }, component: false },\n            {\n                flags: { feature: false, constraintBasedAdjustment: true, powerForecastReporting: false },\n                component: false\n            },\n\n            {\n                flags: {\n                    powerAdjustment: false,\n                    powerForecastReporting: false,\n                    stateForecastReporting: false,\n                    startTimeAdjustment: false,\n                    pausable: false,\n                    forecastAdjustment: false,\n                    constraintBasedAdjustment: false\n                },\n\n                component: false\n            }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster allows a client to manage the power draw of a device. An example of such a client could be an\n     * Energy Management System (EMS) which controls an Energy Smart Appliance (ESA).\n     *\n     * In most deployments the EMS will be the client, and the ESA will host the Energy Management Cluster server.\n     *\n     * Figure 15. Example of the how an EMS is a client of multiple ESAs Energy Management clusters.\n     *\n     * This cluster is intended to be generic in nature and could apply to any electrical load or generator (e.g. a\n     * Battery Electric Storage System - BESS, solar PV inverter, EVSE, HVAC, heat pump, hot water heater, white goods\n     * appliances etc).\n     *\n     * It consists of the following areas which shall be supported by all devices implementing this cluster:\n     *\n     *   \u2022 Description of ESA and its capabilities & power limits (sometimes referred to as a nameplate)\n     *\n     *   \u2022 Current state of operation (including user opt-out, safety limitations / alarms) There are some optional\n     *     capabilities that some ESAs may be able to offer:\n     *\n     *   \u2022 Ability to control the load or generation\n     *\n     *   \u2022 Forecast data, including when it can be flexible (i.e. modify the power or time period)\n     *\n     *   \u2022 The ability to have their power profile adjusted by an EMS, and to provide an updated Forecast back to the\n     *     EMS.\n     *\n     * This allows the EMS to manage multiple home loads and where ESAs can be flexible, continuously optimizing the\n     * home energy to minimize cost, reduce CO2 impact, maximize self-consumption of solar PV and provide Demand Side\n     * Response (DSR) Grid services.\n     *\n     * It is likely that the ESA may also use the Pricing Cluster to obtain incentive signals such as 'grid carbon\n     * intensity', 'time of use' or 'type of use' tariffs to schedule its operation to run at the cheapest and greenest\n     * times.\n     *\n     * Figure 16. Example of the how an HVAC may use multiple clusters\n     *\n     * NOTE\n     *\n     * Grid Services are market dependent and will use other protocols ([OpenADR] / [IEEE2030.5]) to communicate grid\n     * events to the EMS. These are outside the scope of Matter.\n     *\n     * NOTE\n     *\n     * Different markets may follow different approaches, but the UK [PAS1878] and [EUCodeOfConduct] give examples of\n     * how ESAs may be mandated to support these features in the future.\n     *\n     * NOTE Support of Device Energy Management Cluster is provisional.\n     *\n     * Per the Matter specification you cannot use {@link DeviceEnergyManagementCluster} without enabling certain\n     * feature combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const PA = { powerAdjustment: true };\n    const PFR = { powerForecastReporting: true };\n    const SFR = { stateForecastReporting: true };\n    const STA = { startTimeAdjustment: true };\n    const PAU = { pausable: true };\n    const FA = { forecastAdjustment: true };\n    const CON = { constraintBasedAdjustment: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            powerAdjustmentCapability: MutableCluster.AsConditional(\n                PowerAdjustmentComponent.attributes.powerAdjustmentCapability,\n                { mandatoryIf: [PA] }\n            ),\n            forecast: MutableCluster.AsConditional(\n                PowerForecastReportingOrStateForecastReportingComponent.attributes.forecast,\n                { mandatoryIf: [PFR, SFR] }\n            ),\n            optOutState: MutableCluster.AsConditional(\n                PowerAdjustmentOrStartTimeAdjustmentOrPausableOrForecastAdjustmentOrConstraintBasedAdjustmentComponent.attributes.optOutState,\n                { mandatoryIf: [PA, STA, PAU, FA, CON] }\n            )\n        },\n\n        commands: {\n            powerAdjustRequest: MutableCluster.AsConditional(\n                PowerAdjustmentComponent.commands.powerAdjustRequest,\n                { mandatoryIf: [PA] }\n            ),\n            cancelPowerAdjustRequest: MutableCluster.AsConditional(\n                PowerAdjustmentComponent.commands.cancelPowerAdjustRequest,\n                { mandatoryIf: [PA] }\n            ),\n            startTimeAdjustRequest: MutableCluster.AsConditional(\n                StartTimeAdjustmentComponent.commands.startTimeAdjustRequest,\n                { mandatoryIf: [STA] }\n            ),\n            pauseRequest: MutableCluster.AsConditional(PausableComponent.commands.pauseRequest, { mandatoryIf: [PAU] }),\n            resumeRequest: MutableCluster.AsConditional(\n                PausableComponent.commands.resumeRequest,\n                { mandatoryIf: [PAU] }\n            ),\n            modifyForecastRequest: MutableCluster.AsConditional(\n                ForecastAdjustmentComponent.commands.modifyForecastRequest,\n                { mandatoryIf: [FA] }\n            ),\n            requestConstraintBasedForecast: MutableCluster.AsConditional(\n                ConstraintBasedAdjustmentComponent.commands.requestConstraintBasedForecast,\n                { mandatoryIf: [CON] }\n            ),\n            cancelRequest: MutableCluster.AsConditional(\n                StartTimeAdjustmentOrForecastAdjustmentOrConstraintBasedAdjustmentComponent.commands.cancelRequest,\n                { mandatoryIf: [STA, FA, CON] }\n            )\n        },\n\n        events: {\n            powerAdjustStart: MutableCluster.AsConditional(\n                PowerAdjustmentComponent.events.powerAdjustStart,\n                { mandatoryIf: [PA] }\n            ),\n            powerAdjustEnd: MutableCluster.AsConditional(\n                PowerAdjustmentComponent.events.powerAdjustEnd,\n                { mandatoryIf: [PA] }\n            ),\n            paused: MutableCluster.AsConditional(PausableComponent.events.paused, { mandatoryIf: [PAU] }),\n            resumed: MutableCluster.AsConditional(PausableComponent.events.resumed, { mandatoryIf: [PAU] })\n        }\n    });\n\n    /**\n     * This cluster supports all DeviceEnergyManagement features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type DeviceEnergyManagementCluster = DeviceEnergyManagement.Cluster;\nexport const DeviceEnergyManagementCluster = DeviceEnergyManagement.Cluster;\nClusterRegistry.register(DeviceEnergyManagement.Complete);\n"],
  "mappings": "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",
  "names": ["DeviceEnergyManagement", "Feature", "AdjustmentCause", "Cause", "CostType", "ForecastUpdateReason", "OptOutState", "EsaType", "EsaState"]
}
