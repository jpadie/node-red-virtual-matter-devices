{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OccupancySensingCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalWritableAttribute, AccessLevel } from \"../Cluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvUInt8, TlvBitmap, TlvEnum, TlvUInt16 } from \"../../tlv/TlvNumber.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OccupancySensing {\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.4.1\n     */\n    export const Occupancy = {\n        /**\n         * Indicates the sensed occupancy state\n         *\n         * If this bit is set, it shall indicate the occupied state else if the bit if not set, it shall indicate the\n         * unoccupied state.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.4.1.1\n         */\n        occupied: BitFlag(0)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.4.3\n     */\n    export enum OccupancySensorType {\n        /**\n         * Indicates a passive infrared sensor.\n         */\n        Pir = 0,\n\n        /**\n         * Indicates a ultrasonic sensor.\n         */\n        Ultrasonic = 1,\n\n        /**\n         * Indicates a passive infrared and ultrasonic sensor.\n         */\n        PirAndUltrasonic = 2,\n\n        /**\n         * Indicates a physical contact sensor.\n         */\n        PhysicalContact = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.4.2\n     */\n    export const OccupancySensorTypeBitmap = {\n        /**\n         * Indicates a passive infrared sensor.\n         */\n        pir: BitFlag(0),\n\n        /**\n         * Indicates a ultrasonic sensor.\n         */\n        ultrasonic: BitFlag(1),\n\n        /**\n         * Indicates a physical contact sensor.\n         */\n        physicalContact: BitFlag(2)\n    };\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x406,\n        name: \"OccupancySensing\",\n        revision: 4,\n\n        attributes: {\n            /**\n             * This attribute indicates the sensed (processed) status of occupancy.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.1\n             */\n            occupancy: Attribute(0x0, TlvBitmap(TlvUInt8, Occupancy)),\n\n            /**\n             * This attribute specifies the type of the occupancy sensor.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.2\n             */\n            occupancySensorType: Attribute(0x1, TlvEnum<OccupancySensorType>()),\n\n            /**\n             * This attribute specifies the types of the occupancy sensor. Each bit position, if set, indicates the\n             * corresponding sensing capability is implemented.\n             *\n             * The value of the OccupancySensorType shall be aligned to the value of the OccupancySensorTypeBitmap\n             * attribute as defined below.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.3\n             */\n            occupancySensorTypeBitmap: Attribute(0x2, TlvBitmap(TlvUInt8, OccupancySensorTypeBitmap)),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the PIR sensor changes to its unoccupied\n             * state after the last detection of movement in the sensed area.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.4\n             */\n            pirOccupiedToUnoccupiedDelay: OptionalWritableAttribute(\n                0x10,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the PIR sensor changes to its occupied state\n             * after the detection of movement in the sensed area.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.5\n             */\n            pirUnoccupiedToOccupiedDelay: OptionalWritableAttribute(\n                0x11,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the number of movement detection events that must occur in the period\n             * PIRUnoccupiedToOccupiedDelay, before the PIR sensor changes to its occupied state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.6\n             */\n            pirUnoccupiedToOccupiedThreshold: OptionalWritableAttribute(\n                0x12,\n                TlvUInt8.bound({ min: 1, max: 254 }),\n                { default: 1, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the Ultrasonic sensor changes to its\n             * unoccupied state after the last detection of movement in the sensed area.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.7\n             */\n            ultrasonicOccupiedToUnoccupiedDelay: OptionalWritableAttribute(\n                0x20,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the Ultrasonic sensor changes to its\n             * occupied state after the detection of movement in the sensed area.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.8\n             */\n            ultrasonicUnoccupiedToOccupiedDelay: OptionalWritableAttribute(\n                0x21,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the number of movement detection events that must occur in the period\n             * UltrasonicUnoccupiedToOccupiedDelay, before the Ultrasonic sensor changes to its occupied state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.9\n             */\n            ultrasonicUnoccupiedToOccupiedThreshold: OptionalWritableAttribute(\n                0x22,\n                TlvUInt8.bound({ min: 1, max: 254 }),\n                { default: 1, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the physical contact occupancy sensor\n             * changes to its unoccupied state after detecting the unoccupied event.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.10\n             */\n            physicalContactOccupiedToUnoccupiedDelay: OptionalWritableAttribute(\n                0x30,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the time delay, in seconds, before the physical contact sensor changes to its\n             * occupied state after the detection of the occupied event.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.11\n             */\n            physicalContactUnoccupiedToOccupiedDelay: OptionalWritableAttribute(\n                0x31,\n                TlvUInt16,\n                { default: 0, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This attribute specifies the number of movement detection events that must occur in the period\n             * PhysicalContactUnoccupiedToOccupiedDelay, before the PhysicalContact sensor changes to its occupied\n             * state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7.5.12\n             */\n            physicalContactUnoccupiedToOccupiedThreshold: OptionalWritableAttribute(\n                0x32,\n                TlvUInt8.bound({ min: 1, max: 254 }),\n                { default: 1, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * The server cluster provides an interface to occupancy sensing functionality, including configuration and\n     * provision of notifications of occupancy status.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.7\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type OccupancySensingCluster = OccupancySensing.Cluster;\nexport const OccupancySensingCluster = OccupancySensing.Cluster;\nClusterRegistry.register(OccupancySensing.Complete);\n"],
  "mappings": "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",
  "names": ["OccupancySensing", "OccupancySensorType"]
}
