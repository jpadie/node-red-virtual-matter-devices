{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/AlarmBaseCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    FixedAttribute,\n    Command,\n    TlvNoResponse,\n    Attribute,\n    OptionalCommand,\n    Event,\n    EventPriority\n} from \"../Cluster.js\";\nimport { TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\n\nexport namespace AlarmBase {\n    /**\n     * These are optional features supported by AlarmBaseCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4\n     */\n    export enum Feature {\n        /**\n         * Reset (RESET)\n         *\n         * This feature indicates that alarms can be reset via the Reset command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4.1\n         */\n        Reset = \"Reset\"\n    }\n\n    /**\n     * Input to the AlarmBase reset command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.1\n     */\n    export const TlvResetRequest = TlvObject({\n        /**\n         * This field shall indicate a bitmap where each bit set in this field corresponds to an alarm that shall be\n         * reset to inactive in the State attribute unless the alarm definition requires manual intervention. If the\n         * alarms indicated are successfully reset, the response status code shall be SUCCESS, otherwise, the response\n         * status code shall be FAILURE.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.1.1\n         */\n        alarms: TlvField(0, TlvUInt32)\n    });\n\n    /**\n     * Input to the AlarmBase reset command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.1\n     */\n    export interface ResetRequest extends TypeFromSchema<typeof TlvResetRequest> {}\n\n    /**\n     * Input to the AlarmBase modifyEnabledAlarms command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.2\n     */\n    export const TlvModifyEnabledAlarmsRequest = TlvObject({\n        /**\n         * This field shall indicate a bitmap where each bit set in the this field corresponds to an alarm that SHOULD\n         * be enabled or suppressed. A value of 1 shall indicate that the alarm SHOULD be enabled while a value of 0\n         * shall indicate that the alarm SHOULD be suppressed.\n         *\n         * A server that receives this command with a Mask that includes bits that are set for unknown alarms shall\n         * respond with a status code of INVALID_COMMAND.\n         *\n         * A server that receives this command with a Mask that includes bits that are set for alarms which are not\n         * supported, as indicated in the Supported attribute, shall respond with a status code of INVALID_COMMAND.\n         *\n         * A server that is unable to enable a currently suppressed alarm, or is unable to suppress a currently enabled\n         * alarm shall respond with a status code of FAILURE; otherwise the server shall respond with a status code of\n         * SUCCESS.\n         *\n         * On a SUCCESS case, the server shall also change the value of the Mask attribute to the value of the\n         *\n         * Mask field from this command. After that the server shall also update the value of its State attribute to\n         * reflect the status of the new alarm set as indicated by the new value of the Mask attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.2.1\n         */\n        mask: TlvField(0, TlvUInt32)\n    });\n\n    /**\n     * Input to the AlarmBase modifyEnabledAlarms command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.2\n     */\n    export interface ModifyEnabledAlarmsRequest extends TypeFromSchema<typeof TlvModifyEnabledAlarmsRequest> {}\n\n    /**\n     * Body of the AlarmBase notify event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1\n     */\n    export const TlvNotifyEvent = TlvObject({\n        /**\n         * This field shall indicate those alarms that have become active.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1.1\n         */\n        active: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate those alarms that have become inactive.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1.2\n         */\n        inactive: TlvField(2, TlvUInt32),\n\n        /**\n         * This field shall be a copy of the new State attribute value that resulted in the event being generated. That\n         * is, this field shall have all the bits in Active set and shall NOT have any of the bits in Inactive set.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1.4\n         */\n        state: TlvField(3, TlvUInt32),\n\n        /**\n         * This field shall be a copy of the Mask attribute when this event was generated.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1.3\n         */\n        mask: TlvField(4, TlvUInt32)\n    });\n\n    /**\n     * Body of the AlarmBase notify event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1\n     */\n    export interface NotifyEvent extends TypeFromSchema<typeof TlvNotifyEvent> {}\n\n    /**\n     * A AlarmBaseCluster supports these elements if it supports feature Reset.\n     */\n    export const ResetComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm\n             * will be latched when set, and will not reset to inactive when the underlying condition which caused the\n             * alarm is no longer present, and so requires an explicit reset using the Reset command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.2\n             */\n            latch: FixedAttribute(0x1, TlvUInt32)\n        },\n\n        commands: {\n            /**\n             * This command resets active and latched alarms (if possible). Any generated Notify event shall contain\n             * fields that represent the state of the server after the command has been processed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.1\n             */\n            reset: Command(0x0, TlvResetRequest, 0x0, TlvNoResponse)\n        }\n    });\n\n    /**\n     * AlarmBase is a derived cluster, not to be used directly. These elements are present in all clusters derived from\n     * AlarmBase.\n     */\n    export const Base = MutableCluster.Component({\n        features: {\n            /**\n             * Reset\n             *\n             * This feature indicates that alarms can be reset via the Reset command.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.4.1\n             */\n            reset: BitFlag(0)\n        },\n\n        name: \"AlarmBase\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be\n             * enabled.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.1\n             */\n            mask: Attribute(0x0, TlvUInt32),\n\n            /**\n             * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the\n             * alarm is active, otherwise the alarm is inactive.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.3\n             */\n            state: Attribute(0x2, TlvUInt32),\n\n            /**\n             * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of\n             * true means the alarm is supported, otherwise the alarm is not supported.\n             *\n             * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.6.4\n             */\n            supported: FixedAttribute(0x3, TlvUInt32)\n        },\n\n        commands: {\n            /**\n             * This command allows a client to request that an alarm be enabled or suppressed at the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.7.2\n             */\n            modifyEnabledAlarms: OptionalCommand(0x1, TlvModifyEnabledAlarmsRequest, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when one or more alarms change state, and shall have these fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.15.8.1\n             */\n            notify: Event(0x0, EventPriority.Info, TlvNotifyEvent)\n        },\n\n        /**\n         * This metadata controls which AlarmBaseCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { reset: true }, component: ResetComponent })\n    });\n\n    const RESET = { reset: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster.Component({\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n        attributes: {\n            ...Base.attributes,\n            latch: MutableCluster.AsConditional(ResetComponent.attributes.latch, { mandatoryIf: [RESET] })\n        },\n        commands: {\n            ...Base.commands,\n            reset: MutableCluster.AsConditional(ResetComponent.commands.reset, { mandatoryIf: [RESET] })\n        },\n        events: Base.events\n    });\n\n    /**\n     * This cluster supports all AlarmBase features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n"],
  "mappings": "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",
  "names": ["AlarmBase", "Feature"]
}
