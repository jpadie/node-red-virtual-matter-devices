/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterDevice } from "../../MatterDevice.js";
import { Message } from "../../codec/MessageCodec.js";
import { ClusterId } from "../../datatype/ClusterId.js";
import { EventId } from "../../datatype/EventId.js";
import { EndpointInterface } from "../../endpoint/EndpointInterface.js";
import { EventHandler, EventStorageData } from "../../protocol/interaction/EventHandler.js";
import { TlvEventFilter } from "../../protocol/interaction/InteractionProtocol.js";
import { BitSchema, TypeFromPartialBitSchema } from "../../schema/BitmapSchema.js";
import { Session } from "../../session/Session.js";
import { Storage, StorageOperationResult } from "../../storage/Storage.js";
import { TlvSchema, TypeFromSchema } from "../../tlv/TlvSchema.js";
import { AccessLevel, Attributes, Cluster, Commands, Event, EventPriority, Events } from "../Cluster.js";
export type AnyEventServer<T, S extends Storage> = EventServer<T, S> | FabricSensitiveEventServer<T, S>;
export declare function createEventServer<T, F extends BitSchema, SF extends TypeFromPartialBitSchema<F>, A extends Attributes, C extends Commands, E extends Events, S extends Storage>(clusterDef: Cluster<F, SF, A, C, E>, eventDef: Event<T, F>, eventName: string, schema: TlvSchema<T>, priority: EventPriority, readAcl: AccessLevel | undefined): EventServer<T, S>;
export declare class EventServer<T, S extends Storage> {
    #private;
    readonly id: EventId;
    readonly clusterId: ClusterId;
    readonly name: string;
    readonly schema: TlvSchema<T>;
    readonly priority: EventPriority;
    private eventList;
    private readonly listeners;
    protected endpoint?: EndpointInterface;
    protected eventHandler?: EventHandler;
    hasFabricSensitiveData: boolean;
    constructor(id: EventId, clusterId: ClusterId, name: string, schema: TlvSchema<T>, priority: EventPriority, readAcl: AccessLevel | undefined);
    get readAcl(): AccessLevel;
    assignToEndpoint(endpoint: EndpointInterface): void;
    bindToEventHandler(eventHandler: EventHandler<S>): StorageOperationResult<S>;
    triggerEvent(data: T): StorageOperationResult<S>;
    addListener(listener: (event: EventStorageData<T>) => void): void;
    removeListener(listener: (event: EventStorageData<T>) => void): void;
    get(session: Session<MatterDevice>, isFabricFiltered: boolean, _message?: Message, filters?: TypeFromSchema<typeof TlvEventFilter>[]): EventStorageData<any>[];
}
export declare class FabricSensitiveEventServer<T, S extends Storage> extends EventServer<T, S> {
    hasFabricSensitiveData: boolean;
    get(session: Session<MatterDevice>, _isFabricFiltered: boolean, message?: Message, filters?: TypeFromSchema<typeof TlvEventFilter>[]): EventStorageData<any>[];
    triggerEvent(data: T): StorageOperationResult<S, void>;
}
//# sourceMappingURL=EventServer.d.ts.map