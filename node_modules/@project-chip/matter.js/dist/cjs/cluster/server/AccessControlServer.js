"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AccessControlServer_exports = {};
__export(AccessControlServer_exports, {
  AccessControlClusterHandler: () => AccessControlClusterHandler,
  createDefaultAccessControlClusterServer: () => createDefaultAccessControlClusterServer
});
module.exports = __toCommonJS(AccessControlServer_exports);
var import_MatterError = require("../../common/MatterError.js");
var import_CaseAuthenticatedTag = require("../../datatype/CaseAuthenticatedTag.js");
var import_ClusterId = require("../../datatype/ClusterId.js");
var import_DeviceTypeId = require("../../datatype/DeviceTypeId.js");
var import_EndpointNumber = require("../../datatype/EndpointNumber.js");
var import_GroupId = require("../../datatype/GroupId.js");
var import_NodeId = require("../../datatype/NodeId.js");
var import_Logger = require("../../log/Logger.js");
var import_StatusCode = require("../../protocol/interaction/StatusCode.js");
var import_SecureSession = require("../../session/SecureSession.js");
var import_TlvCodec = require("../../tlv/TlvCodec.js");
var import_TlvObject = require("../../tlv/TlvObject.js");
var import_DeepEqual = require("../../util/DeepEqual.js");
var import_AccessControlCluster = require("../definitions/AccessControlCluster.js");
var import_AttributeServer = require("./AttributeServer.js");
var import_ClusterServer = require("./ClusterServer.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const logger = import_Logger.Logger.get("AccessControlClusterServer");
const AccessControlClusterHandler = () => {
  let accessControlEntryChangedEvent = void 0;
  let accessControlExtensionChangedEvent = void 0;
  return {
    initializeClusterServer: ({ events: { accessControlEntryChanged, accessControlExtensionChanged } }) => {
      if (accessControlEntryChanged !== void 0) {
        accessControlEntryChangedEvent = accessControlEntryChanged;
      }
      if (accessControlExtensionChanged !== void 0) {
        accessControlExtensionChangedEvent = accessControlExtensionChanged;
      }
    },
    aclAttributeGetter: ({ session, isFabricFiltered }) => {
      return (0, import_AttributeServer.genericFabricScopedAttributeGetter)(
        session,
        !!isFabricFiltered,
        import_AccessControlCluster.AccessControlCluster,
        "acl",
        new Array()
      );
    },
    aclAttributeValidator: (value, {
      attributes: {
        accessControlEntriesPerFabric,
        subjectsPerAccessControlEntry,
        targetsPerAccessControlEntry
      }
    }) => {
      if (value.length > accessControlEntriesPerFabric.getLocal()) {
        throw new import_StatusCode.StatusResponseError("AccessControlEntriesPerFabric exceeded", import_StatusCode.StatusCode.ResourceExhausted);
      }
      for (const entry of value) {
        const { subjects, targets, privilege, authMode } = entry;
        if (privilege < 1 || privilege > 5) {
          throw new import_StatusCode.StatusResponseError(
            "Privilege must be a valid enum value between 1 and 5",
            import_StatusCode.StatusCode.ConstraintError
          );
        }
        if (authMode < 1 || authMode > 3) {
          throw new import_StatusCode.StatusResponseError(
            "AuthMode must be a valid enum value between 1 and 3",
            import_StatusCode.StatusCode.ConstraintError
          );
        }
        if (subjects !== null && subjects.length > subjectsPerAccessControlEntry.getLocal()) {
          throw new import_StatusCode.StatusResponseError(
            "SubjectsPerAccessControlEntry exceeded",
            import_StatusCode.StatusCode.ResourceExhausted
          );
        }
        if (targets !== null && targets.length > targetsPerAccessControlEntry.getLocal()) {
          throw new import_StatusCode.StatusResponseError(
            "TargetsPerAccessControlEntry exceeded",
            import_StatusCode.StatusCode.ResourceExhausted
          );
        }
        if (authMode === import_AccessControlCluster.AccessControl.AccessControlEntryAuthMode.Pase) {
          throw new import_StatusCode.StatusResponseError("AuthMode for ACL must not be PASE", import_StatusCode.StatusCode.ConstraintError);
        } else if (authMode === import_AccessControlCluster.AccessControl.AccessControlEntryAuthMode.Case) {
          if (subjects !== null) {
            for (const subject of subjects) {
              if (import_NodeId.NodeId.isCaseAuthenticatedTag(subject)) {
                const cat = import_NodeId.NodeId.extractAsCaseAuthenticatedTag(subject);
                if (import_CaseAuthenticatedTag.CaseAuthenticatedTag.getVersion(cat) === 0) {
                  throw new import_StatusCode.StatusResponseError(
                    "CaseAuthenticatedTag version 0 is not allowed",
                    import_StatusCode.StatusCode.ConstraintError
                  );
                }
              } else if (!import_NodeId.NodeId.isOperationalNodeId(subject)) {
                throw new import_StatusCode.StatusResponseError(
                  "Subject must be a valid OperationalNodeId or CaseAuthenticatedTag",
                  import_StatusCode.StatusCode.ConstraintError
                );
              }
            }
          }
        } else if (authMode === import_AccessControlCluster.AccessControl.AccessControlEntryAuthMode.Group) {
          if (privilege === import_AccessControlCluster.AccessControl.AccessControlEntryPrivilege.Administer) {
            throw new import_StatusCode.StatusResponseError(
              "Group ACLs must not have Administer privilege",
              import_StatusCode.StatusCode.ConstraintError
            );
          }
          if (subjects !== null) {
            for (const subject of subjects) {
              if ((0, import_GroupId.GroupId)(subject) === import_GroupId.GroupId.UNSPECIFIED_GROUP_ID) {
                throw new import_StatusCode.StatusResponseError(
                  "Subject must be a valid GroupId for Group ACLs",
                  import_StatusCode.StatusCode.ConstraintError
                );
              }
            }
          }
        }
        if (targets !== null) {
          for (const target of targets) {
            const { deviceType, endpoint, cluster } = target;
            if (deviceType !== null && endpoint !== null) {
              throw new import_StatusCode.StatusResponseError(
                "DeviceType and Endpoint are mutually exclusive",
                import_StatusCode.StatusCode.ConstraintError
              );
            }
            if (cluster === null && endpoint === null && deviceType === null) {
              throw new import_StatusCode.StatusResponseError(
                "At least one field must be present",
                import_StatusCode.StatusCode.ConstraintError
              );
            }
            if (cluster !== null && !import_ClusterId.ClusterId.isValid(cluster)) {
              throw new import_StatusCode.StatusResponseError(
                "Cluster must be a valid ClusterId",
                import_StatusCode.StatusCode.ConstraintError
              );
            }
            if (endpoint !== null && !import_EndpointNumber.EndpointNumber.isValid(endpoint)) {
              throw new import_StatusCode.StatusResponseError(
                "Endpoint must be a valid OperationalNodeId",
                import_StatusCode.StatusCode.ConstraintError
              );
            }
            if (deviceType !== null && !import_DeviceTypeId.DeviceTypeId.isValid(deviceType)) {
              throw new import_StatusCode.StatusResponseError(
                "DeviceType must be a valid DeviceType",
                import_StatusCode.StatusCode.ConstraintError
              );
            }
          }
        }
      }
    },
    aclAttributeSetter: (value, { session }) => {
      (0, import_SecureSession.assertSecureSession)(session);
      const fabric = session.context.getFabricByIndex(
        value[0]?.fabricIndex ?? session.associatedFabric.fabricIndex
      );
      if (fabric === void 0) {
        throw new import_MatterError.InternalError("Fabric not found. SHould never happen");
      }
      const oldValue = (0, import_AttributeServer.genericFabricScopedAttributeGetterFromFabric)(
        fabric,
        import_AccessControlCluster.AccessControlCluster,
        "acl",
        new Array()
      ) ?? [];
      const changed = (0, import_AttributeServer.genericFabricScopedAttributeSetterForFabric)(fabric, import_AccessControlCluster.AccessControlCluster, "acl", value, []);
      if (changed && accessControlEntryChangedEvent !== void 0) {
        const adminPasscodeId = session.isPase ? 0 : null;
        const adminNodeId = adminPasscodeId === null ? session.associatedFabric.rootNodeId : null;
        let i = 0;
        for (; i < value.length; i++) {
          if (!(0, import_DeepEqual.isDeepEqual)(value[i], oldValue[i])) {
            const changeType = oldValue[i] === void 0 ? import_AccessControlCluster.AccessControl.ChangeType.Added : value[i] === void 0 ? import_AccessControlCluster.AccessControl.ChangeType.Removed : import_AccessControlCluster.AccessControl.ChangeType.Changed;
            accessControlEntryChangedEvent.triggerEvent({
              changeType,
              adminNodeId,
              adminPasscodeId,
              latestValue: (changeType === import_AccessControlCluster.AccessControl.ChangeType.Removed ? oldValue[i] : value[i]) ?? null,
              fabricIndex: session.associatedFabric.fabricIndex
            });
          }
        }
        if (oldValue.length > i) {
          for (let j = oldValue.length - 1; j >= i; j--) {
            accessControlEntryChangedEvent.triggerEvent({
              changeType: import_AccessControlCluster.AccessControl.ChangeType.Removed,
              adminNodeId,
              adminPasscodeId,
              latestValue: oldValue[j],
              fabricIndex: session.associatedFabric.fabricIndex
            });
          }
        }
      }
      return changed;
    },
    extensionAttributeGetter: ({ session }) => {
      return (0, import_AttributeServer.genericFabricScopedAttributeGetter)(
        session,
        true,
        import_AccessControlCluster.AccessControlCluster,
        "extension",
        new Array()
      );
    },
    extensionAttributeValidator: (value) => {
      if (value.length === 0) {
        return;
      }
      if (value.length > 1) {
        throw new import_StatusCode.StatusResponseError("Extension list must contain a single entry", import_StatusCode.StatusCode.ConstraintError);
      }
      const { data } = value[0];
      if (data.length < 2 || data[0] !== import_TlvCodec.TlvType.List || data[data.length - 1] !== import_TlvCodec.TlvType.EndOfContainer) {
        throw new import_StatusCode.StatusResponseError("Extension must be a valid TLV", import_StatusCode.StatusCode.ConstraintError);
      }
      try {
        const decoded = (0, import_TlvObject.TlvTaggedList)({}, true).decode(data);
        logger.info(`Extension TLV decoded:`, decoded);
      } catch (error) {
        logger.debug(`Extension TLV decoding failed:`, error);
        throw new import_StatusCode.StatusResponseError("Extension must be a valid TLV", import_StatusCode.StatusCode.ConstraintError);
      }
    },
    extensionAttributeSetter: (value, { session }) => {
      (0, import_SecureSession.assertSecureSession)(session);
      const fabric = session.context.getFabricByIndex(
        value[0]?.fabricIndex ?? session.associatedFabric.fabricIndex
      );
      if (fabric === void 0) {
        throw new import_MatterError.InternalError("Fabric not found. SHould never happen");
      }
      const oldValue = (0, import_AttributeServer.genericFabricScopedAttributeGetterFromFabric)(
        fabric,
        import_AccessControlCluster.AccessControlCluster,
        "extension",
        new Array()
      ) ?? [];
      const changed = (0, import_AttributeServer.genericFabricScopedAttributeSetterForFabric)(
        fabric,
        import_AccessControlCluster.AccessControlCluster,
        "extension",
        value,
        []
      );
      if (changed && accessControlExtensionChangedEvent !== void 0) {
        const changeType = value.length > oldValue.length ? import_AccessControlCluster.AccessControl.ChangeType.Added : value.length < oldValue.length ? import_AccessControlCluster.AccessControl.ChangeType.Removed : import_AccessControlCluster.AccessControl.ChangeType.Changed;
        const adminPasscodeId = session.isPase ? 0 : null;
        const adminNodeId = adminPasscodeId === null ? session.associatedFabric.rootNodeId : null;
        accessControlExtensionChangedEvent.triggerEvent({
          changeType,
          adminNodeId,
          adminPasscodeId,
          latestValue: (changeType === import_AccessControlCluster.AccessControl.ChangeType.Removed ? oldValue[0] : value[0]) ?? null,
          fabricIndex: session.associatedFabric.fabricIndex
        });
      }
      return changed;
    }
  };
};
const createDefaultAccessControlClusterServer = () => (0, import_ClusterServer.ClusterServer)(
  import_AccessControlCluster.AccessControlCluster,
  {
    acl: [],
    extension: [],
    subjectsPerAccessControlEntry: 4,
    targetsPerAccessControlEntry: 4,
    accessControlEntriesPerFabric: 4
  },
  AccessControlClusterHandler(),
  {
    accessControlEntryChanged: true,
    accessControlExtensionChanged: true
  }
);
//# sourceMappingURL=AccessControlServer.js.map
