{
  "version": 3,
  "sources": ["../../../../src/cluster/server/CommandServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../MatterDevice.js\";\nimport { Message } from \"../../codec/MessageCodec.js\";\nimport { CommandId } from \"../../datatype/CommandId.js\";\nimport { EndpointInterface } from \"../../endpoint/EndpointInterface.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { FabricIndex } from \"../../model/standard/elements/FabricIndex.js\";\nimport { StatusCode } from \"../../protocol/interaction/StatusCode.js\";\nimport { SecureSession } from \"../../session/SecureSession.js\";\nimport { Session } from \"../../session/Session.js\";\nimport { TlvSchema, TlvStream } from \"../../tlv/TlvSchema.js\";\nimport { AccessLevel } from \"../Cluster.js\";\n\nconst logger = Logger.get(\"CommandServer\");\n\nexport class CommandServer<RequestT, ResponseT> {\n    readonly #invokeAcl: AccessLevel;\n\n    constructor(\n        readonly invokeId: CommandId,\n        readonly responseId: CommandId,\n        readonly name: string,\n        readonly requestSchema: TlvSchema<RequestT>,\n        readonly responseSchema: TlvSchema<ResponseT>,\n        readonly requiresTimedInteraction: boolean,\n        invokeAcl: AccessLevel,\n        protected readonly handler: (\n            request: RequestT,\n            session: Session<MatterDevice>,\n            message: Message,\n            endpoint: EndpointInterface,\n        ) => Promise<ResponseT> | ResponseT,\n    ) {\n        this.#invokeAcl = invokeAcl;\n    }\n\n    async invoke(\n        session: Session<MatterDevice>,\n        args: TlvStream,\n        message: Message,\n        endpoint: EndpointInterface,\n    ): Promise<{\n        /** Primary StatusCode of the invoke request  as defined by Interaction proptocol. */\n        code: StatusCode;\n\n        /** Cluster specific StatusCode of the invoke request if required */\n        clusterCode?: number;\n\n        /** ID of the response */\n        responseId: CommandId;\n\n        /** Response data */\n        response: TlvStream;\n    }> {\n        let request = this.requestSchema.decodeTlv(args);\n\n        // Inject fabric index into structures in general if undefined, if set it will be used\n        if (session.isSecure) {\n            const fabric = (session as SecureSession<any>).fabric;\n            if (fabric) {\n                request = this.requestSchema.injectField(\n                    request,\n                    <number>FabricIndex.id,\n                    session.associatedFabric.fabricIndex,\n                    () => true, // Noone should send any index and if we simply SHALL ignore it\n                );\n            }\n        }\n\n        this.requestSchema.validate(request);\n        this.debug(`Invoke ${this.name} with data ${Logger.toJSON(request)}`);\n        const response = await this.handler(request, session, message, endpoint);\n        this.debug(`Invoke ${this.name} response : ${Logger.toJSON(response)}`);\n        return {\n            code: StatusCode.Success,\n            responseId: this.responseId,\n            response: this.responseSchema.encodeTlv(response),\n        };\n    }\n\n    debug(message: string) {\n        logger.debug(message);\n    }\n\n    get invokeAcl() {\n        return this.#invokeAcl ?? AccessLevel.Operate; // or View?? Re \"Read/Invoke\" in Access table\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,oBAAuB;AACvB,yBAA4B;AAC5B,wBAA2B;AAI3B,qBAA4B;AAhB5B;AAAA;AAAA;AAAA;AAAA;AAkBA,MAAM,SAAS,qBAAO,IAAI,eAAe;AAElC,MAAM,cAAmC;AAAA,EAG5C,YACa,UACA,YACA,MACA,eACA,gBACA,0BACT,WACmB,SAMrB;AAbW;AACA;AACA;AACA;AACA;AACA;AAEU;AAOnB,SAAK,aAAa;AAAA,EACtB;AAAA,EAlBS;AAAA,EAoBT,MAAM,OACF,SACA,MACA,SACA,UAaD;AACC,QAAI,UAAU,KAAK,cAAc,UAAU,IAAI;AAG/C,QAAI,QAAQ,UAAU;AAClB,YAAM,SAAU,QAA+B;AAC/C,UAAI,QAAQ;AACR,kBAAU,KAAK,cAAc;AAAA,UACzB;AAAA,UACQ,+BAAY;AAAA,UACpB,QAAQ,iBAAiB;AAAA,UACzB,MAAM;AAAA;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,cAAc,SAAS,OAAO;AACnC,SAAK,MAAM,UAAU,KAAK,IAAI,cAAc,qBAAO,OAAO,OAAO,CAAC,EAAE;AACpE,UAAM,WAAW,MAAM,KAAK,QAAQ,SAAS,SAAS,SAAS,QAAQ;AACvE,SAAK,MAAM,UAAU,KAAK,IAAI,eAAe,qBAAO,OAAO,QAAQ,CAAC,EAAE;AACtE,WAAO;AAAA,MACH,MAAM,6BAAW;AAAA,MACjB,YAAY,KAAK;AAAA,MACjB,UAAU,KAAK,eAAe,UAAU,QAAQ;AAAA,IACpD;AAAA,EACJ;AAAA,EAEA,MAAM,SAAiB;AACnB,WAAO,MAAM,OAAO;AAAA,EACxB;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,cAAc,2BAAY;AAAA,EAC1C;AACJ;",
  "names": []
}
