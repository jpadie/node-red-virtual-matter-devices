{
  "version": 3,
  "sources": ["../../../../src/cluster/server/GeneralCommissioningServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImplementationError, MatterFlowError } from \"../../common/MatterError.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { assertSecureSession } from \"../../session/SecureSession.js\";\nimport { AdministratorCommissioning } from \"../definitions/AdministratorCommissioningCluster.js\";\nimport { BasicInformationCluster } from \"../definitions/BasicInformationCluster.js\";\nimport { GeneralCommissioning, GeneralCommissioningCluster } from \"../definitions/GeneralCommissioningCluster.js\";\nimport { ClusterServerHandlers } from \"./ClusterServerTypes.js\";\nimport { CommissioningServerFailsafeContext } from \"./CommissioningServerFailsafeContext.js\";\n\nconst SuccessResponse = { errorCode: GeneralCommissioning.CommissioningError.Ok, debugText: \"\" };\nconst logger = Logger.get(\"GeneralCommissioningClusterHandler\");\n\nexport const GeneralCommissioningClusterHandler: (options?: {\n    /** Is the commissioner allowed to change the country code? */\n    allowCountryCodeChange?: boolean;\n    /** If set, only these country codes are allowed to be set when changing country is allowed. */\n    countryCodeWhitelist?: string[];\n}) => ClusterServerHandlers<typeof GeneralCommissioningCluster> = options => ({\n    initializeClusterServer: ({ attributes: { breadcrumb } }) => {\n        breadcrumb.setLocal(BigInt(0));\n    },\n\n    armFailSafe: async ({\n        request: { breadcrumb: breadcrumbStep, expiryLengthSeconds },\n        attributes: { breadcrumb, basicCommissioningInfo },\n        session,\n        endpoint,\n    }) => {\n        assertSecureSession(session, \"armFailSafe can only be called on a secure session\");\n        const device = session.context;\n\n        try {\n            // If the fail-safe timer is not currently armed, the commissioning window is open, and the command was\n            // received over a CASE session, the command SHALL leave the current fail-safe state unchanged and immediately\n            // respond with an ArmFailSafeResponse containing an ErrorCode value of BusyWithOtherAdmin. This is done to\n            // allow commissioners, which use PASE connections, the opportunity to use the failsafe during the\n            // relatively short commissioning window.\n            if (\n                !device.isFailsafeArmed() &&\n                endpoint.getClusterServer(AdministratorCommissioning.Cluster)?.getWindowStatusAttribute() !==\n                    AdministratorCommissioning.CommissioningWindowStatus.WindowNotOpen &&\n                !session.isPase\n            ) {\n                throw new MatterFlowError(\"Failed to arm failsafe using CASE while commissioning window is opened.\");\n            }\n\n            if (device.isFailsafeArmed()) {\n                await device.failsafeContext.extend(session.fabric, expiryLengthSeconds);\n            } else {\n                // If ExpiryLengthSeconds is 0 and the fail-safe timer was not armed, then this command invocation SHALL\n                // lead to a success response with no side effect against the fail-safe context.\n                if (expiryLengthSeconds === 0) return SuccessResponse;\n\n                await device.beginTimed(\n                    new CommissioningServerFailsafeContext(endpoint, {\n                        fabrics: device.fabricManager,\n                        sessions: device.sessionManager,\n                        expiryLengthSeconds,\n                        maxCumulativeFailsafeSeconds: basicCommissioningInfo.getLocal().maxCumulativeFailsafeSeconds,\n                        associatedFabric: session.fabric,\n                    }),\n                );\n            }\n\n            if (device.isFailsafeArmed()) {\n                // If failsafe is armed after the command, set breadcrumb (not when expired)\n                breadcrumb.setLocal(breadcrumbStep);\n            }\n        } catch (error) {\n            MatterFlowError.accept(error);\n\n            logger.debug(`Error while arming failSafe timer`, error);\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.BusyWithOtherAdmin,\n                debugText: error.message,\n            };\n        }\n        return SuccessResponse;\n    },\n\n    setRegulatoryConfig: async ({\n        request: { breadcrumb: breadcrumbStep, newRegulatoryConfig, countryCode },\n        attributes: { breadcrumb, regulatoryConfig, locationCapability },\n        endpoint,\n    }) => {\n        const locationCapabilityValue = locationCapability.getLocal();\n\n        // Check and handle country code\n        const basicInformationCluster = endpoint.getClusterServer(BasicInformationCluster);\n        if (basicInformationCluster === undefined) {\n            throw new ImplementationError(\"BasicInformationCluster needs to be present on the root endpoint\");\n        }\n        const currentLocationCountryCode = basicInformationCluster.getLocationAttribute();\n\n        if (currentLocationCountryCode !== countryCode) {\n            if (options?.allowCountryCodeChange === false && countryCode !== \"XX\") {\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Country code change not allowed: ${countryCode}`,\n                };\n            }\n            if (options?.countryCodeWhitelist !== undefined && !options?.countryCodeWhitelist.includes(countryCode)) {\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Country code change not allowed: ${countryCode}`,\n                };\n            }\n            if (countryCode !== \"XX\") {\n                basicInformationCluster.setLocationAttribute(countryCode);\n            }\n        }\n\n        // Check and handle regulatory config for LocationCapability\n        let validValues;\n        switch (locationCapabilityValue) {\n            case GeneralCommissioning.RegulatoryLocationType.Outdoor:\n                validValues = [GeneralCommissioning.RegulatoryLocationType.Outdoor];\n                break;\n            case GeneralCommissioning.RegulatoryLocationType.Indoor:\n                validValues = [GeneralCommissioning.RegulatoryLocationType.Indoor];\n                break;\n            case GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor:\n                validValues = [\n                    GeneralCommissioning.RegulatoryLocationType.Indoor,\n                    GeneralCommissioning.RegulatoryLocationType.Outdoor,\n                    GeneralCommissioning.RegulatoryLocationType.IndoorOutdoor,\n                ];\n                break;\n            default:\n                return {\n                    errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                    debugText: `Invalid regulatory location: ${\n                        newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor\n                            ? \"Indoor\"\n                            : \"Outdoor\"\n                    }`,\n                };\n        }\n        if (!validValues.includes(newRegulatoryConfig)) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.ValueOutsideRange,\n                debugText: `Invalid regulatory location: ${\n                    newRegulatoryConfig === GeneralCommissioning.RegulatoryLocationType.Indoor ? \"Indoor\" : \"Outdoor\"\n                }`,\n            };\n        }\n        regulatoryConfig.setLocal(newRegulatoryConfig);\n\n        breadcrumb.setLocal(breadcrumbStep);\n        return SuccessResponse;\n    },\n\n    commissioningComplete: async ({ session, attributes: { breadcrumb } }) => {\n        const fabric = session.associatedFabric;\n\n        if (session.isPase) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,\n                debugText: \"Command not executed over CASE session.\",\n            };\n        }\n\n        const device = session.context;\n        if (!device.isFailsafeArmed()) {\n            return { errorCode: GeneralCommissioning.CommissioningError.NoFailSafe, debugText: \"FailSafe not armed.\" };\n        }\n\n        assertSecureSession(session, \"commissioningComplete can only be called on a secure session\");\n\n        const failsafeFabric = device.failsafeContext.associatedFabric?.fabricIndex;\n        if (fabric.fabricIndex !== failsafeFabric) {\n            return {\n                errorCode: GeneralCommissioning.CommissioningError.InvalidAuthentication,\n                debugText: `Associated fabric ${fabric.fabricIndex} does not match the one from the failsafe context ${failsafeFabric}.`,\n            };\n        }\n\n        // On successful execution of the CommissioningComplete command the following actions SHALL be undertaken on the Server:\n        // 1. The Fail-Safe timer associated with the current Fail-Safe context SHALL be disarmed.\n        // 2. The commissioning window at the Server SHALL be closed.\n        // 3. Any temporary administrative privileges automatically granted to any open PASE session SHALL be revoked (see Section 6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D).\n        // 4. The Secure Session Context of any PASE session still established at the Server SHALL be cleared.\n        await device.failsafeContext.completeCommission();\n\n        // 5. The Breadcrumb attribute SHALL be reset to zero.\n        breadcrumb.setLocal(BigInt(0));\n\n        logger.info(`Commissioning completed on fabric #${fabric.fabricId} as node #${fabric.nodeId}.`);\n\n        return SuccessResponse;\n    },\n});\n"],
  "mappings": "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",
  "names": []
}
