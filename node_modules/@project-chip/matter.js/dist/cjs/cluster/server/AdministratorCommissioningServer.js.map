{
  "version": 3,
  "sources": ["../../../../src/cluster/server/AdministratorCommissioningServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../MatterDevice.js\";\nimport {\n    MAXIMUM_COMMISSIONING_TIMEOUT_S,\n    MINIMUM_COMMISSIONING_TIMEOUT_S,\n    PAKE_PASSCODE_VERIFIER_LENGTH,\n} from \"../../behavior/definitions/administrator-commissioning/AdministratorCommissioningConstants.js\";\nimport { InternalError } from \"../../common/MatterError.js\";\nimport { FabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { VendorId } from \"../../datatype/VendorId.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { StatusCode, StatusResponseError } from \"../../protocol/interaction/StatusCode.js\";\nimport { Session } from \"../../session/Session.js\";\nimport { PaseServer } from \"../../session/pase/PaseServer.js\";\nimport { Time, Timer } from \"../../time/Time.js\";\nimport { TlvUInt16, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport { AccessLevel, Command, TlvNoResponse } from \"../Cluster.js\";\nimport { AdministratorCommissioning } from \"../definitions/AdministratorCommissioningCluster.js\";\nimport { AttributeServer } from \"./AttributeServer.js\";\nimport { ClusterServerHandlers } from \"./ClusterServerTypes.js\";\n\nconst logger = Logger.get(\"AdministratorCommissioningServer\");\n\n/**\n * Monkey patching Tlv Structure of openCommissioningWindow command to prevent data validation of the fields to be\n * handled as ConstraintError because we need to return a special error.\n * We do this to leave the model in fact for other validations and only apply the change for our Schema-aware Tlv parsing.\n */\nAdministratorCommissioning.Cluster.commands = {\n    ...AdministratorCommissioning.Cluster.commands,\n    openCommissioningWindow: Command(\n        0x0,\n        TlvObject({\n            commissioningTimeout: TlvField(0, TlvUInt16),\n            pakePasscodeVerifier: TlvField(1, TlvByteString),\n            discriminator: TlvField(2, TlvUInt16.bound({ max: 4095 })),\n            iterations: TlvField(3, TlvUInt32),\n            salt: TlvField(4, TlvByteString),\n        }),\n        0x0,\n        TlvNoResponse,\n        {\n            invokeAcl: AccessLevel.Administer,\n            timed: true,\n        },\n    ),\n};\n\n// General:\n// TODO If any format or validity errors related to the PAKEPasscodeVerifier, Iterations or Salt arguments arise, this command SHALL fail with a cluster specific status code of PAKEParameterError.\n// TODO In case of any other parameter error, this command SHALL fail with a status code of COMMAND_INVALID.\n\n/** Class which executed the cluster commands for the AdministratorCommissioning cluster. */\nclass AdministratorCommissioningManager {\n    private commissioningWindowTimeout?: Timer;\n    private fabricRemoveHandler = async () => this.adminFabricIndexAttribute.setLocal(null);\n\n    constructor(\n        private readonly windowStatusAttribute: AttributeServer<AdministratorCommissioning.CommissioningWindowStatus>,\n        private readonly adminFabricIndexAttribute: AttributeServer<FabricIndex | null>,\n        private readonly adminVendorIdAttribute: AttributeServer<VendorId | null>,\n    ) {\n        windowStatusAttribute.setLocal(AdministratorCommissioning.CommissioningWindowStatus.WindowNotOpen);\n    }\n\n    /**\n     * Called whenever a Commissioning/Announcement Window is opened by this cluster. This method starts the timer and\n     * adjusts the needed attributes.\n     */\n    initializeCommissioningWindow(commissioningTimeout: number, session: Session<MatterDevice>) {\n        if (this.commissioningWindowTimeout !== undefined) {\n            // Should never happen, but let's make sure\n            throw new InternalError(\"Commissioning window already initialized.\");\n        }\n        logger.debug(`Commissioning window timer started for ${commissioningTimeout} seconds for ${session.name}.`);\n        this.commissioningWindowTimeout = Time.getTimer(\n            \"Commissioning timeout\",\n            commissioningTimeout * 1000,\n            async () => await this.closeCommissioningWindow(session),\n        ).start();\n\n        this.adminFabricIndexAttribute.setLocal(session.associatedFabric.fabricIndex);\n        this.adminVendorIdAttribute.setLocal(session.associatedFabric.rootVendorId);\n        session.associatedFabric.addRemoveCallback(async () => this.fabricRemoveHandler());\n    }\n\n    /**\n     * This method validates if a commissioning window can be opened and throws various exceptions in case of failures.\n     */\n    assertCommissioningWindowRequirements(commissioningTimeout: number, device: MatterDevice) {\n        if (this.commissioningWindowTimeout !== undefined) {\n            throw new StatusResponseError(\n                \"A commissioning window is already opened.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.Busy,\n            );\n        }\n\n        if (commissioningTimeout > MAXIMUM_COMMISSIONING_TIMEOUT_S) {\n            throw new StatusResponseError(\n                `Commissioning timeout must not exceed ${MAXIMUM_COMMISSIONING_TIMEOUT_S} seconds.`,\n                StatusCode.InvalidCommand,\n            );\n        }\n        if (commissioningTimeout < MINIMUM_COMMISSIONING_TIMEOUT_S) {\n            throw new StatusResponseError(\n                `Commissioning timeout must not be lower then ${MINIMUM_COMMISSIONING_TIMEOUT_S} seconds.`,\n                StatusCode.InvalidCommand,\n            );\n        }\n\n        if (device.isFailsafeArmed()) {\n            throw new StatusResponseError(\n                \"Failsafe timer armed, assume commissioning in progress.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.Busy,\n            );\n        }\n    }\n\n    /**\n     * This method opens an Enhanced Commissioning Window (A dynamic passcode is used which was provided by the caller).\n     */\n    async openEnhancedCommissioningWindow(\n        pakeVerifier: ByteArray,\n        discriminator: number,\n        iterations: number,\n        salt: ByteArray,\n        commissioningTimeout: number,\n        session: Session<MatterDevice>,\n    ) {\n        // We monkey patched the Tlv definition above, so take care about correct error handling\n        if (pakeVerifier.length !== PAKE_PASSCODE_VERIFIER_LENGTH) {\n            throw new StatusResponseError(\n                \"PAKE Passcode verifier length is invalid.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.PakeParameterError,\n            );\n        }\n        if (iterations < 1000 || iterations > 100_000) {\n            throw new StatusResponseError(\n                \"PAKE iterations invalid.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.PakeParameterError,\n            );\n        }\n        if (salt.length < 16 || salt.length > 32) {\n            throw new StatusResponseError(\n                \"PAKE salt has invalid length.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.PakeParameterError,\n            );\n        }\n\n        const device = session.context;\n\n        this.assertCommissioningWindowRequirements(commissioningTimeout, device);\n\n        this.windowStatusAttribute.setLocal(AdministratorCommissioning.CommissioningWindowStatus.EnhancedWindowOpen);\n        this.initializeCommissioningWindow(commissioningTimeout, session);\n\n        await device.allowEnhancedCommissioning(\n            discriminator,\n            PaseServer.fromVerificationValue(pakeVerifier, { iterations, salt }),\n            () => {\n                session.associatedFabric.deleteRemoveCallback(this.fabricRemoveHandler);\n                this.endCommissioning();\n            },\n        );\n    }\n\n    /** This method opens a Basic Commissioning Window. The default passcode is used. */\n    async openBasicCommissioningWindow(commissioningTimeout: number, session: Session<MatterDevice>) {\n        const device = session.context;\n\n        this.assertCommissioningWindowRequirements(commissioningTimeout, device);\n\n        this.windowStatusAttribute.setLocal(AdministratorCommissioning.CommissioningWindowStatus.BasicWindowOpen);\n        this.initializeCommissioningWindow(commissioningTimeout, session);\n\n        await device.allowBasicCommissioning(() => {\n            session.associatedFabric.deleteRemoveCallback(this.fabricRemoveHandler);\n            this.endCommissioning();\n        });\n    }\n\n    /**\n     * This method is used internally when the commissioning window timer expires or the commissioning was completed.\n     */\n    private endCommissioning() {\n        if (this.commissioningWindowTimeout === undefined) {\n            return;\n        }\n        this.commissioningWindowTimeout.stop();\n        this.commissioningWindowTimeout = undefined;\n\n        logger.debug(\"End commissioning window.\");\n        this.windowStatusAttribute.setLocal(AdministratorCommissioning.CommissioningWindowStatus.WindowNotOpen);\n        this.adminFabricIndexAttribute.setLocal(null);\n        this.adminVendorIdAttribute.setLocal(null);\n    }\n\n    /** This method is used to close a commissioning window. */\n    async closeCommissioningWindow(session: Session<MatterDevice>) {\n        this.endCommissioning();\n        await session.context.endCommissioning();\n    }\n\n    /** This method is used to revoke a commissioning window. */\n    async revokeCommissioning(session: Session<MatterDevice>) {\n        if (this.commissioningWindowTimeout === undefined) {\n            throw new StatusResponseError(\n                \"No commissioning window is opened that could be revoked.\",\n                StatusCode.Failure,\n                AdministratorCommissioning.StatusCode.WindowNotOpen,\n            );\n        }\n        logger.debug(\"Revoking commissioning window.\");\n        await this.closeCommissioningWindow(session);\n\n        const device = session.context;\n        if (device.isFailsafeArmed()) {\n            await device.failsafeContext.close();\n        }\n    }\n\n    /** Cleanup resources and stop the timer when the ClusterServer is destroyed. */\n    close() {\n        if (this.commissioningWindowTimeout !== undefined) {\n            this.commissioningWindowTimeout.stop();\n            this.commissioningWindowTimeout = undefined;\n        }\n    }\n}\n\nexport const AdministratorCommissioningHandler: () => ClusterServerHandlers<\n    typeof AdministratorCommissioning.Cluster\n> = () => {\n    let manager: AdministratorCommissioningManager;\n\n    return {\n        initializeClusterServer: ({ attributes: { windowStatus, adminVendorId, adminFabricIndex } }) => {\n            manager = new AdministratorCommissioningManager(windowStatus, adminFabricIndex, adminVendorId);\n        },\n\n        openCommissioningWindow: async ({\n            request: { pakePasscodeVerifier: pakeVerifier, discriminator, iterations, salt, commissioningTimeout },\n            session /* attributes: { windowStatus } */,\n        }) =>\n            manager.openEnhancedCommissioningWindow(\n                pakeVerifier,\n                discriminator,\n                iterations,\n                salt,\n                commissioningTimeout,\n                session,\n            ),\n\n        revokeCommissioning: async ({ session }) => await manager.revokeCommissioning(session),\n\n        destroyClusterServer: () => manager?.close(),\n    };\n};\n\nconst AdministratorCommissioningBasicCluster = AdministratorCommissioning.Cluster.with(\"Basic\");\n\nexport const BasicAdminCommissioningHandler: () => ClusterServerHandlers<\n    typeof AdministratorCommissioningBasicCluster\n> = () => {\n    let manager: AdministratorCommissioningManager;\n\n    return {\n        initializeClusterServer: ({ attributes: { windowStatus, adminVendorId, adminFabricIndex } }) => {\n            manager = new AdministratorCommissioningManager(windowStatus, adminFabricIndex, adminVendorId);\n        },\n\n        openCommissioningWindow: async ({\n            request: { pakePasscodeVerifier: pakeVerifier, discriminator, iterations, salt, commissioningTimeout },\n            session,\n        }) =>\n            manager.openEnhancedCommissioningWindow(\n                pakeVerifier,\n                discriminator,\n                iterations,\n                salt,\n                commissioningTimeout,\n                session,\n            ),\n\n        openBasicCommissioningWindow: async ({ request: { commissioningTimeout }, session }) =>\n            manager.openBasicCommissioningWindow(commissioningTimeout, session),\n\n        revokeCommissioning: async ({ session }) => await manager.revokeCommissioning(session),\n\n        destroyClusterServer: () => manager?.close(),\n    };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,iDAIO;AACP,yBAA8B;AAG9B,oBAAuB;AACvB,wBAAgD;AAEhD,wBAA2B;AAC3B,kBAA4B;AAC5B,uBAAqC;AACrC,uBAAoC;AACpC,uBAA8B;AAE9B,qBAAoD;AACpD,+CAA2C;AAzB3C;AAAA;AAAA;AAAA;AAAA;AA6BA,MAAM,SAAS,qBAAO,IAAI,kCAAkC;AAO5D,oEAA2B,QAAQ,WAAW;AAAA,EAC1C,GAAG,oEAA2B,QAAQ;AAAA,EACtC,6BAAyB;AAAA,IACrB;AAAA,QACA,4BAAU;AAAA,MACN,0BAAsB,2BAAS,GAAG,0BAAS;AAAA,MAC3C,0BAAsB,2BAAS,GAAG,8BAAa;AAAA,MAC/C,mBAAe,2BAAS,GAAG,2BAAU,MAAM,EAAE,KAAK,KAAK,CAAC,CAAC;AAAA,MACzD,gBAAY,2BAAS,GAAG,0BAAS;AAAA,MACjC,UAAM,2BAAS,GAAG,8BAAa;AAAA,IACnC,CAAC;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,MACI,WAAW,2BAAY;AAAA,MACvB,OAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAOA,MAAM,kCAAkC;AAAA,EAIpC,YACqB,uBACA,2BACA,wBACnB;AAHmB;AACA;AACA;AAEjB,0BAAsB,SAAS,oEAA2B,0BAA0B,aAAa;AAAA,EACrG;AAAA,EATQ;AAAA,EACA,sBAAsB,YAAY,KAAK,0BAA0B,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,EActF,8BAA8B,sBAA8B,SAAgC;AACxF,QAAI,KAAK,+BAA+B,QAAW;AAE/C,YAAM,IAAI,iCAAc,2CAA2C;AAAA,IACvE;AACA,WAAO,MAAM,0CAA0C,oBAAoB,gBAAgB,QAAQ,IAAI,GAAG;AAC1G,SAAK,6BAA6B,iBAAK;AAAA,MACnC;AAAA,MACA,uBAAuB;AAAA,MACvB,YAAY,MAAM,KAAK,yBAAyB,OAAO;AAAA,IAC3D,EAAE,MAAM;AAER,SAAK,0BAA0B,SAAS,QAAQ,iBAAiB,WAAW;AAC5E,SAAK,uBAAuB,SAAS,QAAQ,iBAAiB,YAAY;AAC1E,YAAQ,iBAAiB,kBAAkB,YAAY,KAAK,oBAAoB,CAAC;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA,EAKA,sCAAsC,sBAA8B,QAAsB;AACtF,QAAI,KAAK,+BAA+B,QAAW;AAC/C,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AAEA,QAAI,uBAAuB,4EAAiC;AACxD,YAAM,IAAI;AAAA,QACN,yCAAyC,0EAA+B;AAAA,QACxE,6BAAW;AAAA,MACf;AAAA,IACJ;AACA,QAAI,uBAAuB,4EAAiC;AACxD,YAAM,IAAI;AAAA,QACN,gDAAgD,0EAA+B;AAAA,QAC/E,6BAAW;AAAA,MACf;AAAA,IACJ;AAEA,QAAI,OAAO,gBAAgB,GAAG;AAC1B,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gCACF,cACA,eACA,YACA,MACA,sBACA,SACF;AAEE,QAAI,aAAa,WAAW,0EAA+B;AACvD,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AACA,QAAI,aAAa,OAAQ,aAAa,KAAS;AAC3C,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,MAAM,KAAK,SAAS,IAAI;AACtC,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AAEA,UAAM,SAAS,QAAQ;AAEvB,SAAK,sCAAsC,sBAAsB,MAAM;AAEvE,SAAK,sBAAsB,SAAS,oEAA2B,0BAA0B,kBAAkB;AAC3G,SAAK,8BAA8B,sBAAsB,OAAO;AAEhE,UAAM,OAAO;AAAA,MACT;AAAA,MACA,6BAAW,sBAAsB,cAAc,EAAE,YAAY,KAAK,CAAC;AAAA,MACnE,MAAM;AACF,gBAAQ,iBAAiB,qBAAqB,KAAK,mBAAmB;AACtE,aAAK,iBAAiB;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAGA,MAAM,6BAA6B,sBAA8B,SAAgC;AAC7F,UAAM,SAAS,QAAQ;AAEvB,SAAK,sCAAsC,sBAAsB,MAAM;AAEvE,SAAK,sBAAsB,SAAS,oEAA2B,0BAA0B,eAAe;AACxG,SAAK,8BAA8B,sBAAsB,OAAO;AAEhE,UAAM,OAAO,wBAAwB,MAAM;AACvC,cAAQ,iBAAiB,qBAAqB,KAAK,mBAAmB;AACtE,WAAK,iBAAiB;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAAmB;AACvB,QAAI,KAAK,+BAA+B,QAAW;AAC/C;AAAA,IACJ;AACA,SAAK,2BAA2B,KAAK;AACrC,SAAK,6BAA6B;AAElC,WAAO,MAAM,2BAA2B;AACxC,SAAK,sBAAsB,SAAS,oEAA2B,0BAA0B,aAAa;AACtG,SAAK,0BAA0B,SAAS,IAAI;AAC5C,SAAK,uBAAuB,SAAS,IAAI;AAAA,EAC7C;AAAA;AAAA,EAGA,MAAM,yBAAyB,SAAgC;AAC3D,SAAK,iBAAiB;AACtB,UAAM,QAAQ,QAAQ,iBAAiB;AAAA,EAC3C;AAAA;AAAA,EAGA,MAAM,oBAAoB,SAAgC;AACtD,QAAI,KAAK,+BAA+B,QAAW;AAC/C,YAAM,IAAI;AAAA,QACN;AAAA,QACA,6BAAW;AAAA,QACX,oEAA2B,WAAW;AAAA,MAC1C;AAAA,IACJ;AACA,WAAO,MAAM,gCAAgC;AAC7C,UAAM,KAAK,yBAAyB,OAAO;AAE3C,UAAM,SAAS,QAAQ;AACvB,QAAI,OAAO,gBAAgB,GAAG;AAC1B,YAAM,OAAO,gBAAgB,MAAM;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA,EAGA,QAAQ;AACJ,QAAI,KAAK,+BAA+B,QAAW;AAC/C,WAAK,2BAA2B,KAAK;AACrC,WAAK,6BAA6B;AAAA,IACtC;AAAA,EACJ;AACJ;AAEO,MAAM,oCAET,MAAM;AACN,MAAI;AAEJ,SAAO;AAAA,IACH,yBAAyB,CAAC,EAAE,YAAY,EAAE,cAAc,eAAe,iBAAiB,EAAE,MAAM;AAC5F,gBAAU,IAAI,kCAAkC,cAAc,kBAAkB,aAAa;AAAA,IACjG;AAAA,IAEA,yBAAyB,OAAO;AAAA,MAC5B,SAAS,EAAE,sBAAsB,cAAc,eAAe,YAAY,MAAM,qBAAqB;AAAA,MACrG;AAAA,IACJ,MACI,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,IAEJ,qBAAqB,OAAO,EAAE,QAAQ,MAAM,MAAM,QAAQ,oBAAoB,OAAO;AAAA,IAErF,sBAAsB,MAAM,SAAS,MAAM;AAAA,EAC/C;AACJ;AAEA,MAAM,yCAAyC,oEAA2B,QAAQ,KAAK,OAAO;AAEvF,MAAM,iCAET,MAAM;AACN,MAAI;AAEJ,SAAO;AAAA,IACH,yBAAyB,CAAC,EAAE,YAAY,EAAE,cAAc,eAAe,iBAAiB,EAAE,MAAM;AAC5F,gBAAU,IAAI,kCAAkC,cAAc,kBAAkB,aAAa;AAAA,IACjG;AAAA,IAEA,yBAAyB,OAAO;AAAA,MAC5B,SAAS,EAAE,sBAAsB,cAAc,eAAe,YAAY,MAAM,qBAAqB;AAAA,MACrG;AAAA,IACJ,MACI,QAAQ;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,IAEJ,8BAA8B,OAAO,EAAE,SAAS,EAAE,qBAAqB,GAAG,QAAQ,MAC9E,QAAQ,6BAA6B,sBAAsB,OAAO;AAAA,IAEtE,qBAAqB,OAAO,EAAE,QAAQ,MAAM,MAAM,QAAQ,oBAAoB,OAAO;AAAA,IAErF,sBAAsB,MAAM,SAAS,MAAM;AAAA,EAC/C;AACJ;",
  "names": []
}
