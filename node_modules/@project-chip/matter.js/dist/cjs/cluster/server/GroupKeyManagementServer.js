"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var GroupKeyManagementServer_exports = {};
__export(GroupKeyManagementServer_exports, {
  GroupKeyManagementClusterHandler: () => GroupKeyManagementClusterHandler
});
module.exports = __toCommonJS(GroupKeyManagementServer_exports);
var import_MatterError = require("../../common/MatterError.js");
var import_StatusCode = require("../../protocol/interaction/StatusCode.js");
var import_SecureSession = require("../../session/SecureSession.js");
/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
const GroupKeyManagementClusterHandler = () => ({
  initializeClusterServer: ({ attributes: { maxGroupKeysPerFabric, maxGroupsPerFabric } }) => {
    if (maxGroupKeysPerFabric.getLocal() !== 1) {
      throw new import_MatterError.ImplementationError("maxGroupKeysPerFabric must be 1 for now.");
    }
    if (maxGroupsPerFabric.getLocal() !== 0) {
      throw new import_MatterError.ImplementationError("maxGroupsPerFabric must be 0 for now.");
    }
  },
  groupTableAttributeGetter: () => {
    return [];
  },
  keySetWrite: async () => {
    throw new import_StatusCode.StatusResponseError(
      "We do not support and additional groups then the IPK",
      import_StatusCode.StatusCode.ResourceExhausted
    );
  },
  keySetRead: async ({ request: { groupKeySetId }, session }) => {
    (0, import_SecureSession.assertSecureSession)(session);
    const fabric = session.associatedFabric;
    const groupKeySet = fabric.getGroupKeySet(groupKeySetId);
    if (groupKeySet === void 0) {
      throw new import_StatusCode.StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, import_StatusCode.StatusCode.NotFound);
    }
    return {
      groupKeySet: {
        ...groupKeySet,
        epochKey0: null,
        epochKey1: null,
        epochKey2: null
      }
    };
  },
  keySetRemove: async ({ request: { groupKeySetId } }) => {
    if (groupKeySetId === 0) {
      throw new import_StatusCode.StatusResponseError(`GroupKeySet ${groupKeySetId} cannot be removed`, import_StatusCode.StatusCode.InvalidCommand);
    }
    throw new import_StatusCode.StatusResponseError(`GroupKeySet ${groupKeySetId} not found`, import_StatusCode.StatusCode.NotFound);
  },
  keySetReadAllIndices: async ({ session }) => {
    (0, import_SecureSession.assertSecureSession)(session);
    const fabric = session.associatedFabric;
    const groupKeySetIDs = fabric.getAllGroupKeySets().map(({ groupKeySetId }) => groupKeySetId);
    return {
      groupKeySetIDs
    };
  }
});
//# sourceMappingURL=GroupKeyManagementServer.js.map
