{
  "version": 3,
  "sources": ["../../../src/parser/Token.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FieldValue } from \"../model/definitions/FieldValue.js\";\n\n/**\n * A single token for the parser.\n */\nexport interface Token {\n    type: string;\n    startLine: number;\n    startChar: number;\n}\n\n/**\n * The base token produced by the tokenizer.\n */\nexport type BasicToken = BasicToken.Special | BasicToken.Word | BasicToken.Number;\n\n/**\n * A {@link BasicToken} with additional keywords.\n */\nexport type ExtendedToken<K extends string> = BasicToken | (Token & { type: K[number] });\n\nexport namespace BasicToken {\n    export type Operator =\n        | \"!\"\n        | \"==\"\n        | \"!=\"\n        | \"|\"\n        | \"^\"\n        | \"&\"\n        | \".\"\n        | \",\"\n        | \"[\"\n        | \"]\"\n        | \"(\"\n        | \")\"\n        | \"-\"\n        | \"+\"\n        | \"*\"\n        | \"/\"\n        | \">\"\n        | \"<\"\n        | \">=\"\n        | \"<=\";\n\n    export interface Special extends Token {\n        type: Operator;\n    }\n\n    export interface Word extends Token {\n        type: \"word\";\n        value: string;\n    }\n\n    export interface Number extends Token {\n        type: \"value\";\n        value: FieldValue;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
