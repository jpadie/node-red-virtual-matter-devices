{
  "version": 3,
  "sources": ["../../../src/ble/Ble.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Channel, ChannelType } from \"../common/Channel.js\";\nimport { InstanceBroadcaster } from \"../common/InstanceBroadcaster.js\";\nimport { MatterError, NoProviderError } from \"../common/MatterError.js\";\nimport { Scanner } from \"../common/Scanner.js\";\nimport { TransportInterface } from \"../common/TransportInterface.js\";\nimport { NetInterface } from \"../net/NetInterface.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { BLE_MAX_MATTER_PAYLOAD_SIZE } from \"./BleConsts.js\";\n\nexport class BleError extends MatterError {}\n\nfunction BleDisabled(): Ble {\n    throw new NoProviderError(\"No provider configured\");\n}\n\nexport abstract class Ble {\n    static get = BleDisabled;\n\n    static get enabled() {\n        return this.get !== BleDisabled;\n    }\n\n    abstract getBlePeripheralInterface(): TransportInterface;\n    abstract getBleCentralInterface(): NetInterface;\n    abstract getBleBroadcaster(additionalAdvertisementData?: ByteArray): InstanceBroadcaster;\n    abstract getBleScanner(): Scanner;\n}\n\nexport abstract class BleChannel<T> implements Channel<T> {\n    readonly maxPayloadSize = BLE_MAX_MATTER_PAYLOAD_SIZE;\n    readonly isReliable = true; // BLE uses BTP which is reliable\n    readonly type = ChannelType.BLE;\n\n    abstract name: string;\n    abstract send(data: T): Promise<void>;\n    abstract close(): Promise<void>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,qBAAqC;AAErC,yBAA6C;AAK7C,uBAA4C;AAb5C;AAAA;AAAA;AAAA;AAAA;AAeO,MAAM,iBAAiB,+BAAY;AAAC;AAE3C,SAAS,cAAmB;AACxB,QAAM,IAAI,mCAAgB,wBAAwB;AACtD;AAEO,MAAe,IAAI;AAAA,EACtB,OAAO,MAAM;AAAA,EAEb,WAAW,UAAU;AACjB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAMJ;AAEO,MAAe,WAAoC;AAAA,EAC7C,iBAAiB;AAAA,EACjB,aAAa;AAAA;AAAA,EACb,OAAO,2BAAY;AAKhC;",
  "names": []
}
