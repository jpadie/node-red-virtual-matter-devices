{
  "version": 3,
  "sources": ["../../../src/storage/StorageManager.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { Storage, StorageError } from \"./Storage.js\";\nimport { StorageContext } from \"./StorageContext.js\";\n\nexport class StorageManager<S extends Storage = any> {\n    private initialized = false;\n\n    constructor(private storage: S) {}\n\n    initialize(): MaybePromise<void> {\n        if (!this.storage.initialized) {\n            const init = this.storage.initialize();\n            if (MaybePromise.is(init)) {\n                return init.then(() => {\n                    this.initialized = true;\n                });\n            }\n        }\n        this.initialized = true;\n    }\n\n    close() {\n        this.initialized = false;\n        return this.storage.close();\n    }\n\n    createContext(context: string): StorageContext<S> {\n        if (!this.initialized) throw new StorageError(\"The storage needs to be initialized first!\");\n        if (!context.length) throw new StorageError(\"Context must not be an empty string!\");\n        if (context.includes(\".\")) throw new StorageError(\"Context must not contain dots!\");\n        return new StorageContext(this.storage, [context]);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAA6B;AAC7B,qBAAsC;AACtC,4BAA+B;AAR/B;AAAA;AAAA;AAAA;AAAA;AAUO,MAAM,eAAwC;AAAA,EAGjD,YAAoB,SAAY;AAAZ;AAAA,EAAa;AAAA,EAFzB,cAAc;AAAA,EAItB,aAAiC;AAC7B,QAAI,CAAC,KAAK,QAAQ,aAAa;AAC3B,YAAM,OAAO,KAAK,QAAQ,WAAW;AACrC,UAAI,6BAAa,GAAG,IAAI,GAAG;AACvB,eAAO,KAAK,KAAK,MAAM;AACnB,eAAK,cAAc;AAAA,QACvB,CAAC;AAAA,MACL;AAAA,IACJ;AACA,SAAK,cAAc;AAAA,EACvB;AAAA,EAEA,QAAQ;AACJ,SAAK,cAAc;AACnB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,cAAc,SAAoC;AAC9C,QAAI,CAAC,KAAK,YAAa,OAAM,IAAI,4BAAa,4CAA4C;AAC1F,QAAI,CAAC,QAAQ,OAAQ,OAAM,IAAI,4BAAa,sCAAsC;AAClF,QAAI,QAAQ,SAAS,GAAG,EAAG,OAAM,IAAI,4BAAa,gCAAgC;AAClF,WAAO,IAAI,qCAAe,KAAK,SAAS,CAAC,OAAO,CAAC;AAAA,EACrD;AACJ;",
  "names": []
}
