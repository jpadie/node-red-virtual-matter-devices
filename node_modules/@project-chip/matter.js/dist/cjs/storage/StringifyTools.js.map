{
  "version": 3,
  "sources": ["../../../src/storage/StringifyTools.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\nimport { AttributeId } from \"../datatype/AttributeId.js\";\nimport { CaseAuthenticatedTag } from \"../datatype/CaseAuthenticatedTag.js\";\nimport { ClusterId } from \"../datatype/ClusterId.js\";\nimport { CommandId } from \"../datatype/CommandId.js\";\nimport { DataVersion } from \"../datatype/DataVersion.js\";\nimport { DeviceTypeId } from \"../datatype/DeviceTypeId.js\";\nimport { EndpointNumber } from \"../datatype/EndpointNumber.js\";\nimport { EntryIndex } from \"../datatype/EntryIndex.js\";\nimport { EventId } from \"../datatype/EventId.js\";\nimport { EventNumber } from \"../datatype/EventNumber.js\";\nimport { FabricId } from \"../datatype/FabricId.js\";\nimport { FabricIndex } from \"../datatype/FabricIndex.js\";\nimport { FieldId } from \"../datatype/FieldId.js\";\nimport { GroupId } from \"../datatype/GroupId.js\";\nimport { NodeId } from \"../datatype/NodeId.js\";\nimport { VendorId } from \"../datatype/VendorId.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { isObject } from \"../util/Type.js\";\n\n/** Supported base types to stringify the data for the storage that can be used as keys and also values. */\ntype SupportedStorageBaseTypes =\n    | string\n    | number\n    | boolean\n    | bigint\n    | ByteArray\n    | AttributeId\n    | CaseAuthenticatedTag\n    | ClusterId\n    | CommandId\n    | DataVersion\n    | DeviceTypeId\n    | EndpointNumber\n    | EntryIndex\n    | EventId\n    | EventNumber\n    | FabricId\n    | FabricIndex\n    | FieldId\n    | GroupId\n    | NodeId\n    | VendorId;\n\n/** Supported combined types to stringify the data for the storage that can be used as values. */\ntype SupportedComplexStorageTypes =\n    | Array<SupportedStorageBaseTypes | SupportedComplexStorageTypes> // Arrays\n    | { [key: string]: SupportedStorageBaseTypes | SupportedComplexStorageTypes | null | undefined } // Objects\n    | Array<[SupportedStorageBaseTypes, SupportedStorageBaseTypes | SupportedComplexStorageTypes | null | undefined]> // Map style arrays\n    | Map<SupportedStorageBaseTypes, SupportedStorageBaseTypes | SupportedComplexStorageTypes>\n    | null\n    | undefined; // Maps\n\nexport type SupportedStorageTypes = SupportedStorageBaseTypes | SupportedComplexStorageTypes;\n\n/** Special Magic key to identify special object types with custom encoding in JSON. */\nconst JSON_SPECIAL_KEY_TYPE = \"__object__\";\n\n/** Special Magic key to identify the value of the custom encoded objects in JSON. */\nconst JSON_SPECIAL_KEY_VALUE = \"__value__\";\n\nexport function toJson(object: SupportedStorageTypes, spaces?: number): string {\n    return JSON.stringify(\n        object,\n        (_key, value) => {\n            if (value === undefined) {\n                return `{\"${JSON_SPECIAL_KEY_TYPE}\":\"Undefined\"}`;\n            }\n            if (typeof value === \"bigint\") {\n                return `{\"${JSON_SPECIAL_KEY_TYPE}\":\"BigInt\",\"${JSON_SPECIAL_KEY_VALUE}\":\"${value.toString()}\"}`;\n            }\n            if (value instanceof Uint8Array) {\n                return `{\"${JSON_SPECIAL_KEY_TYPE}\":\"Uint8Array\",\"${JSON_SPECIAL_KEY_VALUE}\":\"${value.toHex()}\"}`;\n            }\n            //Node.js can sometimes pass in a native Buffer object in place of a Uint8Array, of which it is a subclass of, the Buffer class implements its own toJSON method which breaks our serialization.\n            if (isObject(value) && value.type === \"Buffer\" && Array.isArray(value.data)) {\n                return `{\"${JSON_SPECIAL_KEY_TYPE}\":\"Uint8Array\",\"${JSON_SPECIAL_KEY_VALUE}\":\"${Uint8Array.from(\n                    value.data,\n                ).toHex()}\"}`;\n            }\n            if (value instanceof Map) {\n                return `{\"${JSON_SPECIAL_KEY_TYPE}\":\"Map\",\"${JSON_SPECIAL_KEY_VALUE}\":${JSON.stringify(\n                    toJson(Array.from(value.entries())),\n                )}}`;\n            }\n            return value;\n        },\n        spaces,\n    );\n}\n\nexport function fromJson(json: string): SupportedStorageTypes {\n    return JSON.parse(json, (_key, value) => {\n        if (typeof value === \"string\" && value.startsWith(`{\"${JSON_SPECIAL_KEY_TYPE}\":\"`) && value.endsWith(\"}\")) {\n            const data = JSON.parse(value);\n            const object = data[JSON_SPECIAL_KEY_TYPE];\n            switch (object) {\n                case \"Undefined\":\n                    return undefined;\n                case \"BigInt\":\n                    return BigInt(data[JSON_SPECIAL_KEY_VALUE]);\n                case \"Uint8Array\":\n                    return ByteArray.fromHex(data[JSON_SPECIAL_KEY_VALUE]);\n                case \"Map\":\n                    return new Map(\n                        fromJson(data[JSON_SPECIAL_KEY_VALUE]) as [\n                            SupportedStorageBaseTypes,\n                            SupportedStorageBaseTypes,\n                        ][],\n                    );\n\n                // TODO Remove in the future, leave here for now for backward compatibility?\n                case \"AttributeId\":\n                case \"CaseAuthenticatedTag\":\n                case \"ClusterId\":\n                case \"CommandId\":\n                case \"DataVersion\":\n                case \"DeviceTypeId\":\n                case \"EndpointNumber\":\n                case \"EntryIndex\":\n                case \"EventId\":\n                case \"FabricIndex\":\n                case \"FieldId\":\n                case \"GroupId\":\n                case \"VendorId\":\n                    return data[JSON_SPECIAL_KEY_VALUE];\n                case \"EventNumber\":\n                case \"FabricId\":\n                case \"NodeId\":\n                    return BigInt(data[JSON_SPECIAL_KEY_VALUE]);\n\n                default:\n                    throw new UnexpectedDataError(`Unknown object type: ${object}`);\n            }\n        }\n        return value;\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAAoC;AAiBpC,uBAA0B;AAC1B,kBAAyB;AAxBzB;AAAA;AAAA;AAAA;AAAA;AA8DA,MAAM,wBAAwB;AAG9B,MAAM,yBAAyB;AAExB,SAAS,OAAO,QAA+B,QAAyB;AAC3E,SAAO,KAAK;AAAA,IACR;AAAA,IACA,CAAC,MAAM,UAAU;AACb,UAAI,UAAU,QAAW;AACrB,eAAO,KAAK,qBAAqB;AAAA,MACrC;AACA,UAAI,OAAO,UAAU,UAAU;AAC3B,eAAO,KAAK,qBAAqB,eAAe,sBAAsB,MAAM,MAAM,SAAS,CAAC;AAAA,MAChG;AACA,UAAI,iBAAiB,YAAY;AAC7B,eAAO,KAAK,qBAAqB,mBAAmB,sBAAsB,MAAM,MAAM,MAAM,CAAC;AAAA,MACjG;AAEA,cAAI,sBAAS,KAAK,KAAK,MAAM,SAAS,YAAY,MAAM,QAAQ,MAAM,IAAI,GAAG;AACzE,eAAO,KAAK,qBAAqB,mBAAmB,sBAAsB,MAAM,WAAW;AAAA,UACvF,MAAM;AAAA,QACV,EAAE,MAAM,CAAC;AAAA,MACb;AACA,UAAI,iBAAiB,KAAK;AACtB,eAAO,KAAK,qBAAqB,YAAY,sBAAsB,KAAK,KAAK;AAAA,UACzE,OAAO,MAAM,KAAK,MAAM,QAAQ,CAAC,CAAC;AAAA,QACtC,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA,IACA;AAAA,EACJ;AACJ;AAEO,SAAS,SAAS,MAAqC;AAC1D,SAAO,KAAK,MAAM,MAAM,CAAC,MAAM,UAAU;AACrC,QAAI,OAAO,UAAU,YAAY,MAAM,WAAW,KAAK,qBAAqB,KAAK,KAAK,MAAM,SAAS,GAAG,GAAG;AACvG,YAAM,OAAO,KAAK,MAAM,KAAK;AAC7B,YAAM,SAAS,KAAK,qBAAqB;AACzC,cAAQ,QAAQ;AAAA,QACZ,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO,OAAO,KAAK,sBAAsB,CAAC;AAAA,QAC9C,KAAK;AACD,iBAAO,2BAAU,QAAQ,KAAK,sBAAsB,CAAC;AAAA,QACzD,KAAK;AACD,iBAAO,IAAI;AAAA,YACP,SAAS,KAAK,sBAAsB,CAAC;AAAA,UAIzC;AAAA;AAAA,QAGJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,iBAAO,KAAK,sBAAsB;AAAA,QACtC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,iBAAO,OAAO,KAAK,sBAAsB,CAAC;AAAA,QAE9C;AACI,gBAAM,IAAI,uCAAoB,wBAAwB,MAAM,EAAE;AAAA,MACtE;AAAA,IACJ;AACA,WAAO;AAAA,EACX,CAAC;AACL;",
  "names": []
}
