{
  "version": 3,
  "sources": ["../../../src/storage/StorageContext.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { Storage, StorageError, StorageOperationResult } from \"./Storage.js\";\nimport { SupportedStorageTypes } from \"./StringifyTools.js\";\n\nexport class StorageContext<S extends Storage = any> {\n    constructor(\n        private readonly storage: S,\n        readonly thisContexts: string[],\n    ) {}\n\n    get<T extends SupportedStorageTypes>(key: string, defaultValue?: T): StorageOperationResult<S, T> {\n        const value = this.storage.get(this.thisContexts, key);\n        if (value !== undefined) {\n            if (MaybePromise.is(value)) {\n                return value.then(v => {\n                    if (v !== undefined) return v;\n                    if (defaultValue === undefined) {\n                        throw new StorageError(\n                            `No value found for key ${key} in context ${this.thisContexts} and no default value specified!`,\n                        );\n                    }\n                    return defaultValue;\n                }) as StorageOperationResult<S, T>;\n            }\n            return value as StorageOperationResult<S, T>;\n        }\n        if (defaultValue === undefined) {\n            throw new StorageError(\n                `No value found for key ${key} in context ${this.thisContexts} and no default value specified!`,\n            );\n        }\n        return defaultValue as StorageOperationResult<S, T>;\n    }\n\n    has(key: string) {\n        const value = this.storage.get(this.thisContexts, key);\n        if (value !== undefined) {\n            if (MaybePromise.is(value)) {\n                return value.then(v => v !== undefined) as StorageOperationResult<S, boolean>;\n            }\n            return true as StorageOperationResult<S, boolean>;\n        }\n        return false as StorageOperationResult<S, boolean>;\n    }\n\n    set(key: string, value: SupportedStorageTypes): StorageOperationResult<S>;\n    set(values: Record<string, SupportedStorageTypes>): StorageOperationResult<S>;\n    set(keyOrValues: string | Record<string, SupportedStorageTypes>, value?: SupportedStorageTypes) {\n        if (typeof keyOrValues === \"string\") {\n            return this.storage.set(this.thisContexts, keyOrValues, value) as StorageOperationResult<S>;\n        }\n        return this.storage.set(this.thisContexts, keyOrValues) as StorageOperationResult<S>;\n    }\n\n    delete(key: string) {\n        return this.storage.delete(this.thisContexts, key) as StorageOperationResult<S>;\n    }\n\n    createContext(context: string): StorageContext<S> {\n        if (context.length === 0) throw new StorageError(\"Context must not be an empty string\");\n        if (context.includes(\".\")) throw new StorageError(\"Context must not contain dots!\");\n        return new StorageContext(this.storage, [...this.thisContexts, context]);\n    }\n\n    keys() {\n        return this.storage.keys(this.thisContexts) as StorageOperationResult<S, string[]>;\n    }\n\n    values() {\n        return this.storage.values(this.thisContexts) as StorageOperationResult<\n            S,\n            Record<string, SupportedStorageTypes>\n        >;\n    }\n\n    contexts() {\n        return this.storage.contexts(this.thisContexts) as StorageOperationResult<S, string[]>;\n    }\n\n    /** Clears all keys in this context */\n    clear() {\n        const keys = this.keys();\n        if (MaybePromise.is(keys)) {\n            return keys.then(keys => {\n                return Promise.all(keys.map(key => this.delete(key))).then(() => Promise.resolve());\n            }) as StorageOperationResult<S>;\n        }\n        const promises = new Array<PromiseLike<void>>();\n        keys.forEach(key => {\n            const promise = this.delete(key);\n            if (promise !== undefined && MaybePromise.is(promise)) {\n                promises.push(promise);\n            }\n        });\n        if (promises.length > 0) {\n            return Promise.all(promises).then(() => Promise.resolve()) as StorageOperationResult<S>;\n        }\n        return undefined as StorageOperationResult<S>;\n    }\n\n    /** Clears all keys in this context and all created sub-contexts. */\n    clearAll() {\n        return this.storage.clearAll(this.thisContexts) as StorageOperationResult<S>;\n    }\n}\n"],
  "mappings": "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",
  "names": ["keys"]
}
