{
  "version": 3,
  "sources": ["../../../../../src/model/standard/elements/string.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { Matter } from \"../Matter.js\";\nimport { DatatypeElement as Datatype } from \"../../elements/index.js\";\n\nexport const string = Datatype({\n    name: \"string\", type: \"octstr\", description: \"Character String\", isSeed: true, metatype: \"string\",\n\n    details: \"The character string data type is derived from an octet string. The octets shall be characters with \" +\n        \"UTF-8 encoding. An instance of this data type shall NOT contain truncated code points.\" +\n        \"\\n\" +\n        \"Note that the character string type is a bounded sequence of characters whose size bound format is \" +\n        \"not specified in the data model, but rather a property of the underlying encoding. Therefore, no \" +\n        \"assumptions are to be made about the presence or absence of a length prefix or null-terminator \" +\n        \"byte, or other implementation considerations.\" +\n        \"\\n\" +\n        \"It is recommended to define constraints on the maximum possible string length.\" +\n        \"\\n\" +\n        \"If at least one of the code points within the string has value 31 (0x1F), which is Unicode \" +\n        \"INFORMATION SEPARATOR 1 and ASCII Unit Separator, then any client making use of the string shall \" +\n        \"only consider the code points that appear before the first INFORMATION SEPARATOR 1 as being the \" +\n        \"textual information carried by the string. Any comparison between such a string and other strings \" +\n        \"shall use the textual component before the first INFORMATION SEPARATOR 1. The remainder of the \" +\n        \"character string after a first INFORMATION SEPARATOR 1 is reserved for future use by this \" +\n        \"specification. Implementations of this version of the specification shall NOT produce character \" +\n        \"strings containing INFORMATION SEPARATOR 1.\",\n\n    xref: { document: \"core\", section: \"7.18.2.36\" }\n});\n\nMatter.children.push(string);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,oBAAuB;AACvB,sBAA4C;AAT5C;AAAA;AAAA;AAAA;AAAA;AAWO,MAAM,aAAS,gBAAAA,iBAAS;AAAA,EAC3B,MAAM;AAAA,EAAU,MAAM;AAAA,EAAU,aAAa;AAAA,EAAoB,QAAQ;AAAA,EAAM,UAAU;AAAA,EAEzF,SAAS;AAAA,EAmBT,MAAM,EAAE,UAAU,QAAQ,SAAS,YAAY;AACnD,CAAC;AAED,qBAAO,SAAS,KAAK,MAAM;",
  "names": ["Datatype"]
}
