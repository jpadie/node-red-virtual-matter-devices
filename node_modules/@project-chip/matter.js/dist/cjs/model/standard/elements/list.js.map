{
  "version": 3,
  "sources": ["../../../../../src/model/standard/elements/list.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { Matter } from \"../Matter.js\";\nimport { DatatypeElement as Datatype } from \"../../elements/index.js\";\n\nexport const list = Datatype({\n    name: \"list\", description: \"List\", isSeed: true, metatype: \"array\",\n\n    details: \"A list is defined as a collection of entries of the same data type, with a finite count from 0 to \" +\n        \"65534. A cluster specification may define further constraints on the maximum possible count. The \" +\n        \"list entry data type shall be any defined data type, except a list data type, or any data type \" +\n        \"derived from a list.\" +\n        \"\\n\" +\n        \"The quality columns for a list definition are for the list.\" +\n        \"\\n\" +\n        \"The list entries are indicated with an index that is an unsigned integer starting at 0 (zero). The \" +\n        \"maintained order of entries, by index, is defined in the cluster specification, or undefined. Data \" +\n        \"that is defined as a list is indicated with \\\"list[X]\\\" where X is the entry type. The data type of \" +\n        \"the list entry has its own qualities, constraints, and conformance.\" +\n        \"\\n\" +\n        \"### To define qualities for the list entry data type, make the list entry data type a defined local \" +\n        \"derived data type, with a table including the columns required to define and constrain the data \" +\n        \"type.\" +\n        \"\\n\" +\n        \"There is an inline shortcut to define the list entry data type constraints. See List Constraints.\" +\n        \"\\n\" +\n        \"It is recommended to put a maximum constraint on the list and list entry data types.\" +\n        \"\\n\" +\n        \"It is recommended that a list entry data type be a struct, to enable the addition of new fields to \" +\n        \"the list\u2019s entries in the future.\" +\n        \"\\n\" +\n        \"  \u2022 The cluster data version shall be incremented when the list order or entries change.\" +\n        \"\\n\" +\n        \"  \u2022 An entry shall NOT be null.\" +\n        \"\\n\" +\n        \"  \u2022 The list shall support reading and reporting all entries.\" +\n        \"\\n\" +\n        \"  \u2022 The list shall support reporting, updates, and/or deletion of one or more entries.\" +\n        \"\\n\" +\n        \"  \u2022 If the list is writable, it shall support writing or deleting the entire list.\" +\n        \"\\n\" +\n        \"  \u2022 If the list is writable, it shall support updating one or more individual entries by indicating \" +\n        \"    an index per updated entry.\" +\n        \"\\n\" +\n        \"  \u2022 If the list is writable, it shall support deleting one or more individual entries by indicating \" +\n        \"    an index per deleted entry.\" +\n        \"\\n\" +\n        \"  \u2022 If the list is writable, it shall support adding one or more individual entries.\" +\n        \"\\n\" +\n        \"  \u2022 A list may define an entry that is a struct that is fabric-scoped (see Fabric-Scoped Quality).\" +\n        \"\\n\" +\n        \"### Fabric-Scoped List\" +\n        \"\\n\" +\n        \"  \u2022 A fabric-scoped list shall define an entry data type that is a struct, which shall also be \" +\n        \"    fabric-scoped (see Fabric-Scoped Struct).\" +\n        \"\\n\" +\n        \"Each entry in a fabric-scoped list shall be fabric-scoped to a particular fabric or no fabric.\" +\n        \"\\n\" +\n        \"### A fabric-scoped list supports a fabric-filter that filters the view of the list for read and \" +\n        \"write interactions. This filter simplifies client side logic that does not want to read or write \" +\n        \"fabric data that is not associated with the accessing fabric.\" +\n        \"\\n\" +\n        \"  \u2022 An interaction upon a list with fabric-filtering shall only indicate and access entries where \" +\n        \"    the associated fabric matches the accessing fabric, and all other entries shall be ignored.\" +\n        \"\\n\" +\n        \"  \u2022 Fabric-filtered list entries shall be in the same order as the full list.\" +\n        \"\\n\" +\n        \"  \u2022 Fabric-filtered list entries shall be indexed from 0 with no gaps, as if the other entries did \" +\n        \"    not exist.\" +\n        \"\\n\" +\n        \"  \u2022 For a write interaction, fabric-filtering shall be enabled.\" +\n        \"\\n\" +\n        \"  \u2022 When writing to a fabric-scoped list, the write interaction shall be on an accessing fabric, \" +\n        \"    otherwise, the write interaction shall fail (see Interaction Model).\" +\n        \"\\n\" +\n        \"  \u2022 For a read interaction on a list, fabric-filtering may be enabled.\" +\n        \"\\n\" +\n        \"  \u2022 For a read interaction on a list, with fabric-filtering disabled, the list shall be reported as \" +\n        \"    a full list with all entries.\" +\n        \"\\n\" +\n        \"list[1] = [ { FabricIndex = B, Value = 55 } ]\" +\n        \"\\n\" +\n        \"changes the full list to:\" +\n        \"\\n\" +\n        \"list = [ { FabricIndex = A, Value = 20 },\" +\n        \"\\n\" +\n        \"{ FabricIndex = B, Value = 30 },\" +\n        \"\\n\" +\n        \"{ FabricIndex = A, Value = 40 },\" +\n        \"\\n\" +\n        \"{ FabricIndex = B, Value = 55 },\" +\n        \"\\n\" +\n        \"{ FabricIndex = B, Value = 60 } ]\",\n\n    xref: { document: \"core\", section: \"7.18.1.8\" }\n});\n\nMatter.children.push(list);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,oBAAuB;AACvB,sBAA4C;AAT5C;AAAA;AAAA;AAAA;AAAA;AAWO,MAAM,WAAO,gBAAAA,iBAAS;AAAA,EACzB,MAAM;AAAA,EAAQ,aAAa;AAAA,EAAQ,QAAQ;AAAA,EAAM,UAAU;AAAA,EAE3D,SAAS;AAAA,EAsFT,MAAM,EAAE,UAAU,QAAQ,SAAS,WAAW;AAClD,CAAC;AAED,qBAAO,SAAS,KAAK,IAAI;",
  "names": ["Datatype"]
}
