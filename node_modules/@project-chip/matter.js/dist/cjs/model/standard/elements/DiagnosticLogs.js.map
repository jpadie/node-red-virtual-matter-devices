{
  "version": 3,
  "sources": ["../../../../../src/model/standard/elements/DiagnosticLogs.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { Matter } from \"../Matter.js\";\nimport {\n    ClusterElement as Cluster,\n    AttributeElement as Attribute,\n    CommandElement as Command,\n    FieldElement as Field,\n    DatatypeElement as Datatype\n} from \"../../elements/index.js\";\n\nexport const DiagnosticLogs = Cluster({\n    name: \"DiagnosticLogs\", id: 0x32, classification: \"node\", pics: \"DLOG\",\n    details: \"This Cluster supports an interface to a Node. It provides commands for retrieving unstructured \" +\n        \"diagnostic logs from a Node that may be used to aid in diagnostics. It will often be the case that \" +\n        \"unstructured diagnostic logs will be Node-wide and not specific to any subset of Endpoints. When \" +\n        \"present, this Cluster shall be implemented once for the Node. The Node SHOULD also implement the \" +\n        \"BDX Initiator and BDX Sender roles as defined in the BDX Protocol.\",\n    xref: { document: \"core\", section: \"11.11\" },\n\n    children: [\n        Attribute({ name: \"ClusterRevision\", id: 0xfffd, type: \"ClusterRevision\", default: 1 }),\n\n        Command({\n            name: \"RetrieveLogsRequest\", id: 0x0, access: \"O\", conformance: \"M\", direction: \"request\",\n            response: \"RetrieveLogsResponse\",\n            details: \"Reception of this command starts the process of retrieving diagnostic logs from a Node.\",\n            xref: { document: \"core\", section: \"11.11.5.1\" },\n\n            children: [\n                Field({\n                    name: \"Intent\", id: 0x0, type: \"IntentEnum\", conformance: \"M\",\n                    details: \"This field shall indicate why the diagnostic logs are being retrieved from the Node. A Node may \" +\n                        \"utilize this field to selectively determine the logs to transfer.\",\n                    xref: { document: \"core\", section: \"11.11.5.1.1\" }\n                }),\n\n                Field({\n                    name: \"RequestedProtocol\", id: 0x1, type: \"TransferProtocolEnum\", conformance: \"M\",\n\n                    details: \"This field shall be used to indicate how the log transfer is to be realized. If the field is set to \" +\n                        \"BDX, then if the receiving Node supports BDX it shall attempt to use BDX to transfer any potential \" +\n                        \"diagnostic logs; if the receiving Node does not support BDX then the Node shall follow the \" +\n                        \"requirements defined for a TransferProtocolEnum of ResponsePayload. If this field is set to \" +\n                        \"ResponsePayload the receiving Node shall only utilize the LogContent field of the \" +\n                        \"RetrieveLogsResponse command to transfer diagnostic log information.\",\n\n                    xref: { document: \"core\", section: \"11.11.5.1.2\" }\n                }),\n\n                Field({\n                    name: \"TransferFileDesignator\", id: 0x2, type: \"string\", conformance: \"O\", constraint: \"max 32\",\n\n                    details: \"This field shall be present if the RequestedProtocol is BDX. The TransferFileDesignator shall be \" +\n                        \"set as the File Designator of the BDX transfer if initiated.\" +\n                        \"\\n\" +\n                        \"Effect on Receipt\" +\n                        \"\\n\" +\n                        \"On receipt of this command, the Node shall respond with a RetrieveLogsResponse command.\" +\n                        \"\\n\" +\n                        \"If the RequestedProtocol is set to BDX the Node SHOULD immediately realize the RetrieveLogsResponse \" +\n                        \"command by initiating a BDX Transfer, sending a BDX SendInit message with the File Designator field \" +\n                        \"of the message set to the value of the TransferFileDesignator field of the RetrieveLogsRequest. On \" +\n                        \"reception of a BDX SendAccept message the Node shall send a RetrieveLogsResponse command with a \" +\n                        \"Status field set to Success and proceed with the log transfer over BDX. If a failure StatusReport \" +\n                        \"is received in response to the SendInit message, the Node shall send a RetrieveLogsResponse command \" +\n                        \"with a Status of Denied. In the case where the Node is able to fit the entirety of the requested \" +\n                        \"logs within the LogContent field, the Status field of the RetrieveLogsResponse shall be set to \" +\n                        \"Exhausted and a BDX session shall NOT be initiated.\" +\n                        \"\\n\" +\n                        \"If the RequestedProtocol is set to BDX and either the Node does not support BDX or it is not \" +\n                        \"possible for the Node to establish a BDX session, then the Node shall utilize the LogContent field \" +\n                        \"of the RetrieveLogsResponse command to transfer as much of the current logs as it can fit within \" +\n                        \"the response, and the Status field of the RetrieveLogsResponse shall be set to Exhausted.\" +\n                        \"\\n\" +\n                        \"If the RequestedProtocol is set to ResponsePayload the Node shall utilize the LogContent field of \" +\n                        \"the RetrieveLogsResponse command to transfer as much of the current logs as it can fit within the \" +\n                        \"response, and a BDX session shall NOT be initiated.\" +\n                        \"\\n\" +\n                        \"If the RequestedProtocol is set to BDX and there is no TransferFileDesignator the command shall \" +\n                        \"fail with a Status Code of INVALID_COMMAND.\" +\n                        \"\\n\" +\n                        \"If the Intent and/or the RequestedProtocol arguments contain invalid (out of range) values the \" +\n                        \"command shall fail with a Status Code of INVALID_COMMAND.\",\n\n                    xref: { document: \"core\", section: \"11.11.5.1.3\" }\n                })\n            ]\n        }),\n\n        Command({\n            name: \"RetrieveLogsResponse\", id: 0x1, conformance: \"M\", direction: \"response\",\n            details: \"This shall be generated as a response to the RetrieveLogsRequest. The data for this command is \" +\n                \"shown in the following.\",\n            xref: { document: \"core\", section: \"11.11.5.2\" },\n\n            children: [\n                Field({\n                    name: \"Status\", id: 0x0, type: \"StatusEnum\", conformance: \"M\",\n                    details: \"This field shall indicate the result of an attempt to retrieve diagnostic logs.\",\n                    xref: { document: \"core\", section: \"11.11.5.2.1\" }\n                }),\n\n                Field({\n                    name: \"LogContent\", id: 0x1, type: \"octstr\", conformance: \"M\", constraint: \"max 1024\",\n                    details: \"This field shall be included in the command if the Status field has a value of Success or \" +\n                        \"Exhausted. A Node SHOULD utilize this field to transfer the newest diagnostic log entries. This \" +\n                        \"field shall be empty if BDX is requested and the Status field has a value of Success.\",\n                    xref: { document: \"core\", section: \"11.11.5.2.2\" }\n                }),\n\n                Field({\n                    name: \"UtcTimeStamp\", id: 0x2, type: \"epoch-us\", conformance: \"O\",\n                    details: \"This field SHOULD be included in the command if the Status field has a value of Success and the \" +\n                        \"Node maintains a wall clock. When included, the UTCTimeStamp field shall contain the value of the \" +\n                        \"oldest log entry in the diagnostic logs that are being transferred.\",\n                    xref: { document: \"core\", section: \"11.11.5.2.3\" }\n                }),\n\n                Field({\n                    name: \"TimeSinceBoot\", id: 0x3, type: \"systime-us\", conformance: \"O\",\n                    details: \"This field SHOULD be included in the command if the Status field has a value of Success. When \" +\n                        \"included, the TimeSinceBoot field shall contain the time of the oldest log entry in the diagnostic \" +\n                        \"logs that are being transferred represented by the number of microseconds since the last time the \" +\n                        \"Node went through a reboot.\",\n                    xref: { document: \"core\", section: \"11.11.5.2.4\" }\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"IntentEnum\", type: \"enum8\",\n            xref: { document: \"core\", section: \"11.11.4.1\" },\n\n            children: [\n                Field({\n                    name: \"EndUserSupport\", id: 0x0, conformance: \"M\",\n                    description: \"Logs to be used for end- user support\",\n                    details: \"shall indicate that the purpose of the log request is to retrieve logs for the intention of \" +\n                        \"providing support to an end-user.\",\n                    xref: { document: \"core\", section: \"11.11.4.1.1\" }\n                }),\n\n                Field({\n                    name: \"NetworkDiag\", id: 0x1, conformance: \"M\",\n                    description: \"Logs to be used for network diagnostics\",\n                    details: \"shall indicate that the purpose of the log request is to diagnose the network(s) for which the Node \" +\n                        \"is currently commissioned (and/or connected) or has previously been commissioned (and/or connected).\",\n                    xref: { document: \"core\", section: \"11.11.4.1.2\" }\n                }),\n\n                Field({\n                    name: \"CrashLogs\", id: 0x2, conformance: \"M\", description: \"Obtain crash logs from the Node\",\n                    details: \"shall indicate that the purpose of the log request is to retrieve any crash logs that may be \" +\n                        \"present on a Node.\",\n                    xref: { document: \"core\", section: \"11.11.4.1.3\" }\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"StatusEnum\", type: \"enum8\",\n            xref: { document: \"core\", section: \"11.11.4.2\" },\n\n            children: [\n                Field({\n                    name: \"Success\", id: 0x0, conformance: \"M\", description: \"Successful transfer of logs\",\n                    details: \"shall be used if diagnostic logs will be or are being transferred.\",\n                    xref: { document: \"core\", section: \"11.11.4.2.1\" }\n                }),\n\n                Field({\n                    name: \"Exhausted\", id: 0x1, conformance: \"M\", description: \"All logs has been transferred\",\n                    details: \"shall be used when a BDX session is requested, however, all available logs were provided in a \" +\n                        \"LogContent field.\",\n                    xref: { document: \"core\", section: \"11.11.4.2.2\" }\n                }),\n\n                Field({\n                    name: \"NoLogs\", id: 0x2, conformance: \"M\", description: \"No logs of the requested type available\",\n                    details: \"shall be used if the Node does not currently have any diagnostic logs of the requested type \" +\n                        \"(Intent) to transfer.\",\n                    xref: { document: \"core\", section: \"11.11.4.2.3\" }\n                }),\n\n                Field({\n                    name: \"Busy\", id: 0x3, conformance: \"M\", description: \"Unable to handle request, retry later\",\n                    details: \"shall be used if the Node is unable to handle the request (e.g. in the process of another transfer) \" +\n                        \"and the Client SHOULD re-attempt the request later.\",\n                    xref: { document: \"core\", section: \"11.11.4.2.4\" }\n                }),\n\n                Field({\n                    name: \"Denied\", id: 0x4, conformance: \"M\",\n                    description: \"The request is denied, no logs being transferred\",\n                    details: \"shall be used if the Node is denying the current transfer of diagnostic logs for any reason.\",\n                    xref: { document: \"core\", section: \"11.11.4.2.5\" }\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"TransferProtocolEnum\", type: \"enum8\",\n            xref: { document: \"core\", section: \"11.11.4.3\" },\n\n            children: [\n                Field({\n                    name: \"ResponsePayload\", id: 0x0, conformance: \"M\",\n                    description: \"Logs to be returned as a response\",\n                    details: \"shall be used by a Client to request that logs are transferred using the LogContent attribute of \" +\n                        \"the response\",\n                    xref: { document: \"core\", section: \"11.11.4.3.1\" }\n                }),\n\n                Field({\n                    name: \"Bdx\", id: 0x1, conformance: \"M\", description: \"Logs to be returned using BDX\",\n                    details: \"shall be used by a Client to request that logs are transferred using BDX as defined in BDX Protocol\",\n                    xref: { document: \"core\", section: \"11.11.4.3.2\" }\n                })\n            ]\n        })\n    ]\n});\n\nMatter.children.push(DiagnosticLogs);\n"],
  "mappings": "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",
  "names": ["Cluster", "Attribute", "Command", "Field", "Datatype"]
}
