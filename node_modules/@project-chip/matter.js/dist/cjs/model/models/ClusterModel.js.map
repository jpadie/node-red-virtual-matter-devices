{
  "version": 3,
  "sources": ["../../../../src/model/models/ClusterModel.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Mei } from \"../../datatype/ManufacturerExtensibleIdentifier.js\";\nimport { camelize, describeList } from \"../../util/String.js\";\nimport { Access } from \"../aspects/Access.js\";\nimport { Quality } from \"../aspects/Quality.js\";\nimport { SchemaImplementationError } from \"../definitions/errors.js\";\nimport { ElementTag, FeatureSet, Metatype } from \"../definitions/index.js\";\nimport { ClusterElement } from \"../elements/index.js\";\nimport { ModelTraversal } from \"../logic/ModelTraversal.js\";\nimport { ClusterRevision } from \"../standard/elements/ClusterRevision.js\";\nimport { FeatureMap } from \"../standard/elements/FeatureMap.js\";\nimport { Aspects } from \"./Aspects.js\";\nimport { AttributeModel } from \"./AttributeModel.js\";\nimport { Children } from \"./Children.js\";\nimport { CommandModel } from \"./CommandModel.js\";\nimport { DatatypeModel } from \"./DatatypeModel.js\";\nimport { EventModel } from \"./EventModel.js\";\nimport type { FieldModel } from \"./FieldModel.js\";\nimport { Model } from \"./Model.js\";\nimport { PropertyModel } from \"./PropertyModel.js\";\n\nconst QUALITY = Symbol(\"quality\");\n\nexport class ClusterModel extends Model implements ClusterElement {\n    override tag: ClusterElement.Tag = ClusterElement.Tag;\n    declare id: Mei;\n    declare classification?: ClusterElement.Classification;\n    declare pics?: string;\n    override isTypeScope = true;\n\n    get diagnostics() {\n        return this.effectiveQuality.diagnostics;\n    }\n\n    get quality(): Quality {\n        return Aspects.getAspect(this, QUALITY, Quality);\n    }\n    set quality(definition: Quality | Quality.Definition) {\n        Aspects.setAspect(this, QUALITY, Quality, definition);\n    }\n    get effectiveQuality(): Quality {\n        return Aspects.getEffectiveAspect(this, QUALITY, Quality);\n    }\n\n    get attributes() {\n        return this.all(AttributeModel);\n    }\n\n    get commands() {\n        return this.all(CommandModel);\n    }\n\n    get events() {\n        return this.all(EventModel);\n    }\n\n    get datatypes() {\n        return this.all(DatatypeModel);\n    }\n\n    get members(): PropertyModel[] {\n        const traversal = new ModelTraversal();\n\n        // Formally a field element cannot be a cluster child but we allow it for metadata control when a field should\n        // not be published\n        const members = traversal.findChildren(this, [ElementTag.Field, ElementTag.Attribute]) as PropertyModel[];\n\n        // We consider the standard set of \"global\" attributes members of all clusters\n        const missingGlobalIds = new Set(AttributeModel.globalIds);\n        for (const m of members) {\n            if (m instanceof AttributeModel && m.id) {\n                missingGlobalIds.delete(m.id);\n            }\n        }\n\n        if (missingGlobalIds.size) {\n            const root = traversal.findRoot(this);\n            if (root) {\n                for (const id of missingGlobalIds) {\n                    const global = root.get(AttributeModel, id);\n                    if (global) {\n                        members.push(global);\n                    }\n                }\n            }\n        }\n\n        return members;\n    }\n\n    get activeMembers() {\n        return new ModelTraversal().findActiveMembers(this, false, this);\n    }\n\n    get conformantMembers() {\n        return new ModelTraversal().findActiveMembers(this, true, this);\n    }\n\n    /**\n     * Get attributes, commands and events whether inherited or defined directly in this model.\n     */\n    get allAces() {\n        return new ModelTraversal().findChildren(this, [\n            ElementTag.Attribute,\n            ElementTag.Command,\n            ElementTag.Event,\n        ]) as (AttributeModel | CommandModel | EventModel)[];\n    }\n\n    get revision() {\n        let revision = 1;\n        const revisionAttr = this.get(AttributeModel, ClusterRevision.id);\n        if (typeof revisionAttr?.default === \"number\") {\n            revision = revisionAttr.default;\n        }\n        return revision;\n    }\n\n    get features() {\n        return this.featureMap.children ?? [];\n    }\n\n    get featureMap() {\n        return (this.member(FeatureMap.id, [ElementTag.Attribute]) as AttributeModel) ?? new AttributeModel(FeatureMap);\n    }\n\n    get featureNames(): FeatureSet {\n        return new FeatureSet(this.features.map(feature => feature.name));\n    }\n\n    get supportedFeatures(): FeatureSet {\n        const supported = {} as { [name: string]: boolean | undefined };\n        for (const feature of this.features) {\n            if (feature.default) {\n                supported[feature.name] = true;\n            }\n        }\n        return new FeatureSet(supported);\n    }\n\n    set supportedFeatures(features: FeatureSet.Definition | undefined) {\n        const featureSet = new FeatureSet(features);\n\n        let featureMap = this.featureMap;\n\n        if (featureMap.parent !== this) {\n            featureMap = featureMap.clone();\n            this.add(featureMap);\n        }\n\n        for (const feature of featureMap.children) {\n            const desc = feature.description && camelize(feature.description);\n            if (desc !== undefined && featureSet.has(desc)) {\n                feature.default = true;\n                featureSet.delete(desc);\n                continue;\n            }\n\n            if (featureSet.has(feature.name)) {\n                featureSet.delete(feature.name);\n                feature.default = true;\n                continue;\n            }\n\n            feature.default = undefined;\n        }\n\n        if (featureSet.size) {\n            throw new SchemaImplementationError(\n                this,\n                `Cannot set unknown feature${featureSet.size > 1 ? \"s\" : \"\"} ${describeList(\"and\", ...featureSet)}`,\n            );\n        }\n    }\n\n    override get children(): Children<ClusterModel.Child, ClusterElement.Child> {\n        return super.children as any;\n    }\n\n    override set children(children: (ClusterModel.Child | ClusterElement.Child)[]) {\n        super.children = children;\n    }\n\n    get effectiveMetatype() {\n        return Metatype.object;\n    }\n\n    get effectiveAccess() {\n        return Access.Default;\n    }\n\n    override valueOf() {\n        const result = super.valueOf() as any;\n        if (this.quality && !this.quality.empty) {\n            result.quality = this.quality.valueOf();\n        }\n        return result as ClusterElement;\n    }\n\n    override freeze() {\n        this.quality.freeze();\n        super.freeze();\n    }\n\n    constructor(definition: ClusterElement.Properties) {\n        super(definition);\n\n        if (definition instanceof Model) {\n            Aspects.cloneAspects(definition, this, QUALITY);\n        }\n    }\n\n    static Tag = ClusterElement.Tag;\n\n    static {\n        Model.types[this.Tag] = this;\n    }\n}\n\nexport namespace ClusterModel {\n    export type Child =\n        | DatatypeModel\n        | AttributeModel\n        | CommandModel\n        | EventModel\n\n        // Fields are not cluster children in canonical schema but we allow\n        // them as private values in operational schema\n        | FieldModel;\n}\n"],
  "mappings": "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",
  "names": []
}
