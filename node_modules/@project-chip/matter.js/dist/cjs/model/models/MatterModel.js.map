{
  "version": 3,
  "sources": ["../../../../src/model/models/MatterModel.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterElement } from \"../elements/index.js\";\nimport { SemanticNamespaceModel, Specification } from \"../index.js\";\nimport { ModelTraversal } from \"../logic/ModelTraversal.js\";\nimport { Matter } from \"../standard/index.js\";\nimport { AttributeModel } from \"./AttributeModel.js\";\nimport { Children } from \"./Children.js\";\nimport { ClusterModel } from \"./ClusterModel.js\";\nimport { DatatypeModel } from \"./DatatypeModel.js\";\nimport { DeviceTypeModel } from \"./DeviceTypeModel.js\";\nimport { FabricModel } from \"./FabricModel.js\";\nimport { FieldModel } from \"./FieldModel.js\";\nimport { Model } from \"./Model.js\";\n\n/**\n * The root of a Matter model.  This is the parent for global models.\n */\nexport class MatterModel extends Model implements MatterElement {\n    override tag: MatterElement.Tag = MatterElement.Tag;\n    override isTypeScope = true;\n    declare revision?: Specification.Revision;\n\n    /**\n     * The default instance of the canonical MatterModel.\n     */\n    static standard: MatterModel = new MatterModel(Matter);\n\n    /**\n     * All sub-cluster global elements from the standard model.\n     *\n     * This is the set of utility datatypes required by cluster definitions.\n     *\n     * The returned elements are clones as we use this to initialize empty models for testing or diagnostic purposes.\n     */\n    static get seedGlobals() {\n        return MatterModel.standard.children.filter(child => child.isSeed).map(child => child.clone());\n    }\n\n    /**\n     * Clusters.\n     */\n    get clusters() {\n        return this.all(ClusterModel);\n    }\n\n    /**\n     * Device types.\n     */\n    get deviceTypes() {\n        return this.all(DeviceTypeModel);\n    }\n\n    /**\n     * Semantic tag namespaces.\n     */\n    get semanticNamespaces() {\n        return this.all(SemanticNamespaceModel);\n    }\n\n    /**\n     * Global datatypes.\n     */\n    get datatypes() {\n        return this.all(FieldModel);\n    }\n\n    /**\n     * Global attributes.\n     */\n    get attributes() {\n        return this.all(AttributeModel);\n    }\n\n    /**\n     * Fabrics.\n     */\n    get fabrics() {\n        return this.all(FabricModel);\n    }\n\n    override get children(): Children<MatterModel.Child, MatterElement.Child> {\n        return super.children as any;\n    }\n\n    override set children(children: (MatterModel.Child | MatterElement.Child)[]) {\n        super.children = children;\n    }\n\n    /**\n     * Create a new MatterModel.\n     *\n     * @param definition the MatterElement that defines the model\n     * @param globals predefined globals, usually tiehr\n     */\n    constructor(definition: MatterElement.Properties = Matter) {\n        const children = [...(definition.children || [])];\n        super({ ...definition, name: definition.name, children });\n    }\n\n    static {\n        Model.types[MatterElement.Tag] = this;\n    }\n}\n\nexport namespace MatterModel {\n    export type Child =\n        | ClusterModel\n        | DeviceTypeModel\n        | FieldModel\n        | DatatypeModel\n        | AttributeModel\n        | FabricModel\n        | SemanticNamespaceModel;\n}\n\nModelTraversal.fallbackScope = MatterModel.standard;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAA8B;AAC9B,eAAsD;AACtD,4BAA+B;AAC/B,sBAAuB;AACvB,4BAA+B;AAE/B,0BAA6B;AAE7B,6BAAgC;AAChC,yBAA4B;AAC5B,wBAA2B;AAC3B,mBAAsB;AAjBtB;AAAA;AAAA;AAAA;AAAA;AAsBO,MAAM,oBAAoB,mBAA+B;AAAA,EACnD,MAAyB,8BAAc;AAAA,EACvC,cAAc;AAAA;AAAA;AAAA;AAAA,EAMvB,OAAO,WAAwB,IAAI,YAAY,sBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrD,WAAW,cAAc;AACrB,WAAO,YAAY,SAAS,SAAS,OAAO,WAAS,MAAM,MAAM,EAAE,IAAI,WAAS,MAAM,MAAM,CAAC;AAAA,EACjG;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAW;AACX,WAAO,KAAK,IAAI,gCAAY;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAc;AACd,WAAO,KAAK,IAAI,sCAAe;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,qBAAqB;AACrB,WAAO,KAAK,IAAI,+BAAsB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAY;AACZ,WAAO,KAAK,IAAI,4BAAU;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAa;AACb,WAAO,KAAK,IAAI,oCAAc;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAU;AACV,WAAO,KAAK,IAAI,8BAAW;AAAA,EAC/B;AAAA,EAEA,IAAa,WAA6D;AACtE,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,IAAa,SAAS,UAAuD;AACzE,UAAM,WAAW;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,aAAuC,wBAAQ;AACvD,UAAM,WAAW,CAAC,GAAI,WAAW,YAAY,CAAC,CAAE;AAChD,UAAM,EAAE,GAAG,YAAY,MAAM,WAAW,MAAM,SAAS,CAAC;AAAA,EAC5D;AAAA,EAEA,OAAO;AACH,uBAAM,MAAM,8BAAc,GAAG,IAAI;AAAA,EACrC;AACJ;AAaA,qCAAe,gBAAgB,YAAY;",
  "names": []
}
