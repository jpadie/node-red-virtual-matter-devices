{
  "version": 3,
  "sources": ["../../../../src/model/logic/ValidateModel.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Diagnostic } from \"../../log/Diagnostic.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { DefinitionError } from \"../definitions/index.js\";\nimport { Model } from \"../models/index.js\";\nimport { ModelTraversal } from \"./ModelTraversal.js\";\nimport { ModelValidator } from \"./definition-validation/ModelValidator.js\";\n\nconst logger = Logger.get(\"ValidateModel\");\n\n/**\n * Ensures that a model's definition is correct.  Places errors into the error\n * array of invalid models.\n *\n * Makes a few minor modifications to the model as a side effect:\n *\n * - Default values are cast to the correct type if possible\n * - Cross-references are deleted if they're redundant with the parent\n *\n * Note that we run validation against model classes rather than element\n * datatypes.  The classes implement type resolution, error handling and other\n * logic we rely on for validation.\n */\nexport function ValidateModel(model: Model) {\n    const result = new ValidateModel.Result(model);\n\n    function validate(model: Model) {\n        const Validator = ModelValidator.validators[model.tag];\n        if (!Validator) {\n            model.error(\"UNKNOWN_MODEL_TYPE\", `No validator for ${model.tag}`);\n            return;\n        }\n\n        try {\n            new Validator(model).validate();\n        } catch (e) {\n            console.error(`Error validating ${model.path}`);\n            throw e;\n        }\n\n        result.elementCount++;\n        if (!model.valid) {\n            result.invalidElementCount++;\n            if (model.errors) {\n                for (const error of model.errors) {\n                    if (result.errorCounts[error.code]) {\n                        result.errorCounts[error.code]++;\n                    } else {\n                        result.errorCounts[error.code] = 1;\n                    }\n                    result.errors.push(error);\n                }\n            }\n        }\n\n        // Need another logging level before enabling this\n        // logger.debug(\n        //     `${model.valid ? \"\u2714\": \"\u2718\"} ${model.name}`,\n        //     Diagnostic.dict({\n        //         tag: model.tag,\n        //         children: model.children.length || undefined,\n        //         id: model.id ? `0x${model.id?.toString(16)}` : undefined,\n        //         xref: model.xref\n        //     })\n        // );\n\n        Logger.nest(() => {\n            model.children.forEach(validate);\n        });\n    }\n\n    logger.info(\"Validating matter model\");\n    ModelTraversal.memoize(() => validate(model));\n\n    return result;\n}\n\nexport namespace ValidateModel {\n    export class Result {\n        elementCount = 0;\n        invalidElementCount = 0;\n        errorCounts: { [name: string]: number } = {};\n        errors = Array<DefinitionError>();\n\n        get invalidElementPercent() {\n            return ((this.invalidElementCount / this.elementCount) * 100).toPrecision(2);\n        }\n\n        constructor(public model: Model) {}\n\n        report() {\n            if (this.errors.length) {\n                logger.error(\"*** Validation error summary ***\");\n                this.errors.forEach(error =>\n                    logger.error(\n                        error.message,\n                        Diagnostic.dict({ code: error.code, xref: error.xref, src: error.source }),\n                    ),\n                );\n\n                logger.error(\"Error counts by code:\");\n                Logger.nest(() => {\n                    const codes = Object.keys(this.errorCounts).sort((a, b) =>\n                        a.localeCompare(b, undefined, { sensitivity: \"base\" }),\n                    );\n                    for (const code of codes) {\n                        logger.error(`${code}: ${this.errorCounts[code]}`);\n                    }\n                });\n\n                logger.error(\n                    `*** Total ${this.errors.length} validation error${this.errors.length === 1 ? \"\" : \"s\"} ***`,\n                );\n                logger.error(\n                    `*** Total ${this.invalidElementCount} invalid element${\n                        this.invalidElementCount === 1 ? \"\" : \"s\"\n                    } (${this.invalidElementPercent}%) ***`,\n                );\n            } else {\n                logger.info(`*** Validation successful ***`);\n            }\n            logger.debug(`*** Total ${this.elementCount} element${this.elementCount === 1 ? \"\" : \"s\"} ***`);\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,wBAA2B;AAC3B,oBAAuB;AAGvB,4BAA+B;AAC/B,4BAA+B;AAX/B;AAAA;AAAA;AAAA;AAAA;AAaA,MAAM,SAAS,qBAAO,IAAI,eAAe;AAelC,SAAS,cAAc,OAAc;AACxC,QAAM,SAAS,IAAI,cAAc,OAAO,KAAK;AAE7C,WAAS,SAASA,QAAc;AAC5B,UAAM,YAAY,qCAAe,WAAWA,OAAM,GAAG;AACrD,QAAI,CAAC,WAAW;AACZ,MAAAA,OAAM,MAAM,sBAAsB,oBAAoBA,OAAM,GAAG,EAAE;AACjE;AAAA,IACJ;AAEA,QAAI;AACA,UAAI,UAAUA,MAAK,EAAE,SAAS;AAAA,IAClC,SAAS,GAAG;AACR,cAAQ,MAAM,oBAAoBA,OAAM,IAAI,EAAE;AAC9C,YAAM;AAAA,IACV;AAEA,WAAO;AACP,QAAI,CAACA,OAAM,OAAO;AACd,aAAO;AACP,UAAIA,OAAM,QAAQ;AACd,mBAAW,SAASA,OAAM,QAAQ;AAC9B,cAAI,OAAO,YAAY,MAAM,IAAI,GAAG;AAChC,mBAAO,YAAY,MAAM,IAAI;AAAA,UACjC,OAAO;AACH,mBAAO,YAAY,MAAM,IAAI,IAAI;AAAA,UACrC;AACA,iBAAO,OAAO,KAAK,KAAK;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AAaA,yBAAO,KAAK,MAAM;AACd,MAAAA,OAAM,SAAS,QAAQ,QAAQ;AAAA,IACnC,CAAC;AAAA,EACL;AAEA,SAAO,KAAK,yBAAyB;AACrC,uCAAe,QAAQ,MAAM,SAAS,KAAK,CAAC;AAE5C,SAAO;AACX;AAAA,CAEO,CAAUC,mBAAV;AAAA,EACI,MAAM,OAAO;AAAA,IAUhB,YAAmB,OAAc;AAAd;AAAA,IAAe;AAAA,IATlC,eAAe;AAAA,IACf,sBAAsB;AAAA,IACtB,cAA0C,CAAC;AAAA,IAC3C,SAAS,MAAuB;AAAA,IAEhC,IAAI,wBAAwB;AACxB,cAAS,KAAK,sBAAsB,KAAK,eAAgB,KAAK,YAAY,CAAC;AAAA,IAC/E;AAAA,IAIA,SAAS;AACL,UAAI,KAAK,OAAO,QAAQ;AACpB,eAAO,MAAM,kCAAkC;AAC/C,aAAK,OAAO;AAAA,UAAQ,WAChB,OAAO;AAAA,YACH,MAAM;AAAA,YACN,6BAAW,KAAK,EAAE,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,OAAO,CAAC;AAAA,UAC7E;AAAA,QACJ;AAEA,eAAO,MAAM,uBAAuB;AACpC,6BAAO,KAAK,MAAM;AACd,gBAAM,QAAQ,OAAO,KAAK,KAAK,WAAW,EAAE;AAAA,YAAK,CAAC,GAAG,MACjD,EAAE,cAAc,GAAG,QAAW,EAAE,aAAa,OAAO,CAAC;AAAA,UACzD;AACA,qBAAW,QAAQ,OAAO;AACtB,mBAAO,MAAM,GAAG,IAAI,KAAK,KAAK,YAAY,IAAI,CAAC,EAAE;AAAA,UACrD;AAAA,QACJ,CAAC;AAED,eAAO;AAAA,UACH,aAAa,KAAK,OAAO,MAAM,oBAAoB,KAAK,OAAO,WAAW,IAAI,KAAK,GAAG;AAAA,QAC1F;AACA,eAAO;AAAA,UACH,aAAa,KAAK,mBAAmB,mBACjC,KAAK,wBAAwB,IAAI,KAAK,GAC1C,KAAK,KAAK,qBAAqB;AAAA,QACnC;AAAA,MACJ,OAAO;AACH,eAAO,KAAK,+BAA+B;AAAA,MAC/C;AACA,aAAO,MAAM,aAAa,KAAK,YAAY,WAAW,KAAK,iBAAiB,IAAI,KAAK,GAAG,MAAM;AAAA,IAClG;AAAA,EACJ;AA7CO,EAAAA,eAAM;AAAA,GADA;",
  "names": ["model", "ValidateModel"]
}
