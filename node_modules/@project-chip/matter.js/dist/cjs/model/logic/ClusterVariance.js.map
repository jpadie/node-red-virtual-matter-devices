{
  "version": 3,
  "sources": ["../../../../src/model/logic/ClusterVariance.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ClusterModel } from \"../models/index.js\";\nimport { IllegalFeatureCombinations } from \"./cluster-variance/IllegalFeatureCombinations.js\";\nimport { InferredComponent, InferredComponents } from \"./cluster-variance/InferredComponents.js\";\nimport { NamedComponents } from \"./cluster-variance/NamedComponents.js\";\n\n/**\n * Defines different variants of clusters.\n */\nexport type ClusterVariance = {\n    /**\n     * The cluster.\n     */\n    cluster: ClusterModel;\n\n    /**\n     * The base component.\n     */\n    base: InferredComponent;\n\n    /**\n     * Optional components.\n     */\n    components: NamedComponents;\n\n    /**\n     * Illegal feature combinations as bit flags.\n     */\n    illegal: IllegalFeatureCombinations;\n\n    /**\n     * If this is false, the cluster cannot be used without features.\n     */\n    requiresFeatures: boolean;\n};\n\n/**\n * Analyzes a cluster to determine components, component names and feature flag -> component mapping.\n */\nexport function ClusterVariance(cluster: ClusterModel): ClusterVariance {\n    const inferredComponents = InferredComponents(cluster);\n    const { base, components } = NamedComponents(cluster, inferredComponents);\n    const { illegal, requiresFeatures } = IllegalFeatureCombinations(cluster);\n\n    return {\n        cluster,\n        base,\n        components,\n        illegal,\n        requiresFeatures,\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,wCAA2C;AAC3C,gCAAsD;AACtD,6BAAgC;AAThC;AAAA;AAAA;AAAA;AAAA;AA4CO,SAAS,gBAAgB,SAAwC;AACpE,QAAM,yBAAqB,8CAAmB,OAAO;AACrD,QAAM,EAAE,MAAM,WAAW,QAAI,wCAAgB,SAAS,kBAAkB;AACxE,QAAM,EAAE,SAAS,iBAAiB,QAAI,8DAA2B,OAAO;AAExE,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;",
  "names": []
}
