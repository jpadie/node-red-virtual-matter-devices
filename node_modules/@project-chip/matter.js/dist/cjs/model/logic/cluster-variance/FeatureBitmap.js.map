{
  "version": 3,
  "sources": ["../../../../../src/model/logic/cluster-variance/FeatureBitmap.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { camelize } from \"../../../util/String.js\";\nimport { ClusterModel, FieldModel } from \"../../models/index.js\";\n\nexport type FeatureFlags = string[];\nexport type FeatureBitmap = { [name: string]: boolean };\nexport type FeatureNames = { [key: string]: string };\n\nexport function FeatureBitmap(bitmap: FeatureBitmap | FeatureFlags = {}): FeatureBitmap {\n    if (Array.isArray(bitmap)) {\n        return Object.fromEntries(bitmap.map(name => [name, true]));\n    }\n    return bitmap;\n}\n\n/**\n * Map the names in a feature bitmap to different names.  Used to convert from\n * a feature code bitmap to a feature name bitmap.\n *\n * E.g. { F: true } -> { foo: true }\n *\n * If a name isn't present leaves the feature code intact.\n */\nexport function translateBitmap(bitmap: FeatureBitmap, cluster: ClusterModel) {\n    return Object.fromEntries(\n        Object.entries(bitmap).map(([k, v]) => {\n            const feature = cluster.featureMap.get(FieldModel, k);\n            return [camelize(feature?.description ?? k), v];\n        }),\n    );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,oBAAyB;AACzB,oBAAyC;AAPzC;AAAA;AAAA;AAAA;AAAA;AAaO,SAAS,cAAc,SAAuC,CAAC,GAAkB;AACpF,MAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,WAAO,OAAO,YAAY,OAAO,IAAI,UAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;AAAA,EAC9D;AACA,SAAO;AACX;AAUO,SAAS,gBAAgB,QAAuB,SAAuB;AAC1E,SAAO,OAAO;AAAA,IACV,OAAO,QAAQ,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM;AACnC,YAAM,UAAU,QAAQ,WAAW,IAAI,0BAAY,CAAC;AACpD,aAAO,KAAC,wBAAS,SAAS,eAAe,CAAC,GAAG,CAAC;AAAA,IAClD,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
