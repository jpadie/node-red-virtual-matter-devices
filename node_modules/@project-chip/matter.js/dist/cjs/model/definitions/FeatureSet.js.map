{
  "version": 3,
  "sources": ["../../../../src/model/definitions/FeatureSet.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isDeepEqual } from \"../../util/DeepEqual.js\";\nimport type { ValueModel } from \"../models/index.js\";\n\n/**\n * A \"feature set\" is a set of features for a cluster.  The names of features present appear in this set.\n *\n * TODO - Feature metadata is a bit messy and needs a refactor to consolidate available/supported and names/codes\n */\nexport class FeatureSet extends Set<FeatureSet.Flag> {\n    /**\n     * Create a new feature set from an iterable that returns active names or from an object of the form { [featureName:\n     * string]: true }\n     */\n    constructor(definition?: FeatureSet.Definition) {\n        if (typeof definition === \"string\") {\n            super([definition]);\n            return;\n        }\n\n        if (definition && typeof (definition as any)[Symbol.iterator] !== \"function\") {\n            definition = Object.entries(definition)\n                .filter(([_k, v]) => v)\n                .map(([k]) => k);\n        }\n\n        super(definition as Iterable<any>);\n    }\n\n    /**\n     * Access features as an array of feature names.\n     */\n    get array() {\n        return Array.from(this);\n    }\n\n    /**\n     * Access features as an object mapping feature name -> true.\n     */\n    get record() {\n        return Object.fromEntries(this.map(f => [f, true]));\n    }\n\n    /**\n     * Determine if I am identical to another set.\n     */\n    is(other?: FeatureSet) {\n        return isDeepEqual([...this].sort(), other ? [...other].sort() : []);\n    }\n\n    map<T>(fn: (name: FeatureSet.Flag) => T): T[] {\n        return this.array.map(fn);\n    }\n}\n\nexport namespace FeatureSet {\n    export type Flag = string;\n    export type Flags = Iterable<FeatureSet.Flag>;\n    export type Definition = Flags | { [name: string]: boolean | undefined };\n\n    /**\n     * Normalize the feature map and list of supported feature names into sets of \"all\" and \"supported\" features by\n     * abbreviation.\n     *\n     * The input feature set may reference features by short name (\"LT\") or long name (\"lighting\").  Name match is case\n     * insensitive.\n     */\n    export function normalize(featureMap: ValueModel, supportedFeatures?: FeatureSet) {\n        const featuresAvailable = new FeatureSet();\n        const featuresSupported = new FeatureSet();\n\n        const supported = supportedFeatures ? new Set([...supportedFeatures].map(f => f.toLowerCase())) : undefined;\n\n        for (const feature of featureMap.children) {\n            featuresAvailable.add(feature.name);\n            if (\n                supported?.has(feature.name.toLowerCase()) ||\n                (feature.description && supported?.has(feature.description.toLowerCase()))\n            ) {\n                featuresSupported.add(feature.name);\n            }\n        }\n\n        return {\n            featuresAvailable,\n            featuresSupported,\n        };\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,uBAA4B;AAN5B;AAAA;AAAA;AAAA;AAAA;AAcO,MAAM,mBAAmB,IAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjD,YAAY,YAAoC;AAC5C,QAAI,OAAO,eAAe,UAAU;AAChC,YAAM,CAAC,UAAU,CAAC;AAClB;AAAA,IACJ;AAEA,QAAI,cAAc,OAAQ,WAAmB,OAAO,QAAQ,MAAM,YAAY;AAC1E,mBAAa,OAAO,QAAQ,UAAU,EACjC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EACrB,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;AAAA,IACvB;AAEA,UAAM,UAA2B;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAQ;AACR,WAAO,MAAM,KAAK,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACT,WAAO,OAAO,YAAY,KAAK,IAAI,OAAK,CAAC,GAAG,IAAI,CAAC,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,GAAG,OAAoB;AACnB,eAAO,8BAAY,CAAC,GAAG,IAAI,EAAE,KAAK,GAAG,QAAQ,CAAC,GAAG,KAAK,EAAE,KAAK,IAAI,CAAC,CAAC;AAAA,EACvE;AAAA,EAEA,IAAO,IAAuC;AAC1C,WAAO,KAAK,MAAM,IAAI,EAAE;AAAA,EAC5B;AACJ;AAAA,CAEO,CAAUA,gBAAV;AAYI,WAAS,UAAU,YAAwB,mBAAgC;AAC9E,UAAM,oBAAoB,IAAIA,YAAW;AACzC,UAAM,oBAAoB,IAAIA,YAAW;AAEzC,UAAM,YAAY,oBAAoB,IAAI,IAAI,CAAC,GAAG,iBAAiB,EAAE,IAAI,OAAK,EAAE,YAAY,CAAC,CAAC,IAAI;AAElG,eAAW,WAAW,WAAW,UAAU;AACvC,wBAAkB,IAAI,QAAQ,IAAI;AAClC,UACI,WAAW,IAAI,QAAQ,KAAK,YAAY,CAAC,KACxC,QAAQ,eAAe,WAAW,IAAI,QAAQ,YAAY,YAAY,CAAC,GAC1E;AACE,0BAAkB,IAAI,QAAQ,IAAI;AAAA,MACtC;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AApBO,EAAAA,YAAS;AAAA,GAZH;",
  "names": ["FeatureSet"]
}
