{
  "version": 3,
  "sources": ["../../../../src/model/aspects/Quality.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Aspect } from \"./Aspect.js\";\n\n/**\n * An operational representation of \"other quality\" as defined by the Matter\n * specification.\n *\n * \"Other qualities\" are defined behaviors of data fields and cluster elements\n * that do not involve access or conformance.\n */\nexport class Quality extends Aspect<Quality.Definition> implements Quality.Ast {\n    declare nullable?: boolean;\n    declare nonvolatile?: boolean;\n    declare fixed?: boolean;\n    declare changesOmitted?: boolean;\n    declare scene?: boolean;\n    declare reportable?: boolean;\n    declare singleton?: boolean;\n    declare disallowed?: Quality.AllProperties;\n    declare quieter?: boolean;\n    declare largeMessage?: boolean;\n    declare diagnostics?: boolean;\n\n    /**\n     * Initialize from a Quality.All definition or a string conforming to the\n     * \"other quality\" DSL defined in the Matter specification.\n     */\n    constructor(definition: Quality.Definition) {\n        super(definition);\n\n        if (typeof definition === \"string\") {\n            this.parse(this, definition);\n        } else if (Array.isArray(definition)) {\n            definition.map(f => this.parse(this, f));\n        } else {\n            Object.assign(this, definition);\n        }\n    }\n\n    private parse(quality: Quality, definition: string) {\n        const text = definition.toUpperCase();\n        if (text === \"DERIVED\") {\n            return;\n        }\n\n        let disallow = false;\n        for (const char of text) {\n            if (char === \" \" || char === \"\\t\") {\n                continue;\n            }\n\n            if (char === \"!\") {\n                disallow = true;\n                continue;\n            }\n\n            const field = Quality.Flag[char as Quality.FlagName];\n            if (field) {\n                if (this.disallowed?.[field]) {\n                    continue;\n                }\n                if (disallow) {\n                    delete this[field];\n                    if (!this.disallowed) {\n                        this.disallowed = {};\n                    }\n                    this.disallowed[field] = true;\n                    disallow = false;\n                } else {\n                    this[field] = true;\n                }\n            } else {\n                quality.error(\"UNKNOWN_QUALITY_FLAG\", `Unknown flag \"${char}\"`);\n            }\n        }\n    }\n\n    /**\n     * Display quality using standard Matter syntax.\n     */\n    override toString() {\n        const flags = [] as Quality.FlagName[];\n\n        for (const f of Quality.FlagNames) {\n            const field = Quality.Flag[f];\n            if (this[field] && !this.disallowed?.[field]) {\n                flags.push(f);\n            }\n        }\n\n        return flags.join(\" \");\n    }\n}\n\nexport namespace Quality {\n    /**\n     * Various ways to define quality.\n     */\n    export type Definition = Ast | `${Flag}`[] | string | undefined;\n\n    /**\n     * All qualities designated as \"other qualities\" in the Matter specification.\n     */\n    export enum Field {\n        nullable = \"X\",\n        nonvolatile = \"N\",\n        fixed = \"F\",\n        scene = \"S\",\n        reportable = \"P\",\n        changesOmitted = \"C\",\n        singleton = \"I\",\n        quieter = \"Q\",\n        largeMessage = \"L\",\n        diagnostics = \"K\",\n    }\n\n    /**\n     * Quality flags and the logical field they map to.\n     */\n    export enum Flag {\n        X = \"nullable\",\n        N = \"nonvolatile\",\n        F = \"fixed\",\n        S = \"scene\",\n        P = \"reportable\",\n        C = \"changesOmitted\",\n        I = \"singleton\",\n        Q = \"quieter\",\n        L = \"largeMessage\",\n        K = \"diagnostics\",\n    }\n\n    /**\n     * Valid \"other quality\" flags.\n     */\n    export type FlagName = `${Field}`;\n\n    /**\n     * Runtime version of QualityFlag.\n     */\n    export const FlagNames: FlagName[] = [\"X\", \"N\", \"F\", \"S\", \"P\", \"C\", \"I\", \"Q\", \"L\", \"K\"];\n\n    /**\n     * Quality values that apply to data fields.\n     */\n    export type DataField = {\n        /**\n         * Designates a data field as nullable?\n         *\n         * Scope: data field\n         */\n        nullable?: boolean;\n    };\n\n    /**\n     * Quality values that apply to attribute data.\n     */\n    export type AttributeData = DataField & {\n        /**\n         * Designates attribute value persistant across restarts?\n         */\n        nonvolatile?: boolean;\n\n        /**\n         * Designates a value as unchanging short of software replacement.\n         */\n        fixed?: boolean;\n\n        /**\n         * Designates a fast-changing value for which delta changes are\n         * unavailable.\n         */\n        changesOmitted?: boolean;\n\n        /**\n         * Designates data with fluctuating product rate or where some deltas are meaningless or otherwise undesirable\n         * to report.\n         */\n        quieter?: boolean;\n    };\n\n    /**\n     * Quality values that apply to attributes.\n     */\n    export type Attribute = AttributeData & {\n        /**\n         * Designates an attribute as part of a scene.\n         */\n        scene?: boolean;\n\n        /**\n         * Designates best-effort reporting as available for an attribute.\n         */\n        reportable?: boolean;\n    };\n\n    export type Command = {\n        /**\n         * Designates commands with payloads that potentially exceed a single IPv6 packet (1280 bytes, the minimum IPv6\n         * MTU).\n         */\n        largeMessage?: boolean;\n    };\n\n    export type Cluster = {\n        /**\n         * Designates a cluster as a singleton on the node for the device type.\n         */\n        singleton?: boolean;\n\n        /**\n         * Designates a cluster as a diagnostics cluster.  Diagnostics clusters may be omitted from attribute expansion.\n         */\n        diagnostics?: boolean;\n    };\n\n    /**\n     * Quality properties that apply to device types.\n     */\n    export type AllProperties = Attribute & Command & Cluster;\n\n    /**\n     * Quality values that apply to device types.\n     */\n    export type DeviceType = AllProperties & {\n        /**\n         * Designates qualities that are disallowed for the device type.\n         */\n        disallowed?: AllProperties;\n    };\n\n    /**\n     * Values for all qualities designated as \"other qualities\" in the Matter\n     * specification.\n     */\n    export type Ast = DeviceType;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,oBAAuB;AANvB;AAAA;AAAA;AAAA;AAAA;AAeO,MAAM,gBAAgB,qBAAkD;AAAA;AAAA;AAAA;AAAA;AAAA,EAiB3E,YAAY,YAAgC;AACxC,UAAM,UAAU;AAEhB,QAAI,OAAO,eAAe,UAAU;AAChC,WAAK,MAAM,MAAM,UAAU;AAAA,IAC/B,WAAW,MAAM,QAAQ,UAAU,GAAG;AAClC,iBAAW,IAAI,OAAK,KAAK,MAAM,MAAM,CAAC,CAAC;AAAA,IAC3C,OAAO;AACH,aAAO,OAAO,MAAM,UAAU;AAAA,IAClC;AAAA,EACJ;AAAA,EAEQ,MAAM,SAAkB,YAAoB;AAChD,UAAM,OAAO,WAAW,YAAY;AACpC,QAAI,SAAS,WAAW;AACpB;AAAA,IACJ;AAEA,QAAI,WAAW;AACf,eAAW,QAAQ,MAAM;AACrB,UAAI,SAAS,OAAO,SAAS,KAAM;AAC/B;AAAA,MACJ;AAEA,UAAI,SAAS,KAAK;AACd,mBAAW;AACX;AAAA,MACJ;AAEA,YAAM,QAAQ,QAAQ,KAAK,IAAwB;AACnD,UAAI,OAAO;AACP,YAAI,KAAK,aAAa,KAAK,GAAG;AAC1B;AAAA,QACJ;AACA,YAAI,UAAU;AACV,iBAAO,KAAK,KAAK;AACjB,cAAI,CAAC,KAAK,YAAY;AAClB,iBAAK,aAAa,CAAC;AAAA,UACvB;AACA,eAAK,WAAW,KAAK,IAAI;AACzB,qBAAW;AAAA,QACf,OAAO;AACH,eAAK,KAAK,IAAI;AAAA,QAClB;AAAA,MACJ,OAAO;AACH,gBAAQ,MAAM,wBAAwB,iBAAiB,IAAI,GAAG;AAAA,MAClE;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKS,WAAW;AAChB,UAAM,QAAQ,CAAC;AAEf,eAAW,KAAK,QAAQ,WAAW;AAC/B,YAAM,QAAQ,QAAQ,KAAK,CAAC;AAC5B,UAAI,KAAK,KAAK,KAAK,CAAC,KAAK,aAAa,KAAK,GAAG;AAC1C,cAAM,KAAK,CAAC;AAAA,MAChB;AAAA,IACJ;AAEA,WAAO,MAAM,KAAK,GAAG;AAAA,EACzB;AACJ;AAAA,CAEO,CAAUA,aAAV;AASI,MAAK;AAAL,IAAKC,WAAL;AACH,IAAAA,OAAA,cAAW;AACX,IAAAA,OAAA,iBAAc;AACd,IAAAA,OAAA,WAAQ;AACR,IAAAA,OAAA,WAAQ;AACR,IAAAA,OAAA,gBAAa;AACb,IAAAA,OAAA,oBAAiB;AACjB,IAAAA,OAAA,eAAY;AACZ,IAAAA,OAAA,aAAU;AACV,IAAAA,OAAA,kBAAe;AACf,IAAAA,OAAA,iBAAc;AAAA,KAVN,QAAAD,SAAA,UAAAA,SAAA;AAgBL,MAAK;AAAL,IAAKE,UAAL;AACH,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AACJ,IAAAA,MAAA,OAAI;AAAA,KAVI,OAAAF,SAAA,SAAAA,SAAA;AAqBL,EAAMA,SAAA,YAAwB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAAA,GA9CzE;",
  "names": ["Quality", "Field", "Flag"]
}
