import { ByteArray } from "../util/ByteArray.js";
export declare const OBJECT_ID_KEY = "_objectId";
export declare const TAG_ID_KEY = "_tag";
export declare const BYTES_KEY = "_bytes";
export declare const ELEMENTS_KEY = "_elements";
export declare const BITS_PADDING = "_padding";
export declare const TYPE_OVERRIDE_KEY = "_type";
export declare const RAW_DATA_KEY = "_raw";
export declare enum DerType {
    Boolean = 1,
    Integer = 2,
    BitString = 3,
    OctetString = 4,
    Null = 5,
    ObjectIdentifier = 6,
    UTF8String = 12,
    Sequence = 16,
    Set = 17,
    PrintableString = 19,
    T16String = 20,
    IA5String = 22,
    UtcDate = 23,
    GeneralizedTime = 24
}
export declare const ObjectId: (objectId: string) => {
    _tag: number;
    _bytes: Uint8Array;
};
export declare const DerObject: (objectId: string, content?: any) => any;
export declare const BitByteArray: (data: ByteArray, padding?: number) => {
    _tag: number;
    _bytes: Uint8Array;
    _padding: number;
};
export declare const ContextTagged: (tagId: number, value?: any) => {
    _tag: number;
    _bytes: Uint8Array;
};
export declare const ContextTaggedBytes: (tagId: number, value: ByteArray) => {
    _tag: number;
    _bytes: Uint8Array;
};
export declare const DatatypeOverride: (type: DerType, value: any) => {
    _type: DerType;
    _raw: any;
};
export declare const RawBytes: (bytes: ByteArray) => {
    _bytes: Uint8Array;
};
export type DerNode = {
    [TAG_ID_KEY]: number;
    [BYTES_KEY]: ByteArray;
    [ELEMENTS_KEY]?: DerNode[];
    [BITS_PADDING]?: number;
};
export declare class DerCodec {
    static encode(value: any): ByteArray;
    private static encodeDate;
    private static encodeBoolean;
    private static encodeArray;
    private static encodeOctetString;
    private static encodeObject;
    private static encodeString;
    private static encodePrintableString;
    private static encodeIA5String;
    private static encodeInteger;
    private static encodeBitString;
    private static encodeLengthBytes;
    private static encodeAsn1;
    static decode(data: ByteArray): DerNode;
    private static decodeRec;
    private static decodeAsn1;
}
//# sourceMappingURL=DerCodec.d.ts.map