{
  "version": 3,
  "sources": ["../../../src/codec/Base64Codec.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ByteArray } from \"../util/ByteArray.js\";\n\nfunction cp(text: string) {\n    return text.codePointAt(0) ?? 0;\n}\n\nconst A2B = <number[]>[];\nconst B2A = new ByteArray(64);\nconst B2A_URL = new ByteArray(64);\nconst PAD = cp(\"=\");\n\n{\n    let pos = 0;\n\n    function addRange(start: string, stop: string) {\n        const end = cp(stop) + 1;\n        for (let i = cp(start); i < end; i++) {\n            A2B[i] = pos;\n            B2A[pos++] = i;\n        }\n    }\n    addRange(\"A\", \"Z\");\n    addRange(\"a\", \"z\");\n    addRange(\"0\", \"9\");\n    addRange(\"+\", \"+\");\n    addRange(\"/\", \"/\");\n\n    // base64url\n    const slashValue = A2B[cp(\"/\")];\n    const plusValue = A2B[cp(\"+\")];\n    A2B[cp(\"_\")] = slashValue;\n    A2B[cp(\"-\")] = plusValue;\n    B2A_URL.set(B2A);\n    B2A_URL[slashValue] = cp(\"_\");\n    B2A_URL[plusValue] = cp(\"-\");\n}\n\nexport namespace Base64 {\n    /**\n     * Encodes base64.\n     *\n     * @param input an indexable sequence of bytes\n     * @param url set to true to encode as base46url\n     * @returns an encoded string\n     */\n    export function encode(input: ArrayLike<number>, url = false) {\n        const dict = url ? B2A_URL : B2A;\n        let outLength = Math.trunc(input.length / 3) * 4;\n        if (url) {\n            const partial = input.length % 3;\n            if (partial) outLength += partial + 1;\n        } else {\n            outLength += input.length % 3 ? 4 : 0;\n        }\n        const out = new ByteArray(outLength);\n\n        for (let inPos = 0, outPos = 0; outPos < outLength; ) {\n            const n = (input[inPos++] << 16) + ((input[inPos++] ?? 0) << 8) + (input[inPos++] ?? 0);\n\n            out[outPos++] = dict[n >>> 18];\n            out[outPos++] = dict[(n >>> 12) & 0o77];\n\n            if (inPos - input.length === 2) {\n                if (!url) out[outPos++] = PAD;\n            } else {\n                out[outPos++] = dict[(n >>> 6) & 0o77];\n            }\n\n            if (inPos > input.length) {\n                if (!url) out[outPos++] = PAD;\n            } else {\n                out[outPos++] = dict[n & 0o77];\n            }\n        }\n\n        return new TextDecoder(\"iso-8859-1\").decode(out);\n    }\n\n    /**\n     * Decodes base64.\n     *\n     * @param input binary data encoded as a base64 or base64url string\n     * @returns decoded bytes in a ByteArray\n     */\n    export function decode(input: string) {\n        if (!input.length) {\n            return new ByteArray();\n        }\n\n        let inputLength = input.length;\n        while (input.codePointAt(inputLength - 1) === PAD) inputLength--;\n\n        let outLength = Math.trunc(inputLength / 4) * 3;\n        switch (inputLength % 4) {\n            case 3:\n                outLength += 2;\n                break;\n            case 2:\n                outLength += 1;\n                break;\n            case 1:\n                throw new Error(\"Invalid base-64 encoding\");\n        }\n\n        const out = new ByteArray(outLength);\n\n        for (let inPos = 0, outPos = 0; ; ) {\n            function lookup() {\n                if (inPos >= inputLength) return 0;\n                const v = A2B[input.codePointAt(inPos++) ?? -1];\n                if (v === undefined) {\n                    throw new Error(\"Invalid base-64 encoding\");\n                }\n                return v;\n            }\n\n            const n = (lookup() << 18) + (lookup() << 12) + (lookup() << 6) + lookup();\n            out[outPos++] = n >>> 16;\n            if (outPos < outLength) {\n                out[outPos++] = (n >>> 8) & 0xff;\n            } else {\n                break;\n            }\n            if (outPos < outLength) {\n                out[outPos++] = n & 0xff;\n            } else {\n                break;\n            }\n        }\n\n        return out;\n    }\n}\n"],
  "mappings": "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",
  "names": ["addRange", "Base64", "lookup"]
}
