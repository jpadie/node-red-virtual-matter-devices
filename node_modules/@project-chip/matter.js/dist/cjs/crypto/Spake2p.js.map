{
  "version": 3,
  "sources": ["../../../src/crypto/Spake2p.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InternalError } from \"../common/MatterError.js\";\nimport { ByteArray, Endian } from \"../util/ByteArray.js\";\nimport { DataWriter } from \"../util/DataWriter.js\";\nimport { Crypto, ec } from \"./Crypto.js\";\nimport { CRYPTO_GROUP_SIZE_BYTES } from \"./CryptoConstants.js\";\n\nconst {\n    p256: { ProjectivePoint, CURVE: P256_CURVE },\n    numberToBytesBE,\n    bytesToNumberBE,\n    mod,\n} = ec;\n\n// M and N constants from https://datatracker.ietf.org/doc/html/draft-bar-cfrg-spake2plus-01\nconst M = ProjectivePoint.fromHex(\"02886e2f97ace46e55ba9dd7242579f2993b64e16ef3dcab95afd497333d8fa12f\");\nconst N = ProjectivePoint.fromHex(\"03d8bbd6c639c62937b04d997f38c3770719c629d7014d49a24b4f98baa1292b49\");\n\nconst CRYPTO_W_SIZE_BYTES = CRYPTO_GROUP_SIZE_BYTES + 8;\n\nexport interface PbkdfParameters {\n    iterations: number;\n    salt: ByteArray;\n}\n\nexport class Spake2p {\n    static async computeW0W1({ iterations, salt }: PbkdfParameters, pin: number) {\n        const pinWriter = new DataWriter(Endian.Little);\n        pinWriter.writeUInt32(pin);\n        const ws = await Crypto.pbkdf2(pinWriter.toByteArray(), salt, iterations, CRYPTO_W_SIZE_BYTES * 2);\n        const w0 = mod(bytesToNumberBE(ws.slice(0, 40)), P256_CURVE.n);\n        const w1 = mod(bytesToNumberBE(ws.slice(40, 80)), P256_CURVE.n);\n        return { w0, w1 };\n    }\n\n    static async computeW0L(pbkdfParameters: PbkdfParameters, pin: number) {\n        const { w0, w1 } = await this.computeW0W1(pbkdfParameters, pin);\n        const L = ProjectivePoint.BASE.multiply(w1).toRawBytes(false);\n        return { w0, L };\n    }\n\n    static create(context: ByteArray, w0: bigint) {\n        const random = Crypto.getRandomBigInt(32, P256_CURVE.p);\n        return new Spake2p(context, random, w0);\n    }\n\n    constructor(\n        private readonly context: ByteArray,\n        private readonly random: bigint,\n        private readonly w0: bigint,\n    ) {}\n\n    computeX(): ByteArray {\n        const X = ProjectivePoint.BASE.multiply(this.random).add(M.multiply(this.w0));\n        return X.toRawBytes(false);\n    }\n\n    computeY(): ByteArray {\n        const Y = ProjectivePoint.BASE.multiply(this.random).add(N.multiply(this.w0));\n        return Y.toRawBytes(false);\n    }\n\n    async computeSecretAndVerifiersFromY(w1: bigint, X: ByteArray, Y: ByteArray) {\n        const YPoint = ProjectivePoint.fromHex(Y);\n        try {\n            YPoint.assertValidity();\n        } catch (error) {\n            throw new InternalError(`Y is not on the curve: ${(error as any).message}`);\n        }\n        const yNwo = YPoint.add(N.multiply(this.w0).negate());\n        const Z = yNwo.multiply(this.random);\n        const V = yNwo.multiply(w1);\n        return this.computeSecretAndVerifiers(X, Y, Z.toRawBytes(false), V.toRawBytes(false));\n    }\n\n    async computeSecretAndVerifiersFromX(L: ByteArray, X: ByteArray, Y: ByteArray) {\n        const XPoint = ProjectivePoint.fromHex(X);\n        const LPoint = ProjectivePoint.fromHex(L);\n        try {\n            XPoint.assertValidity();\n        } catch (error) {\n            throw new InternalError(`X is not on the curve: ${(error as any).message}`);\n        }\n        const Z = XPoint.add(M.multiply(this.w0).negate()).multiply(this.random);\n        const V = LPoint.multiply(this.random);\n        return this.computeSecretAndVerifiers(X, Y, Z.toRawBytes(false), V.toRawBytes(false));\n    }\n\n    private async computeSecretAndVerifiers(X: ByteArray, Y: ByteArray, Z: ByteArray, V: ByteArray) {\n        const TT_HASH = this.computeTranscriptHash(X, Y, Z, V);\n        const Ka = TT_HASH.slice(0, 16);\n        const Ke = TT_HASH.slice(16, 32);\n\n        const KcAB = await Crypto.hkdf(Ka, new ByteArray(0), ByteArray.fromString(\"ConfirmationKeys\"), 32);\n        const KcA = KcAB.slice(0, 16);\n        const KcB = KcAB.slice(16, 32);\n\n        const hAY = Crypto.hmac(KcA, Y);\n        const hBX = Crypto.hmac(KcB, X);\n\n        return { Ke, hAY, hBX };\n    }\n\n    private computeTranscriptHash(X: ByteArray, Y: ByteArray, Z: ByteArray, V: ByteArray) {\n        const TTwriter = new DataWriter(Endian.Little);\n        this.addToContext(TTwriter, this.context);\n        this.addToContext(TTwriter, ByteArray.fromString(\"\"));\n        this.addToContext(TTwriter, ByteArray.fromString(\"\"));\n        this.addToContext(TTwriter, M.toRawBytes(false));\n        this.addToContext(TTwriter, N.toRawBytes(false));\n        this.addToContext(TTwriter, X);\n        this.addToContext(TTwriter, Y);\n        this.addToContext(TTwriter, Z);\n        this.addToContext(TTwriter, V);\n        this.addToContext(TTwriter, numberToBytesBE(this.w0, 32));\n        return Crypto.hash(TTwriter.toByteArray());\n    }\n\n    private addToContext(TTwriter: DataWriter<Endian.Little>, data: ByteArray) {\n        TTwriter.writeUInt64(data.length);\n        TTwriter.writeByteArray(data);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
