{
  "version": 3,
  "sources": ["../../../src/node/NodeLifecycle.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ActionContext } from \"../behavior/context/ActionContext.js\";\nimport { Endpoint } from \"../endpoint/Endpoint.js\";\nimport { EndpointLifecycle } from \"../endpoint/properties/EndpointLifecycle.js\";\nimport { AsyncObservable, Observable } from \"../util/Observable.js\";\n\n/**\n * Extended lifecycle information that only applies to root endpoints.\n */\nexport class NodeLifecycle extends EndpointLifecycle {\n    #online = AsyncObservable<[context: ActionContext]>();\n    #offline = Observable<[Context: ActionContext]>();\n    #commissioned = Observable<[context: ActionContext]>();\n    #decommissioned = Observable<[context: ActionContext]>();\n    #initialized = Observable<[isCommissioned: boolean]>();\n    #isOnline = false;\n    #isCommissioned = false;\n\n    constructor(endpoint: Endpoint) {\n        super(endpoint);\n\n        this.#online.on(() => {\n            this.#isOnline = true;\n        });\n        this.#offline.on(() => {\n            this.#isOnline = false;\n        });\n        this.#commissioned.on(() => {\n            this.#isCommissioned = true;\n        });\n        this.#decommissioned.on(() => {\n            this.#isCommissioned = false;\n        });\n        this.#initialized.on(isCommissioned => {\n            this.#isCommissioned = isCommissioned;\n        });\n    }\n\n    /**\n     * True when the node is connected to the network.\n     */\n    get isOnline() {\n        return this.#isOnline;\n    }\n\n    /**\n     * Emits when the node is first online.\n     */\n    get online() {\n        return this.#online;\n    }\n\n    /**\n     * Emits when the node's endpoint tree is ready/initialized and used to initialize the commissioning state\n     */\n    get initialized() {\n        return this.#initialized;\n    }\n\n    /**\n     * Emits when the node goes offline.\n     */\n    get offline() {\n        return this.#offline;\n    }\n\n    /**\n     * True when the node is part of at least one fabric.\n     */\n    get isCommissioned() {\n        return this.#isCommissioned;\n    }\n\n    /**\n     * Emits when node is first commissioned.\n     */\n    get commissioned() {\n        return this.#commissioned;\n    }\n\n    /**\n     * Emits when node is no longer comissioned.\n     */\n    get decommissioned() {\n        return this.#decommissioned;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,yBAAyB;AAClC,SAAS,iBAAiB,kBAAkB;AAKrC,MAAM,sBAAsB,kBAAkB;AAAA,EACjD,UAAU,gBAA0C;AAAA,EACpD,WAAW,WAAqC;AAAA,EAChD,gBAAgB,WAAqC;AAAA,EACrD,kBAAkB,WAAqC;AAAA,EACvD,eAAe,WAAsC;AAAA,EACrD,YAAY;AAAA,EACZ,kBAAkB;AAAA,EAElB,YAAY,UAAoB;AAC5B,UAAM,QAAQ;AAEd,SAAK,QAAQ,GAAG,MAAM;AAClB,WAAK,YAAY;AAAA,IACrB,CAAC;AACD,SAAK,SAAS,GAAG,MAAM;AACnB,WAAK,YAAY;AAAA,IACrB,CAAC;AACD,SAAK,cAAc,GAAG,MAAM;AACxB,WAAK,kBAAkB;AAAA,IAC3B,CAAC;AACD,SAAK,gBAAgB,GAAG,MAAM;AAC1B,WAAK,kBAAkB;AAAA,IAC3B,CAAC;AACD,SAAK,aAAa,GAAG,oBAAkB;AACnC,WAAK,kBAAkB;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AACJ;",
  "names": []
}
