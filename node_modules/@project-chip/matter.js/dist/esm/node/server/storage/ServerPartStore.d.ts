import { Val } from "../../../behavior/state/Val.js";
import { Datasource } from "../../../behavior/state/managed/Datasource.js";
import { Endpoint } from "../../../endpoint/Endpoint.js";
import { PartStore } from "../../../endpoint/storage/PartStore.js";
import { StorageContext } from "../../../storage/StorageContext.js";
import { Construction } from "../../../util/Construction.js";
/**
 * The server implementation of {@link PartStore}.
 *
 * Manages storage for a specific endpoint.
 */
export declare class ServerPartStore implements PartStore {
    #private;
    toString(): string;
    get construction(): Construction<PartStore>;
    get initialValues(): Record<string, Val.Struct>;
    get number(): number | undefined;
    set number(number: number | undefined);
    constructor(storage: StorageContext, load?: boolean);
    storeForBehavior(behaviorId: string): Datasource.Store;
    childStoreFor(endpoint: Endpoint): ServerPartStore;
    saveNumber(): Promise<void>;
    set(values: Record<string, undefined | Val.Struct>): Promise<void>;
    delete(): Promise<void>;
}
//# sourceMappingURL=ServerPartStore.d.ts.map