{
  "version": 3,
  "sources": ["../../../../../src/node/server/storage/ServerPartStore.ts"],
  "sourcesContent": ["import { Val } from \"../../../behavior/state/Val.js\";\nimport { Datasource } from \"../../../behavior/state/managed/Datasource.js\";\nimport { ImplementationError } from \"../../../common/MatterError.js\";\nimport { Endpoint } from \"../../../endpoint/Endpoint.js\";\nimport { DatasourceStore } from \"../../../endpoint/storage/DatasourceStore.js\";\nimport { PartStore } from \"../../../endpoint/storage/PartStore.js\";\nimport { StorageContext } from \"../../../storage/StorageContext.js\";\nimport { SupportedStorageTypes } from \"../../../storage/StringifyTools.js\";\nimport { Construction } from \"../../../util/Construction.js\";\n\nconst NUMBER_KEY = \"__number__\";\n\n/**\n * The server implementation of {@link PartStore}.\n *\n * Manages storage for a specific endpoint.\n */\nexport class ServerPartStore implements PartStore {\n    #storage: StorageContext;\n    #initialValues = {} as Record<string, Val.Struct>;\n    #number: number | undefined;\n    #construction: Construction<PartStore>;\n\n    #childStorage: StorageContext;\n    #childStores = {} as Record<string, ServerPartStore>;\n\n    #knownBehaviors = new Set<string>();\n\n    toString() {\n        return `storage:${this.#storage.thisContexts.join(\".\")}`;\n    }\n\n    get construction() {\n        return this.#construction;\n    }\n\n    get initialValues() {\n        return this.#initialValues;\n    }\n\n    get number() {\n        this.#construction.assert();\n\n        return this.#number;\n    }\n\n    set number(number: number | undefined) {\n        this.#construction.assert();\n\n        if (this.#number !== number) {\n            this.#number = number;\n        }\n    }\n\n    constructor(storage: StorageContext, load = true) {\n        this.#storage = storage;\n        this.#childStorage = storage.createContext(\"parts\");\n\n        this.#construction = Construction(this, () => {\n            // Load is false when the store was not pre-loaded, which means it does not yet exist on disk and we can\n            // avoid async I/O\n            if (!load) {\n                return;\n            }\n\n            return this.#load();\n        });\n    }\n\n    async #load() {\n        this.#knownBehaviors = new Set(await this.#storage.contexts());\n\n        for (const behaviorId of this.#knownBehaviors) {\n            const behaviorValues = (this.#initialValues[behaviorId] = {} as Val.Struct);\n            const behaviorStorage = this.#storage.createContext(behaviorId);\n\n            for (const key of await behaviorStorage.keys()) {\n                behaviorValues[key] = await behaviorStorage.get(key);\n            }\n        }\n\n        const number = await this.#storage.get(NUMBER_KEY, -1);\n        if (number !== -1) {\n            this.#number = number;\n        }\n\n        await this.#loadSubparts();\n    }\n\n    storeForBehavior(behaviorId: string): Datasource.Store {\n        this.#construction.assert();\n\n        return DatasourceStore(this, behaviorId);\n    }\n\n    childStoreFor(endpoint: Endpoint): ServerPartStore {\n        if (!endpoint.lifecycle.hasId) {\n            throw new ImplementationError(\"Cannot access endpoint storage because endpoint has no assigned ID\");\n        }\n        return this.#storeForPartId(endpoint.id);\n    }\n\n    #storeForPartId(partId: string) {\n        this.#construction.assert();\n\n        let store = this.#childStores[partId];\n        if (store === undefined) {\n            store = this.#childStores[partId] = new ServerPartStore(this.#childStorage.createContext(partId), false);\n        }\n\n        return store;\n    }\n\n    async saveNumber() {\n        await this.#construction;\n\n        await this.#storage.set(NUMBER_KEY, this.number);\n    }\n\n    async set(values: Record<string, undefined | Val.Struct>) {\n        await this.#construction;\n\n        for (const behaviorId in values) {\n            const behaviorValues = values[behaviorId];\n            const behaviorStorage = this.#storage.createContext(behaviorId);\n\n            if (behaviorValues === undefined) {\n                if (this.#knownBehaviors.has(behaviorId)) {\n                    await behaviorStorage.clearAll();\n                    this.#knownBehaviors.delete(behaviorId);\n                }\n                continue;\n            }\n\n            if (!this.#knownBehaviors.has(behaviorId)) {\n                this.#knownBehaviors.add(behaviorId);\n            }\n\n            for (const key in behaviorValues) {\n                const value = behaviorValues[key];\n                if (value === undefined) {\n                    await behaviorStorage.delete(key);\n                } else {\n                    await behaviorStorage.set(key, behaviorValues[key] as SupportedStorageTypes);\n                }\n            }\n        }\n    }\n\n    async delete() {\n        await this.#construction;\n\n        await this.#storage.clearAll();\n    }\n\n    async #loadSubparts() {\n        const knownParts = await this.#childStorage.contexts();\n        for (const partId of knownParts) {\n            await this.#loadKnownChildStores(partId);\n        }\n    }\n\n    async #loadKnownChildStores(partId: string) {\n        const partStore = new ServerPartStore(this.#childStorage.createContext(partId));\n        this.#childStores[partId] = partStore;\n        await partStore.construction;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
