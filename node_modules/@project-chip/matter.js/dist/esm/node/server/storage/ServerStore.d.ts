/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Destructable } from "../../../common/Lifecycle.js";
import { Environment } from "../../../environment/Environment.js";
import { EventHandler } from "../../../protocol/interaction/EventHandler.js";
import { StorageContext } from "../../../storage/StorageContext.js";
import { Construction } from "../../../util/Construction.js";
import { PartStoreService } from "./PartStoreService.js";
/**
 * Non-volatile state management for a {@link NodeServer}.
 *
 * The default implementation for matter.js uses synchronous APIs for storage. However, this will change in the future,
 * and other implementations may be backed by asynchronous storage.  So the public API is asynchronous.
 */
export declare class ServerStore implements Destructable {
    #private;
    get construction(): Construction<ServerStore>;
    /**
     * Create a new store.
     *
     * TODO - implement conversion from 0.7 format so people can change API seamlessly
     */
    constructor(environment: Environment, nodeId?: string);
    static create(environment: Environment, nodeId: string): Promise<ServerStore>;
    erase(): Promise<void>;
    close(): Promise<void>;
    get eventStorage(): StorageContext<any>;
    get eventHandler(): EventHandler<any>;
    get sessionStorage(): StorageContext<any>;
    get fabricStorage(): StorageContext<any>;
    get partStores(): PartStoreService;
}
//# sourceMappingURL=ServerStore.d.ts.map