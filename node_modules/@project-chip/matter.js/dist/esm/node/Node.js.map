{
  "version": 3,
  "sources": ["../../../src/node/Node.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NodeActivity } from \"../behavior/context/NodeActivity.js\";\nimport { NetworkRuntime } from \"../behavior/system/network/NetworkRuntime.js\";\nimport { ImplementationError } from \"../common/MatterError.js\";\nimport { Endpoint } from \"../endpoint/Endpoint.js\";\nimport { RootEndpoint } from \"../endpoint/definitions/system/RootEndpoint.js\";\nimport { EndpointType } from \"../endpoint/type/EndpointType.js\";\nimport { Environment } from \"../environment/Environment.js\";\nimport { RuntimeService } from \"../environment/RuntimeService.js\";\nimport { Diagnostic } from \"../log/Diagnostic.js\";\nimport { DiagnosticSource } from \"../log/DiagnosticSource.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { Construction } from \"../util/Construction.js\";\nimport { NodeLifecycle } from \"./NodeLifecycle.js\";\n\nconst logger = Logger.get(\"Node\");\n\n/**\n * A Matter Node.\n *\n * In Matter, a \"node\" is an individually addressable top-level network resource.\n */\nexport abstract class Node<T extends RootEndpoint = RootEndpoint> extends Endpoint<T> {\n    #environment: Environment;\n    #runtime?: NetworkRuntime;\n\n    constructor(config: Node.Configuration<T>) {\n        const parentEnvironment = config.environment ?? Environment.default;\n\n        if (config.id === undefined) {\n            config.id = `node${parentEnvironment.vars.increment(\"node.nextFallbackId\")}`;\n        }\n\n        super(config);\n\n        // We create a local environment so nodes can offer node-specific services via the environment\n        this.#environment = new Environment(config.id, parentEnvironment);\n\n        this.#environment.set(NodeActivity, new NodeActivity());\n\n        if (this.lifecycle.hasNumber) {\n            if (this.number !== 0) {\n                throw new ImplementationError(\"The root endpoint ID must be 0\");\n            }\n        } else {\n            this.number = 0;\n        }\n\n        this.construction.start();\n\n        this.lifecycle.online.on(() => {\n            this.statusUpdate(\"is online\");\n        });\n\n        this.lifecycle.offline.on(() => {\n            this.statusUpdate(\"is offline\");\n        });\n    }\n\n    override get env() {\n        return this.#environment;\n    }\n\n    /**\n     * Lifecycle information.\n     */\n    override createLifecycle(): NodeLifecycle {\n        return new NodeLifecycle(this);\n    }\n\n    /**\n     * Bring the node online.\n     */\n    async start() {\n        this.env.runtime.add(this);\n\n        try {\n            await this.construction.ready;\n\n            if (this.#runtime) {\n                return;\n            }\n\n            this.statusUpdate(\"going online\");\n\n            this.#runtime = this.createRuntime();\n            this.#runtime.construction.start();\n            await this.#runtime.construction.ready;\n        } catch (e) {\n            this.env.runtime.delete(this);\n            throw e;\n        }\n    }\n\n    /**\n     * @deprecated use {@link start}\n     */\n    async bringOnline() {\n        return this.start();\n    }\n\n    /**\n     * Run the node in standalone mode.  Returns when the node is closed.\n     */\n    async run() {\n        await this.start();\n        await this.construction.closed;\n    }\n\n    /**\n     * Take the node offline but leave state and structure intact.  Happens automatically on close.\n     *\n     * Once the node is offline you may use {@link start} to bring the node online again.\n     */\n    async cancel() {\n        if (!this.#runtime) {\n            return;\n        }\n\n        this.statusUpdate(\"going offline\");\n        await this.#runtime?.close();\n        this.#runtime = undefined;\n    }\n\n    override async close() {\n        // The runtime is not designed to operate with a node that is shutting down so destroy it before performing\n        // actual close\n        //\n        // TODO - this should probably block other functions like start()\n        if (this.#runtime) {\n            await this.cancel();\n        }\n\n        await super.close();\n    }\n\n    /**\n     * Create the network runtime.\n     */\n    protected abstract createRuntime(): NetworkRuntime;\n\n    get [RuntimeService.label]() {\n        return [\"Runtime for\", Diagnostic.strong(this.toString())];\n    }\n\n    get [Diagnostic.value](): unknown {\n        const nodeActivity = this.#environment.get(NodeActivity);\n        using _activity = nodeActivity.begin(\"diagnostics\");\n        return Diagnostic.node(\"\uD83E\uDDE9\", this.id, {\n            children: [\n                Diagnostic.strong(\"Structure\"),\n                Diagnostic.list([super[Diagnostic.value]]),\n                Diagnostic.strong(\"Activity\"),\n                nodeActivity[Diagnostic.value],\n            ],\n        });\n    }\n\n    override get lifecycle(): NodeLifecycle {\n        // We only have to override the lifecycle getter so\n        return super.lifecycle as NodeLifecycle;\n    }\n\n    protected statusUpdate(message: string) {\n        logger.notice(Diagnostic.strong(this.toString()), message);\n    }\n\n    override async [Construction.destruct]() {\n        await this.cancel();\n        await super[Construction.destruct]();\n        DiagnosticSource.delete(this);\n    }\n\n    /**\n     * Normal endpoints must have an owner to complete construction but Nodes have no such precondition for\n     * construction.\n     */\n    protected override assertConstructable() {}\n}\n\nexport namespace Node {\n    export interface NodeOptions extends Endpoint.EndpointOptions {\n        environment?: Environment;\n    }\n\n    export type Options<T extends RootEndpoint = RootEndpoint> = Endpoint.Options<T, NodeOptions>;\n\n    export type Configuration<T extends RootEndpoint = RootEndpoint> = Endpoint.Configuration<T, NodeOptions>;\n\n    export function nodeConfigFor<T extends RootEndpoint>(\n        defaultType: T,\n        configuration: undefined | T | Configuration<T>,\n        options?: Options<T>,\n    ): Node.Configuration<T> {\n        if (!options) {\n            options = {};\n        }\n        if (configuration === undefined) {\n            return {\n                type: defaultType,\n                ...options,\n            };\n        }\n        if ((configuration as EndpointType).deviceType !== undefined) {\n            return {\n                type: configuration as T,\n                ...options,\n            };\n        }\n        return {\n            type: defaultType,\n            ...configuration,\n        } as Endpoint.Configuration<T>;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,oBAAoB;AAE7B,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;AAGzB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC,SAAS,cAAc;AACvB,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB;AAE9B,MAAM,SAAS,OAAO,IAAI,MAAM;AAOzB,MAAe,aAAoD,SAAY;AAAA,EAClF;AAAA,EACA;AAAA,EAEA,YAAY,QAA+B;AACvC,UAAM,oBAAoB,OAAO,eAAe,YAAY;AAE5D,QAAI,OAAO,OAAO,QAAW;AACzB,aAAO,KAAK,OAAO,kBAAkB,KAAK,UAAU,qBAAqB,CAAC;AAAA,IAC9E;AAEA,UAAM,MAAM;AAGZ,SAAK,eAAe,IAAI,YAAY,OAAO,IAAI,iBAAiB;AAEhE,SAAK,aAAa,IAAI,cAAc,IAAI,aAAa,CAAC;AAEtD,QAAI,KAAK,UAAU,WAAW;AAC1B,UAAI,KAAK,WAAW,GAAG;AACnB,cAAM,IAAI,oBAAoB,gCAAgC;AAAA,MAClE;AAAA,IACJ,OAAO;AACH,WAAK,SAAS;AAAA,IAClB;AAEA,SAAK,aAAa,MAAM;AAExB,SAAK,UAAU,OAAO,GAAG,MAAM;AAC3B,WAAK,aAAa,WAAW;AAAA,IACjC,CAAC;AAED,SAAK,UAAU,QAAQ,GAAG,MAAM;AAC5B,WAAK,aAAa,YAAY;AAAA,IAClC,CAAC;AAAA,EACL;AAAA,EAEA,IAAa,MAAM;AACf,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKS,kBAAiC;AACtC,WAAO,IAAI,cAAc,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ;AACV,SAAK,IAAI,QAAQ,IAAI,IAAI;AAEzB,QAAI;AACA,YAAM,KAAK,aAAa;AAExB,UAAI,KAAK,UAAU;AACf;AAAA,MACJ;AAEA,WAAK,aAAa,cAAc;AAEhC,WAAK,WAAW,KAAK,cAAc;AACnC,WAAK,SAAS,aAAa,MAAM;AACjC,YAAM,KAAK,SAAS,aAAa;AAAA,IACrC,SAAS,GAAG;AACR,WAAK,IAAI,QAAQ,OAAO,IAAI;AAC5B,YAAM;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc;AAChB,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM;AACR,UAAM,KAAK,MAAM;AACjB,UAAM,KAAK,aAAa;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,SAAS;AACX,QAAI,CAAC,KAAK,UAAU;AAChB;AAAA,IACJ;AAEA,SAAK,aAAa,eAAe;AACjC,UAAM,KAAK,UAAU,MAAM;AAC3B,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,MAAe,QAAQ;AAKnB,QAAI,KAAK,UAAU;AACf,YAAM,KAAK,OAAO;AAAA,IACtB;AAEA,UAAM,MAAM,MAAM;AAAA,EACtB;AAAA,EAOA,KAAK,eAAe,KAAK,IAAI;AACzB,WAAO,CAAC,eAAe,WAAW,OAAO,KAAK,SAAS,CAAC,CAAC;AAAA,EAC7D;AAAA,EAEA,KAAK,WAAW,KAAK,IAAa;AAE9B;AAAA;AADA,YAAM,eAAe,KAAK,aAAa,IAAI,YAAY;AACvD,YAAM,YAAY,6BAAa,MAAM,aAAa;AAClD,aAAO,WAAW,KAAK,aAAM,KAAK,IAAI;AAAA,QAClC,UAAU;AAAA,UACN,WAAW,OAAO,WAAW;AAAA,UAC7B,WAAW,KAAK,CAAC,MAAM,WAAW,KAAK,CAAC,CAAC;AAAA,UACzC,WAAW,OAAO,UAAU;AAAA,UAC5B,aAAa,WAAW,KAAK;AAAA,QACjC;AAAA,MACJ,CAAC;AAAA,aARD;AAAA;AAAA;AAAA;AAAA;AAAA,EASJ;AAAA,EAEA,IAAa,YAA2B;AAEpC,WAAO,MAAM;AAAA,EACjB;AAAA,EAEU,aAAa,SAAiB;AACpC,WAAO,OAAO,WAAW,OAAO,KAAK,SAAS,CAAC,GAAG,OAAO;AAAA,EAC7D;AAAA,EAEA,OAAgB,aAAa,QAAQ,IAAI;AACrC,UAAM,KAAK,OAAO;AAClB,UAAM,MAAM,aAAa,QAAQ,EAAE;AACnC,qBAAiB,OAAO,IAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMmB,sBAAsB;AAAA,EAAC;AAC9C;AAAA,CAEO,CAAUA,UAAV;AASI,WAAS,cACZ,aACA,eACA,SACqB;AACrB,QAAI,CAAC,SAAS;AACV,gBAAU,CAAC;AAAA,IACf;AACA,QAAI,kBAAkB,QAAW;AAC7B,aAAO;AAAA,QACH,MAAM;AAAA,QACN,GAAG;AAAA,MACP;AAAA,IACJ;AACA,QAAK,cAA+B,eAAe,QAAW;AAC1D,aAAO;AAAA,QACH,MAAM;AAAA,QACN,GAAG;AAAA,MACP;AAAA,IACJ;AACA,WAAO;AAAA,MACH,MAAM;AAAA,MACN,GAAG;AAAA,IACP;AAAA,EACJ;AAxBO,EAAAA,MAAS;AAAA,GATH;",
  "names": ["Node"]
}
