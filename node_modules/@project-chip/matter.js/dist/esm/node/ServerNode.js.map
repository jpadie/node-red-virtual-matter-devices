{
  "version": 3,
  "sources": ["../../../src/node/ServerNode.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommissioningBehavior } from \"../behavior/system/commissioning/CommissioningBehavior.js\";\nimport { NetworkServer } from \"../behavior/system/network/NetworkServer.js\";\nimport { ServerNetworkRuntime } from \"../behavior/system/network/ServerNetworkRuntime.js\";\nimport { ProductDescriptionServer } from \"../behavior/system/product-description/ProductDescriptionServer.js\";\nimport { SessionsBehavior } from \"../behavior/system/sessions/SessionsBehavior.js\";\nimport { MatterError } from \"../common/MatterError.js\";\nimport { Endpoint } from \"../endpoint/Endpoint.js\";\nimport { EndpointServer } from \"../endpoint/EndpointServer.js\";\nimport { RootEndpoint as BaseRootEndpoint } from \"../endpoint/definitions/system/RootEndpoint.js\";\nimport { EndpointInitializer } from \"../endpoint/properties/EndpointInitializer.js\";\nimport type { Environment } from \"../environment/Environment.js\";\nimport { DiagnosticSource } from \"../log/DiagnosticSource.js\";\nimport { Construction, asyncNew } from \"../util/Construction.js\";\nimport { errorOf } from \"../util/Error.js\";\nimport { Identity } from \"../util/Type.js\";\nimport { Node } from \"./Node.js\";\nimport { IdentityService } from \"./server/IdentityService.js\";\nimport { ServerEndpointInitializer } from \"./server/ServerEndpointInitializer.js\";\nimport { ServerStore } from \"./server/storage/ServerStore.js\";\n\n/**\n * Thrown when there is an error during factory reset.\n */\nclass FactoryResetError extends MatterError {\n    constructor(message: string, cause: any) {\n        super(message);\n        this.cause = errorOf(cause);\n    }\n}\n\n/**\n * A server-side Matter {@link Node}.\n *\n * The Matter specification often refers to server-side nodes as \"devices\".\n */\nexport class ServerNode<T extends ServerNode.RootEndpoint = ServerNode.RootEndpoint> extends Node<T> {\n    /**\n     * Construct a new ServerNode.\n     *\n     * You can use {@link create} to construct the node and wait for it to initialize fully.\n     *\n     * @param type the variation of {@link RootEndpoint} that defines the root endpoint's behavior\n     * @param options root endpoint options and the node's environment\n     */\n    constructor(type?: T, options?: Node.Options<T>);\n\n    /**\n     * Construct a new ServerNode.\n     *\n     * You can use {@link create} to construct the node and wait for it to initialize fully.\n     *\n     * @param config a {@link Endpoint.Configuration} for the root endpoint\n     */\n    constructor(config: Partial<Node.Configuration<T>>);\n\n    constructor(definition?: T | Node.Configuration<T>, options?: Node.Options<T>) {\n        super(Node.nodeConfigFor(ServerNode.RootEndpoint as T, definition, options));\n\n        DiagnosticSource.add(this);\n    }\n\n    /**\n     * Create a new ServerNode.\n     *\n     * @param type the variation of {@link RootEndpoint} that defines the root endpoint's behavior\n     * @param options root endpoint configuration and, optionally, the node's environment\n     */\n    static async create<\n        This extends typeof ServerNode<any>,\n        T extends ServerNode.RootEndpoint = ServerNode.RootEndpoint,\n    >(this: This, type?: T, options?: Node.Options<T>): Promise<ServerNode<T>>;\n\n    /**\n     * Create a new ServerNode.\n     *\n     * @param config root endpoint configuration and, optionally, the node's {@link Environment}\n     */\n    static async create<\n        This extends typeof ServerNode<any>,\n        T extends ServerNode.RootEndpoint = ServerNode.RootEndpoint,\n    >(this: This, config: Partial<Node.Configuration<T>>): Promise<ServerNode<T>>;\n\n    static async create<\n        This extends typeof ServerNode<any>,\n        T extends ServerNode.RootEndpoint = ServerNode.RootEndpoint,\n    >(this: This, definition?: T | Node.Configuration<T>, options?: Node.Options<T>) {\n        return await asyncNew(this, definition, options);\n    }\n\n    protected createRuntime(): ServerNetworkRuntime {\n        return new ServerNetworkRuntime(this);\n    }\n\n    override async [Construction.destruct]() {\n        await super[Construction.destruct]();\n\n        if (this.env.has(ServerStore)) {\n            const store = this.env.get(ServerStore);\n            await store.close();\n            this.env.delete(ServerStore, store);\n        }\n    }\n\n    override async reset() {\n        await super.reset();\n\n        // Destroy the EndpointServer hierarchy\n        await EndpointServer.forEndpoint(this)[Symbol.asyncDispose]();\n    }\n\n    /**\n     * Perform a factory reset of the node.\n     */\n    async factoryReset() {\n        try {\n            await this.construction;\n\n            // Go offline before performing reset\n            const isOnline = this.lifecycle.isOnline;\n            if (isOnline) {\n                await this.cancel();\n            }\n\n            // Inform user\n            this.statusUpdate(\"resetting to factory defaults\");\n\n            // Reset in-memory state\n            await this.reset();\n\n            // Reset persistent state\n            await this.resetStorage();\n\n            // Reset reverts node to inactive state; now reinitialize\n            this.construction.start();\n\n            // Go back online if we were online at time of reset, otherwise just await reinitialization\n            if (isOnline) {\n                await this.start();\n            } else {\n                await this.construction.ready;\n            }\n        } catch (e) {\n            this.construction.crash();\n            throw new FactoryResetError(`Error during factory reset of ${this}`, e);\n        }\n    }\n\n    async advertiseNow() {\n        await this.act(`advertiseNow<${this}>`, agent => agent.get(NetworkServer).advertiseNow());\n    }\n\n    protected override async initialize() {\n        // Load the environment with node-specific services\n        const serverStore = await ServerStore.create(this.env, this.id);\n\n        this.env.set(ServerStore, serverStore);\n\n        this.env.set(EndpointInitializer, new ServerEndpointInitializer(this.env));\n\n        this.env.set(IdentityService, new IdentityService(this));\n\n        return super.initialize();\n    }\n\n    /**\n     * By default on factory reset we erase all stored data.\n     *\n     * If this is inappropriate for your application you may override to alter the behavior.   Matter requires that all\n     * \"security- and privacy-related data and key material\" is removed on factory reset.\n     *\n     * @see {@link MatterSpecification.v12.Core} \u00A7 13.4\n     */\n    protected async resetStorage() {\n        await this.env.get(ServerStore).erase();\n    }\n}\n\nexport namespace ServerNode {\n    export const RootEndpoint = BaseRootEndpoint.with(\n        CommissioningBehavior,\n        NetworkServer,\n        ProductDescriptionServer,\n        SessionsBehavior,\n    );\n\n    export interface RootEndpoint extends Identity<typeof RootEndpoint> {}\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,4BAA4B;AACrC,SAAS,gCAAgC;AACzC,SAAS,wBAAwB;AACjC,SAAS,mBAAmB;AAE5B,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB,wBAAwB;AACjD,SAAS,2BAA2B;AAEpC,SAAS,wBAAwB;AACjC,SAAS,cAAc,gBAAgB;AACvC,SAAS,eAAe;AAExB,SAAS,YAAY;AACrB,SAAS,uBAAuB;AAChC,SAAS,iCAAiC;AAC1C,SAAS,mBAAmB;AAK5B,MAAM,0BAA0B,YAAY;AAAA,EACxC,YAAY,SAAiB,OAAY;AACrC,UAAM,OAAO;AACb,SAAK,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AACJ;AAOO,MAAM,mBAAgF,KAAQ;AAAA,EAoBjG,YAAY,YAAwC,SAA2B;AAC3E,UAAM,KAAK,cAAc,WAAW,cAAmB,YAAY,OAAO,CAAC;AAE3E,qBAAiB,IAAI,IAAI;AAAA,EAC7B;AAAA,EAuBA,aAAa,OAGC,YAAwC,SAA2B;AAC7E,WAAO,MAAM,SAAS,MAAM,YAAY,OAAO;AAAA,EACnD;AAAA,EAEU,gBAAsC;AAC5C,WAAO,IAAI,qBAAqB,IAAI;AAAA,EACxC;AAAA,EAEA,OAAgB,aAAa,QAAQ,IAAI;AACrC,UAAM,MAAM,aAAa,QAAQ,EAAE;AAEnC,QAAI,KAAK,IAAI,IAAI,WAAW,GAAG;AAC3B,YAAM,QAAQ,KAAK,IAAI,IAAI,WAAW;AACtC,YAAM,MAAM,MAAM;AAClB,WAAK,IAAI,OAAO,aAAa,KAAK;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,MAAe,QAAQ;AACnB,UAAM,MAAM,MAAM;AAGlB,UAAM,eAAe,YAAY,IAAI,EAAE,OAAO,YAAY,EAAE;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe;AACjB,QAAI;AACA,YAAM,KAAK;AAGX,YAAM,WAAW,KAAK,UAAU;AAChC,UAAI,UAAU;AACV,cAAM,KAAK,OAAO;AAAA,MACtB;AAGA,WAAK,aAAa,+BAA+B;AAGjD,YAAM,KAAK,MAAM;AAGjB,YAAM,KAAK,aAAa;AAGxB,WAAK,aAAa,MAAM;AAGxB,UAAI,UAAU;AACV,cAAM,KAAK,MAAM;AAAA,MACrB,OAAO;AACH,cAAM,KAAK,aAAa;AAAA,MAC5B;AAAA,IACJ,SAAS,GAAG;AACR,WAAK,aAAa,MAAM;AACxB,YAAM,IAAI,kBAAkB,iCAAiC,IAAI,IAAI,CAAC;AAAA,IAC1E;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe;AACjB,UAAM,KAAK,IAAI,gBAAgB,IAAI,KAAK,WAAS,MAAM,IAAI,aAAa,EAAE,aAAa,CAAC;AAAA,EAC5F;AAAA,EAEA,MAAyB,aAAa;AAElC,UAAM,cAAc,MAAM,YAAY,OAAO,KAAK,KAAK,KAAK,EAAE;AAE9D,SAAK,IAAI,IAAI,aAAa,WAAW;AAErC,SAAK,IAAI,IAAI,qBAAqB,IAAI,0BAA0B,KAAK,GAAG,CAAC;AAEzE,SAAK,IAAI,IAAI,iBAAiB,IAAI,gBAAgB,IAAI,CAAC;AAEvD,WAAO,MAAM,WAAW;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAgB,eAAe;AAC3B,UAAM,KAAK,IAAI,IAAI,WAAW,EAAE,MAAM;AAAA,EAC1C;AACJ;AAAA,CAEO,CAAUA,gBAAV;AACI,EAAMA,YAAA,eAAe,iBAAiB;AAAA,IACzC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,GANa;",
  "names": ["ServerNode"]
}
