/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { NetworkRuntime } from "../behavior/system/network/NetworkRuntime.js";
import { Identity } from "../util/Type.js";
import { Node } from "./Node.js";
/**
 * A client-side Matter {@link Node}.
 */
export declare class ClientNode<T extends ClientNode.RootEndpoint> extends Node<T> {
    constructor(type?: T, options?: Node.Options<T>);
    constructor(config: Node.Options<T>);
    createRuntime(): NetworkRuntime;
}
export declare namespace ClientNode {
    const RootEndpoint: import("../endpoint/type/MutableEndpoint.js").MutableEndpoint.With<import("../endpoint/type/EndpointType.js").EndpointType.For<{
        readonly name: "RootNode";
        readonly deviceType: 22;
        readonly deviceRevision: 2;
        readonly deviceClass: import("../device/DeviceTypes.js").DeviceClasses.Node;
        readonly requirements: typeof import("../endpoint/definitions/system/RootEndpoint.js").RootRequirements;
        readonly behaviors: {
            readonly parts: typeof import("../behavior/system/parts/PartsBehavior.js").PartsBehavior;
        } & {
            readonly index: typeof import("../behavior/system/index/IndexBehavior.js").IndexBehavior;
        } & {
            readonly basicInformation: typeof import("../behavior/definitions/basic-information/BasicInformationServer.js").BasicInformationServer;
        } & {
            readonly accessControl: typeof import("../behavior/definitions/access-control/AccessControlServer.js").AccessControlServer;
        } & {
            readonly groupKeyManagement: typeof import("../behavior/definitions/group-key-management/GroupKeyManagementServer.js").GroupKeyManagementServer;
        } & {
            readonly generalCommissioning: typeof import("../behavior/definitions/general-commissioning/GeneralCommissioningServer.js").GeneralCommissioningServer;
        } & {
            readonly administratorCommissioning: typeof import("../behavior/definitions/administrator-commissioning/AdministratorCommissioningServer.js").AdministratorCommissioningServer;
        } & {
            readonly operationalCredentials: typeof import("../behavior/definitions/operational-credentials/OperationalCredentialsServer.js").OperationalCredentialsServer;
        } & {
            readonly generalDiagnostics: typeof import("../behavior/definitions/general-diagnostics/GeneralDiagnosticsServer.js").GeneralDiagnosticsServer;
        };
    }>, Omit<{
        readonly parts: typeof import("../behavior/system/parts/PartsBehavior.js").PartsBehavior;
    } & {
        readonly index: typeof import("../behavior/system/index/IndexBehavior.js").IndexBehavior;
    } & {
        readonly basicInformation: typeof import("../behavior/definitions/basic-information/BasicInformationServer.js").BasicInformationServer;
    } & {
        readonly accessControl: typeof import("../behavior/definitions/access-control/AccessControlServer.js").AccessControlServer;
    } & {
        readonly groupKeyManagement: typeof import("../behavior/definitions/group-key-management/GroupKeyManagementServer.js").GroupKeyManagementServer;
    } & {
        readonly generalCommissioning: typeof import("../behavior/definitions/general-commissioning/GeneralCommissioningServer.js").GeneralCommissioningServer;
    } & {
        readonly administratorCommissioning: typeof import("../behavior/definitions/administrator-commissioning/AdministratorCommissioningServer.js").AdministratorCommissioningServer;
    } & {
        readonly operationalCredentials: typeof import("../behavior/definitions/operational-credentials/OperationalCredentialsServer.js").OperationalCredentialsServer;
    } & {
        readonly generalDiagnostics: typeof import("../behavior/definitions/general-diagnostics/GeneralDiagnosticsServer.js").GeneralDiagnosticsServer;
    }, never>>;
    interface RootEndpoint extends Identity<typeof RootEndpoint> {
    }
}
//# sourceMappingURL=ClientNode.d.ts.map