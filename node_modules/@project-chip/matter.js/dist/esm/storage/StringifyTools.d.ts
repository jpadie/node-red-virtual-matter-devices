/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AttributeId } from "../datatype/AttributeId.js";
import { CaseAuthenticatedTag } from "../datatype/CaseAuthenticatedTag.js";
import { ClusterId } from "../datatype/ClusterId.js";
import { CommandId } from "../datatype/CommandId.js";
import { DataVersion } from "../datatype/DataVersion.js";
import { DeviceTypeId } from "../datatype/DeviceTypeId.js";
import { EndpointNumber } from "../datatype/EndpointNumber.js";
import { EntryIndex } from "../datatype/EntryIndex.js";
import { EventId } from "../datatype/EventId.js";
import { EventNumber } from "../datatype/EventNumber.js";
import { FabricId } from "../datatype/FabricId.js";
import { FabricIndex } from "../datatype/FabricIndex.js";
import { FieldId } from "../datatype/FieldId.js";
import { GroupId } from "../datatype/GroupId.js";
import { NodeId } from "../datatype/NodeId.js";
import { VendorId } from "../datatype/VendorId.js";
import { ByteArray } from "../util/ByteArray.js";
/** Supported base types to stringify the data for the storage that can be used as keys and also values. */
type SupportedStorageBaseTypes = string | number | boolean | bigint | ByteArray | AttributeId | CaseAuthenticatedTag | ClusterId | CommandId | DataVersion | DeviceTypeId | EndpointNumber | EntryIndex | EventId | EventNumber | FabricId | FabricIndex | FieldId | GroupId | NodeId | VendorId;
/** Supported combined types to stringify the data for the storage that can be used as values. */
type SupportedComplexStorageTypes = Array<SupportedStorageBaseTypes | SupportedComplexStorageTypes> | {
    [key: string]: SupportedStorageBaseTypes | SupportedComplexStorageTypes | null | undefined;
} | Array<[SupportedStorageBaseTypes, SupportedStorageBaseTypes | SupportedComplexStorageTypes | null | undefined]> | Map<SupportedStorageBaseTypes, SupportedStorageBaseTypes | SupportedComplexStorageTypes> | null | undefined;
export type SupportedStorageTypes = SupportedStorageBaseTypes | SupportedComplexStorageTypes;
export declare function toJson(object: SupportedStorageTypes, spaces?: number): string;
export declare function fromJson(json: string): SupportedStorageTypes;
export {};
//# sourceMappingURL=StringifyTools.d.ts.map