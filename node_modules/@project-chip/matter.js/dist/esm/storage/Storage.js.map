{
  "version": 3,
  "sources": ["../../../src/storage/Storage.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { MatterError } from \"../common/MatterError.js\";\nimport { MaybePromise } from \"../util/Promises.js\";\nimport { SupportedStorageTypes } from \"./StringifyTools.js\";\n\nexport class StorageError extends MatterError {}\n\n/**\n * Matter.js uses this key/value API to manage persistent state.\n */\nexport interface Storage {\n    readonly initialized: boolean;\n    initialize(): MaybePromise<void>;\n    close(): MaybePromise<void>;\n    get(contexts: string[], key: string): MaybePromise<SupportedStorageTypes | undefined>;\n    set(contexts: string[], values: Record<string, SupportedStorageTypes>): MaybePromise<void>;\n    set(contexts: string[], key: string, value: SupportedStorageTypes): MaybePromise<void>;\n    delete(contexts: string[], key: string): MaybePromise<void>;\n    keys(contexts: string[]): MaybePromise<string[]>;\n    values(contexts: string[]): MaybePromise<Record<string, SupportedStorageTypes>>;\n    contexts(contexts: string[]): MaybePromise<string[]>;\n    clearAll(contexts: string[]): MaybePromise<void>;\n}\n\n// This extra class is needed because of https://github.com/microsoft/TypeScript/issues/57905 in order\n// to have the generics typing support on the \"get\" method and can be removed when the TS issue is fixed\n// or we remove the legacy API.\nexport abstract class MaybeAsyncStorage implements Storage {\n    abstract initialized: boolean;\n    abstract initialize(): MaybePromise<void>;\n    abstract close(): MaybePromise<void>;\n    abstract get<T extends SupportedStorageTypes>(contexts: string[], key: string): MaybePromise<T | undefined>;\n    abstract set(contexts: string[], values: Record<string, SupportedStorageTypes>): MaybePromise<void>;\n    abstract set(contexts: string[], key: string, value: SupportedStorageTypes): MaybePromise<void>;\n    abstract delete(contexts: string[], key: string): MaybePromise<void>;\n    abstract keys(contexts: string[]): MaybePromise<string[]>;\n    abstract values(contexts: string[]): MaybePromise<Record<string, SupportedStorageTypes>>;\n    abstract contexts(contexts: string[]): MaybePromise<string[]>;\n    abstract clearAll(contexts: string[]): MaybePromise<void>;\n}\n\n// This can be removed once we remove the legacy API\nexport abstract class SyncStorage implements Storage {\n    abstract initialized: boolean;\n    abstract initialize(): MaybePromise<void>;\n    abstract close(): MaybePromise<void>;\n    abstract get<T extends SupportedStorageTypes>(contexts: string[], key: string): T | undefined;\n    abstract set(contexts: string[], values: Record<string, SupportedStorageTypes>): void;\n    abstract set(contexts: string[], key: string, value: SupportedStorageTypes): void;\n    abstract delete(contexts: string[], key: string): void;\n    abstract keys(contexts: string[]): string[];\n    abstract values(contexts: string[]): Record<string, SupportedStorageTypes>;\n    abstract contexts(contexts: string[]): string[];\n    abstract clearAll(contexts: string[]): void;\n}\n\nexport type StorageOperationResult<S extends Storage, T = void> = S extends SyncStorage ? T : Promise<T>;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,SAAS,mBAAmB;AAIrB,MAAM,qBAAqB,YAAY;AAAC;AAsBxC,MAAe,kBAAqC;AAY3D;AAGO,MAAe,YAA+B;AAYrD;",
  "names": []
}
