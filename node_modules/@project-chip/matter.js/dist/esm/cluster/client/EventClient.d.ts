/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterId } from "../../datatype/ClusterId.js";
import { EndpointNumber } from "../../datatype/EndpointNumber.js";
import { EventId } from "../../datatype/EventId.js";
import { EventNumber } from "../../datatype/EventNumber.js";
import { DecodedEventData } from "../../protocol/interaction/EventDataDecoder.js";
import { InteractionClient } from "../../protocol/interaction/InteractionClient.js";
import { Event } from "../Cluster.js";
/**
 * Factory function to create an EVentClient for a given event.
 */
export declare function createEventClient<T>(event: Event<T, any>, name: string, endpointId: EndpointNumber, clusterId: ClusterId, interactionClient: InteractionClient, present?: boolean): EventClient<T>;
/**
 * General class for EventClients
 */
export declare class EventClient<T> {
    #private;
    readonly event: Event<T, any>;
    readonly name: string;
    readonly endpointId: EndpointNumber;
    readonly clusterId: ClusterId;
    readonly id: EventId;
    constructor(event: Event<T, any>, name: string, endpointId: EndpointNumber, clusterId: ClusterId, interactionClient: InteractionClient);
    get(minimumEventNumber?: EventNumber, isFabricFiltered?: boolean): Promise<DecodedEventData<T>[] | undefined>;
    subscribe(minIntervalFloorSeconds: number, maxIntervalCeilingSeconds: number, isUrgent?: boolean, minimumEventNumber?: EventNumber, isFabricFiltered?: boolean): Promise<void>;
    update(newEvent: DecodedEventData<T>): void;
    addListener(listener: (newValue: DecodedEventData<T>) => void): void;
    removeListener(listener: (newValue: DecodedEventData<T>) => void): void;
}
/**
 * Special EventClient class to allow identifying events that are supported because reported by the Devices.
 */
export declare class SupportedEventClient<T> extends EventClient<T> {
}
/**
 * Special EventClient class to allow identifying events that are supported because reported by the Devices,
 * but the contained event is unknown.
 */
export declare class UnknownSupportedEventClient extends EventClient<any> {
}
//# sourceMappingURL=EventClient.d.ts.map