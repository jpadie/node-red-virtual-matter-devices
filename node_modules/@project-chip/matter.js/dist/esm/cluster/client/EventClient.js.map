{
  "version": 3,
  "sources": ["../../../../src/cluster/client/EventClient.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ClusterId } from \"../../datatype/ClusterId.js\";\nimport { EndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { EventId } from \"../../datatype/EventId.js\";\nimport { EventNumber } from \"../../datatype/EventNumber.js\";\nimport { DecodedEventData } from \"../../protocol/interaction/EventDataDecoder.js\";\nimport { InteractionClient } from \"../../protocol/interaction/InteractionClient.js\";\nimport { Event } from \"../Cluster.js\";\n\n/**\n * Factory function to create an EVentClient for a given event.\n */\nexport function createEventClient<T>(\n    event: Event<T, any>,\n    name: string,\n    endpointId: EndpointNumber,\n    clusterId: ClusterId,\n    interactionClient: InteractionClient,\n    present = false,\n): EventClient<T> {\n    if (event.unknown) {\n        return new UnknownSupportedEventClient(event, name, endpointId, clusterId, interactionClient);\n    }\n    if (present) {\n        return new SupportedEventClient(event, name, endpointId, clusterId, interactionClient);\n    }\n    return new EventClient(event, name, endpointId, clusterId, interactionClient);\n}\n\n/**\n * General class for EventClients\n */\nexport class EventClient<T> {\n    readonly #listeners = new Array<(event: DecodedEventData<T>) => void>();\n    readonly id: EventId;\n    readonly #interactionClient: InteractionClient;\n\n    constructor(\n        readonly event: Event<T, any>,\n        readonly name: string,\n        readonly endpointId: EndpointNumber,\n        readonly clusterId: ClusterId,\n        interactionClient: InteractionClient,\n    ) {\n        this.id = event.id;\n        this.#interactionClient = interactionClient;\n    }\n\n    async get(\n        minimumEventNumber?: EventNumber,\n        isFabricFiltered?: boolean,\n    ): Promise<DecodedEventData<T>[] | undefined> {\n        return await this.#interactionClient.getEvent({\n            endpointId: this.endpointId,\n            clusterId: this.clusterId,\n            event: this.event,\n            minimumEventNumber,\n            isFabricFiltered,\n        });\n    }\n\n    async subscribe(\n        minIntervalFloorSeconds: number,\n        maxIntervalCeilingSeconds: number,\n        isUrgent = true,\n        minimumEventNumber?: EventNumber,\n        isFabricFiltered?: boolean,\n    ) {\n        return await this.#interactionClient.subscribeEvent({\n            endpointId: this.endpointId,\n            clusterId: this.clusterId,\n            event: this.event,\n            minIntervalFloorSeconds,\n            maxIntervalCeilingSeconds,\n            isUrgent,\n            minimumEventNumber,\n            isFabricFiltered,\n            listener: this.update.bind(this),\n        });\n    }\n\n    update(newEvent: DecodedEventData<T>) {\n        for (const listener of this.#listeners) {\n            listener(newEvent);\n        }\n    }\n\n    addListener(listener: (newValue: DecodedEventData<T>) => void) {\n        this.#listeners.push(listener);\n    }\n\n    removeListener(listener: (newValue: DecodedEventData<T>) => void) {\n        const entryIndex = this.#listeners.indexOf(listener);\n        if (entryIndex !== -1) {\n            this.#listeners.splice(entryIndex, 1);\n        }\n    }\n}\n\n/**\n * Special EventClient class to allow identifying events that are supported because reported by the Devices.\n */\nexport class SupportedEventClient<T> extends EventClient<T> {}\n\n/**\n * Special EventClient class to allow identifying events that are supported because reported by the Devices,\n * but the contained event is unknown.\n */\nexport class UnknownSupportedEventClient extends EventClient<any> {}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAiBO,SAAS,kBACZ,OACA,MACA,YACA,WACA,mBACA,UAAU,OACI;AACd,MAAI,MAAM,SAAS;AACf,WAAO,IAAI,4BAA4B,OAAO,MAAM,YAAY,WAAW,iBAAiB;AAAA,EAChG;AACA,MAAI,SAAS;AACT,WAAO,IAAI,qBAAqB,OAAO,MAAM,YAAY,WAAW,iBAAiB;AAAA,EACzF;AACA,SAAO,IAAI,YAAY,OAAO,MAAM,YAAY,WAAW,iBAAiB;AAChF;AAKO,MAAM,YAAe;AAAA,EAKxB,YACa,OACA,MACA,YACA,WACT,mBACF;AALW;AACA;AACA;AACA;AAGT,SAAK,KAAK,MAAM;AAChB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EAbS,aAAa,IAAI,MAA4C;AAAA,EAC7D;AAAA,EACA;AAAA,EAaT,MAAM,IACF,oBACA,kBAC0C;AAC1C,WAAO,MAAM,KAAK,mBAAmB,SAAS;AAAA,MAC1C,YAAY,KAAK;AAAA,MACjB,WAAW,KAAK;AAAA,MAChB,OAAO,KAAK;AAAA,MACZ;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,UACF,yBACA,2BACA,WAAW,MACX,oBACA,kBACF;AACE,WAAO,MAAM,KAAK,mBAAmB,eAAe;AAAA,MAChD,YAAY,KAAK;AAAA,MACjB,WAAW,KAAK;AAAA,MAChB,OAAO,KAAK;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU,KAAK,OAAO,KAAK,IAAI;AAAA,IACnC,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,UAA+B;AAClC,eAAW,YAAY,KAAK,YAAY;AACpC,eAAS,QAAQ;AAAA,IACrB;AAAA,EACJ;AAAA,EAEA,YAAY,UAAmD;AAC3D,SAAK,WAAW,KAAK,QAAQ;AAAA,EACjC;AAAA,EAEA,eAAe,UAAmD;AAC9D,UAAM,aAAa,KAAK,WAAW,QAAQ,QAAQ;AACnD,QAAI,eAAe,IAAI;AACnB,WAAK,WAAW,OAAO,YAAY,CAAC;AAAA,IACxC;AAAA,EACJ;AACJ;AAKO,MAAM,6BAAgC,YAAe;AAAC;AAMtD,MAAM,oCAAoC,YAAiB;AAAC;",
  "names": []
}
