{
  "version": 3,
  "sources": ["../../../../src/cluster/client/AttributeClient.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImplementationError } from \"../../common/MatterError.js\";\nimport { AttributeId } from \"../../datatype/AttributeId.js\";\nimport { ClusterId } from \"../../datatype/ClusterId.js\";\nimport { EndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { FabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { FabricIndex as FabricIndexElement } from \"../../model/standard/elements/FabricIndex.js\";\nimport { InteractionClient } from \"../../protocol/interaction/InteractionClient.js\";\nimport { NoAssociatedFabricError } from \"../../session/SecureSession.js\";\nimport { TlvSchema } from \"../../tlv/TlvSchema.js\";\nimport { Attribute, AttributeError } from \"../Cluster.js\";\n\n/**\n * Factory function to create an AttributeClient for a given attribute.\n */\nexport function createAttributeClient<T>(\n    attribute: Attribute<T, any>,\n    name: string,\n    endpointId: EndpointNumber,\n    clusterId: ClusterId,\n    interactionClient: InteractionClient,\n    present = false,\n): AttributeClient<T> {\n    if (attribute.unknown) {\n        return new UnknownSupportedAttributeClient(attribute, name, endpointId, clusterId, interactionClient);\n    }\n    if (present) {\n        return new SupportedAttributeClient(attribute, name, endpointId, clusterId, interactionClient);\n    }\n    return new AttributeClient(attribute, name, endpointId, clusterId, interactionClient);\n}\n\n/**\n * General class for AttributeClients\n */\nexport class AttributeClient<T> {\n    readonly #isWritable: boolean;\n    readonly #isFabricScoped: boolean;\n    readonly #updatedBySubscriptions: boolean;\n    protected readonly schema: TlvSchema<any>;\n    readonly #listeners = new Array<(newValue: T) => void>();\n    readonly id: AttributeId;\n    readonly #interactionClient: InteractionClient;\n\n    constructor(\n        readonly attribute: Attribute<T, any>,\n        readonly name: string,\n        readonly endpointId: EndpointNumber,\n        readonly clusterId: ClusterId,\n        interactionClient: InteractionClient,\n    ) {\n        const { schema, writable, fabricScoped, id, omitChanges } = attribute;\n        this.schema = schema;\n        this.#isWritable = writable;\n        this.#isFabricScoped = fabricScoped;\n        this.#updatedBySubscriptions = !omitChanges;\n        this.id = id;\n        this.#interactionClient = interactionClient;\n    }\n\n    /**\n     * Set the value of the attribute. When dataVersion parameter is provided the value is only set when the\n     * cluster dataVersion of the server matches. If it does not match it is rejected with an Error.\n     */\n    async set(value: T, dataVersion?: number) {\n        if (!this.#isWritable) throw new AttributeError(`Attribute ${this.name} is not writable`);\n\n        value = this.schema.injectField(\n            value,\n            <number>FabricIndexElement.id,\n            FabricIndex.OMIT_FABRIC,\n            existingFieldIndex => existingFieldIndex === undefined,\n        );\n\n        this.schema.validate(value);\n\n        if (this.#isFabricScoped) {\n            // Remove fabric index from structures if the OMIT_FABRIC instance was used (Should be used for all outgoing writes)\n            value = this.schema.removeField(\n                value,\n                <number>FabricIndexElement.id,\n                existingFieldIndex => existingFieldIndex === FabricIndex.OMIT_FABRIC,\n            );\n\n            try {\n                const sessionFabric = this.#interactionClient.session.associatedFabric;\n                // also remove fabric index if it is the same as the session fabric\n                value = this.schema.removeField(\n                    value,\n                    <number>FabricIndexElement.id,\n                    existingFieldIndex => existingFieldIndex.index === sessionFabric.fabricIndex,\n                );\n            } catch (e) {\n                NoAssociatedFabricError.accept(e);\n            }\n        }\n\n        return await this.#interactionClient.setAttribute<T>({\n            attributeData: {\n                endpointId: this.endpointId,\n                clusterId: this.clusterId,\n                attribute: this.attribute,\n                value,\n                dataVersion,\n            },\n        });\n    }\n\n    /** Get the value of the attribute. Fabric scoped reads are always done with the remote. */\n    async get(alwaysRequestFromRemote?: boolean, isFabricFiltered = true) {\n        if (alwaysRequestFromRemote === undefined) {\n            alwaysRequestFromRemote = this.#isFabricScoped || !this.#updatedBySubscriptions;\n        } else if (!alwaysRequestFromRemote && this.#isFabricScoped) {\n            alwaysRequestFromRemote = true;\n        }\n        return await this.#interactionClient.getAttribute({\n            endpointId: this.endpointId,\n            clusterId: this.clusterId,\n            attribute: this.attribute,\n            isFabricFiltered,\n            alwaysRequestFromRemote,\n        });\n    }\n\n    /**\n     * Get the value with version of the attribute. Fabric scoped reads are always done with the remote.\n     * */\n    async getWithVersion(alwaysRequestFromRemote?: boolean, isFabricFiltered = true) {\n        if (alwaysRequestFromRemote === undefined) {\n            alwaysRequestFromRemote = this.#isFabricScoped;\n        } else if (!alwaysRequestFromRemote && this.#isFabricScoped) {\n            alwaysRequestFromRemote = true;\n        }\n        return await this.#interactionClient.getAttributeWithVersion({\n            endpointId: this.endpointId,\n            clusterId: this.clusterId,\n            attribute: this.attribute,\n            isFabricFiltered,\n            alwaysRequestFromRemote,\n        });\n    }\n\n    /** Subscribe to the attribute. */\n    async subscribe(\n        minIntervalFloorSeconds: number,\n        maxIntervalCeilingSeconds: number,\n        knownDataVersion?: number,\n        isFabricFiltered = true,\n    ) {\n        if (!this.#updatedBySubscriptions) {\n            throw new ImplementationError(`Attribute ${this.name} is not updated by subscriptions.`);\n        }\n        return this.#interactionClient.subscribeAttribute({\n            endpointId: this.endpointId,\n            clusterId: this.clusterId,\n            attribute: this.attribute,\n            minIntervalFloorSeconds,\n            maxIntervalCeilingSeconds,\n            isFabricFiltered,\n            knownDataVersion,\n            listener: this.update.bind(this),\n        });\n    }\n\n    /**\n     * Update the value of the attribute. Just internally used!\n     * @private\n     */\n    update(value: T) {\n        this.#listeners.forEach(listener => listener(value));\n    }\n\n    /** Add a listener to the attribute. */\n    addListener(listener: (newValue: T) => void) {\n        this.#listeners.push(listener);\n    }\n\n    /** Remove a listener from the attribute. */\n    removeListener(listener: (newValue: T) => void) {\n        const entryIndex = this.#listeners.indexOf(listener);\n        if (entryIndex !== -1) {\n            this.#listeners.splice(entryIndex, 1);\n        }\n    }\n}\n\n/**\n * Special AttributeClient class to allow identifying attributes that are supported because reported by the Devices.\n */\nexport class SupportedAttributeClient<T> extends AttributeClient<T> {}\n\n/**\n * Special AttributeClient class to allow identifying attributes that are supported because reported by the Devices,\n * but the contained attribute is unknown.\n */\nexport class UnknownSupportedAttributeClient extends SupportedAttributeClient<any> {}\n"],
  "mappings": "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",
  "names": []
}
