{
  "version": 3,
  "sources": ["../../../../src/cluster/mutation/ElementModifier.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ClusterType } from \"../ClusterType.js\";\n\n/**\n * An \"element modifier\" mutates cluster elements based on a predefined set of\n * alterations described in the Matter device library.\n */\nexport class ElementModifier<const T extends ClusterType> {\n    constructor(public cluster: T) {}\n\n    /**\n     * Create a new cluster with modified elements.\n     */\n    alter<const AlterationsT extends ElementModifier.Alterations<T>>(alterations: AlterationsT) {\n        return modifyElements(this.cluster, alterations, (element, alteration: any) => {\n            for (const property in alteration) {\n                element[property] = alteration[property];\n            }\n        }) as ElementModifier.WithAlterations<T, AlterationsT>;\n    }\n\n    /**\n     * Create a new cluster with different attribute defaults.\n     *\n     * This \"sets\" the values of attributes when the cluster is created\n     * for the first time with no persistent state.\n     */\n    set<const ValuesT extends Partial<ClusterType.InputAttributeValues<T>>>(values: ValuesT) {\n        return modifyElements(this.cluster, { attributes: values }, (element, defaultValue) => {\n            element.default = defaultValue;\n        }) as ElementModifier.WithValues<T, ValuesT>;\n    }\n\n    /**\n     * Create a new cluster with additional features marked \"mandatory\".\n     *\n     * This informs matter.js that an application supports these elements.\n     */\n    enable<const FlagsT extends ElementModifier.ElementFlags<T>>(flags: FlagsT) {\n        return modifyElements(this.cluster, flags, (element, flag) => {\n            if (flag === true) {\n                element.optional = false;\n            } else if (flag === false) {\n                element.optional = true;\n            }\n        }) as ElementModifier.WithAlterations<T, ElementModifier.ElementFlagAlterations<FlagsT>>;\n    }\n}\n\nexport namespace ElementModifier {\n    /**\n     * A set of modifications to cluster elements of a specific type.\n     */\n    export type ElementSetAlterations<AlterationT extends ElementAlteration, ElementSetT> = {\n        [name in keyof ElementSetT]?: AlterationT;\n    };\n\n    export interface ElementAlteration {\n        optional?: boolean;\n    }\n\n    export interface AttributeAlteration extends ElementAlteration {\n        default?: any;\n        min?: any;\n        max?: any;\n    }\n\n    /**\n     * A set of modifications to a cluster's elements.\n     *\n     * Note - cannot specify ElementsT as extending ClusterElements because it\n     * triggers a bug in TS 5.2 declaration generation\n     */\n    export type Alterations<OriginalT extends ClusterType> = {\n        attributes?: ElementSetAlterations<AttributeAlteration, OriginalT[\"attributes\"]>;\n        commands?: ElementSetAlterations<ElementAlteration, OriginalT[\"commands\"]>;\n        events?: ElementSetAlterations<ElementAlteration, OriginalT[\"events\"]>;\n    };\n\n    /**\n     * Alterations applied to a specific element set, element or element field.\n     */\n    export type AlteredElements<OriginalT, ElementT, AlterationT> = {\n        [name in keyof OriginalT]: OriginalT[name] extends infer OrigT extends ElementT\n            ? AlterationT extends { [n in name]: { optional: infer O extends boolean } }\n                ? Omit<OrigT, \"optional\"> & { optional: O }\n                : OrigT\n            : never;\n    };\n\n    /**\n     * A definition with alterations applied.\n     */\n    export type WithAlterations<T extends ClusterType, AlterationsT extends Alterations<any>> = Omit<\n        T,\n        \"attributes\" | \"commands\" | \"events\"\n    > & {\n        attributes: AlteredElements<T[\"attributes\"], ClusterType.Attribute, AlterationsT[\"attributes\"]>;\n        commands: AlteredElements<T[\"commands\"], ClusterType.Command, AlterationsT[\"commands\"]>;\n        events: AlteredElements<T[\"events\"], ClusterType.Event, AlterationsT[\"events\"]>;\n    };\n\n    /**\n     * A definition with attribute defaults updated.\n     */\n    export type WithValues<\n        T extends ClusterType,\n        ValuesT extends Partial<ClusterType.InputAttributeValues<T>>,\n    > = WithAlterations<T, AttributeValueAlterations<ValuesT>>;\n\n    /**\n     * A definition with elements enabled.\n     */\n    export type WithFlags<T extends ClusterType, FlagsT extends ElementFlags<T>> = WithAlterations<\n        T,\n        ElementFlagAlterations<FlagsT>\n    >;\n\n    /**\n     * Alterations implied by AttributeValues.\n     */\n    export type AttributeValueAlterations<ValuesT extends Partial<ClusterType.InputAttributeValues<any>>> = {\n        attributes: {\n            [K in keyof ValuesT]: { default: ValuesT[K] };\n        };\n    };\n\n    export type ElementSetFlags<ElementsT extends ClusterType.ElementSet<any> | undefined> = {\n        [key in keyof ElementsT]?: boolean;\n    };\n\n    /**\n     * Flags indicating elements to enable.\n     */\n    export type ElementFlags<ClusterT extends ClusterType> = {\n        attributes?: ElementSetFlags<ClusterType.AttributesOf<ClusterT>>;\n        commands?: ElementSetFlags<ClusterType.CommandsOf<ClusterT>>;\n        events?: ElementSetFlags<ClusterType.EventsOf<ClusterT>>;\n    };\n\n    export type ElementSetFlagAlterations<ElementsT extends ElementSetFlags<any> | undefined> = ElementsT extends {}\n        ? { [key in keyof ElementsT]: { optional: ElementsT[key] extends true ? false : true } }\n        : undefined;\n\n    /**\n     * Alterations implied by ElementFlags.\n     */\n    export type ElementFlagAlterations<T extends ElementFlags<any>> = {\n        [K in keyof T]: T[K] extends ElementSetFlags<any> ? ElementSetFlagAlterations<T[K]> : never;\n    };\n\n    /**\n     * An \"extender\" is a function that creates a cluster with specific\n     * features enabled.\n     */\n    export type Extender = (...features: any) => ClusterType;\n}\n\n/**\n * Helper routine used by alteration builder methods.\n */\nfunction modifyElements(\n    definition: ClusterType,\n    modifications: Record<string, Record<string, any> | undefined>,\n    modifier: (element: any, modification: any) => any,\n) {\n    const result = { ...definition };\n\n    for (const elementType of [\"attributes\", \"commands\", \"events\"] as const) {\n        const mods = modifications[elementType];\n        if (mods === undefined) {\n            continue;\n        }\n\n        let elements = result[elementType];\n        if (elements === undefined) {\n            continue;\n        }\n\n        let replaced = false;\n\n        for (const elementName in mods) {\n            const mod = mods[elementName];\n            if (mod === undefined) {\n                continue;\n            }\n\n            const element = elements[elementName];\n            if (!element) {\n                continue;\n            }\n\n            if (!replaced) {\n                elements = result[elementType] = { ...result[elementType] } as {};\n                replaced = true;\n            }\n\n            elements[elementName] = { ...element };\n\n            modifier(elements[elementName], mod);\n        }\n    }\n\n    return result;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,MAAM,gBAA6C;AAAA,EACtD,YAAmB,SAAY;AAAZ;AAAA,EAAa;AAAA;AAAA;AAAA;AAAA,EAKhC,MAAiE,aAA2B;AACxF,WAAO,eAAe,KAAK,SAAS,aAAa,CAAC,SAAS,eAAoB;AAC3E,iBAAW,YAAY,YAAY;AAC/B,gBAAQ,QAAQ,IAAI,WAAW,QAAQ;AAAA,MAC3C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAwE,QAAiB;AACrF,WAAO,eAAe,KAAK,SAAS,EAAE,YAAY,OAAO,GAAG,CAAC,SAAS,iBAAiB;AACnF,cAAQ,UAAU;AAAA,IACtB,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAA6D,OAAe;AACxE,WAAO,eAAe,KAAK,SAAS,OAAO,CAAC,SAAS,SAAS;AAC1D,UAAI,SAAS,MAAM;AACf,gBAAQ,WAAW;AAAA,MACvB,WAAW,SAAS,OAAO;AACvB,gBAAQ,WAAW;AAAA,MACvB;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AAkHA,SAAS,eACL,YACA,eACA,UACF;AACE,QAAM,SAAS,EAAE,GAAG,WAAW;AAE/B,aAAW,eAAe,CAAC,cAAc,YAAY,QAAQ,GAAY;AACrE,UAAM,OAAO,cAAc,WAAW;AACtC,QAAI,SAAS,QAAW;AACpB;AAAA,IACJ;AAEA,QAAI,WAAW,OAAO,WAAW;AACjC,QAAI,aAAa,QAAW;AACxB;AAAA,IACJ;AAEA,QAAI,WAAW;AAEf,eAAW,eAAe,MAAM;AAC5B,YAAM,MAAM,KAAK,WAAW;AAC5B,UAAI,QAAQ,QAAW;AACnB;AAAA,MACJ;AAEA,YAAM,UAAU,SAAS,WAAW;AACpC,UAAI,CAAC,SAAS;AACV;AAAA,MACJ;AAEA,UAAI,CAAC,UAAU;AACX,mBAAW,OAAO,WAAW,IAAI,EAAE,GAAG,OAAO,WAAW,EAAE;AAC1D,mBAAW;AAAA,MACf;AAEA,eAAS,WAAW,IAAI,EAAE,GAAG,QAAQ;AAErC,eAAS,SAAS,WAAW,GAAG,GAAG;AAAA,IACvC;AAAA,EACJ;AAEA,SAAO;AACX;",
  "names": []
}
