/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../mutation/MutableCluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { FixedAttribute, Attribute, WritableAttribute, Command, TlvNoResponse } from "../Cluster.js";
import { TlvArray } from "../../tlv/TlvArray.js";
import { ModeBase } from "./ModeBaseCluster.js";
import { TlvUInt8 } from "../../tlv/TlvNumber.js";
import { ClusterRegistry } from "../ClusterRegistry.js";
var RefrigeratorAndTemperatureControlledCabinetMode;
((RefrigeratorAndTemperatureControlledCabinetMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = RefrigeratorAndTemperatureControlledCabinetMode2.Feature || (RefrigeratorAndTemperatureControlledCabinetMode2.Feature = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["RapidCool"] = 16384] = "RapidCool";
    ModeTag2[ModeTag2["RapidFreeze"] = 16385] = "RapidFreeze";
  })(ModeTag = RefrigeratorAndTemperatureControlledCabinetMode2.ModeTag || (RefrigeratorAndTemperatureControlledCabinetMode2.ModeTag = {}));
  RefrigeratorAndTemperatureControlledCabinetMode2.Base = MutableCluster.Component({
    id: 82,
    name: "RefrigeratorAndTemperatureControlledCabinetMode",
    revision: 2,
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
       * same endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
       */
      onOff: BitFlag(0)
    },
    attributes: {
      /**
       * @see {@link MatterSpecification.v13.Cluster} § 8.7.5
       */
      supportedModes: FixedAttribute(
        0,
        TlvArray(ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 }),
        { default: [] }
      ),
      /**
       * @see {@link MatterSpecification.v13.Cluster} § 8.7.5
       */
      currentMode: Attribute(1, TlvUInt8, { scene: true, persistent: true }),
      /**
       * @see {@link MatterSpecification.v13.Cluster} § 8.7.5
       */
      startUpMode: WritableAttribute(2, TlvUInt8, { persistent: true }),
      /**
       * @see {@link MatterSpecification.v13.Cluster} § 8.7.5
       */
      onMode: WritableAttribute(3, TlvUInt8, { persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
       */
      changeToMode: Command(0, ModeBase.TlvChangeToModeRequest, 0, TlvNoResponse)
    },
    /**
     * This metadata controls which RefrigeratorAndTemperatureControlledCabinetModeCluster elements matter.js
     * activates for specific feature combinations.
     */
    extensions: MutableCluster.Extensions()
  });
  RefrigeratorAndTemperatureControlledCabinetMode2.ClusterInstance = MutableCluster(RefrigeratorAndTemperatureControlledCabinetMode2.Base);
  RefrigeratorAndTemperatureControlledCabinetMode2.Cluster = RefrigeratorAndTemperatureControlledCabinetMode2.ClusterInstance;
  RefrigeratorAndTemperatureControlledCabinetMode2.Complete = RefrigeratorAndTemperatureControlledCabinetMode2.Cluster;
})(RefrigeratorAndTemperatureControlledCabinetMode || (RefrigeratorAndTemperatureControlledCabinetMode = {}));
const RefrigeratorAndTemperatureControlledCabinetModeCluster = RefrigeratorAndTemperatureControlledCabinetMode.Cluster;
ClusterRegistry.register(RefrigeratorAndTemperatureControlledCabinetMode.Complete);
export {
  RefrigeratorAndTemperatureControlledCabinetMode,
  RefrigeratorAndTemperatureControlledCabinetModeCluster
};
//# sourceMappingURL=RefrigeratorAndTemperatureControlledCabinetModeCluster.js.map
