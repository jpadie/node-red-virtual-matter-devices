/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../mutation/MutableCluster.js";
import { FixedAttribute, Command, TlvNoResponse, Attribute, Event, EventPriority } from "../Cluster.js";
import { TlvUInt32 } from "../../tlv/TlvNumber.js";
import { AlarmBase } from "./AlarmBaseCluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { ClusterRegistry } from "../ClusterRegistry.js";
var RefrigeratorAlarm;
((RefrigeratorAlarm2) => {
  let Feature;
  ((Feature2) => {
    Feature2["Reset"] = "Reset";
  })(Feature = RefrigeratorAlarm2.Feature || (RefrigeratorAlarm2.Feature = {}));
  RefrigeratorAlarm2.Alarm = {
    /**
     * The cabinet’s door has been open for a vendor defined amount of time.
     */
    doorOpen: BitFlag(0)
  };
  RefrigeratorAlarm2.ResetComponent = MutableCluster.Component({
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Latch attribute shall indicate that the corresponding alarm
       * will be latched when set, and will not reset to inactive when the underlying condition which caused the
       * alarm is no longer present, and so requires an explicit reset using the Reset command.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.2
       */
      latch: FixedAttribute(1, TlvUInt32)
    },
    commands: {
      /**
       * This command resets active and latched alarms (if possible). Any generated Notify event shall contain
       * fields that represent the state of the server after the command has been processed.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.7.1
       */
      reset: Command(0, AlarmBase.TlvResetRequest, 0, TlvNoResponse)
    }
  });
  RefrigeratorAlarm2.Base = MutableCluster.Component({
    id: 87,
    name: "RefrigeratorAlarm",
    revision: 1,
    features: {
      /**
       * Reset
       *
       * Supports the ability to reset alarms
       */
      reset: BitFlag(0)
    },
    attributes: {
      /**
       * Indicates a bitmap where each bit set in the Mask attribute corresponds to an alarm that shall be
       * enabled.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.1
       */
      mask: Attribute(0, TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent the state of an alarm. The value of true means the
       * alarm is active, otherwise the alarm is inactive.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.3
       */
      state: Attribute(2, TlvUInt32),
      /**
       * Indicates a bitmap where each bit shall represent whether or not an alarm is supported. The value of
       * true means the alarm is supported, otherwise the alarm is not supported.
       *
       * If an alarm is not supported, the corresponding bit in Mask, Latch, and State shall be false.
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.6.4
       */
      supported: FixedAttribute(3, TlvUInt32)
    },
    events: {
      /**
       * This event shall be generated when one or more alarms change state, and shall have these fields:
       *
       * @see {@link MatterSpecification.v13.Cluster} § 1.15.8.1
       */
      notify: Event(0, EventPriority.Info, AlarmBase.TlvNotifyEvent)
    },
    /**
     * This metadata controls which RefrigeratorAlarmCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: MutableCluster.Extensions(
      { flags: { reset: true }, component: RefrigeratorAlarm2.ResetComponent },
      { flags: { reset: true }, component: false }
    )
  });
  RefrigeratorAlarm2.ClusterInstance = MutableCluster(RefrigeratorAlarm2.Base);
  RefrigeratorAlarm2.Cluster = RefrigeratorAlarm2.ClusterInstance;
  const RESET = { reset: true };
  RefrigeratorAlarm2.CompleteInstance = MutableCluster({
    id: RefrigeratorAlarm2.Cluster.id,
    name: RefrigeratorAlarm2.Cluster.name,
    revision: RefrigeratorAlarm2.Cluster.revision,
    features: RefrigeratorAlarm2.Cluster.features,
    attributes: {
      ...RefrigeratorAlarm2.Cluster.attributes,
      latch: MutableCluster.AsConditional(RefrigeratorAlarm2.ResetComponent.attributes.latch, { mandatoryIf: [RESET] })
    },
    commands: { reset: MutableCluster.AsConditional(RefrigeratorAlarm2.ResetComponent.commands.reset, { mandatoryIf: [RESET] }) },
    events: RefrigeratorAlarm2.Cluster.events
  });
  RefrigeratorAlarm2.Complete = RefrigeratorAlarm2.CompleteInstance;
})(RefrigeratorAlarm || (RefrigeratorAlarm = {}));
const RefrigeratorAlarmCluster = RefrigeratorAlarm.Cluster;
ClusterRegistry.register(RefrigeratorAlarm.Complete);
export {
  RefrigeratorAlarm,
  RefrigeratorAlarmCluster
};
//# sourceMappingURL=RefrigeratorAlarmCluster.js.map
