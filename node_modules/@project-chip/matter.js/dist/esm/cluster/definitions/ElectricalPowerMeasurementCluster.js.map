{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ElectricalPowerMeasurementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { OptionalAttribute, Attribute, FixedAttribute, OptionalEvent, EventPriority } from \"../Cluster.js\";\nimport { TlvInt64, TlvUInt8, TlvEnum, TlvEpochS, TlvSysTimeMS } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvMeasurementAccuracy } from \"../globals/MeasurementAccuracy.js\";\nimport { MeasurementType } from \"../globals/MeasurementType.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ElectricalPowerMeasurement {\n    /**\n     * These are optional features supported by ElectricalPowerMeasurementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4\n     */\n    export enum Feature {\n        /**\n         * DirectCurrent (DIRC)\n         *\n         * This feature indicates the cluster can measure a direct current.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.1\n         */\n        DirectCurrent = \"DirectCurrent\",\n\n        /**\n         * AlternatingCurrent (ALTC)\n         *\n         * This feature indicates the cluster can measure an alternating current.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.2\n         */\n        AlternatingCurrent = \"AlternatingCurrent\",\n\n        /**\n         * PolyphasePower (POLY)\n         *\n         * This feature indicates the cluster represents the collective measurements for a Polyphase power supply.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.3\n         */\n        PolyphasePower = \"PolyphasePower\",\n\n        /**\n         * Harmonics (HARM)\n         *\n         * This feature indicates the cluster can measure the harmonics of an alternating current.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.4\n         */\n        Harmonics = \"Harmonics\",\n\n        /**\n         * PowerQuality (PWRQ)\n         *\n         * This feature indicates the cluster can measure the harmonic phases of an alternating current.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.5\n         */\n        PowerQuality = \"PowerQuality\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.3\n     */\n    export const TlvHarmonicMeasurement = TlvObject({\n        /**\n         * This field shall be the order of the harmonic being measured. Typically this is an odd number, but servers\n         * may choose to report even harmonics.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.3.1\n         */\n        order: TlvField(0, TlvUInt8.bound({ min: 1 })),\n\n        /**\n         * This field shall be the measured value for the given harmonic order.\n         *\n         * For the Harmonic Currents attribute, this value is the most recently measured harmonic current reading in\n         * milliamps (mA). A positive value indicates that the measured harmonic current is positive, and a negative\n         * value indicates that the measured harmonic current is negative.\n         *\n         * For the Harmonic Phases attribute, this value is the most recent phase of the given harmonic order\n         *\n         * in millidegrees (mDeg). A positive value indicates that the measured phase is leading, and a negative value\n         * indicates that the measured phase is lagging.\n         *\n         * If this measurement is not currently available, a value of null shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.3.2\n         */\n        measurement: TlvField(1, TlvNullable(TlvInt64))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.3\n     */\n    export interface HarmonicMeasurement extends TypeFromSchema<typeof TlvHarmonicMeasurement> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.1\n     */\n    export enum PowerMode {\n        Unknown = 0,\n\n        /**\n         * Direct current\n         */\n        Dc = 1,\n\n        /**\n         * Alternating current, either single-phase or polyphase\n         */\n        Ac = 2\n    }\n\n    /**\n     * This struct shall indicate the maximum and minimum values of a given measurement type during a measurement\n     * period, along with the observation times of these values.\n     *\n     * A server which does not have the ability to determine the time in UTC, or has not yet done so, shall use the\n     * system time fields to specify the measurement period and observation times.\n     *\n     * A server which has determined the time in UTC shall use the timestamp fields to specify the measurement period\n     * and observation times. Such a server may also include the systime fields to indicate how many seconds had passed\n     * since boot for a given timestamp; this allows for client-side resolution of UTC time for previous reports that\n     * only included systime.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2\n     */\n    export const TlvMeasurementRange = TlvObject({\n        /**\n         * This field shall be the type of measurement for the range provided.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.1\n         */\n        measurementType: TlvField(0, TlvEnum<MeasurementType>()),\n\n        /**\n         * This field shall be the smallest measured value for the associated measurement over either the period\n         * between StartTimestamp and EndTimestamp, or the period between StartSystime and EndSystime, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.2\n         */\n        min: TlvField(1, TlvInt64),\n\n        /**\n         * This field shall be the largest measured value for the associated measurement over the period between either\n         * StartTimestamp and EndTimestamp or the period between StartSystime and EndSystime, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.3\n         */\n        max: TlvField(2, TlvInt64),\n\n        /**\n         * This field shall be the timestamp in UTC of the beginning of the measurement period.\n         *\n         * If the server had not yet determined the time in UTC at or before the beginning of the measurement period,\n         * or does not have the capability of determining the time in UTC, this field shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.4\n         */\n        startTimestamp: TlvOptionalField(3, TlvEpochS),\n\n        /**\n         * This field shall be the timestamp in UTC of the end of the measurement period.\n         *\n         * If the server had not yet determined the time in UTC at or before the beginning of the measurement period,\n         * or does not have the capability of determining the time in UTC, this field shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.5\n         */\n        endTimestamp: TlvOptionalField(4, TlvEpochS),\n\n        /**\n         * This field shall be the most recent timestamp in UTC that the value in the Min field was measured.\n         *\n         * This field shall be greater than or equal to the value of the StartTimestamp field. This field shall be less\n         * than or equal to the value of the EndTimestamp field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.6\n         */\n        minTimestamp: TlvOptionalField(5, TlvEpochS),\n\n        /**\n         * This field shall be the most recent timestamp in UTC of the value in the Max field. This field shall be\n         * greater than or equal to the value of the StartTimestamp field. This field shall be less than or equal to\n         * the value of the EndTimestamp field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.7\n         */\n        maxTimestamp: TlvOptionalField(6, TlvEpochS),\n\n        /**\n         * This field shall be the time since boot of the beginning of the measurement period.\n         *\n         * If the server had determined the time in UTC at or before the start of the measurement period, this field\n         * may be omitted along with the EndSystime, MinSystime, and MaxSystime fields.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.8\n         */\n        startSystime: TlvOptionalField(7, TlvSysTimeMS),\n\n        /**\n         * This field shall be the time since boot of the end of the measurement period.\n         *\n         * If the server had determined the time in UTC at the end of the measurement period, this field may be omitted\n         * along with the StartSystime field, MinSystime, and MaxSystime fields.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.9\n         */\n        endSystime: TlvOptionalField(8, TlvSysTimeMS),\n\n        /**\n         * This field shall be the measurement time since boot of the value in the Min field was measured. This field\n         * shall be greater than or equal to the value of the StartSystime field.\n         *\n         * This field shall be less than or equal to the value of the EndSystime field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.10\n         */\n        minSystime: TlvOptionalField(9, TlvSysTimeMS),\n\n        /**\n         * This field shall be the measurement time since boot of the value in the Max field. This field shall be\n         * greater than or equal to the value of the StartSystime field.\n         *\n         * This field shall be less than or equal to the value of the EndSystime field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2.11\n         */\n        maxSystime: TlvOptionalField(10, TlvSysTimeMS)\n    });\n\n    /**\n     * This struct shall indicate the maximum and minimum values of a given measurement type during a measurement\n     * period, along with the observation times of these values.\n     *\n     * A server which does not have the ability to determine the time in UTC, or has not yet done so, shall use the\n     * system time fields to specify the measurement period and observation times.\n     *\n     * A server which has determined the time in UTC shall use the timestamp fields to specify the measurement period\n     * and observation times. Such a server may also include the systime fields to indicate how many seconds had passed\n     * since boot for a given timestamp; this allows for client-side resolution of UTC time for previous reports that\n     * only included systime.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.5.2\n     */\n    export interface MeasurementRange extends TypeFromSchema<typeof TlvMeasurementRange> {}\n\n    /**\n     * Body of the ElectricalPowerMeasurement measurementPeriodRanges event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.7.1\n     */\n    export const TlvMeasurementPeriodRangesEvent = TlvObject({\n        /**\n         * This shall indicate the value of the Ranges attribute at the time of event generation.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.7.1.1\n         */\n        ranges: TlvField(0, TlvArray(TlvMeasurementRange))\n    });\n\n    /**\n     * Body of the ElectricalPowerMeasurement measurementPeriodRanges event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.7.1\n     */\n    export interface MeasurementPeriodRangesEvent extends TypeFromSchema<typeof TlvMeasurementPeriodRangesEvent> {}\n\n    /**\n     * A ElectricalPowerMeasurementCluster supports these elements if it supports feature AlternatingCurrent.\n     */\n    export const AlternatingCurrentComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This shall indicate the most recent ReactiveCurrent reading in milliamps (mA).\n             *\n             * A positive value represents current flowing into the server, while a negative value represents current\n             * flowing out of the server.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the current cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.7\n             */\n            reactiveCurrent: OptionalAttribute(0x6, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent ApparentCurrent (square root sum of the squares of active and\n             * reactive currents) reading in milliamps (mA).\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the active or reactive currents cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.8\n             */\n            apparentCurrent: OptionalAttribute(0x7, TlvNullable(TlvInt64.bound({ min: 0 })), { default: null }),\n\n            /**\n             * This shall indicate the most recent ReactivePower reading in millivolt-amps reactive (mVAR). A positive\n             * value represents power imported, while a negative value represents power exported.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the reactive power cannot be measured, a value of null shall be returned.\n             *\n             * If the Polyphase Power feature is supported, this value represents the combined reactive power imported\n             * or exported.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.10\n             */\n            reactivePower: OptionalAttribute(0x9, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent ApparentPower reading in millivolt-amps (mVA).\n             *\n             * A positive value represents power imported, while a negative value represents power exported.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the apparent power cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.11\n             */\n            apparentPower: OptionalAttribute(0xa, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent RMSVoltage reading in millivolts (mV).\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the RMS voltage cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.12\n             */\n            rmsVoltage: OptionalAttribute(0xb, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent RMSCurrent reading in milliamps (mA).\n             *\n             * A positive value represents current flowing into the server, while a negative value represents current\n             * flowing out of the server.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the RMS current cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.13\n             */\n            rmsCurrent: OptionalAttribute(0xc, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent RMSPower reading in milliwatts (mW).\n             *\n             * A positive value represents power imported, while a negative value represents power exported.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the RMS power cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.14\n             */\n            rmsPower: OptionalAttribute(0xd, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent Frequency reading in millihertz (mHz).\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the frequency cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.15\n             */\n            frequency: OptionalAttribute(0xe, TlvNullable(TlvInt64.bound({ min: 0, max: 1000000 })), { default: null }),\n\n            /**\n             * This shall indicate the Power Factor ratio in +/- 1/100ths of a percent.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.18\n             */\n            powerFactor: OptionalAttribute(\n                0x11,\n                TlvNullable(TlvInt64.bound({ min: -10000, max: 10000 })),\n                { default: null }\n            )\n        }\n    });\n\n    /**\n     * A ElectricalPowerMeasurementCluster supports these elements if it supports feature Harmonics.\n     */\n    export const HarmonicsComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This shall indicate a list of HarmonicMeasurementStruct values, with each HarmonicMeasurementStruct\n             * representing the harmonic current reading for the harmonic order specified by Order.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.16\n             */\n            harmonicCurrents: Attribute(0xf, TlvNullable(TlvArray(TlvHarmonicMeasurement)), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalPowerMeasurementCluster supports these elements if it supports feature PowerQuality.\n     */\n    export const PowerQualityComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This shall indicate a list of HarmonicMeasurementStruct values, with each HarmonicMeasurementStruct\n             * representing the most recent phase of the harmonic current reading for the harmonic\n             *\n             * order specified by Order.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.17\n             */\n            harmonicPhases: Attribute(0x10, TlvNullable(TlvArray(TlvHarmonicMeasurement)), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalPowerMeasurementCluster supports these elements if it supports feature PolyphasePower.\n     */\n    export const PolyphasePowerComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This shall indicate the most recent NeutralCurrent reading in milliamps (mA). Typically this is a\n             * derived value, taking the magnitude of the vector sum of phase currents.\n             *\n             * If the neutral current cannot be measured or derived, a value of null shall be returned.\n             *\n             * A positive value represents an imbalance between the phase currents when power is imported. A negative\n             * value represents an imbalance between the phase currents when power is exported.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.19\n             */\n            neutralCurrent: OptionalAttribute(0x12, TlvNullable(TlvInt64), { default: null })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all ElectricalPowerMeasurement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x90,\n        name: \"ElectricalPowerMeasurement\",\n        revision: 1,\n\n        features: {\n            /**\n             * DirectCurrent\n             *\n             * This feature indicates the cluster can measure a direct current.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.1\n             */\n            directCurrent: BitFlag(0),\n\n            /**\n             * AlternatingCurrent\n             *\n             * This feature indicates the cluster can measure an alternating current.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.2\n             */\n            alternatingCurrent: BitFlag(1),\n\n            /**\n             * PolyphasePower\n             *\n             * This feature indicates the cluster represents the collective measurements for a Polyphase power supply.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.3\n             */\n            polyphasePower: BitFlag(2),\n\n            /**\n             * Harmonics\n             *\n             * This feature indicates the cluster can measure the harmonics of an alternating current.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.4\n             */\n            harmonics: BitFlag(3),\n\n            /**\n             * PowerQuality\n             *\n             * This feature indicates the cluster can measure the harmonic phases of an alternating current.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.4.5\n             */\n            powerQuality: BitFlag(4)\n        },\n\n        attributes: {\n            /**\n             * This shall indicate the current mode of the server. For some servers, such as an EV, this may change\n             * depending on the mode of charging or discharging.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.1\n             */\n            powerMode: Attribute(0x0, TlvEnum<PowerMode>()),\n\n            /**\n             * This shall indicate the maximum number of measurement types the server is capable of reporting.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.2\n             */\n            numberOfMeasurementTypes: FixedAttribute(0x1, TlvUInt8.bound({ min: 1 })),\n\n            /**\n             * This shall indicate a list of accuracy specifications for the measurement types supported by the server.\n             * There shall be an entry for ActivePower, as well as any other measurement types implemented by this\n             * server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.3\n             */\n            accuracy: FixedAttribute(0x2, TlvArray(TlvMeasurementAccuracy, { minLength: 1 })),\n\n            /**\n             * This shall indicate a list of measured ranges for different measurement types. Each measurement type\n             * shall have at most one entry in this list, representing the range of measurements in the most recent\n             * measurement period.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.4\n             */\n            ranges: OptionalAttribute(0x3, TlvArray(TlvMeasurementRange, { minLength: 0 }), { default: [] }),\n\n            /**\n             * This shall indicate the most recent Voltage reading in millivolts (mV).\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the voltage cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.5\n             */\n            voltage: OptionalAttribute(0x4, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent ActiveCurrent reading in milliamps (mA).\n             *\n             * A positive value represents current flowing into the server, while a negative value represents current\n             * flowing out of the server.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the current cannot be measured, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.6\n             */\n            activeCurrent: OptionalAttribute(0x5, TlvNullable(TlvInt64), { default: null }),\n\n            /**\n             * This shall indicate the most recent ActivePower reading in milliwatts (mW). If the power cannot be\n             * measured, a value of null shall be returned.\n             *\n             * A positive value represents power imported, while a negative value represents power exported.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the Polyphase Power feature is set, this value represents the combined active power imported or\n             * exported.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.6.9\n             */\n            activePower: Attribute(0x8, TlvNullable(TlvInt64), { default: null })\n        },\n\n        events: {\n            /**\n             * If supported, this event shall be generated at the end of a measurement period. The start and end times\n             * for measurement periods shall be determined by the server, and may represent overlapping periods.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13.7.1\n             */\n            measurementPeriodRanges: OptionalEvent(0x0, EventPriority.Info, TlvMeasurementPeriodRangesEvent)\n        },\n\n        /**\n         * This metadata controls which ElectricalPowerMeasurementCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { alternatingCurrent: true }, component: AlternatingCurrentComponent },\n            { flags: { harmonics: true }, component: HarmonicsComponent },\n            { flags: { powerQuality: true }, component: PowerQualityComponent },\n            { flags: { polyphasePower: true }, component: PolyphasePowerComponent },\n            { flags: { polyphasePower: true, alternatingCurrent: false }, component: false },\n            { flags: { harmonics: true, alternatingCurrent: false }, component: false },\n            { flags: { powerQuality: true, alternatingCurrent: false }, component: false },\n            { flags: { directCurrent: false, alternatingCurrent: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides a mechanism for querying data about electrical power as measured by the server.\n     *\n     * Per the Matter specification you cannot use {@link ElectricalPowerMeasurementCluster} without enabling certain\n     * feature combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.13\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const ALTC = { alternatingCurrent: true };\n    const HARM = { harmonics: true };\n    const PWRQ = { powerQuality: true };\n    const POLY = { polyphasePower: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            reactiveCurrent: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.reactiveCurrent,\n                { optionalIf: [ALTC] }\n            ),\n            apparentCurrent: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.apparentCurrent,\n                { optionalIf: [ALTC] }\n            ),\n            reactivePower: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.reactivePower,\n                { optionalIf: [ALTC] }\n            ),\n            apparentPower: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.apparentPower,\n                { optionalIf: [ALTC] }\n            ),\n            rmsVoltage: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.rmsVoltage,\n                { optionalIf: [ALTC] }\n            ),\n            rmsCurrent: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.rmsCurrent,\n                { optionalIf: [ALTC] }\n            ),\n            rmsPower: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.rmsPower,\n                { optionalIf: [ALTC] }\n            ),\n            frequency: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.frequency,\n                { optionalIf: [ALTC] }\n            ),\n            harmonicCurrents: MutableCluster.AsConditional(\n                HarmonicsComponent.attributes.harmonicCurrents,\n                { mandatoryIf: [HARM] }\n            ),\n            harmonicPhases: MutableCluster.AsConditional(\n                PowerQualityComponent.attributes.harmonicPhases,\n                { mandatoryIf: [PWRQ] }\n            ),\n            powerFactor: MutableCluster.AsConditional(\n                AlternatingCurrentComponent.attributes.powerFactor,\n                { optionalIf: [ALTC] }\n            ),\n            neutralCurrent: MutableCluster.AsConditional(\n                PolyphasePowerComponent.attributes.neutralCurrent,\n                { optionalIf: [POLY] }\n            )\n        },\n\n        events: Base.events\n    });\n\n    /**\n     * This cluster supports all ElectricalPowerMeasurement features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ElectricalPowerMeasurementCluster = ElectricalPowerMeasurement.Cluster;\nexport const ElectricalPowerMeasurementCluster = ElectricalPowerMeasurement.Cluster;\nClusterRegistry.register(ElectricalPowerMeasurement.Complete);\n"],
  "mappings": "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",
  "names": ["ElectricalPowerMeasurement", "Feature", "PowerMode"]
}
