/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { MutableCluster } from "../mutation/MutableCluster.js";
import { WritableAttribute, FixedAttribute, Attribute, OptionalWritableAttribute, Command } from "../Cluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { Identity } from "../../util/Type.js";
export declare namespace OvenMode {
    /**
     * These are optional features supported by OvenModeCluster.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 1.10.4
     */
    enum Feature {
        /**
         * OnOff (DEPONOFF)
         *
         * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the same
         * endpoint. See OnMode for more information.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
         */
        OnOff = "OnOff"
    }
    enum ModeTag {
        /**
         * This mode sets the device into baking mode for baking food items.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.1
         */
        Bake = 16384,
        /**
         * This mode sets the device into convection mode which creates an airflow within the device during the cooking
         * duration.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.2
         */
        Convection = 16385,
        /**
         * This mode sets the device into grill mode for grilling food items. This is the same as Broil for many
         * regions.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.3
         */
        Grill = 16386,
        /**
         * This mode sets the device into roast mode for roasting food items.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.4
         */
        Roast = 16387,
        /**
         * This mode sets the device into cleaning mode to clean the internal components of the appliance.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.5
         */
        Clean = 16388,
        /**
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1
         */
        ConvectionBake = 16389,
        /**
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1
         */
        ConvectionRoast = 16390,
        /**
         * This mode sets the device into a warming mode which begins warming the cavity.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.8
         */
        Warming = 16391,
        /**
         * This mode sets the device into proofing mode which creates an environment ready for proofing.
         *
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1.9
         */
        Proofing = 16392,
        /**
         * @see {@link MatterSpecification.v13.Cluster} § 8.11.4.1
         */
        Steam = 16393
    }
    /**
     * A OvenModeCluster supports these elements if it supports feature OnOff.
     */
    const OnOffComponent: {
        readonly attributes: {
            /**
             * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same
             * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the
             * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster
             *
             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.5
             */
            readonly onMode: WritableAttribute<number | null, any>;
        };
    };
    /**
     * These elements and properties are present in all OvenMode clusters.
     */
    const Base: {
        readonly id: 73;
        readonly name: "OvenMode";
        readonly revision: 1;
        readonly features: {
            /**
             * OnOff
             *
             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
             * same endpoint. See OnMode for more information.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
             */
            readonly onOff: BitFlag;
        };
        readonly attributes: {
            /**
             * This attribute shall contain the list of supported modes that may be selected for the CurrentMode
             * attribute. Each item in this list represents a unique mode as indicated by the Mode field of the
             * ModeOptionStruct.
             *
             * Each entry in this list shall have a unique value for the Mode field. Each entry in this list shall have
             * a unique value for the Label field.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.2
             */
            readonly supportedModes: FixedAttribute<import("../../tlv/TlvObject.js").TypeFromFields<{
                label: import("../../tlv/TlvObject.js").FieldType<string>;
                mode: import("../../tlv/TlvObject.js").FieldType<number>;
                modeTags: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                    mfgCode: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/VendorId.js").VendorId>;
                    value: import("../../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
            /**
             * Indicates the current mode of the server.
             *
             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
             *
             * The value of this attribute may change at any time via an out-of-band interaction outside of the server,
             * such as interactions with a user interface, via internal mode changes due to autonomously progressing
             * through a sequence of operations, on system time-outs or idle delays, or via interactions coming from a
             * fabric other than the one which last executed a ChangeToMode.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.3
             */
            readonly currentMode: Attribute<number, any>;
            /**
             * Indicates the desired startup mode for the server when it is supplied with power.
             *
             * If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, when the
             * server is powered up, except in the case when the OnMode attribute overrides the StartUpMode attribute
             * (see OnModeWithPowerUp).
             *
             * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode
             * attribute shall return to its value prior to the restart.
             *
             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
             *
             * If this attribute is not implemented, or is set to the null value, it shall have no effect.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.4
             */
            readonly startUpMode: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * This command is used to change device modes.
             *
             * On receipt of this command the device shall respond with a ChangeToModeResponse command.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
             */
            readonly changeToMode: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                newMode: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
        /**
         * This metadata controls which OvenModeCluster elements matter.js activates for specific feature combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly onOff: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same
                     * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the
                     * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster
                     *
                     * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.5
                     */
                    readonly onMode: WritableAttribute<number | null, any>;
                };
            };
        }];
    };
    /**
     * @see {@link Cluster}
     */
    const ClusterInstance: MutableCluster<{
        readonly id: 73;
        readonly name: "OvenMode";
        readonly revision: 1;
        readonly features: {
            /**
             * OnOff
             *
             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
             * same endpoint. See OnMode for more information.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
             */
            readonly onOff: BitFlag;
        };
        readonly attributes: {
            /**
             * This attribute shall contain the list of supported modes that may be selected for the CurrentMode
             * attribute. Each item in this list represents a unique mode as indicated by the Mode field of the
             * ModeOptionStruct.
             *
             * Each entry in this list shall have a unique value for the Mode field. Each entry in this list shall have
             * a unique value for the Label field.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.2
             */
            readonly supportedModes: FixedAttribute<import("../../tlv/TlvObject.js").TypeFromFields<{
                label: import("../../tlv/TlvObject.js").FieldType<string>;
                mode: import("../../tlv/TlvObject.js").FieldType<number>;
                modeTags: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                    mfgCode: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/VendorId.js").VendorId>;
                    value: import("../../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
            /**
             * Indicates the current mode of the server.
             *
             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
             *
             * The value of this attribute may change at any time via an out-of-band interaction outside of the server,
             * such as interactions with a user interface, via internal mode changes due to autonomously progressing
             * through a sequence of operations, on system time-outs or idle delays, or via interactions coming from a
             * fabric other than the one which last executed a ChangeToMode.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.3
             */
            readonly currentMode: Attribute<number, any>;
            /**
             * Indicates the desired startup mode for the server when it is supplied with power.
             *
             * If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, when the
             * server is powered up, except in the case when the OnMode attribute overrides the StartUpMode attribute
             * (see OnModeWithPowerUp).
             *
             * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode
             * attribute shall return to its value prior to the restart.
             *
             * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
             *
             * If this attribute is not implemented, or is set to the null value, it shall have no effect.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.4
             */
            readonly startUpMode: OptionalWritableAttribute<number | null, any>;
        };
        readonly commands: {
            /**
             * This command is used to change device modes.
             *
             * On receipt of this command the device shall respond with a ChangeToModeResponse command.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
             */
            readonly changeToMode: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                newMode: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
        /**
         * This metadata controls which OvenModeCluster elements matter.js activates for specific feature combinations.
         */
        readonly extensions: readonly [{
            readonly flags: {
                readonly onOff: true;
            };
            readonly component: {
                readonly attributes: {
                    /**
                     * Indicates whether the value of CurrentMode depends on the state of the On/Off cluster on the same
                     * endpoint. If this attribute is not present or is set to null, there is no dependency, otherwise the
                     * CurrentMode attribute shall depend on the OnOff attribute in the On/Off cluster
                     *
                     * The value of this field shall match the Mode field of one of the entries in the SupportedModes attribute.
                     *
                     * @see {@link MatterSpecification.v13.Cluster} § 1.10.6.5
                     */
                    readonly onMode: WritableAttribute<number | null, any>;
                };
            };
        }];
    }, []>;
    /**
     * This cluster is derived from the Mode Base cluster, defining additional mode tags and namespaced enumerated
     * values for oven devices.
     *
     * OvenModeCluster supports optional features that you can enable with the OvenModeCluster.with() factory method.
     *
     * @see {@link MatterSpecification.v13.Cluster} § 8.11
     */
    interface Cluster extends Identity<typeof ClusterInstance> {
    }
    const Cluster: Cluster;
    /**
     * @see {@link Complete}
     */
    const CompleteInstance: MutableCluster<{
        readonly id: import("../../util/Type.js").Branded<73, "ClusterId">;
        readonly name: "OvenMode";
        readonly revision: 1;
        readonly features: {
            /**
             * OnOff
             *
             * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
             * same endpoint. See OnMode for more information.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
             */
            readonly onOff: BitFlag;
        };
        readonly attributes: {
            readonly onMode: WritableAttribute<number | null, any> & {
                readonly optional: true;
                readonly isConditional: true;
                readonly optionalIf: [] | import("../Cluster.js").ConditionalFeatureList<import("../../schema/BitmapSchema.js").BitSchema>;
                readonly mandatoryIf: [] | [{
                    onOff: boolean;
                }];
            };
            readonly supportedModes: FixedAttribute<import("../../tlv/TlvObject.js").TypeFromFields<{
                label: import("../../tlv/TlvObject.js").FieldType<string>;
                mode: import("../../tlv/TlvObject.js").FieldType<number>;
                modeTags: import("../../tlv/TlvObject.js").FieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                    mfgCode: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../datatype/VendorId.js").VendorId>;
                    value: import("../../tlv/TlvObject.js").FieldType<number>;
                }>[]>;
            }>[], any>;
            readonly currentMode: Attribute<number, any>;
            readonly startUpMode: OptionalWritableAttribute<number | null, any>;
            readonly clusterRevision: Attribute<number, never>;
            readonly featureMap: Attribute<import("../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
                /**
                 * OnOff
                 *
                 * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
                 * same endpoint. See OnMode for more information.
                 *
                 * @see {@link MatterSpecification.v13.Cluster} § 1.10.4.1
                 */
                readonly onOff: BitFlag;
            }>, never>;
            readonly attributeList: Attribute<import("../../datatype/AttributeId.js").AttributeId[], never>;
            readonly eventList: Attribute<import("../../datatype/EventId.js").EventId[], never>;
            readonly acceptedCommandList: Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
            readonly generatedCommandList: Attribute<import("../../datatype/CommandId.js").CommandId[], never>;
        };
        readonly commands: {
            /**
             * This command is used to change device modes.
             *
             * On receipt of this command the device shall respond with a ChangeToModeResponse command.
             *
             * @see {@link MatterSpecification.v13.Cluster} § 1.10.7.1
             */
            readonly changeToMode: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                newMode: import("../../tlv/TlvObject.js").FieldType<number>;
            }>, void, any>;
        };
    }, []>;
    /**
     * This cluster supports all OvenMode features. It may support illegal feature combinations.
     *
     * If you use this cluster you must manually specify which features are active and ensure the set of active
     * features is legal per the Matter specification.
     */
    interface Complete extends Identity<typeof CompleteInstance> {
    }
    const Complete: Complete;
}
export type OvenModeCluster = OvenMode.Cluster;
export declare const OvenModeCluster: OvenMode.Cluster;
//# sourceMappingURL=OvenModeCluster.d.ts.map