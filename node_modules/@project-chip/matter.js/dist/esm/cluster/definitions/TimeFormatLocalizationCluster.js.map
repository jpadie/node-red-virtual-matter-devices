{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/TimeFormatLocalizationCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { WritableAttribute, AccessLevel, FixedAttribute } from \"../Cluster.js\";\nimport { TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace TimeFormatLocalization {\n    /**\n     * These are optional features supported by TimeFormatLocalizationCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.4\n     */\n    export enum Feature {\n        /**\n         * CalendarFormat (CALFMT)\n         *\n         * The Node can be configured to use different calendar formats when conveying values to a user.\n         */\n        CalendarFormat = \"CalendarFormat\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.5.2\n     */\n    export enum CalendarType {\n        /**\n         * Dates conveyed using the Buddhist calendar\n         */\n        Buddhist = 0,\n\n        /**\n         * Dates conveyed using the Chinese calendar\n         */\n        Chinese = 1,\n\n        /**\n         * Dates conveyed using the Coptic calendar\n         */\n        Coptic = 2,\n\n        /**\n         * Dates conveyed using the Ethiopian calendar\n         */\n        Ethiopian = 3,\n\n        /**\n         * Dates conveyed using the Gregorian calendar\n         */\n        Gregorian = 4,\n\n        /**\n         * Dates conveyed using the Hebrew calendar\n         */\n        Hebrew = 5,\n\n        /**\n         * Dates conveyed using the Indian calendar\n         */\n        Indian = 6,\n\n        /**\n         * Dates conveyed using the Islamic calendar\n         */\n        Islamic = 7,\n\n        /**\n         * Dates conveyed using the Japanese calendar\n         */\n        Japanese = 8,\n\n        /**\n         * Dates conveyed using the Korean calendar\n         */\n        Korean = 9,\n\n        /**\n         * Dates conveyed using the Persian calendar\n         */\n        Persian = 10,\n\n        /**\n         * Dates conveyed using the Taiwanese calendar\n         */\n        Taiwanese = 11,\n\n        /**\n         * calendar implied from active locale\n         */\n        UseActiveLocale = 255\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.5.1\n     */\n    export enum HourFormat {\n        /**\n         * Time conveyed with a 12-hour clock\n         */\n        \"12Hr\" = 0,\n\n        /**\n         * Time conveyed with a 24-hour clock\n         */\n        \"24Hr\" = 1,\n\n        /**\n         * Use active locale clock\n         */\n        UseActiveLocale = 255\n    }\n\n    /**\n     * A TimeFormatLocalizationCluster supports these elements if it supports feature CalendarFormat.\n     */\n    export const CalendarFormatComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the calendar format that the Node is currently configured to use when conveying dates.\n             *\n             * If not UseActiveLocale, this value shall take priority over any unit implied through the ActiveLocale\n             * attribute.\n             *\n             * If UseActiveLocale, any unit implied through the ActiveLocale attribute is used as the calendar type,\n             * and if ActiveLocale is not present, the calendar type is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.6.2\n             */\n            activeCalendarType: WritableAttribute(\n                0x1,\n                TlvEnum<CalendarType>(),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * Indicates a list of CalendarTypeEnum values that are supported by the Node. The list shall NOT contain\n             * any duplicate entries. The ordering of items within the list SHOULD NOT express any meaning. The maximum\n             * length of the SupportedCalendarTypes list shall be equivalent to the number of enumerations within\n             * CalendarTypeEnum.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.6.3\n             */\n            supportedCalendarTypes: FixedAttribute(0x2, TlvArray(TlvEnum<CalendarType>()), { default: [] })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all TimeFormatLocalization clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x2c,\n        name: \"TimeFormatLocalization\",\n        revision: 1,\n\n        features: {\n            /**\n             * CalendarFormat\n             *\n             * The Node can be configured to use different calendar formats when conveying values to a user.\n             */\n            calendarFormat: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * Indicates the format that the Node is currently configured to use when conveying the hour unit of time.\n             *\n             * If not UseActiveLocale, this value shall take priority over any unit implied through the ActiveLocale\n             * attribute.\n             *\n             * If UseActiveLocale, any unit implied through the ActiveLocale attribute is used as the hour format, and\n             * if ActiveLocale is not present, the hour format is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.4.6.1\n             */\n            hourFormat: WritableAttribute(\n                0x0,\n                TlvEnum<HourFormat>(),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        },\n\n        /**\n         * This metadata controls which TimeFormatLocalizationCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { calendarFormat: true }, component: CalendarFormatComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * Nodes should be expected to be deployed to any and all regions of the world. These global regions may have\n     * differing preferences for how dates and times are conveyed. As such, Nodes that visually or audibly convey time\n     * information need a mechanism by which they can be configured to use a user\u2019s preferred format.\n     *\n     * This cluster supports an interface to a Node. It provides attributes for determining and configuring time and\n     * date formatting information that a Node shall utilize when conveying values to a user.\n     *\n     * TimeFormatLocalizationCluster supports optional features that you can enable with the\n     * TimeFormatLocalizationCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.4\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const CALFMT = { calendarFormat: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            activeCalendarType: MutableCluster.AsConditional(\n                CalendarFormatComponent.attributes.activeCalendarType,\n                { mandatoryIf: [CALFMT] }\n            ),\n            supportedCalendarTypes: MutableCluster.AsConditional(\n                CalendarFormatComponent.attributes.supportedCalendarTypes,\n                { mandatoryIf: [CALFMT] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all TimeFormatLocalization features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type TimeFormatLocalizationCluster = TimeFormatLocalization.Cluster;\nexport const TimeFormatLocalizationCluster = TimeFormatLocalization.Cluster;\nClusterRegistry.register(TimeFormatLocalization.Complete);\n"],
  "mappings": "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",
  "names": ["TimeFormatLocalization", "Feature", "CalendarType", "HourFormat"]
}
