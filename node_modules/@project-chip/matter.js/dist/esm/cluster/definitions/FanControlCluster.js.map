{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/FanControlCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, WritableAttribute, Attribute, Command, TlvNoResponse } from \"../Cluster.js\";\nimport { TlvUInt8, TlvBitmap, TlvEnum, TlvPercent } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace FanControl {\n    /**\n     * These are optional features supported by FanControlCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.4\n     */\n    export enum Feature {\n        /**\n         * MultiSpeed (SPD)\n         *\n         * Legacy Fan Control cluster revision 0-1 defined 3 speeds (low, medium and high) plus automatic speed control\n         * but left it up to the implementer to decide what was supported. Therefore, it is assumed that legacy client\n         * implementations are capable of determining, from the server, the number of speeds supported between 1, 2, or\n         * 3, and whether automatic speed control is supported.\n         *\n         * The MultiSpeed feature includes new attributes that support a running fan speed value from 0 to SpeedMax,\n         * which has a maximum of 100.\n         *\n         * See Speed Rules for more details.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.4.1\n         */\n        MultiSpeed = \"MultiSpeed\",\n\n        /**\n         * Auto (AUT)\n         *\n         * Automatic mode supported for fan speed\n         */\n        Auto = \"Auto\",\n\n        /**\n         * Rocking (RCK)\n         *\n         * Rocking movement supported\n         */\n        Rocking = \"Rocking\",\n\n        /**\n         * Wind (WND)\n         *\n         * Wind emulation supported\n         */\n        Wind = \"Wind\",\n\n        /**\n         * Step (STEP)\n         *\n         * Step command supported\n         */\n        Step = \"Step\",\n\n        /**\n         * AirflowDirection (DIR)\n         *\n         * Airflow Direction attribute is supported\n         */\n        AirflowDirection = \"AirflowDirection\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.1\n     */\n    export const Rock = {\n        /**\n         * Indicate rock left to right\n         */\n        rockLeftRight: BitFlag(0),\n\n        /**\n         * Indicate rock up and down\n         */\n        rockUpDown: BitFlag(1),\n\n        /**\n         * Indicate rock around\n         */\n        rockRound: BitFlag(2)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.2\n     */\n    export const Wind = {\n        /**\n         * Indicate sleep wind\n         */\n        sleepWind: BitFlag(0),\n\n        /**\n         * Indicate natural wind\n         */\n        naturalWind: BitFlag(1)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.4\n     */\n    export enum AirflowDirection {\n        /**\n         * Airflow is in the forward direction\n         */\n        Forward = 0,\n\n        /**\n         * Airflow is in the reverse direction\n         */\n        Reverse = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.3\n     */\n    export enum StepDirection {\n        /**\n         * Step moves in increasing direction\n         */\n        Increase = 0,\n\n        /**\n         * Step moves in decreasing direction\n         */\n        Decrease = 1\n    }\n\n    /**\n     * Input to the FanControl step command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1\n     */\n    export const TlvStepRequest = TlvObject({\n        /**\n         * This field shall indicate whether the fan speed increases or decreases to the next step value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1.1\n         */\n        direction: TlvField(0, TlvEnum<StepDirection>()),\n\n        /**\n         * This field shall indicate if the fan speed wraps between highest and lowest step value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1.2\n         */\n        wrap: TlvOptionalField(1, TlvBoolean),\n\n        /**\n         * This field shall indicate that the fan being off (speed value 0) is included as a step value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1.3\n         */\n        lowestOff: TlvOptionalField(2, TlvBoolean)\n    });\n\n    /**\n     * Input to the FanControl step command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1\n     */\n    export interface StepRequest extends TypeFromSchema<typeof TlvStepRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.5\n     */\n    export enum FanMode {\n        /**\n         * Fan is off\n         */\n        Off = 0,\n\n        /**\n         * Fan using low speed\n         *\n         * If the fan supports 2 or more speeds, the Low value shall be supported.\n         *\n         * The Low value shall be supported if and only if the FanModeSequence attribute value is less than 4.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.5.1\n         */\n        Low = 1,\n\n        /**\n         * Fan using medium speed\n         *\n         * If the fan supports 3 or more speeds, the Medium value shall be supported.\n         *\n         * The Medium value shall be supported if and only if the FanModeSequence attribute value is 0 or 2.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.5.2\n         */\n        Medium = 2,\n\n        /**\n         * Fan using high speed\n         */\n        High = 3,\n\n        On = 4,\n\n        /**\n         * Fan is using auto mode\n         */\n        Auto = 5,\n\n        /**\n         * Fan is using smart mode\n         */\n        Smart = 6\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.5.6\n     */\n    export enum FanModeSequence {\n        /**\n         * Fan is capable of off, low, medium and high modes\n         */\n        OffLowMedHigh = 0,\n\n        /**\n         * Fan is capable of off, low and high modes\n         */\n        OffLowHigh = 1,\n\n        /**\n         * Fan is capable of off, low, medium, high and auto modes\n         */\n        OffLowMedHighAuto = 2,\n\n        /**\n         * Fan is capable of off, low, high and auto modes\n         */\n        OffLowHighAuto = 3,\n\n        /**\n         * Fan is capable of off, high and auto modes\n         */\n        OffHighAuto = 4,\n\n        /**\n         * Fan is capable of off and high modes\n         */\n        OffHigh = 5\n    }\n\n    /**\n     * A FanControlCluster supports these elements if it supports feature MultiSpeed.\n     */\n    export const MultiSpeedComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates that the fan has one speed (value of 1) or the maximum speed, if the fan is capable of\n             * multiple speeds.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.5\n             */\n            speedMax: FixedAttribute(0x4, TlvUInt8.bound({ min: 1, max: 100 })),\n\n            /**\n             * Indicates the speed setting for the fan. This attribute may be written by the client to indicate a new\n             * fan speed. If the client writes null to this attribute, the attribute value shall NOT change. A server\n             * shall return INVALID_IN_STATE to indicate that the fan is not in a state where the SpeedSetting can be\n             * changed to the requested value.\n             *\n             * If this is successfully written to 0, the server shall set the FanMode attribute value to Off. Please\n             * see the Speed Rules for details on other values.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.6\n             */\n            speedSetting: WritableAttribute(0x5, TlvNullable(TlvUInt8), { default: 0 }),\n\n            /**\n             * Indicates the actual currently operating fan speed, or zero to indicate that the fan is off. There may\n             * be a temporary mismatch between the value of this attribute and the value of the SpeedSetting attribute\n             * due to other system requirements that would not allow the fan to operate at the requested setting.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.7\n             */\n            speedCurrent: Attribute(0x6, TlvUInt8)\n        }\n    });\n\n    /**\n     * A FanControlCluster supports these elements if it supports feature Rocking.\n     */\n    export const RockingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute is a bitmap that indicates what rocking motions the server supports.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.8\n             */\n            rockSupport: FixedAttribute(0x7, TlvBitmap(TlvUInt8, Rock)),\n\n            /**\n             * This attribute is a bitmap that indicates the current active fan rocking motion settings. Each bit shall\n             * only be set to 1, if the corresponding bit in the RockSupport attribute is set to 1, otherwise a status\n             * code of CONSTRAINT_ERROR shall be returned.\n             *\n             * If a combination of supported bits is set by the client, and the server does not support the\n             * combination, the lowest supported single bit in the combination shall be set and active, and all other\n             * bits shall indicate zero.\n             *\n             * For example: If RockUpDown and RockRound are both set, but this combination is not possible, then only\n             * RockUpDown becomes active.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.9\n             */\n            rockSetting: WritableAttribute(0x8, TlvBitmap(TlvUInt8, Rock))\n        }\n    });\n\n    /**\n     * A FanControlCluster supports these elements if it supports feature Wind.\n     */\n    export const WindComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute is a bitmap that indicates what wind modes the server supports. At least one wind mode\n             * bit shall be set.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.10\n             */\n            windSupport: FixedAttribute(0x9, TlvBitmap(TlvUInt8, Wind)),\n\n            /**\n             * This attribute is a bitmap that indicates the current active fan wind feature settings. Each bit shall\n             * only be set to 1, if the corresponding bit in the WindSupport attribute is set to 1, otherwise a status\n             * code of CONSTRAINT_ERROR shall be returned.\n             *\n             * If a combination of supported bits is set by the client, and the server does not support the\n             * combination, the lowest supported single bit in the combination shall be set and active, and all other\n             * bits shall indicate zero.\n             *\n             * For example: If Sleep Wind and Natural Wind are set, but this combination is not possible, then only\n             * Sleep Wind becomes active.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.11\n             */\n            windSetting: WritableAttribute(0xa, TlvBitmap(TlvUInt8, Wind))\n        }\n    });\n\n    /**\n     * A FanControlCluster supports these elements if it supports feature AirflowDirection.\n     */\n    export const AirflowDirectionComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the current airflow direction of the fan. This attribute may be written by the client to\n             * indicate a new airflow direction for the fan. This attribute shall be set to one of the values in the\n             * AirflowDirectionEnum table.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.12\n             */\n            airflowDirection: WritableAttribute(\n                0xb,\n                TlvEnum<AirflowDirection>(),\n                { default: AirflowDirection.Forward }\n            )\n        }\n    });\n\n    /**\n     * A FanControlCluster supports these elements if it supports feature Step.\n     */\n    export const StepComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * This command speeds up or slows down the fan, in steps, without the client having to know the fan speed.\n             * This command supports, for example, a user operated wall switch, where the user provides the feedback or\n             * control to stop sending this command when the proper speed is reached. The step speed values are\n             * implementation specific. How many step speeds are implemented is implementation specific.\n             *\n             * This command supports these fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.7.1\n             */\n            step: Command(0x0, TlvStepRequest, 0x0, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all FanControl clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x202,\n        name: \"FanControl\",\n        revision: 4,\n\n        features: {\n            /**\n             * MultiSpeed\n             *\n             * Legacy Fan Control cluster revision 0-1 defined 3 speeds (low, medium and high) plus automatic speed\n             * control but left it up to the implementer to decide what was supported. Therefore, it is assumed that\n             * legacy client implementations are capable of determining, from the server, the number of speeds\n             * supported between 1, 2, or 3, and whether automatic speed control is supported.\n             *\n             * The MultiSpeed feature includes new attributes that support a running fan speed value from 0 to\n             * SpeedMax, which has a maximum of 100.\n             *\n             * See Speed Rules for more details.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.4.1\n             */\n            multiSpeed: BitFlag(0),\n\n            /**\n             * Auto\n             *\n             * Automatic mode supported for fan speed\n             */\n            auto: BitFlag(1),\n\n            /**\n             * Rocking\n             *\n             * Rocking movement supported\n             */\n            rocking: BitFlag(2),\n\n            /**\n             * Wind\n             *\n             * Wind emulation supported\n             */\n            wind: BitFlag(3),\n\n            /**\n             * Step\n             *\n             * Step command supported\n             */\n            step: BitFlag(4),\n\n            /**\n             * AirflowDirection\n             *\n             * Airflow Direction attribute is supported\n             */\n            airflowDirection: BitFlag(5)\n        },\n\n        attributes: {\n            /**\n             * Indicates the current speed mode of the fan. This attribute may be written by the client to request a\n             * different fan mode. A server shall return INVALID_IN_STATE to indicate that the fan is not in a state\n             * where the FanMode can be changed to the requested value. A server may have FanMode values that it can\n             * never be set to. For example, where this cluster appears on the same or another endpoint as other\n             * clusters with a system dependency, for example the Thermostat cluster, attempting to set the FanMode\n             * attribute of this cluster to Off may not be allowed by the system.\n             *\n             * This attribute shall be set to one of the values in FanModeEnum.\n             *\n             * When the FanMode attribute is successfully written to, the PercentSetting and SpeedSetting (if present)\n             * attributes shall be set to appropriate values, as defined by the Percent Rules and Speed Rules\n             * respectively, unless otherwise specified below.\n             *\n             * When the FanMode attribute is set to any given mode, the PercentCurrent and SpeedCurrent (if present)\n             * shall indicate the actual currently operating fan speed, unless otherwise specified below.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.1\n             */\n            fanMode: WritableAttribute(0x0, TlvEnum<FanMode>(), { persistent: true, default: FanMode.Off }),\n\n            /**\n             * This attribute indicates the fan speed ranges that shall be supported.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.2\n             */\n            fanModeSequence: FixedAttribute(0x1, TlvEnum<FanModeSequence>()),\n\n            /**\n             * Indicates the speed setting for the fan. This attribute may be written by the client to indicate a new\n             * fan speed. If the client writes null to this attribute, the attribute value shall NOT change. A server\n             * shall return INVALID_IN_STATE to indicate that the fan is not in a state where the PercentSetting can be\n             * changed to the requested value.\n             *\n             * If this is successfully written to 0, the server shall set the FanMode attribute value to Off.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.3\n             */\n            percentSetting: WritableAttribute(0x2, TlvNullable(TlvPercent), { default: 0 }),\n\n            /**\n             * Indicates the actual currently operating fan speed, or zero to indicate that the fan is off. There may\n             * be a temporary mismatch between the value of this attribute and the value of the PercentSetting\n             * attribute due to other system requirements that would not allow the fan to operate at the requested\n             * setting. See Percent Rules for more details.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4.6.4\n             */\n            percentCurrent: Attribute(0x3, TlvPercent)\n        },\n\n        /**\n         * This metadata controls which FanControlCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { multiSpeed: true }, component: MultiSpeedComponent },\n            { flags: { rocking: true }, component: RockingComponent },\n            { flags: { wind: true }, component: WindComponent },\n            { flags: { airflowDirection: true }, component: AirflowDirectionComponent },\n            { flags: { step: true }, component: StepComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster specifies an interface to control the speed of a fan.\n     *\n     * FanControlCluster supports optional features that you can enable with the FanControlCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 4.4\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const SPD = { multiSpeed: true };\n    const RCK = { rocking: true };\n    const WND = { wind: true };\n    const DIR = { airflowDirection: true };\n    const STEP = { step: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            speedMax: MutableCluster.AsConditional(MultiSpeedComponent.attributes.speedMax, { mandatoryIf: [SPD] }),\n            speedSetting: MutableCluster.AsConditional(\n                MultiSpeedComponent.attributes.speedSetting,\n                { mandatoryIf: [SPD] }\n            ),\n            speedCurrent: MutableCluster.AsConditional(\n                MultiSpeedComponent.attributes.speedCurrent,\n                { mandatoryIf: [SPD] }\n            ),\n            rockSupport: MutableCluster.AsConditional(RockingComponent.attributes.rockSupport, { mandatoryIf: [RCK] }),\n            rockSetting: MutableCluster.AsConditional(RockingComponent.attributes.rockSetting, { mandatoryIf: [RCK] }),\n            windSupport: MutableCluster.AsConditional(WindComponent.attributes.windSupport, { mandatoryIf: [WND] }),\n            windSetting: MutableCluster.AsConditional(WindComponent.attributes.windSetting, { mandatoryIf: [WND] }),\n            airflowDirection: MutableCluster.AsConditional(\n                AirflowDirectionComponent.attributes.airflowDirection,\n                { mandatoryIf: [DIR] }\n            )\n        },\n\n        commands: { step: MutableCluster.AsConditional(StepComponent.commands.step, { mandatoryIf: [STEP] }) }\n    });\n\n    /**\n     * This cluster supports all FanControl features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type FanControlCluster = FanControl.Cluster;\nexport const FanControlCluster = FanControl.Cluster;\nClusterRegistry.register(FanControl.Complete);\n"],
  "mappings": "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",
  "names": ["FanControl", "Feature", "AirflowDirection", "StepDirection", "FanMode", "FanModeSequence"]
}
