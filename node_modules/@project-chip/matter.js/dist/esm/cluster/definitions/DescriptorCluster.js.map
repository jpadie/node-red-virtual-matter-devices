{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/DescriptorCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, Attribute } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvSemtag } from \"../globals/Semtag.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvDeviceTypeId } from \"../../datatype/DeviceTypeId.js\";\nimport { TlvUInt16 } from \"../../tlv/TlvNumber.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvClusterId } from \"../../datatype/ClusterId.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Descriptor {\n    /**\n     * These are optional features supported by DescriptorCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.4\n     */\n    export enum Feature {\n        /**\n         * TagList (TAGLIST)\n         *\n         * See the Disambiguation section in the System Model spec for conformance requirements for this feature and\n         * the corresponding attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.4.1\n         */\n        TagList = \"TagList\"\n    }\n\n    /**\n     * The device type and revision define endpoint conformance to a release of a device type definition. See the Data\n     * Model specification for more information.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.5.1\n     */\n    export const TlvDeviceType = TlvObject({\n        /**\n         * This shall indicate the device type definition. The endpoint shall conform to the device type definition and\n         * cluster specifications required by the device type.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.5.1.1\n         */\n        deviceType: TlvField(0, TlvDeviceTypeId),\n\n        /**\n         * This is the implemented revision of the device type definition. The endpoint shall conform to this revision\n         * of the device type.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.5.1.2\n         */\n        revision: TlvField(1, TlvUInt16.bound({ min: 1 }))\n    });\n\n    /**\n     * The device type and revision define endpoint conformance to a release of a device type definition. See the Data\n     * Model specification for more information.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.5.1\n     */\n    export interface DeviceType extends TypeFromSchema<typeof TlvDeviceType> {}\n\n    /**\n     * A DescriptorCluster supports these elements if it supports feature TagList.\n     */\n    export const TagListComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall be used to disambiguate sibling endpoints in certain situations, as defined in the\n             * Disambiguation section in the System Model specification. An example of such a situation might be a\n             * device with two buttons, with this attribute being used to indicate which of the two endpoints\n             * corresponds to the button on the left side.\n             *\n             * It may also be used to provide information about an endpoint (e.g. the relative location of a\n             * Temperature sensor in a Temperature Controlled Cabinet).\n             *\n             *   \u2022 A client SHOULD use these tags to convey disambiguation information and other relevant information\n             *     to the user (e.g. showing it in a user interface), as appropriate.\n             *\n             *   \u2022 A client SHOULD use these tags in its logic to make decisions, as appropriate.\n             *\n             * For example, a client may identify which endpoint maps to a certain function, orientation or labeling.\n             *\n             * A client may use the Label field of each SemanticTagStruct, if present in each structure, to indicate\n             * characteristics of an endpoint, or to augment what is provided in the TagID field of the same structure.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.6.5\n             */\n            tagList: FixedAttribute(0x4, TlvArray(TlvSemtag, { minLength: 1, maxLength: 6 }))\n        }\n    });\n\n    /**\n     * These elements and properties are present in all Descriptor clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x1d,\n        name: \"Descriptor\",\n        revision: 2,\n\n        features: {\n            /**\n             * TagList\n             *\n             * See the Disambiguation section in the System Model spec for conformance requirements for this feature\n             * and the corresponding attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.4.1\n             */\n            tagList: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * This is a list of device types and corresponding revisions declaring endpoint conformance (see\n             * DeviceTypeStruct). At least one device type entry shall be present.\n             *\n             * An endpoint shall conform to all device types listed in the DeviceTypeList. A cluster instance that is\n             * in common for more than one device type in the DeviceTypeList shall be supported as a shared cluster\n             * instance on the endpoint.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.6.1\n             */\n            deviceTypeList: FixedAttribute(0x0, TlvArray(TlvDeviceType, { minLength: 1 })),\n\n            /**\n             * This attribute shall list each cluster ID for the server clusters present on the endpoint instance.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.6.2\n             */\n            serverList: FixedAttribute(0x1, TlvArray(TlvClusterId), { default: [] }),\n\n            /**\n             * This attribute shall list each cluster ID for the client clusters present on the endpoint instance.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.6.3\n             */\n            clientList: FixedAttribute(0x2, TlvArray(TlvClusterId), { default: [] }),\n\n            /**\n             * This attribute indicates composition of the device type instance. Device type instance composition shall\n             * include the endpoints in this list.\n             *\n             * See Endpoint Composition for more information about which endpoints to include in this list.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.5.6.4\n             */\n            partsList: Attribute(0x3, TlvArray(TlvEndpointNumber), { default: [] })\n        },\n\n        /**\n         * This metadata controls which DescriptorCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { tagList: true }, component: TagListComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * NOTE\n     *\n     * The Descriptor cluster is meant to replace the support from the Zigbee Device Object (ZDO) for describing a\n     * node, its endpoints and clusters.\n     *\n     * This cluster describes an endpoint instance on the node, independently from other endpoints, but also allows\n     * composition of endpoints to conform to complex device type patterns.\n     *\n     * This cluster supports a list of one or more device type identifiers that represent conformance to device type\n     * specifications.\n     *\n     * The cluster supports a PartsList attribute that is a list of zero or more endpoints to support a composed device\n     * type.\n     *\n     * DescriptorCluster supports optional features that you can enable with the DescriptorCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.5\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const TAGLIST = { tagList: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n        attributes: {\n            ...Cluster.attributes,\n            tagList: MutableCluster.AsConditional(TagListComponent.attributes.tagList, { mandatoryIf: [TAGLIST] })\n        }\n    });\n\n    /**\n     * This cluster supports all Descriptor features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type DescriptorCluster = Descriptor.Cluster;\nexport const DescriptorCluster = Descriptor.Cluster;\nClusterRegistry.register(Descriptor.Complete);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB,iBAAiB;AAC1C,SAAS,gBAAgB;AACzB,SAAS,iBAAiB;AAC1B,SAAS,eAAe;AACxB,SAAS,UAAU,iBAAiB;AACpC,SAAS,uBAAuB;AAChC,SAAS,iBAAiB;AAE1B,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAElC,SAAS,uBAAuB;AAEzB,IAAU;AAAA,CAAV,CAAUA,gBAAV;AAMI,MAAK;AAAL,IAAKC,aAAL;AASH,IAAAA,SAAA,aAAU;AAAA,KATF,UAAAD,YAAA,YAAAA,YAAA;AAkBL,EAAMA,YAAA,gBAAgB,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOnC,YAAY,SAAS,GAAG,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQvC,UAAU,SAAS,GAAG,UAAU,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;AAAA,EACrD,CAAC;AAaM,EAAMA,YAAA,mBAAmB,eAAe,UAAU;AAAA,IACrD,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBR,SAAS,eAAe,GAAK,SAAS,WAAW,EAAE,WAAW,GAAG,WAAW,EAAE,CAAC,CAAC;AAAA,IACpF;AAAA,EACJ,CAAC;AAKM,EAAMA,YAAA,OAAO,eAAe,UAAU;AAAA,IACzC,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASN,SAAS,QAAQ,CAAC;AAAA,IACtB;AAAA,IAEA,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWR,gBAAgB,eAAe,GAAK,SAASA,YAAA,eAAe,EAAE,WAAW,EAAE,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAO7E,YAAY,eAAe,GAAK,SAAS,YAAY,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOvE,YAAY,eAAe,GAAK,SAAS,YAAY,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUvE,WAAW,UAAU,GAAK,SAAS,iBAAiB,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC;AAAA,IAC1E;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY,eAAe,WAAW,EAAE,OAAO,EAAE,SAAS,KAAK,GAAG,WAAWA,YAAA,iBAAiB,CAAC;AAAA,EACnG,CAAC;AAKM,EAAMA,YAAA,kBAAkB,eAAeA,YAAA,IAAI;AAwB3C,EAAMA,YAAA,UAAmBA,YAAA;AAChC,QAAM,UAAU,EAAE,SAAS,KAAK;AAKzB,EAAMA,YAAA,mBAAmB,eAAe;AAAA,IAC3C,IAAIA,YAAA,QAAQ;AAAA,IACZ,MAAMA,YAAA,QAAQ;AAAA,IACd,UAAUA,YAAA,QAAQ;AAAA,IAClB,UAAUA,YAAA,QAAQ;AAAA,IAClB,YAAY;AAAA,MACR,GAAGA,YAAA,QAAQ;AAAA,MACX,SAAS,eAAe,cAAcA,YAAA,iBAAiB,WAAW,SAAS,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC;AAAA,IACzG;AAAA,EACJ,CAAC;AAUM,EAAMA,YAAA,WAAqBA,YAAA;AAAA,GArMrB;AAyMV,MAAM,oBAAoB,WAAW;AAC5C,gBAAgB,SAAS,WAAW,QAAQ;",
  "names": ["Descriptor", "Feature"]
}
