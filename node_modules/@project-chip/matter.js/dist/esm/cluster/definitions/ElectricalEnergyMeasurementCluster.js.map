{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ElectricalEnergyMeasurementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, Event, EventPriority, FixedAttribute } from \"../Cluster.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvInt64, TlvEpochS, TlvSysTimeMS } from \"../../tlv/TlvNumber.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvMeasurementAccuracy } from \"../globals/MeasurementAccuracy.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ElectricalEnergyMeasurement {\n    /**\n     * These are optional features supported by ElectricalEnergyMeasurementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4\n     */\n    export enum Feature {\n        /**\n         * ImportedEnergy (IMPE)\n         *\n         * The feature indicates the server is capable of measuring how much energy is imported by the server.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.1\n         */\n        ImportedEnergy = \"ImportedEnergy\",\n\n        /**\n         * ExportedEnergy (EXPE)\n         *\n         * The feature indicates the server is capable of measuring how much energy is exported by the server.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.2\n         */\n        ExportedEnergy = \"ExportedEnergy\",\n\n        /**\n         * CumulativeEnergy (CUME)\n         *\n         * The feature indicates the server is capable of measuring how much energy has been imported or exported by\n         * the server over the device\u2019s lifetime. This measurement may start from when a device\u2019s firmware is updated\n         * to include this feature, when a device\u2019s firmware is updated to correct measurement errors, or when a device\n         * is factory reset.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.3\n         */\n        CumulativeEnergy = \"CumulativeEnergy\",\n\n        /**\n         * PeriodicEnergy (PERE)\n         *\n         * The feature indicates the server is capable of measuring how much energy has been imported or exported by\n         * the server during a certain period of time. The start and end times for measurement periods shall be\n         * determined by the server, and may represent overlapping periods.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.4\n         */\n        PeriodicEnergy = \"PeriodicEnergy\"\n    }\n\n    /**\n     * This struct shall indicate the amount of energy measured during a given measurement period.\n     *\n     * A server which does not have the ability to determine the time in UTC, or has not yet done so, shall use the\n     * system time fields to specify the measurement period and observation times.\n     *\n     * A server which has determined the time in UTC shall use the timestamp fields to specify the measurement period.\n     * Such a server may also include the systime fields to indicate how many seconds had passed since boot for a given\n     * timestamp; this allows for client-side resolution of UTC time for previous reports that only included systime.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1\n     */\n    export const TlvEnergyMeasurement = TlvObject({\n        /**\n         * This field shall be the reported energy.\n         *\n         * If the EnergyMeasurementStruct represents cumulative energy, then this shall represent the cumulative energy\n         * recorded at either the value of the EndTimestamp field or the value of the EndSystime field, or both.\n         *\n         * If the EnergyMeasurementStruct represents periodic energy, then this shall represent the energy recorded\n         * during the period specified by either the StartTimestamp and EndTimestamp fields, the period specified by\n         * the StartSystime and EndSystime fields, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1.1\n         */\n        energy: TlvField(0, TlvInt64.bound({ min: 0 })),\n\n        /**\n         * This field shall indicate the timestamp in UTC of the beginning of the period during which the value of the\n         * Energy field was measured.\n         *\n         * If this EnergyMeasurementStruct represents cumulative energy, this field shall be omitted.\n         *\n         * Otherwise, if the server had determined the time in UTC at or before the beginning of the measurement\n         * period, this field shall be indicated.\n         *\n         * Otherwise, if the server had not yet determined the time in UTC at or before the beginning of the\n         * measurement period, or does not have the capability of determining the time in UTC, this field shall be\n         * omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1.2\n         */\n        startTimestamp: TlvOptionalField(1, TlvEpochS),\n\n        /**\n         * This field shall indicate the timestamp in UTC of the end of the period during which the value of the Energy\n         * field was measured.\n         *\n         * If the server had determined the time in UTC by the end of the measurement period, this field shall be\n         * indicated.\n         *\n         * Otherwise, if the server had not yet determined the time in UTC by the end of the measurement period, or\n         * does not have the capability of determining the time in UTC, this field shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1.3\n         */\n        endTimestamp: TlvOptionalField(2, TlvEpochS),\n\n        /**\n         * This field shall indicate the seconds since boot at the beginning of the period during which the value of\n         * the Energy field was measured.\n         *\n         * If this EnergyMeasurementStruct represents cumulative energy, this field shall be omitted.\n         *\n         * Otherwise, if the server had not yet determined the time in UTC at the start of the measurement period, or\n         * does not have the capability of determining the time in UTC, this field shall be indicated.\n         *\n         * Otherwise, if the server had determined the time in UTC at or before the beginning of the measurement\n         * period, this field may be omitted; if it is indicated, its value shall be the seconds since boot at the UTC\n         * time indicated in StartTimestamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1.4\n         */\n        startSystime: TlvOptionalField(3, TlvSysTimeMS),\n\n        /**\n         * This field shall indicate the seconds since boot at the end of the period during which the value of the\n         * Energy field was measured.\n         *\n         * If the server had not yet determined the time in UTC by the end of the measurement period, or does not have\n         * the capability of determining the time in UTC, this field shall be indicated.\n         *\n         * Otherwise, if the server had determined the time in UTC by the end of the measurement period, this field may\n         * be omitted; if it is indicated, its value shall be the seconds since boot at the UTC time indicated in\n         * EndTimestamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1.5\n         */\n        endSystime: TlvOptionalField(4, TlvSysTimeMS)\n    });\n\n    /**\n     * This struct shall indicate the amount of energy measured during a given measurement period.\n     *\n     * A server which does not have the ability to determine the time in UTC, or has not yet done so, shall use the\n     * system time fields to specify the measurement period and observation times.\n     *\n     * A server which has determined the time in UTC shall use the timestamp fields to specify the measurement period.\n     * Such a server may also include the systime fields to indicate how many seconds had passed since boot for a given\n     * timestamp; this allows for client-side resolution of UTC time for previous reports that only included systime.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.1\n     */\n    export interface EnergyMeasurement extends TypeFromSchema<typeof TlvEnergyMeasurement> {}\n\n    /**\n     * This struct shall represent the times at which cumulative measurements were last zero, either due to\n     * initialization of the device, or an internal reset of the cumulative value.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2\n     */\n    export const TlvCumulativeEnergyReset = TlvObject({\n        /**\n         * This field shall indicate the timestamp in UTC when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero.\n         *\n         * If the server had determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero, this field shall be indicated.\n         *\n         * Otherwise, if the server had not yet determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero, or does not have the capability of determining\n         * the time in UTC, this field shall be omitted.\n         *\n         * If the timestamp in UTC when the value of the Energy field on the CumulativeEnergyImported attribute was\n         * most recently zero cannot currently be determined, a value of null shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2.1\n         */\n        importedResetTimestamp: TlvOptionalField(0, TlvNullable(TlvEpochS)),\n\n        /**\n         * This field shall indicate the timestamp in UTC when the value of the Energy field on the\n         * CumulativeEnergyExported attribute was most recently zero.\n         *\n         * If the server had determined the time in UTC when the value of the Energy field on the Cumula\n         *\n         * tiveEnergyExported attribute was most recently zero, this field shall be indicated.\n         *\n         * Otherwise, if the server had not yet determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyExported attribute was most recently zero, or does not have the capability of determining\n         * the time in UTC, this field shall be omitted.\n         *\n         * If the timestamp in UTC when the value of the Energy field on the CumulativeEnergyExported attribute was\n         * most recently zero cannot currently be determined, a value of null shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2.2\n         */\n        exportedResetTimestamp: TlvOptionalField(1, TlvNullable(TlvEpochS)),\n\n        /**\n         * This field shall indicate the seconds since boot when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero.\n         *\n         * If the server had not yet determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero, or does not have the capability of determining\n         * the time in UTC, this field shall be indicated.\n         *\n         * Otherwise, if the server had determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyImported attribute was most recently zero, this field may be omitted; if it is indicated,\n         * its value shall be the seconds since boot at the UTC time indicated in ImportedResetTimestamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2.3\n         */\n        importedResetSystime: TlvOptionalField(2, TlvNullable(TlvSysTimeMS)),\n\n        /**\n         * This field shall indicate the seconds since boot when the value of the Energy field on the\n         * CumulativeEnergyExported attribute was most recently zero.\n         *\n         * If the server had not yet determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyExported attribute was most recently zero, or does not have the capability of determining\n         * the time in UTC, this field shall be indicated.\n         *\n         * Otherwise, if the server had determined the time in UTC when the value of the Energy field on the\n         * CumulativeEnergyExported attribute was most recently zero, this field may be omitted; if it is indicated,\n         * its value shall be the seconds since boot at the UTC time indicated in ImportedResetTimestamp.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2.4\n         */\n        exportedResetSystime: TlvOptionalField(3, TlvNullable(TlvSysTimeMS))\n    });\n\n    /**\n     * This struct shall represent the times at which cumulative measurements were last zero, either due to\n     * initialization of the device, or an internal reset of the cumulative value.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.5.2\n     */\n    export interface CumulativeEnergyReset extends TypeFromSchema<typeof TlvCumulativeEnergyReset> {}\n\n    /**\n     * Body of the ElectricalEnergyMeasurement cumulativeEnergyMeasured event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.1\n     */\n    export const TlvCumulativeEnergyMeasuredEvent = TlvObject({\n        /**\n         * This field shall be the value of CumulativeEnergyImported attribute at the timestamp indicated in its\n         * EndTimestamp field, EndSystime field, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.1.1\n         */\n        energyImported: TlvOptionalField(0, TlvEnergyMeasurement),\n\n        /**\n         * This field shall be the value of CumulativeEnergyExported attribute at the timestamp indicated in its\n         * EndTimestamp field, EndSystime field, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.1.2\n         */\n        energyExported: TlvOptionalField(1, TlvEnergyMeasurement)\n    });\n\n    /**\n     * Body of the ElectricalEnergyMeasurement cumulativeEnergyMeasured event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.1\n     */\n    export interface CumulativeEnergyMeasuredEvent extends TypeFromSchema<typeof TlvCumulativeEnergyMeasuredEvent> {}\n\n    /**\n     * Body of the ElectricalEnergyMeasurement periodicEnergyMeasured event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.2\n     */\n    export const TlvPeriodicEnergyMeasuredEvent = TlvObject({\n        /**\n         * This field shall be the value of PeriodicEnergyImported attribute at the timestamp indicated in its\n         * EndTimestamp field, EndSystime field, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.2.1\n         */\n        energyImported: TlvOptionalField(0, TlvEnergyMeasurement),\n\n        /**\n         * This field shall be the value of PeriodicEnergyExported attribute at the timestamp indicated in its\n         * EndTimestamp field, EndSystime field, or both.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.2.2\n         */\n        energyExported: TlvOptionalField(1, TlvEnergyMeasurement)\n    });\n\n    /**\n     * Body of the ElectricalEnergyMeasurement periodicEnergyMeasured event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.2\n     */\n    export interface PeriodicEnergyMeasuredEvent extends TypeFromSchema<typeof TlvPeriodicEnergyMeasuredEvent> {}\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports features ImportedEnergy and\n     * CumulativeEnergy.\n     */\n    export const ImportedEnergyAndCumulativeEnergyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the most recent measurement of cumulative energy imported by the server over the lifetime of\n             * the device, and the timestamp of when the measurement was recorded.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the cumulative energy imported cannot currently be determined, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.2\n             */\n            cumulativeEnergyImported: Attribute(0x1, TlvNullable(TlvEnergyMeasurement), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports features ExportedEnergy and\n     * CumulativeEnergy.\n     */\n    export const ExportedEnergyAndCumulativeEnergyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the most recent measurement of cumulative energy exported by the server over the lifetime of\n             * the device, and the timestamp of when the measurement was recorded.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the cumulative energy exported cannot currently be determined, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.3\n             */\n            cumulativeEnergyExported: Attribute(0x2, TlvNullable(TlvEnergyMeasurement), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports features ImportedEnergy and\n     * PeriodicEnergy.\n     */\n    export const ImportedEnergyAndPeriodicEnergyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the most recent measurement of energy imported by the server and the period during which it\n             * was measured.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the periodic energy imported cannot currently be determined, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.4\n             */\n            periodicEnergyImported: Attribute(0x3, TlvNullable(TlvEnergyMeasurement), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports features ExportedEnergy and\n     * PeriodicEnergy.\n     */\n    export const ExportedEnergyAndPeriodicEnergyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the most recent measurement of energy exported by the server and the period during which it\n             * was measured.\n             *\n             * The reporting interval of this attribute shall be manufacturer dependent. The server may choose to omit\n             * publication of deltas considered not meaningful.\n             *\n             * The server shall NOT mark this attribute ready for report if the last time this was done was more\n             * recently than 1 second ago.\n             *\n             * The server may delay marking this attribute ready for report for longer periods if needed, however the\n             * server shall NOT delay marking this attribute as ready for report for longer than 60 seconds.\n             *\n             * If the periodic energy exported cannot currently be determined, a value of null shall be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.5\n             */\n            periodicEnergyExported: Attribute(0x4, TlvNullable(TlvEnergyMeasurement), { default: null })\n        }\n    });\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports feature CumulativeEnergy.\n     */\n    export const CumulativeEnergyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates when cumulative measurements were most recently zero.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.6\n             */\n            cumulativeEnergyReset: OptionalAttribute(0x5, TlvNullable(TlvCumulativeEnergyReset), { default: null })\n        },\n\n        events: {\n            /**\n             * This event shall be generated when the server takes a snapshot of the cumulative energy imported by the\n             * server, exported from the server, or both, but not more frequently than the rate mentioned in the\n             * description above of the related attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.1\n             */\n            cumulativeEnergyMeasured: Event(0x0, EventPriority.Info, TlvCumulativeEnergyMeasuredEvent)\n        }\n    });\n\n    /**\n     * A ElectricalEnergyMeasurementCluster supports these elements if it supports feature PeriodicEnergy.\n     */\n    export const PeriodicEnergyComponent = MutableCluster.Component({\n        events: {\n            /**\n             * This event shall be generated when the server reaches the end of a reporting period for imported energy,\n             * exported energy, or both.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.7.2\n             */\n            periodicEnergyMeasured: Event(0x1, EventPriority.Info, TlvPeriodicEnergyMeasuredEvent)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all ElectricalEnergyMeasurement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x91,\n        name: \"ElectricalEnergyMeasurement\",\n        revision: 1,\n\n        features: {\n            /**\n             * ImportedEnergy\n             *\n             * The feature indicates the server is capable of measuring how much energy is imported by the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.1\n             */\n            importedEnergy: BitFlag(0),\n\n            /**\n             * ExportedEnergy\n             *\n             * The feature indicates the server is capable of measuring how much energy is exported by the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.2\n             */\n            exportedEnergy: BitFlag(1),\n\n            /**\n             * CumulativeEnergy\n             *\n             * The feature indicates the server is capable of measuring how much energy has been imported or exported\n             * by the server over the device\u2019s lifetime. This measurement may start from when a device\u2019s firmware is\n             * updated to include this feature, when a device\u2019s firmware is updated to correct measurement errors, or\n             * when a device is factory reset.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.3\n             */\n            cumulativeEnergy: BitFlag(2),\n\n            /**\n             * PeriodicEnergy\n             *\n             * The feature indicates the server is capable of measuring how much energy has been imported or exported\n             * by the server during a certain period of time. The start and end times for measurement periods shall be\n             * determined by the server, and may represent overlapping periods.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.4.4\n             */\n            periodicEnergy: BitFlag(3)\n        },\n\n        attributes: {\n            /**\n             * Indicates the accuracy of energy measurement by this server. The value of the MeasurementType field on\n             * this MeasurementAccuracyStruct shall be ElectricalEnergy.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12.6.1\n             */\n            accuracy: FixedAttribute(0x0, TlvMeasurementAccuracy)\n        },\n\n        /**\n         * This metadata controls which ElectricalEnergyMeasurementCluster elements matter.js activates for specific\n         * feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            {\n                flags: { importedEnergy: true, cumulativeEnergy: true },\n                component: ImportedEnergyAndCumulativeEnergyComponent\n            },\n            {\n                flags: { exportedEnergy: true, cumulativeEnergy: true },\n                component: ExportedEnergyAndCumulativeEnergyComponent\n            },\n            {\n                flags: { importedEnergy: true, periodicEnergy: true },\n                component: ImportedEnergyAndPeriodicEnergyComponent\n            },\n            {\n                flags: { exportedEnergy: true, periodicEnergy: true },\n                component: ExportedEnergyAndPeriodicEnergyComponent\n            },\n            { flags: { cumulativeEnergy: true }, component: CumulativeEnergyComponent },\n            { flags: { periodicEnergy: true }, component: PeriodicEnergyComponent },\n            { flags: { importedEnergy: false, exportedEnergy: false }, component: false },\n            { flags: { cumulativeEnergy: false, periodicEnergy: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides a mechanism for querying data about the electrical energy imported or provided by the\n     * server.\n     *\n     * Per the Matter specification you cannot use {@link ElectricalEnergyMeasurementCluster} without enabling certain\n     * feature combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.12\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const IMPE_CUME = { importedEnergy: true, cumulativeEnergy: true };\n    const EXPE_CUME = { exportedEnergy: true, cumulativeEnergy: true };\n    const IMPE_PERE = { importedEnergy: true, periodicEnergy: true };\n    const EXPE_PERE = { exportedEnergy: true, periodicEnergy: true };\n    const CUME = { cumulativeEnergy: true };\n    const PERE = { periodicEnergy: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            cumulativeEnergyImported: MutableCluster.AsConditional(\n                ImportedEnergyAndCumulativeEnergyComponent.attributes.cumulativeEnergyImported,\n                { mandatoryIf: [IMPE_CUME] }\n            ),\n            cumulativeEnergyExported: MutableCluster.AsConditional(\n                ExportedEnergyAndCumulativeEnergyComponent.attributes.cumulativeEnergyExported,\n                { mandatoryIf: [EXPE_CUME] }\n            ),\n            periodicEnergyImported: MutableCluster.AsConditional(\n                ImportedEnergyAndPeriodicEnergyComponent.attributes.periodicEnergyImported,\n                { mandatoryIf: [IMPE_PERE] }\n            ),\n            periodicEnergyExported: MutableCluster.AsConditional(\n                ExportedEnergyAndPeriodicEnergyComponent.attributes.periodicEnergyExported,\n                { mandatoryIf: [EXPE_PERE] }\n            ),\n            cumulativeEnergyReset: MutableCluster.AsConditional(\n                CumulativeEnergyComponent.attributes.cumulativeEnergyReset,\n                { optionalIf: [CUME] }\n            )\n        },\n\n        events: {\n            cumulativeEnergyMeasured: MutableCluster.AsConditional(\n                CumulativeEnergyComponent.events.cumulativeEnergyMeasured,\n                { mandatoryIf: [CUME] }\n            ),\n            periodicEnergyMeasured: MutableCluster.AsConditional(\n                PeriodicEnergyComponent.events.periodicEnergyMeasured,\n                { mandatoryIf: [PERE] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all ElectricalEnergyMeasurement features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ElectricalEnergyMeasurementCluster = ElectricalEnergyMeasurement.Cluster;\nexport const ElectricalEnergyMeasurementCluster = ElectricalEnergyMeasurement.Cluster;\nClusterRegistry.register(ElectricalEnergyMeasurement.Complete);\n"],
  "mappings": "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",
  "names": ["ElectricalEnergyMeasurement", "Feature"]
}
