{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/RvcOperationalStateCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, OptionalCommand, Event, EventPriority, OptionalEvent } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvUInt8, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { OperationalState as OperationalStateNamespace } from \"./OperationalStateCluster.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace RvcOperationalState {\n    /**\n     * The values defined herein are applicable to this derived cluster of Operational State only and are additional to\n     * the set of values defined in Operational State itself.\n     *\n     * RVC Pause Compatibility defines the compatibility of the states this cluster defines with the Pause command.\n     *\n     * ### Table 39. RVC Pause Compatibility\n     *\n     * RVC Resume Compatibility defines the compatibility of the states this cluster defines with the Resume command.\n     *\n     * ### Table 40. RVC Resume Compatibility\n     *\n     * While in the Charging or Docked states, the device shall NOT attempt to resume unless it transitioned to those\n     * states while operating and can resume, such as, for example, if it is recharging while in a cleaning cycle.\n     * Else, if the operational state is Charging or Docked but there\u2019s no operation to resume or the operation can\u2019t\n     * be resumed, the device shall respond with an OperationalCommandResponse command with an ErrorStateID of\n     * CommandInvalidInState but take no further action.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 7.4.4.1\n     */\n    export enum OperationalState {\n        /**\n         * The device is en route to the charging dock\n         */\n        SeekingCharger = 64,\n\n        /**\n         * The device is charging\n         */\n        Charging = 65,\n\n        /**\n         * The device is on the dock, not charging\n         */\n        Docked = 66\n    }\n\n    /**\n     * The values defined herein are applicable to this derived cluster of Operational State only and are additional to\n     * the set of values defined in Operational State itself.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 7.4.4.2\n     */\n    export enum ErrorState {\n        /**\n         * The device has failed to find or reach the charging dock\n         */\n        FailedToFindChargingDock = 64,\n\n        /**\n         * The device is stuck and requires manual intervention\n         */\n        Stuck = 65,\n\n        /**\n         * The device has detected that its dust bin is missing\n         */\n        DustBinMissing = 66,\n\n        /**\n         * The device has detected that its dust bin is full\n         */\n        DustBinFull = 67,\n\n        /**\n         * The device has detected that its water tank is empty\n         */\n        WaterTankEmpty = 68,\n\n        /**\n         * The device has detected that its water tank is missing\n         */\n        WaterTankMissing = 69,\n\n        /**\n         * The device has detected that its water tank lid is open\n         */\n        WaterTankLidOpen = 70,\n\n        /**\n         * The device has detected that its cleaning pad is missing\n         */\n        MopCleaningPadMissing = 71\n    }\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x61,\n        name: \"RvcOperationalState\",\n        revision: 2,\n\n        attributes: {\n            /**\n             * Indicates a list of names of different phases that the device can go through for the selected function\n             * or mode. The list may not be in sequence order. For example in a washing machine this could include\n             * items such as \"pre-soak\", \"rinse\", and \"spin\". These phases are manufacturer specific and may change\n             * when a different function or mode is selected.\n             *\n             * A null value indicates that the device does not present phases during its operation. When this\n             * attribute\u2019s value is null, the CurrentPhase attribute shall also be set to null.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.1\n             */\n            phaseList: Attribute(0x0, TlvNullable(TlvArray(TlvString, { maxLength: 32 }))),\n\n            /**\n             * This attribute represents the current phase of operation being performed by the server. This shall be\n             * the positional index representing the value from the set provided in the PhaseList Attribute, where the\n             * first item in that list is an index of 0. Thus, this attribute shall have a maximum value that is\n             * \"length(PhaseList) - 1\".\n             *\n             * Null if the PhaseList attribute is null or if the PhaseList attribute is an empty list.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.2\n             */\n            currentPhase: Attribute(0x1, TlvNullable(TlvUInt8)),\n\n            /**\n             * Indicates the estimated time left before the operation is completed, in seconds. Changes to this value\n             * shall NOT be reported in a subscription (note the C Quality). A Client implementation may periodically\n             * poll this value to ensure alignment of any local rendering of the CountdownTime with the device provided\n             * value.\n             *\n             * A value of 0 means that the operation has completed.\n             *\n             * When this attribute is null, that represents that there is no time currently defined until operation\n             * completion. This may happen, for example, because no operation is in progress or because the completion\n             * time is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.3\n             */\n            countdownTime: OptionalAttribute(\n                0x2,\n                TlvNullable(TlvUInt32.bound({ max: 259200 })),\n                { omitChanges: true, default: null }\n            ),\n\n            /**\n             * This attribute describes the set of possible operational states that the device exposes. An operational\n             * state is a fundamental device state such as Running or Error. Details of the phase of a device when, for\n             * example, in a state of Running are provided by the CurrentPhase attribute.\n             *\n             * All devices shall, at a minimum, expose the set of states matching the commands that are also supported\n             * by the cluster instance, in addition to Error. The set of possible device states are defined in the\n             * OperationalStateEnum. A device type requiring implementation of this cluster shall define the set of\n             * states that are applicable to that specific device type.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.4\n             */\n            operationalStateList: Attribute(\n                0x3,\n                TlvArray(OperationalStateNamespace.TlvOperationalStateStruct),\n                { default: [] }\n            ),\n\n            /**\n             * This attribute specifies the current operational state of a device. This shall be populated with a valid\n             * OperationalStateID from the set of values in the OperationalStateList Attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.5\n             */\n            operationalState: Attribute(0x4, TlvUInt8),\n\n            /**\n             * This attribute shall specify the details of any current error condition being experienced on the device\n             * when the OperationalState attribute is populated with Error. Please see ErrorStateStruct for general\n             * requirements on the population of this attribute.\n             *\n             * When there is no error detected, this shall have an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.6\n             */\n            operationalError: Attribute(0x5, OperationalStateNamespace.TlvErrorState)\n        },\n\n        commands: {\n            /**\n             * On receipt of this command, the device shall start seeking the charging dock, if possible in the current\n             * state of the device.\n             *\n             * If this command is received when already in the SeekingCharger state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but the command shall have no other\n             * effect.\n             *\n             * A device that receives this command in any state which does not allow seeking the charger, such as\n             * Charging or Docked, shall respond with an OperationalCommandResponse command with an ErrorStateID of\n             * CommandInvalidInState and shall have no other effect.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to SeekingCharger.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 7.4.5.1\n             */\n            goHome: OptionalCommand(0x80, TlvNoArguments, 0x4, OperationalStateNamespace.TlvOperationalCommandResponse)\n        },\n\n        events: {\n            /**\n             * This event is generated when a reportable error condition is detected. A device that generates this\n             * event shall also set the OperationalState attribute to Error, indicating an error condition.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.1\n             */\n            operationalError: Event(0x0, EventPriority.Critical, OperationalStateNamespace.TlvOperationalErrorEvent),\n\n            /**\n             * This event is generated when the overall operation ends, successfully or otherwise. For example, the\n             * completion of a cleaning operation in a Robot Vacuum Cleaner, or the completion of a wash cycle in a\n             * Washing Machine.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2\n             */\n            operationCompletion: OptionalEvent(\n                0x1,\n                EventPriority.Info,\n                OperationalStateNamespace.TlvOperationCompletionEvent\n            )\n        }\n    });\n\n    /**\n     * This cluster provides an interface for monitoring the operational state of a Robotic Vacuum Cleaner.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 7.4\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type RvcOperationalStateCluster = RvcOperationalState.Cluster;\nexport const RvcOperationalStateCluster = RvcOperationalState.Cluster;\nClusterRegistry.register(RvcOperationalState.Complete);\n"],
  "mappings": "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",
  "names": ["RvcOperationalState", "OperationalState", "ErrorState"]
}
