/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../mutation/MutableCluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { FixedAttribute, Attribute, Command, TlvNoResponse } from "../Cluster.js";
import { TlvArray } from "../../tlv/TlvArray.js";
import { ModeBase } from "./ModeBaseCluster.js";
import { TlvUInt8 } from "../../tlv/TlvNumber.js";
import { ClusterRegistry } from "../ClusterRegistry.js";
var RvcRunMode;
((RvcRunMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = RvcRunMode2.Feature || (RvcRunMode2.Feature = {}));
  let ModeChangeStatus;
  ((ModeChangeStatus2) => {
    ModeChangeStatus2[ModeChangeStatus2["Stuck"] = 65] = "Stuck";
    ModeChangeStatus2[ModeChangeStatus2["DustBinMissing"] = 66] = "DustBinMissing";
    ModeChangeStatus2[ModeChangeStatus2["DustBinFull"] = 67] = "DustBinFull";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankEmpty"] = 68] = "WaterTankEmpty";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankMissing"] = 69] = "WaterTankMissing";
    ModeChangeStatus2[ModeChangeStatus2["WaterTankLidOpen"] = 70] = "WaterTankLidOpen";
    ModeChangeStatus2[ModeChangeStatus2["MopCleaningPadMissing"] = 71] = "MopCleaningPadMissing";
    ModeChangeStatus2[ModeChangeStatus2["BatteryLow"] = 72] = "BatteryLow";
  })(ModeChangeStatus = RvcRunMode2.ModeChangeStatus || (RvcRunMode2.ModeChangeStatus = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["Idle"] = 16384] = "Idle";
    ModeTag2[ModeTag2["Cleaning"] = 16385] = "Cleaning";
    ModeTag2[ModeTag2["Mapping"] = 16386] = "Mapping";
  })(ModeTag = RvcRunMode2.ModeTag || (RvcRunMode2.ModeTag = {}));
  RvcRunMode2.Base = MutableCluster.Component({
    id: 84,
    name: "RvcRunMode",
    revision: 2,
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
       * same endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.4.1
       */
      onOff: BitFlag(0)
    },
    attributes: {
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.2.6
       */
      supportedModes: FixedAttribute(
        0,
        TlvArray(ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 }),
        { default: [] }
      ),
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.2.6
       */
      currentMode: Attribute(1, TlvUInt8, { scene: true, persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.7.1
       */
      changeToMode: Command(0, ModeBase.TlvChangeToModeRequest, 0, TlvNoResponse)
    },
    /**
     * This metadata controls which RvcRunModeCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: MutableCluster.Extensions()
  });
  RvcRunMode2.ClusterInstance = MutableCluster(RvcRunMode2.Base);
  RvcRunMode2.Cluster = RvcRunMode2.ClusterInstance;
  RvcRunMode2.Complete = RvcRunMode2.Cluster;
})(RvcRunMode || (RvcRunMode = {}));
const RvcRunModeCluster = RvcRunMode.Cluster;
ClusterRegistry.register(RvcRunMode.Complete);
export {
  RvcRunMode,
  RvcRunModeCluster
};
//# sourceMappingURL=RvcRunModeCluster.js.map
