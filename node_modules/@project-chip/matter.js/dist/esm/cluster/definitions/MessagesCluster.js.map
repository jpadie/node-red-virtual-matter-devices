{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/MessagesCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { FabricScopedAttribute, Attribute, Command, TlvNoResponse, Event, EventPriority } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvByteString, TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvEnum, TlvUInt16, TlvBitmap, TlvEpochS, TlvUInt64, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Messages {\n    /**\n     * These are optional features supported by MessagesCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4\n     */\n    export enum Feature {\n        /**\n         * ReceivedConfirmation (CONF)\n         *\n         * This feature shall indicate that the device can get confirmation from a user that the message was received.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.1\n         */\n        ReceivedConfirmation = \"ReceivedConfirmation\",\n\n        /**\n         * ConfirmationResponse (RESP)\n         *\n         * This feature shall indicate that the device is capable of presenting a list of responses to the user and\n         * recording the user\u2019s choice of response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.2\n         */\n        ConfirmationResponse = \"ConfirmationResponse\",\n\n        /**\n         * ConfirmationReply (RPLY)\n         *\n         * This feature shall indicate that the device is capable of collecting a free-form text response to a message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.3\n         */\n        ConfirmationReply = \"ConfirmationReply\",\n\n        /**\n         * ProtectedMessages (PROT)\n         *\n         * This feature shall indicate that the device is capable of requiring the user to authenticate before viewing\n         * a message; e.g. entering a PIN or password before viewing a message with billing information.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.4\n         */\n        ProtectedMessages = \"ProtectedMessages\"\n    }\n\n    /**\n     * Priority SHOULD be used to decide which messages to show when the number of eligible messages is larger than the\n     * device\u2019s capacity to present them.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.4\n     */\n    export enum MessagePriority {\n        /**\n         * Message to be transferred with a low level of importance\n         */\n        Low = 0,\n\n        /**\n         * Message to be transferred with a medium level of importance\n         */\n        Medium = 1,\n\n        /**\n         * Message to be transferred with a high level of importance\n         */\n        High = 2,\n\n        /**\n         * Message to be transferred with a critical level of importance\n         */\n        Critical = 3\n    }\n\n    /**\n     * This data type is derived from map16, and indicates control information related to a message.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2\n     */\n    export const MessageControl = {\n        /**\n         * Message requires confirmation from user\n         *\n         * This bit shall indicate that the message originator requests a confirmation of receipt by the user. If\n         * confirmation is required, the device SHOULD present the message until it is either confirmed by the user\n         * selecting a confirmation option, or the message expires.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2.1\n         */\n        confirmationRequired: BitFlag(0),\n\n        /**\n         * Message requires response from user\n         *\n         * This bit shall indicate that a MessagePresented event SHOULD be generated based on the response of the user\n         * to the message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2.2\n         */\n        responseRequired: BitFlag(1),\n\n        /**\n         * Message supports reply message from user\n         *\n         * This bit shall indicate that a free-form user reply is to be included in the confirmation of receipt.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2.3\n         */\n        replyMessage: BitFlag(2),\n\n        /**\n         * Message has already been confirmed\n         *\n         * This bit shall indicate the current confirmation state of a message, which is useful in the event that there\n         * are multiple Messages cluster client devices on a network.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2.4\n         */\n        messageConfirmed: BitFlag(3),\n\n        /**\n         * Message required PIN/password protection\n         *\n         * This bit shall indicate that user authentication (e.g. by password or PIN) is required before viewing a\n         * message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.2.5\n         */\n        messageProtected: BitFlag(4)\n    };\n\n    /**\n     * This represents a possible response to a message.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.6\n     */\n    export const TlvMessageResponseOption = TlvObject({\n        /**\n         * This field shall indicate a unique unsigned 32-bit number identifier for this message response option.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.6.1\n         */\n        messageResponseId: TlvField(0, TlvUInt32.bound({ min: 1 })),\n\n        /**\n         * This field shall indicate the text for this option; e.g. \"Yes\", \"No\", etc.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.6.2\n         */\n        label: TlvField(1, TlvString.bound({ maxLength: 32 }))\n    });\n\n    /**\n     * This represents a possible response to a message.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.6\n     */\n    export interface MessageResponseOption extends TypeFromSchema<typeof TlvMessageResponseOption> {}\n\n    /**\n     * This represents a single message.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5\n     */\n    export const TlvMessage = TlvObject({\n        /**\n         * This field shall indicate a globally unique ID for this message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.1\n         */\n        messageId: TlvField(0, TlvByteString.bound({ length: 16 })),\n\n        /**\n         * This field shall indicate the priority level for this message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.2\n         */\n        priority: TlvField(1, TlvEnum<MessagePriority>()),\n\n        /**\n         * This field shall indicate control information related to the message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.3\n         */\n        messageControl: TlvField(2, TlvBitmap(TlvUInt16, MessageControl)),\n\n        /**\n         * This field shall indicate the time in UTC at which the message becomes available to be presented. A null\n         * value shall indicate \"now.\"\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.4\n         */\n        startTime: TlvField(3, TlvNullable(TlvEpochS)),\n\n        /**\n         * This field shall indicate the amount of time, in milliseconds, after the StartTime during which the message\n         * is available to be presented. A null value shall indicate \"until changed\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.5\n         */\n        duration: TlvField(4, TlvNullable(TlvUInt64)),\n\n        /**\n         * This field shall indicate a string containing the message to be presented.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.6\n         */\n        messageText: TlvField(5, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall indicate a list of potential responses to the message. The entries in this list shall have\n         * unique values of MessageResponseID.\n         *\n         * If the ResponseRequired bit is set on the message but this list is empty, the device shall provide a generic\n         * acknowledgement button, e.g. \"OK\".\n         *\n         * If the ResponseRequired bit is not set on the message, this list shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5.7\n         */\n        responses: TlvOptionalField(6, TlvArray(TlvMessageResponseOption, { maxLength: 4 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * This represents a single message.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.5\n     */\n    export interface Message extends TypeFromSchema<typeof TlvMessage> {}\n\n    /**\n     * Input to the Messages presentMessagesRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1\n     */\n    export const TlvPresentMessagesRequest = TlvObject({\n        /**\n         * This field shall indicate a globally unique ID for this message. See MessageID.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.1\n         */\n        messageId: TlvField(0, TlvByteString.bound({ length: 16 })),\n\n        /**\n         * This field shall indicate the priority level for this message. See Priority.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.2\n         */\n        priority: TlvField(1, TlvEnum<MessagePriority>()),\n\n        /**\n         * This field shall indicate control information related to the message. See MessageControl.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.3\n         */\n        messageControl: TlvField(2, TlvBitmap(TlvUInt16, MessageControl)),\n\n        /**\n         * This field shall indicate the time in UTC at which the message becomes available to be presented. A null\n         * value shall indicate \"now.\" See StartTime.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.4\n         */\n        startTime: TlvField(3, TlvNullable(TlvEpochS)),\n\n        /**\n         * This field shall indicate the amount of time, in milliseconds, after the StartTime during which the message\n         * is available to be presented. A null value shall indicate \"until changed\". See Duration.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.5\n         */\n        duration: TlvField(4, TlvNullable(TlvUInt64)),\n\n        /**\n         * This field shall indicate a string containing the message to be presented. See MessageText.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.6\n         */\n        messageText: TlvField(5, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall indicate a list of potential responses to the message. The entries in this list shall have\n         * unique values of MessageResponseID.\n         *\n         * If the ResponseRequired bit is set on the message but this list is empty, the device shall provide a generic\n         * acknowledgement button, e.g. \"OK\".\n         *\n         * If the ResponseRequired bit is not set on the message, this list shall be ignored. See Responses.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1.7\n         */\n        responses: TlvOptionalField(6, TlvArray(TlvMessageResponseOption, { maxLength: 4 }))\n    });\n\n    /**\n     * Input to the Messages presentMessagesRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1\n     */\n    export interface PresentMessagesRequest extends TypeFromSchema<typeof TlvPresentMessagesRequest> {}\n\n    /**\n     * Input to the Messages cancelMessagesRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.2\n     */\n    export const TlvCancelMessagesRequest = TlvObject({\n        /**\n         * This field shall indicate the MessageIDs for the messages being cancelled.\n         *\n         * Cancelling a message shall cause it to be removed from Messages, cause its MessageID to be removed from\n         * ActiveMessageIDs and cause any active presentation of the message to cease.\n         *\n         * Message IDs in this command that indicate messages that do not exist in Messages, or that are not scoped to\n         * the fabric of the sender, shall be ignored.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.2.1\n         */\n        messageIDs: TlvField(0, TlvArray(TlvByteString.bound({ length: 16 }), { maxLength: 8 }))\n    });\n\n    /**\n     * Input to the Messages cancelMessagesRequest command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.2\n     */\n    export interface CancelMessagesRequest extends TypeFromSchema<typeof TlvCancelMessagesRequest> {}\n\n    /**\n     * Body of the Messages messageQueued event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.1\n     */\n    export const TlvMessageQueuedEvent = TlvObject({\n        /**\n         * This field shall indicate the MessageID for newly added message.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.1.1\n         */\n        messageId: TlvField(0, TlvByteString.bound({ length: 16 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * Body of the Messages messageQueued event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.1\n     */\n    export interface MessageQueuedEvent extends TypeFromSchema<typeof TlvMessageQueuedEvent> {}\n\n    /**\n     * Body of the Messages messagePresented event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.2\n     */\n    export const TlvMessagePresentedEvent = TlvObject({\n        /**\n         * This field shall indicate the MessageID for the message being presented.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.2.1\n         */\n        messageId: TlvField(0, TlvByteString.bound({ length: 16 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * Body of the Messages messagePresented event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.2\n     */\n    export interface MessagePresentedEvent extends TypeFromSchema<typeof TlvMessagePresentedEvent> {}\n\n    /**\n     * A display device may include this preference in the MessageComplete event as a hint to clients about how to\n     * handle future similar messages.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.5.3\n     */\n    export enum FutureMessagePreference {\n        /**\n         * Similar messages are allowed\n         */\n        Allowed = 0,\n\n        /**\n         * Similar messages should be sent more often\n         */\n        Increased = 1,\n\n        /**\n         * Similar messages should be sent less often\n         */\n        Reduced = 2,\n\n        /**\n         * Similar messages should not be sent\n         */\n        Disallowed = 3,\n\n        /**\n         * No further messages should be sent\n         */\n        Banned = 4\n    }\n\n    /**\n     * Body of the Messages messageComplete event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3\n     */\n    export const TlvMessageCompleteEvent = TlvObject({\n        /**\n         * This field shall indicate the MessageID for the message being confirmed.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3.1\n         */\n        messageId: TlvField(0, TlvByteString.bound({ length: 16 })),\n\n        /**\n         * This field shall indicate the MessageResponseID selected by the user. If there was no response before the\n         * Duration of the message has elapsed, this field shall be null.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3.2\n         */\n        responseId: TlvOptionalField(1, TlvNullable(TlvUInt32)),\n\n        /**\n         * This field shall indicate a user-provided reply to the message. If there was no reply, or the message did\n         * not have the ReplyRequired bit set, this field shall be null.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3.3\n         */\n        reply: TlvOptionalField(2, TlvNullable(TlvString.bound({ maxLength: 256 }))),\n\n        futureMessagesPreference: TlvField(3, TlvNullable(TlvEnum<FutureMessagePreference>())),\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * Body of the Messages messageComplete event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3\n     */\n    export interface MessageCompleteEvent extends TypeFromSchema<typeof TlvMessageCompleteEvent> {}\n\n    /**\n     * These elements and properties are present in all Messages clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x97,\n        name: \"Messages\",\n        revision: 3,\n\n        features: {\n            /**\n             * ReceivedConfirmation\n             *\n             * This feature shall indicate that the device can get confirmation from a user that the message was\n             * received.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.1\n             */\n            receivedConfirmation: BitFlag(0),\n\n            /**\n             * ConfirmationResponse\n             *\n             * This feature shall indicate that the device is capable of presenting a list of responses to the user and\n             * recording the user\u2019s choice of response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.2\n             */\n            confirmationResponse: BitFlag(1),\n\n            /**\n             * ConfirmationReply\n             *\n             * This feature shall indicate that the device is capable of collecting a free-form text response to a\n             * message.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.3\n             */\n            confirmationReply: BitFlag(2),\n\n            /**\n             * ProtectedMessages\n             *\n             * This feature shall indicate that the device is capable of requiring the user to authenticate before\n             * viewing a message; e.g. entering a PIN or password before viewing a message with billing information.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.4.4\n             */\n            protectedMessages: BitFlag(3)\n        },\n\n        attributes: {\n            /**\n             * Indicates a list of queued messages.\n             *\n             * In addition to filtering based upon fabric, to preserve user privacy, the server may further limit the\n             * set of messages returned in a read request. At minimum, the server shall return to a client those\n             * messages that the client itself created/submitted.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.6.1\n             */\n            messages: FabricScopedAttribute(0x0, TlvArray(TlvMessage, { maxLength: 8 }), { default: [] }),\n\n            /**\n             * Indicates a list of the MessageIDs of the Messages currently being presented. If this list is empty, no\n             * messages are currently being presented.\n             *\n             * This list shall NOT be fabric-scoped; it shall contain MessageIDs for all Messages being presented, no\n             * matter what fabric the client that queued them is on.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.6.2\n             */\n            activeMessageIDs: Attribute(\n                0x1,\n                TlvArray(TlvByteString.bound({ length: 16 }), { maxLength: 8 }),\n                { default: [] }\n            )\n        },\n\n        commands: {\n            /**\n             * Upon receipt, this shall cause the message in the passed fields to be appended to the Messages attribute.\n             *\n             * If appending the message would cause the number of messages to be greater than the capacity of the list,\n             * the device shall NOT append any message to Messages, and shall return a status code of\n             * RESOURCE_EXHAUSTED.\n             *\n             * When displaying a message in response to this command, an indication (ex. visual) of the origin node of\n             * the command shall be provided. This could be in the form of a friendly name label which uniquely\n             * identifies the node to the user. This friendly name label is typically assigned by the Matter Admin at\n             * the time of commissioning and, when it\u2019s a device, is often editable by the user. It might be a\n             * combination of a company name and friendly name, for example, \u201DAcme\u201D or \u201CAcme Streaming Service on\n             * Alice\u2019s Phone\u201D.\n             *\n             * NOTE\n             *\n             * It is currently not specified where the friendly name label can be found on the node, meaning that\n             * clients SHOULD NOT rely on a certain method they happen to observe in a particular server instance,\n             * since other instances could employ a different method.\n             *\n             * The device SHOULD make it possible for the user to view which nodes have access to this cluster and to\n             * individually remove privileges for each node.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.1\n             */\n            presentMessagesRequest: Command(0x0, TlvPresentMessagesRequest, 0x0, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.7.2\n             */\n            cancelMessagesRequest: Command(0x1, TlvCancelMessagesRequest, 0x1, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when a message is added to the messages attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.1\n             */\n            messageQueued: Event(0x0, EventPriority.Info, TlvMessageQueuedEvent),\n\n            /**\n             * This event shall be generated when the message is presented to the user.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.2\n             */\n            messagePresented: Event(0x1, EventPriority.Info, TlvMessagePresentedEvent),\n\n            /**\n             * This event shall be generated when the message is confirmed by the user, or when the Duration of the\n             * message has elapsed without confirmation.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16.8.3\n             */\n            messageComplete: Event(0x2, EventPriority.Info, TlvMessageCompleteEvent)\n        },\n\n        /**\n         * This metadata controls which MessagesCluster elements matter.js activates for specific feature combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { confirmationResponse: true, receivedConfirmation: false }, component: false },\n            { flags: { confirmationReply: true, receivedConfirmation: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster provides an interface for passing messages to be presented by a device.\n     *\n     * MessagesCluster supports optional features that you can enable with the MessagesCluster.with() factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.16\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type MessagesCluster = Messages.Cluster;\nexport const MessagesCluster = Messages.Cluster;\nClusterRegistry.register(Messages.Complete);\n"],
  "mappings": "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",
  "names": ["Messages", "Feature", "MessagePriority", "FutureMessagePreference"]
}
