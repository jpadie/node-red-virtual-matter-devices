{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/WindowCoveringCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    OptionalFixedAttribute,\n    OptionalAttribute,\n    Attribute,\n    OptionalCommand,\n    TlvNoResponse,\n    Command,\n    FixedAttribute,\n    WritableAttribute,\n    AccessLevel\n} from \"../Cluster.js\";\nimport { TlvUInt16, TlvPercent100ths, TlvPercent, TlvEnum, TlvUInt8, TlvBitmap } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag, BitFieldEnum } from \"../../schema/BitmapSchema.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace WindowCovering {\n    /**\n     * These are optional features supported by WindowCoveringCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4\n     */\n    export enum Feature {\n        /**\n         * Lift (LF)\n         *\n         * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down is\n         * lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open and\n         * Close).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.1\n         */\n        Lift = \"Lift\",\n\n        /**\n         * Tilt (TL)\n         *\n         * The Tilt feature applies to window coverings with vertical or horizontal strips.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.2\n         */\n        Tilt = \"Tilt\",\n\n        /**\n         * PositionAwareLift (PA_LF)\n         *\n         * Position aware lift control is supported.\n         */\n        PositionAwareLift = \"PositionAwareLift\",\n\n        /**\n         * AbsolutePosition (ABS)\n         *\n         * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits and\n         * InstalledClosedLimits attributes of the window covering starting at the open (0.00%).\n         *\n         * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported for\n         * new implementations.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.4\n         */\n        AbsolutePosition = \"AbsolutePosition\",\n\n        /**\n         * PositionAwareTilt (PA_TL)\n         *\n         * Position aware tilt control is supported.\n         */\n        PositionAwareTilt = \"PositionAwareTilt\"\n    }\n\n    /**\n     * Input to the WindowCovering goToLiftPercentage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.5\n     */\n    export const TlvGoToLiftPercentageRequest = TlvObject({ liftPercent100thsValue: TlvField(0, TlvPercent100ths) });\n\n    /**\n     * Input to the WindowCovering goToLiftPercentage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.5\n     */\n    export interface GoToLiftPercentageRequest extends TypeFromSchema<typeof TlvGoToLiftPercentageRequest> {}\n\n    /**\n     * Input to the WindowCovering goToTiltPercentage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.7\n     */\n    export const TlvGoToTiltPercentageRequest = TlvObject({ tiltPercent100thsValue: TlvField(0, TlvPercent100ths) });\n\n    /**\n     * Input to the WindowCovering goToTiltPercentage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.7\n     */\n    export interface GoToTiltPercentageRequest extends TypeFromSchema<typeof TlvGoToTiltPercentageRequest> {}\n\n    /**\n     * Input to the WindowCovering goToLiftValue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.4\n     */\n    export const TlvGoToLiftValueRequest = TlvObject({\n        /**\n         * This field shall specify the requested physical lift/slide position in unit cm (centimeters).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.4.1\n         */\n        liftValue: TlvField(0, TlvUInt16)\n    });\n\n    /**\n     * Input to the WindowCovering goToLiftValue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.4\n     */\n    export interface GoToLiftValueRequest extends TypeFromSchema<typeof TlvGoToLiftValueRequest> {}\n\n    /**\n     * Input to the WindowCovering goToTiltValue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.6\n     */\n    export const TlvGoToTiltValueRequest = TlvObject({\n        /**\n         * This field shall specify the requested physical tilt position in unit 0.1\u00B0 (tenth of a degrees).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.6.1\n         */\n        tiltValue: TlvField(0, TlvUInt16)\n    });\n\n    /**\n     * Input to the WindowCovering goToTiltValue command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.6\n     */\n    export interface GoToTiltValueRequest extends TypeFromSchema<typeof TlvGoToTiltValueRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.5\n     */\n    export enum WindowCoveringType {\n        /**\n         * RollerShade\n         */\n        Rollershade = 0,\n\n        /**\n         * RollerShade - 2 Motor\n         */\n        Rollershade2Motor = 1,\n\n        /**\n         * RollerShade - Exterior\n         */\n        RollershadeExterior = 2,\n\n        /**\n         * RollerShade - Exterior - 2 Motor\n         */\n        RollershadeExterior2Motor = 3,\n\n        /**\n         * Drapery (curtain)\n         */\n        Drapery = 4,\n\n        /**\n         * Awning\n         */\n        Awning = 5,\n\n        /**\n         * Shutter\n         */\n        Shutter = 6,\n\n        /**\n         * Tilt Blind - Tilt Only\n         */\n        TiltBlindTiltOnly = 7,\n\n        /**\n         * Tilt Blind - Lift & Tilt\n         */\n        TiltBlindLift = 8,\n\n        /**\n         * Projector Screen\n         */\n        ProjectorScreen = 9,\n\n        /**\n         * Unknown\n         */\n        Unknown = 255\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1\n     */\n    export const ConfigStatus = {\n        /**\n         * Device is operational.\n         *\n         * This bit shall indicate whether the window covering is operational for regular use:\n         *\n         *   \u2022 0 = Not Operational\n         *\n         *   \u2022 1 = Operational\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.1\n         */\n        operational: BitFlag(0),\n\n        /**\n         * Deprecated and reserved.\n         */\n        onlineReserved: BitFlag(1),\n\n        /**\n         * The lift movement is reversed.\n         *\n         * This bit shall indicate whether the lift movement is reversed:\n         *\n         *   \u2022 0 = Lift movement is normal\n         *\n         *   \u2022 1 = Lift movement is reversed\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.2\n         */\n        liftMovementReversed: BitFlag(2),\n\n        /**\n         * Supports the PositionAwareLift feature (PA_LF).\n         *\n         * This bit shall indicate whether the window covering supports the PositionAwareLift feature:\n         *\n         *   \u2022 0 = Lift control is not position aware\n         *\n         *   \u2022 1 = Lift control is position aware (PA_LF)\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.3\n         */\n        liftPositionAware: BitFlag(3),\n\n        /**\n         * Supports the PositionAwareTilt feature (PA_TL).\n         *\n         * This bit shall indicate whether the window covering supports the PositionAwareTilt feature:\n         *\n         *   \u2022 0 = Tilt control is not position aware\n         *\n         *   \u2022 1 = Tilt control is position aware (PA_TL)\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.4\n         */\n        tiltPositionAware: BitFlag(4),\n\n        /**\n         * Uses an encoder for lift.\n         *\n         * This bit shall indicate whether a position aware controlled window covering is employing an encoder for\n         * positioning the height of the window covering:\n         *\n         *   \u2022 0 = Timer Controlled\n         *\n         *   \u2022 1 = Encoder Controlled\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.5\n         */\n        liftEncoderControlled: BitFlag(5),\n\n        /**\n         * Uses an encoder for tilt.\n         *\n         * This bit shall indicate whether a position aware controlled window covering is employing an encoder for\n         * tilting the window covering:\n         *\n         *   \u2022 0 = Timer Controlled\n         *\n         *   \u2022 1 = Encoder Controlled\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.1.6\n         */\n        tiltEncoderControlled: BitFlag(6)\n    };\n\n    /**\n     * The OperationalStatusBitmap is using several internal operational state fields (composed of 2 bits) following\n     * this definition:\n     *\n     *   \u2022 00b = Currently not moving\n     *\n     *   \u2022 01b = Currently opening (e.g. moving from closed to open).\n     *\n     *   \u2022 10b = Currently closing (e.g. moving from open to closed).\n     *\n     *   \u2022 11b = Reserved\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.3\n     */\n    export const OperationalStatus = {\n        /**\n         * Global operational state.\n         *\n         * These bits shall indicate in which direction the covering is currently moving or if it has stopped. Global\n         * operational state shall always reflect the overall motion of the device.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.3.1\n         */\n        global: BitFieldEnum<MovementStatus>(0, 2),\n\n        /**\n         * Lift operational state.\n         *\n         * These bits shall indicate in which direction the covering\u2019s lift is currently moving or if it has stopped.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.3.2\n         */\n        lift: BitFieldEnum<MovementStatus>(2, 2),\n\n        /**\n         * Tilt operational state.\n         *\n         * These bits shall indicate in which direction the covering\u2019s tilt is currently moving or if it has stopped.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.3.3\n         */\n        tilt: BitFieldEnum<MovementStatus>(4, 2)\n    };\n\n    /**\n     * Values for OperationalStatus attribute fields.\n     */\n    export enum MovementStatus {\n        /**\n         * Covering is not moving\n         */\n        Stopped = 0,\n\n        /**\n         * Covering is moving from closed to open\n         */\n        Opening = 1,\n\n        /**\n         * Covering is moving from open to closed\n         */\n        Closing = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.6\n     */\n    export enum EndProductType {\n        /**\n         * Simple Roller Shade\n         */\n        RollerShade = 0,\n\n        /**\n         * Roman Shade\n         */\n        RomanShade = 1,\n\n        /**\n         * Balloon Shade\n         */\n        BalloonShade = 2,\n\n        /**\n         * Woven Wood\n         */\n        WovenWood = 3,\n\n        /**\n         * Pleated Shade\n         */\n        PleatedShade = 4,\n\n        /**\n         * Cellular Shade\n         */\n        CellularShade = 5,\n\n        /**\n         * Layered Shade\n         */\n        LayeredShade = 6,\n\n        /**\n         * Layered Shade 2D\n         */\n        LayeredShade2D = 7,\n\n        /**\n         * Sheer Shade\n         */\n        SheerShade = 8,\n\n        /**\n         * Tilt Only Interior Blind\n         */\n        TiltOnlyInteriorBlind = 9,\n\n        /**\n         * Interior Blind\n         */\n        InteriorBlind = 10,\n\n        /**\n         * Vertical Blind, Strip Curtain\n         */\n        VerticalBlindStripCurtain = 11,\n\n        /**\n         * Interior Venetian Blind\n         */\n        InteriorVenetianBlind = 12,\n\n        /**\n         * Exterior Venetian Blind\n         */\n        ExteriorVenetianBlind = 13,\n\n        /**\n         * Lateral Left Curtain\n         */\n        LateralLeftCurtain = 14,\n\n        /**\n         * Lateral Right Curtain\n         */\n        LateralRightCurtain = 15,\n\n        /**\n         * Central Curtain\n         */\n        CentralCurtain = 16,\n\n        /**\n         * Roller Shutter\n         */\n        RollerShutter = 17,\n\n        /**\n         * Exterior Vertical Screen\n         */\n        ExteriorVerticalScreen = 18,\n\n        /**\n         * Awning Terrace (Patio)\n         */\n        AwningTerracePatio = 19,\n\n        /**\n         * Awning Vertical Screen\n         */\n        AwningVerticalScreen = 20,\n\n        /**\n         * Tilt Only Pergola\n         */\n        TiltOnlyPergola = 21,\n\n        /**\n         * Swinging Shutter\n         */\n        SwingingShutter = 22,\n\n        /**\n         * Sliding Shutter\n         */\n        SlidingShutter = 23,\n\n        /**\n         * Unknown\n         */\n        Unknown = 255\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.2\n     */\n    export const Mode = {\n        /**\n         * Reverse the lift direction.\n         *\n         * This bit shall control the motor direction:\n         *\n         *   \u2022 0 = Lift movement is normal\n         *\n         *   \u2022 1 = Lift movement is reversed\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.2.1\n         */\n        motorDirectionReversed: BitFlag(0),\n\n        /**\n         * Perform a calibration.\n         *\n         * This bit shall set the window covering into calibration mode:\n         *\n         *   \u2022 0 = Normal mode\n         *\n         *   \u2022 1 = Calibration mode\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.2.2\n         */\n        calibrationMode: BitFlag(1),\n\n        /**\n         * Freeze all motions for maintenance.\n         *\n         * This bit shall set the window covering into maintenance mode:\n         *\n         *   \u2022 0 = Normal mode\n         *\n         *   \u2022 1 = Maintenance mode\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.2.3\n         */\n        maintenanceMode: BitFlag(2),\n\n        /**\n         * Control the LEDs feedback.\n         *\n         * This bit shall control feedback LEDs:\n         *\n         *   \u2022 0 = LEDs are off\n         *\n         *   \u2022 1 = LEDs will display feedback\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.2.4\n         */\n        ledFeedback: BitFlag(3)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.5.4\n     */\n    export const SafetyStatus = {\n        /**\n         * Movement commands are ignored (locked out). e.g. not granted authorization, outside some time/date range.\n         */\n        remoteLockout: BitFlag(0),\n\n        /**\n         * Tampering detected on sensors or any other safety equipment. Ex: a device has been forcedly moved without\n         * its actuator(s).\n         */\n        tamperDetection: BitFlag(1),\n\n        /**\n         * Communication failure to sensors or other safety equipment.\n         */\n        failedCommunication: BitFlag(2),\n\n        /**\n         * Device has failed to reach the desired position. e.g. with position aware device, time expired before\n         * TargetPosition is reached.\n         */\n        positionFailure: BitFlag(3),\n\n        /**\n         * Motor(s) and/or electric circuit thermal protection activated.\n         */\n        thermalProtection: BitFlag(4),\n\n        /**\n         * An obstacle is preventing actuator movement.\n         */\n        obstacleDetected: BitFlag(5),\n\n        /**\n         * Device has power related issue or limitation e.g. device is running w/ the help of a backup battery or power\n         * might not be fully available at the moment.\n         */\n        power: BitFlag(6),\n\n        /**\n         * Local safety sensor (not a direct obstacle) is preventing movements (e.g. Safety EU Standard EN60335).\n         */\n        stopInput: BitFlag(7),\n\n        /**\n         * Mechanical problem related to the motor(s) detected.\n         */\n        motorJammed: BitFlag(8),\n\n        /**\n         * PCB, fuse and other electrics problems.\n         */\n        hardwareFailure: BitFlag(9),\n\n        /**\n         * Actuator is manually operated and is preventing actuator movement (e.g. actuator is disengaged/decoupled).\n         */\n        manualOperation: BitFlag(10),\n\n        /**\n         * Protection is activated.\n         */\n        protection: BitFlag(11)\n    };\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Lift, PositionAwareLift and\n     * AbsolutePosition.\n     */\n    export const LiftAndPositionAwareLiftAndAbsolutePositionComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the maximum possible encoder position possible (Unit cm, centimeters) to position the height\n             * of the window covering lift.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.3\n             */\n            physicalClosedLimitLift: OptionalFixedAttribute(0x1, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the actual lift position (Unit cm, centimeters) of the window covering from the fully-open\n             * position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.5\n             */\n            currentPositionLift: OptionalAttribute(0x3, TlvNullable(TlvUInt16), { persistent: true, default: null }),\n\n            /**\n             * Indicates the open limit for lifting the window covering whether position (in centimeters) is encoded or\n             * timed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.18\n             */\n            installedOpenLimitLift: Attribute(0x10, TlvUInt16.bound({ max: 65534 }), { persistent: true, default: 0 }),\n\n            /**\n             * Indicates the closed limit for lifting the window covering whether position (in centimeters) is encoded\n             * or timed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.19\n             */\n            installedClosedLimitLift: Attribute(\n                0x11,\n                TlvUInt16.bound({ max: 65534 }),\n                { persistent: true, default: 65534 }\n            )\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Tilt, PositionAwareTilt and\n     * AbsolutePosition.\n     */\n    export const TiltAndPositionAwareTiltAndAbsolutePositionComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the maximum possible encoder position possible (Unit 0.1\u00B0, tenths of a degree) to position the\n             * angle of the window covering tilt.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.4\n             */\n            physicalClosedLimitTilt: OptionalFixedAttribute(0x2, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the actual tilt position (Unit 0.1\u00B0, tenths of a degree) of the window covering from the\n             * fully-open position.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.6\n             */\n            currentPositionTilt: OptionalAttribute(0x4, TlvNullable(TlvUInt16), { persistent: true, default: null }),\n\n            /**\n             * Indicates the open limit for tilting the window covering whether position (in tenth of a degree) is\n             * encoded or timed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.20\n             */\n            installedOpenLimitTilt: Attribute(0x12, TlvUInt16.bound({ max: 65534 }), { persistent: true, default: 0 }),\n\n            /**\n             * Indicates the closed limit for tilting the window covering whether position (in tenth of a degree) is\n             * encoded or timed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.21\n             */\n            installedClosedLimitTilt: Attribute(\n                0x13,\n                TlvUInt16.bound({ max: 65534 }),\n                { persistent: true, default: 65534 }\n            )\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports feature Lift.\n     */\n    export const LiftComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the total number of lift/slide actuations applied to the window covering since the device was\n             * installed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.7\n             */\n            numberOfActuationsLift: OptionalAttribute(0x5, TlvUInt16, { persistent: true, default: 0 })\n        },\n\n        commands: {\n            /**\n             * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage\n             * specified in the payload of this command.\n             *\n             * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be\n             * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to\n             * LiftPercentageValue * 100.\n             *\n             * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to\n             * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not\n             * LiftPercent100thsValue) has a value to set the target position.\n             *\n             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a\n             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is\n             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD\n             * be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.5\n             */\n            goToLiftPercentage: OptionalCommand(0x5, TlvGoToLiftPercentageRequest, 0x5, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports feature Tilt.\n     */\n    export const TiltComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the total number of tilt actuations applied to the window covering since the device was\n             * installed.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.8\n             */\n            numberOfActuationsTilt: OptionalAttribute(0x6, TlvUInt16, { persistent: true, default: 0 })\n        },\n\n        commands: {\n            /**\n             * Upon receipt of this command, the server will adjust the window covering to the tilt percentage\n             * specified in the payload of this command.\n             *\n             * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be\n             * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to\n             * TiltPercentageValue * 100.\n             *\n             * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to\n             * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not\n             * TiltPercent100thsValue) has a value to set the target position.\n             *\n             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a\n             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is\n             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD\n             * be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.7\n             */\n            goToTiltPercentage: OptionalCommand(0x8, TlvGoToTiltPercentageRequest, 0x8, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Lift and PositionAwareLift.\n     */\n    export const LiftAndPositionAwareLiftComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is\n             * equal to CurrentPositionLiftPercent100ths attribute divided by 100.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.12\n             */\n            currentPositionLiftPercentage: OptionalAttribute(\n                0x8,\n                TlvNullable(TlvPercent),\n                { scene: true, persistent: true, default: null }\n            ),\n\n            /**\n             * Indicates the position where the window covering lift will go or is moving to as a percentage (Unit\n             * 0.01%).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.14\n             */\n            targetPositionLiftPercent100ths: Attribute(\n                0xb,\n                TlvNullable(TlvPercent100ths),\n                { scene: true, default: null }\n            ),\n\n            /**\n             * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.10\n             */\n            currentPositionLiftPercent100ths: Attribute(\n                0xe,\n                TlvNullable(TlvPercent100ths),\n                { persistent: true, default: null }\n            )\n        },\n\n        commands: {\n            /**\n             * Upon receipt of this command, the server will adjust the window covering to the lift/slide percentage\n             * specified in the payload of this command.\n             *\n             * If the command includes LiftPercent100thsValue, then TargetPositionLiftPercent100ths attribute shall be\n             * set to LiftPercent100thsValue. Otherwise the TargetPositionLiftPercent100ths attribute shall be set to\n             * LiftPercentageValue * 100.\n             *\n             * If a client includes LiftPercent100thsValue in the command, the LiftPercentageValue shall be set to\n             * LiftPercent100thsValue / 100, so a legacy server which only supports LiftPercentageValue (not\n             * LiftPercent100thsValue) has a value to set the target position.\n             *\n             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a\n             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is\n             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD\n             * be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.5\n             */\n            goToLiftPercentage: Command(0x5, TlvGoToLiftPercentageRequest, 0x5, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Tilt and PositionAwareTilt.\n     */\n    export const TiltAndPositionAwareTiltComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the actual position as a percentage from 0% to 100% with 1% default step. This attribute is\n             * equal to CurrentPositionTiltPercent100ths attribute divided by 100.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.13\n             */\n            currentPositionTiltPercentage: OptionalAttribute(\n                0x9,\n                TlvNullable(TlvPercent),\n                { scene: true, persistent: true, default: null }\n            ),\n\n            /**\n             * Indicates the position where the window covering tilt will go or is moving to as a percentage (Unit\n             * 0.01%).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.15\n             */\n            targetPositionTiltPercent100ths: Attribute(\n                0xc,\n                TlvNullable(TlvPercent100ths),\n                { scene: true, default: null }\n            ),\n\n            /**\n             * Indicates the actual position as a percentage with a minimal step of 0.01%. E.g Max 10000 equals 100.00%.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.11\n             */\n            currentPositionTiltPercent100ths: Attribute(\n                0xf,\n                TlvNullable(TlvPercent100ths),\n                { persistent: true, default: null }\n            )\n        },\n\n        commands: {\n            /**\n             * Upon receipt of this command, the server will adjust the window covering to the tilt percentage\n             * specified in the payload of this command.\n             *\n             * If the command includes TiltPercent100thsValue, then TargetPositionTiltPercent100ths attribute shall be\n             * set to TiltPercent100thsValue. Otherwise the TargetPositionTiltPercent100ths attribute shall be set to\n             * TiltPercentageValue * 100.\n             *\n             * If a client includes TiltPercent100thsValue in the command, the TiltPercentageValue shall be set to\n             * TiltPercent100thsValue / 100, so a legacy server which only supports TiltPercentageValue (not\n             * TiltPercent100thsValue) has a value to set the target position.\n             *\n             * If the server does not support the PositionAware feature, then a zero percentage shall be treated as a\n             * UpOrOpen command and a non-zero percentage shall be treated as an DownOrClose command. If the device is\n             * only a tilt control device, then the command SHOULD be ignored and a UNSUPPORTED_COMMAND status SHOULD\n             * be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.7\n             */\n            goToTiltPercentage: Command(0x8, TlvGoToTiltPercentageRequest, 0x8, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Lift and AbsolutePosition.\n     */\n    export const LiftAndAbsolutePositionComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.4\n             */\n            goToLiftValue: OptionalCommand(0x4, TlvGoToLiftValueRequest, 0x4, TlvNoResponse)\n        }\n    });\n\n    /**\n     * A WindowCoveringCluster supports these elements if it supports features Tilt and AbsolutePosition.\n     */\n    export const TiltAndAbsolutePositionComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.6\n             */\n            goToTiltValue: OptionalCommand(0x7, TlvGoToTiltValueRequest, 0x7, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all WindowCovering clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x102,\n        name: \"WindowCovering\",\n        revision: 5,\n\n        features: {\n            /**\n             * Lift\n             *\n             * The Lift feature applies to window coverings that lift up and down (e.g. for a roller shade, Up and Down\n             * is lift Open and Close) or slide left to right (e.g. for a sliding curtain, Left and Right is lift Open\n             * and Close).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.1\n             */\n            lift: BitFlag(0),\n\n            /**\n             * Tilt\n             *\n             * The Tilt feature applies to window coverings with vertical or horizontal strips.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.2\n             */\n            tilt: BitFlag(1),\n\n            /**\n             * PositionAwareLift\n             *\n             * Position aware lift control is supported.\n             */\n            positionAwareLift: BitFlag(2),\n\n            /**\n             * AbsolutePosition\n             *\n             * The percentage attributes shall indicate the position as a percentage between the InstalledOpenLimits\n             * and InstalledClosedLimits attributes of the window covering starting at the open (0.00%).\n             *\n             * As a general rule, absolute positioning (in centimeters or tenth of a degrees) SHOULD NOT be supported\n             * for new implementations.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.4.4\n             */\n            absolutePosition: BitFlag(3),\n\n            /**\n             * PositionAwareTilt\n             *\n             * Position aware tilt control is supported.\n             */\n            positionAwareTilt: BitFlag(4)\n        },\n\n        attributes: {\n            /**\n             * This attribute shall identify the type of window covering.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.2\n             */\n            type: FixedAttribute(0x0, TlvEnum<WindowCoveringType>(), { default: WindowCoveringType.Rollershade }),\n\n            /**\n             * This attribute specifies the configuration and status information of the window covering.\n             *\n             * To change settings, devices shall write to the Mode attribute. The behavior causing the setting or\n             * clearing of each bit is vendor specific.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.9\n             */\n            configStatus: Attribute(0x7, TlvBitmap(TlvUInt8, ConfigStatus), { persistent: true }),\n\n            /**\n             * Indicates the currently ongoing operations and applies to all type of devices.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.16\n             */\n            operationalStatus: Attribute(0xa, TlvBitmap(TlvUInt8, OperationalStatus)),\n\n            /**\n             * This attribute SHOULD provide more detail about the product type than can be determined from the main\n             * category indicated by the Type attribute.\n             *\n             * The table below helps to match the EndProductType attribute with the Type attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.17\n             */\n            endProductType: FixedAttribute(0xd, TlvEnum<EndProductType>(), { default: EndProductType.RollerShade }),\n\n            /**\n             * The Mode attribute allows configuration of the window covering, such as: reversing the motor direction,\n             * placing the window covering into calibration mode, placing the motor into maintenance mode, disabling\n             * the network, and disabling status LEDs.\n             *\n             * In the case a device does not support or implement a specific mode, e.g. the device has a specific\n             * installation method and reversal is not relevant or the device does not include a maintenance mode, any\n             * write interaction to the Mode attribute, with an unsupported mode bit or any out of bounds bits set,\n             * must be ignored and a response containing the status of CONSTRAINT_ERROR will be returned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.22\n             */\n            mode: WritableAttribute(\n                0x17,\n                TlvBitmap(TlvUInt8, Mode),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * The SafetyStatus attribute reflects the state of the safety sensors and the common issues preventing\n             * movements. By default for nominal operation all flags are cleared (0). A device might support none, one\n             * or several bit flags from this attribute (all optional).\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.6.23\n             */\n            safetyStatus: OptionalAttribute(0x1a, TlvBitmap(TlvUInt16, SafetyStatus))\n        },\n\n        commands: {\n            /**\n             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide\n             * and tilt is at the maximum open/up position. This will happen as fast as possible. The server attributes\n             * shall be updated as follows:\n             *\n             * if the PositionAware feature is supported:\n             *\n             *   \u2022 TargetPositionLiftPercent100ths attribute shall be set to 0.00%.\n             *\n             *   \u2022 TargetPositionTiltPercent100ths attribute shall be set to 0.00%.\n             *\n             * The server positioning attributes will follow the movements, once the movement has successfully\n             * finished, the server attributes shall be updated as follows:\n             *\n             * if the PositionAware feature is supported:\n             *\n             *   \u2022 CurrentPositionLiftPercent100ths attribute shall be 0.00%.\n             *\n             *   \u2022 CurrentPositionLiftPercentage attribute shall be 0%.\n             *\n             *   \u2022 CurrentPositionTiltPercent100ths attribute shall be 0.00%.\n             *\n             *   \u2022 CurrentPositionTiltPercentage attribute shall be 0%. if the AbsolutePosition feature is supported:\n             *\n             *   \u2022 CurrentPositionLift attribute shall be equal to the InstalledOpenLimitLift attribute.\n             *\n             *   \u2022 CurrentPositionTilt attribute shall be equal to the InstalledOpenLimitTilt attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.1\n             */\n            upOrOpen: Command(0x0, TlvNoArguments, 0x0, TlvNoResponse),\n\n            /**\n             * Upon receipt of this command, the window covering will adjust its position so the physical lift/slide\n             * and tilt is at the maximum closed/down position. This will happen as fast as possible. The server\n             * attributes supported shall be updated as follows:\n             *\n             * if the PositionAware feature is supported:\n             *\n             *   \u2022 TargetPositionLiftPercent100ths attribute shall be set to 100.00%.\n             *\n             *   \u2022 TargetPositionTiltPercent100ths attribute shall be set to 100.00%.\n             *\n             * The server positioning attributes will follow the movements, once the movement has successfully\n             * finished, the server attributes shall be updated as follows:\n             *\n             * if the PositionAware feature is supported:\n             *\n             *   \u2022 CurrentPositionLiftPercent100ths attribute shall be 100.00%.\n             *\n             *   \u2022 CurrentPositionLiftPercentage attribute shall be 100%.\n             *\n             *   \u2022 CurrentPositionTiltPercent100ths attribute shall be 100.00%.\n             *\n             *   \u2022 CurrentPositionTiltPercentage attribute shall be 100%. if the AbsolutePosition feature is supported:\n             *\n             *   \u2022 CurrentPositionLift attribute shall be equal to the InstalledClosedLimitLift attribute.\n             *\n             *   \u2022 CurrentPositionTilt attribute shall be equal to the InstalledClosedLimitTilt attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.2\n             */\n            downOrClose: Command(0x1, TlvNoArguments, 0x1, TlvNoResponse),\n\n            /**\n             * Upon receipt of this command, the window covering will stop any adjusting to the physical tilt and\n             * lift/slide that is currently occurring. The server attributes supported shall be updated as follows:\n             *\n             *   \u2022 TargetPositionLiftPercent100ths attribute will be set to CurrentPositionLiftPercent100ths attribute\n             *     value.\n             *\n             *   \u2022 TargetPositionTiltPercent100ths attribute will be set to CurrentPositionTiltPercent100ths attribute\n             *     value.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3.7.3\n             */\n            stopMotion: Command(0x2, TlvNoArguments, 0x2, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which WindowCoveringCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            {\n                flags: { lift: true, positionAwareLift: true, absolutePosition: true },\n                component: LiftAndPositionAwareLiftAndAbsolutePositionComponent\n            },\n            {\n                flags: { tilt: true, positionAwareTilt: true, absolutePosition: true },\n                component: TiltAndPositionAwareTiltAndAbsolutePositionComponent\n            },\n            { flags: { lift: true }, component: LiftComponent },\n            { flags: { tilt: true }, component: TiltComponent },\n            { flags: { lift: true, positionAwareLift: true }, component: LiftAndPositionAwareLiftComponent },\n            { flags: { tilt: true, positionAwareTilt: true }, component: TiltAndPositionAwareTiltComponent },\n            { flags: { lift: true, absolutePosition: true }, component: LiftAndAbsolutePositionComponent },\n            { flags: { tilt: true, absolutePosition: true }, component: TiltAndAbsolutePositionComponent },\n            { flags: { positionAwareLift: true, lift: false }, component: false },\n            { flags: { positionAwareTilt: true, tilt: false }, component: false },\n            { flags: { lift: false, tilt: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * The window covering cluster provides an interface for controlling and adjusting automatic window coverings such\n     * as drapery motors, automatic shades, curtains and blinds.\n     *\n     * Per the Matter specification you cannot use {@link WindowCoveringCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 5.3\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const LF_PA_LF_ABS = { lift: true, positionAwareLift: true, absolutePosition: true };\n    const TL_PA_TL_ABS = { tilt: true, positionAwareTilt: true, absolutePosition: true };\n    const LF = { lift: true };\n    const TL = { tilt: true };\n    const LF_PA_LF = { lift: true, positionAwareLift: true };\n    const TL_PA_TL = { tilt: true, positionAwareTilt: true };\n    const LF_ABS = { lift: true, absolutePosition: true };\n    const TL_ABS = { tilt: true, absolutePosition: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            physicalClosedLimitLift: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftAndAbsolutePositionComponent.attributes.physicalClosedLimitLift,\n                { optionalIf: [LF_PA_LF_ABS] }\n            ),\n            physicalClosedLimitTilt: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltAndAbsolutePositionComponent.attributes.physicalClosedLimitTilt,\n                { optionalIf: [TL_PA_TL_ABS] }\n            ),\n            currentPositionLift: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftAndAbsolutePositionComponent.attributes.currentPositionLift,\n                { optionalIf: [LF_PA_LF_ABS] }\n            ),\n            currentPositionTilt: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltAndAbsolutePositionComponent.attributes.currentPositionTilt,\n                { optionalIf: [TL_PA_TL_ABS] }\n            ),\n            numberOfActuationsLift: MutableCluster.AsConditional(\n                LiftComponent.attributes.numberOfActuationsLift,\n                { optionalIf: [LF] }\n            ),\n            numberOfActuationsTilt: MutableCluster.AsConditional(\n                TiltComponent.attributes.numberOfActuationsTilt,\n                { optionalIf: [TL] }\n            ),\n            currentPositionLiftPercentage: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftComponent.attributes.currentPositionLiftPercentage,\n                { optionalIf: [LF_PA_LF] }\n            ),\n            currentPositionTiltPercentage: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltComponent.attributes.currentPositionTiltPercentage,\n                { optionalIf: [TL_PA_TL] }\n            ),\n            targetPositionLiftPercent100ths: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftComponent.attributes.targetPositionLiftPercent100ths,\n                { mandatoryIf: [LF_PA_LF] }\n            ),\n            targetPositionTiltPercent100ths: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltComponent.attributes.targetPositionTiltPercent100ths,\n                { mandatoryIf: [TL_PA_TL] }\n            ),\n            currentPositionLiftPercent100ths: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftComponent.attributes.currentPositionLiftPercent100ths,\n                { mandatoryIf: [LF_PA_LF] }\n            ),\n            currentPositionTiltPercent100ths: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltComponent.attributes.currentPositionTiltPercent100ths,\n                { mandatoryIf: [TL_PA_TL] }\n            ),\n            installedOpenLimitLift: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftAndAbsolutePositionComponent.attributes.installedOpenLimitLift,\n                { mandatoryIf: [LF_PA_LF_ABS] }\n            ),\n            installedClosedLimitLift: MutableCluster.AsConditional(\n                LiftAndPositionAwareLiftAndAbsolutePositionComponent.attributes.installedClosedLimitLift,\n                { mandatoryIf: [LF_PA_LF_ABS] }\n            ),\n            installedOpenLimitTilt: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltAndAbsolutePositionComponent.attributes.installedOpenLimitTilt,\n                { mandatoryIf: [TL_PA_TL_ABS] }\n            ),\n            installedClosedLimitTilt: MutableCluster.AsConditional(\n                TiltAndPositionAwareTiltAndAbsolutePositionComponent.attributes.installedClosedLimitTilt,\n                { mandatoryIf: [TL_PA_TL_ABS] }\n            )\n        },\n\n        commands: {\n            ...Base.commands,\n            goToLiftValue: MutableCluster.AsConditional(\n                LiftAndAbsolutePositionComponent.commands.goToLiftValue,\n                { optionalIf: [LF_ABS] }\n            ),\n            goToLiftPercentage: MutableCluster.AsConditional(\n                LiftComponent.commands.goToLiftPercentage,\n                { optionalIf: [LF], mandatoryIf: [LF_PA_LF] }\n            ),\n            goToTiltValue: MutableCluster.AsConditional(\n                TiltAndAbsolutePositionComponent.commands.goToTiltValue,\n                { optionalIf: [TL_ABS] }\n            ),\n            goToTiltPercentage: MutableCluster.AsConditional(\n                TiltComponent.commands.goToTiltPercentage,\n                { optionalIf: [TL], mandatoryIf: [TL_PA_TL] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all WindowCovering features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type WindowCoveringCluster = WindowCovering.Cluster;\nexport const WindowCoveringCluster = WindowCovering.Cluster;\nClusterRegistry.register(WindowCovering.Complete);\n"],
  "mappings": "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",
  "names": ["WindowCovering", "Feature", "WindowCoveringType", "MovementStatus", "EndProductType"]
}
