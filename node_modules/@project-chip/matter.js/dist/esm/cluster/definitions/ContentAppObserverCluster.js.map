{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ContentAppObserverCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command } from \"../Cluster.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ContentAppObserver {\n    /**\n     * Input to the ContentAppObserver contentAppMessage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.1\n     */\n    export const TlvContentAppMessageRequest = TlvObject({\n        /**\n         * This field shall indicate content app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.1.1\n         */\n        data: TlvField(0, TlvString.bound({ maxLength: 500 })),\n\n        /**\n         * This optional field shall indicate a content app-specific hint to the encoding of the data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.1.2\n         */\n        encodingHint: TlvOptionalField(1, TlvString.bound({ maxLength: 100 }))\n    });\n\n    /**\n     * Input to the ContentAppObserver contentAppMessage command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.1\n     */\n    export interface ContentAppMessageRequest extends TypeFromSchema<typeof TlvContentAppMessageRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.4.1\n     */\n    export enum Status {\n        /**\n         * Command succeeded\n         */\n        Success = 0,\n\n        /**\n         * Data field in command was not understood by the Observer\n         */\n        UnexpectedData = 1\n    }\n\n    /**\n     * This command shall be generated in response to ContentAppMessage command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.2\n     */\n    export const TlvContentAppMessageResponse = TlvObject({\n        /**\n         * This field shall indicate the status of the command which resulted in this response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.2.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This optional field shall indicate content app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.2.2\n         */\n        data: TlvOptionalField(1, TlvString.bound({ maxLength: 500 })),\n\n        /**\n         * This optional field shall indicate a content app-specific hint to the encoding of the data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.2.3\n         */\n        encodingHint: TlvOptionalField(2, TlvString.bound({ maxLength: 100 }))\n    });\n\n    /**\n     * This command shall be generated in response to ContentAppMessage command.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.2\n     */\n    export interface ContentAppMessageResponse extends TypeFromSchema<typeof TlvContentAppMessageResponse> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x510,\n        name: \"ContentAppObserver\",\n        revision: 1,\n\n        commands: {\n            /**\n             * Upon receipt, the data field may be parsed and interpreted. Message encoding is specific to the Content\n             * App. A Content App may when possible read attributes from the Basic Information Cluster on the Observer\n             * and use this to determine the Message encoding.\n             *\n             * This command returns a ContentAppMessage Response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12.5.1\n             */\n            contentAppMessage: Command(0x0, TlvContentAppMessageRequest, 0x1, TlvContentAppMessageResponse)\n        }\n    });\n\n    /**\n     * This cluster provides an interface for sending targeted commands to an Observer of a Content App on a Video\n     * Player device such as a Streaming Media Player, Smart TV or Smart Screen.\n     *\n     * The cluster server for Content App Observer is implemented by an endpoint that communicates with a Content App,\n     * such as a Casting Video Client.\n     *\n     * The cluster client for Content App Observer is implemented by a Content App endpoint.\n     *\n     * A Content App is informed of the NodeId of an Observer when a binding is set on the Content App. For a Content\n     * App Platform, the binding is set by the platform when a CastingVideoClient is granted access to the Content App,\n     * and the CastingVideoClient supports the Content App Observer cluster. The Content App can then send the\n     * ContentAppMessage to the Observer (server cluster), and the Observer responds with a ContentAppMessageResponse.\n     *\n     * The Data and EncodingHint fields of the ContentAppMessage and ContentAppMessageResponse contain content\n     * app-specific values, the format and interpretation of which is defined by the Content App vendor, analogous to\n     * the custom message features offered by other popular casting protocols. Standardized cluster and commands are\n     * used here rather than manufacturer-specific cluster and commands because of the role that the Content App\n     * Platform plays in creating the ACLs and Bindings on both sides of the communication between the Content App\n     * Observer endpoint and the Content App endpoint.\n     *\n     * By using standard cluster and commands:\n     *\n     *   1. The Content App Platform is able to easily determine that a binding is needed on the Content App endpoint\n     *      because it can recognize the Content App Observer cluster implemented by a client node.\n     *\n     *   2. The Content App Platform is able to easily identify commands that are allowed to be sent by the Content App\n     *      to a client node because those commands use the Content App Observer cluster.\n     *\n     *   3. The Content App is able to easily determine that a node supports the Content App Observer cluster because\n     *      it has received a binding which specifies the Content App Observer cluster.\n     *\n     *   4. The Casting Video Client is able to support a single cluster for receiving commands from any Content App\n     *      and does not need to explicitly list every Content App it understands.\n     *\n     * A Content App Observer SHOULD ignore the Data and EncodingHint field values in commands from a Content App it\n     * does not recognize. A Content App SHOULD ignore the Data field values in responses when the EncodingHint value\n     * is blank or not recognized.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.12\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type ContentAppObserverCluster = ContentAppObserver.Cluster;\nexport const ContentAppObserverCluster = ContentAppObserver.Cluster;\nClusterRegistry.register(ContentAppObserver.Complete);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AACxB,SAAS,UAAU,kBAAkB,iBAAiB;AACtD,SAAS,iBAAiB;AAE1B,SAAS,eAAe;AAExB,SAAS,uBAAuB;AAEzB,IAAU;AAAA,CAAV,CAAUA,wBAAV;AAMI,EAAMA,oBAAA,8BAA8B,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMjD,MAAM,SAAS,GAAG,UAAU,MAAM,EAAE,WAAW,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOrD,cAAc,iBAAiB,GAAG,UAAU,MAAM,EAAE,WAAW,IAAI,CAAC,CAAC;AAAA,EACzE,CAAC;AAYM,MAAK;AAAL,IAAKC,YAAL;AAIH,IAAAA,gBAAA,aAAU,KAAV;AAKA,IAAAA,gBAAA,oBAAiB,KAAjB;AAAA,KATQ,SAAAD,oBAAA,WAAAA,oBAAA;AAiBL,EAAMA,oBAAA,+BAA+B,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMlD,QAAQ,SAAS,GAAG,QAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOrC,MAAM,iBAAiB,GAAG,UAAU,MAAM,EAAE,WAAW,IAAI,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAO7D,cAAc,iBAAiB,GAAG,UAAU,MAAM,EAAE,WAAW,IAAI,CAAC,CAAC;AAAA,EACzE,CAAC;AAYM,EAAMA,oBAAA,kBAAkB,eAAe;AAAA,IAC1C,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUN,mBAAmB,QAAQ,GAAKA,oBAAA,6BAA6B,GAAKA,oBAAA,4BAA4B;AAAA,IAClG;AAAA,EACJ,CAAC;AA6CM,EAAMA,oBAAA,UAAmBA,oBAAA;AACzB,EAAMA,oBAAA,WAAWA,oBAAA;AAAA,GAjJX;AAqJV,MAAM,4BAA4B,mBAAmB;AAC5D,gBAAgB,SAAS,mBAAmB,QAAQ;",
  "names": ["ContentAppObserver", "Status"]
}
