{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ContentLauncherCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, Command } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvUInt32, TlvBitmap, TlvDouble, TlvEnum, TlvUInt64, TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { MediaPlayback } from \"./MediaPlaybackCluster.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ContentLauncher {\n    /**\n     * These are optional features supported by ContentLauncherCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.4\n     */\n    export enum Feature {\n        /**\n         * ContentSearch (CS)\n         *\n         * Device supports content search (non-app specific)\n         */\n        ContentSearch = \"ContentSearch\",\n\n        /**\n         * UrlPlayback (UP)\n         *\n         * Device supports basic URL-based file playback\n         */\n        UrlPlayback = \"UrlPlayback\",\n\n        /**\n         * AdvancedSeek (AS)\n         *\n         * Enables clients to implement more advanced media seeking behavior in their user interface, such as for\n         * example a \"seek bar\".\n         */\n        AdvancedSeek = \"AdvancedSeek\",\n\n        /**\n         * TextTracks (TT)\n         *\n         * Device or app supports Text Tracks.\n         */\n        TextTracks = \"TextTracks\",\n\n        /**\n         * AudioTracks (AT)\n         *\n         * Device or app supports Audio Tracks.\n         */\n        AudioTracks = \"AudioTracks\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.1\n     */\n    export const SupportedProtocols = {\n        /**\n         * Device supports Dynamic Adaptive Streaming over HTTP (DASH)\n         */\n        dash: BitFlag(0),\n\n        /**\n         * Device supports HTTP Live Streaming (HLS)\n         */\n        hls: BitFlag(1)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.4\n     */\n    export enum MetricType {\n        /**\n         * Dimensions defined in a number of Pixels\n         *\n         * This value is used for dimensions defined in a number of Pixels.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.4.1\n         */\n        Pixels = 0,\n\n        /**\n         * Dimensions defined as a percentage\n         *\n         * This value is for dimensions defined as a percentage of the overall display dimensions. For example, if\n         * using a Percentage Metric type for a Width measurement of 50.0, against a display width of 1920 pixels, then\n         * the resulting value used would be 960 pixels (50.0% of 1920) for that dimension. Whenever a measurement uses\n         * this Metric type, the resulting values shall be rounded (\"floored\") towards 0 if the measurement requires an\n         * integer final value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.4.2\n         */\n        Percentage = 1\n    }\n\n    /**\n     * This object defines dimension which can be used for defining Size of background images.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.8\n     */\n    export const TlvDimension = TlvObject({\n        /**\n         * This field shall indicate the width using the metric defined in Metric\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.8.1\n         */\n        width: TlvField(0, TlvDouble),\n\n        /**\n         * This field shall indicate the height using the metric defined in Metric\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.8.2\n         */\n        height: TlvField(1, TlvDouble),\n\n        /**\n         * This field shall indicate metric used for defining Height/Width.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.8.3\n         */\n        metric: TlvField(2, TlvEnum<MetricType>())\n    });\n\n    /**\n     * This object defines dimension which can be used for defining Size of background images.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.8\n     */\n    export interface Dimension extends TypeFromSchema<typeof TlvDimension> {}\n\n    /**\n     * This object defines style information which can be used by content providers to change the Media Player\u2019s style\n     * related properties.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.9\n     */\n    export const TlvStyleInformation = TlvObject({\n        /**\n         * This field shall indicate the URL of image used for Styling different Video Player sections like Logo,\n         * Watermark etc.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.9.1\n         */\n        imageUrl: TlvOptionalField(0, TlvString.bound({ maxLength: 8192 })),\n\n        /**\n         * This field shall indicate the color, in RGB or RGBA, used for styling different Video Player sections like\n         * Logo, Watermark, etc. The value shall conform to the 6-digit or 8-digit format defined for CSS sRGB\n         * hexadecimal color notation [https://www.w3.org/TR/css-color-4/#hex-notation]. Examples:\n         *\n         *   \u2022 #76DE19 for R=0x76, G=0xDE, B=0x19, A absent\n         *\n         *   \u2022 #76DE1980 for R=0x76, G=0xDE, B=0x19, A=0x80\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.9.2\n         */\n        color: TlvOptionalField(1, TlvString),\n\n        /**\n         * This field shall indicate the size of the image used for Styling different Video Player sections like Logo,\n         * Watermark etc.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.9.3\n         */\n        size: TlvOptionalField(2, TlvDimension)\n    });\n\n    /**\n     * This object defines style information which can be used by content providers to change the Media Player\u2019s style\n     * related properties.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.9\n     */\n    export interface StyleInformation extends TypeFromSchema<typeof TlvStyleInformation> {}\n\n    /**\n     * This object defines Branding Information which can be provided by the client in order to customize the skin of\n     * the Video Player during playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10\n     */\n    export const TlvBrandingInformation = TlvObject({\n        /**\n         * This field shall indicate name of the provider for the given content.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.1\n         */\n        providerName: TlvField(0, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall indicate background of the Video Player while content launch request is being processed by\n         * it. This background information may also be used by the Video Player when it is in idle state.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.2\n         */\n        background: TlvOptionalField(1, TlvStyleInformation),\n\n        /**\n         * This field shall indicate the logo shown when the Video Player is launching. This is also used when the\n         * Video Player is in the idle state and Splash field is not available.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.3\n         */\n        logo: TlvOptionalField(2, TlvStyleInformation),\n\n        /**\n         * This field shall indicate the style of progress bar for media playback.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.4\n         */\n        progressBar: TlvOptionalField(3, TlvStyleInformation),\n\n        /**\n         * This field shall indicate the screen shown when the Video Player is in an idle state. If this property is\n         * not populated, the Video Player shall default to logo or the provider name.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.5\n         */\n        splash: TlvOptionalField(4, TlvStyleInformation),\n\n        /**\n         * This field shall indicate watermark shown when the media is playing.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10.6\n         */\n        waterMark: TlvOptionalField(5, TlvStyleInformation)\n    });\n\n    /**\n     * This object defines Branding Information which can be provided by the client in order to customize the skin of\n     * the Video Player during playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.10\n     */\n    export interface BrandingInformation extends TypeFromSchema<typeof TlvBrandingInformation> {}\n\n    /**\n     * This structure defines Text/Audio Track preferences.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.12\n     */\n    export const TlvTrackPreference = TlvObject({\n        /**\n         * This field shall contain one of the standard Tags for Identifying Languages RFC 5646, which identifies the\n         * primary language used in the Track.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.12.1\n         */\n        languageCode: TlvField(0, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This field shall contain a list of enumerated CharacteristicEnum values that indicate a purpose, trait or\n         * feature associated with the Track. A value of null shall indicate that there are no Characteristics\n         * corresponding to the Track.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.12.2\n         */\n        characteristics: TlvOptionalField(1, TlvNullable(TlvArray(TlvEnum<MediaPlayback.Characteristic>()))),\n\n        /**\n         * This field if present shall indicate the index of the OutputInfoStruct from the OutputList attribute (from\n         * the AudioOutput cluster) and indicates which audio output the Audio Track should be played on.\n         *\n         * This field shall NOT be present if the track is not an audio track.\n         *\n         * If the track is an audio track, this field MUST be present. A value of null shall indicate that the\n         *\n         * server can choose the audio output(s) to play the Audio Track on.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.12.3\n         */\n        audioOutputIndex: TlvOptionalField(2, TlvNullable(TlvUInt8))\n    });\n\n    /**\n     * This structure defines Text/Audio Track preferences.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.12\n     */\n    export interface TrackPreference extends TypeFromSchema<typeof TlvTrackPreference> {}\n\n    /**\n     * PlaybackPreferencesStruct defines the preferences sent by the client to the receiver in the ContentLauncher\n     * LaunchURL or LaunchContent commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.11\n     */\n    export const TlvPlaybackPreferences = TlvObject({\n        /**\n         * This field shall indicate the preferred position (in milliseconds) in the media to launch playback from. In\n         * case the position falls in the middle of a frame, the server shall set the position to the beginning of that\n         * frame and set the SampledPosition attribute on the MediaPlayback cluster accordingly. A value of null shall\n         * indicate that playback position is not applicable for the current state of the media playback.\n         *\n         * ported).\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.11.1\n         */\n        playbackPosition: TlvOptionalField(0, TlvNullable(TlvUInt64)),\n\n        /**\n         * This field shall indicate the user\u2019s preferred Text Track. A value of null shall indicate that the user did\n         * not specify a preferred Text Track on the client. In such a case, the decision to display and select a Text\n         * Track is up to the server.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.11.2\n         */\n        textTrack: TlvOptionalField(1, TlvNullable(TlvTrackPreference)),\n\n        /**\n         * This field shall indicate the list of the user\u2019s preferred Audio Tracks. If the list contains multiple\n         * values, each AudioTrack must also specify a unique audioOutputIndex to play the track on. A value of null\n         * shall indicate that the user did not specify a preferred Audio Track on the client. In such a case, the\n         * decision to play and select an Audio Track is up to the server.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.11.3\n         */\n        audioTracks: TlvOptionalField(2, TlvNullable(TlvArray(TlvTrackPreference)))\n    });\n\n    /**\n     * PlaybackPreferencesStruct defines the preferences sent by the client to the receiver in the ContentLauncher\n     * LaunchURL or LaunchContent commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.11\n     */\n    export interface PlaybackPreferences extends TypeFromSchema<typeof TlvPlaybackPreferences> {}\n\n    /**\n     * Input to the ContentLauncher launchUrl command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2\n     */\n    export const TlvLaunchUrlRequest = TlvObject({\n        /**\n         * This field shall indicate the URL of content to launch.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2.1\n         */\n        contentUrl: TlvField(0, TlvString),\n\n        /**\n         * This field, if present, shall provide a string that may be used to describe the content being accessed at\n         * the given URL.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2.2\n         */\n        displayString: TlvOptionalField(1, TlvString),\n\n        /**\n         * This field, if present, shall indicate the branding information that may be displayed when playing back the\n         * given content.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2.3\n         */\n        brandingInformation: TlvOptionalField(2, TlvBrandingInformation),\n\n        /**\n         * This field, if present, shall indicate the user\u2019s preferred Text/AudioTracks and playbackPosition for the\n         * media, sent from the client to the server. If the server does not find an available track for the title\n         * being played exactly matching a Track requested here, in the list of available tracks, it may default to\n         * picking another track that closely matches the requested track. Alternately, it may go with user preferences\n         * set on the server side (it will use this option if these PlaybackPreferences are not specified). In the case\n         * of text tracks, that may mean that the subtitle text is not displayed at all. In the cases where the\n         * preferred Text/AudioTracks are not available, the server shall return the TextTrackNotAvailable and/or\n         * AudioTrackNotAvailable Status(es) in the LauncherResponse.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2.4\n         */\n        playbackPreferences: TlvOptionalField(3, TlvPlaybackPreferences)\n    });\n\n    /**\n     * Input to the ContentLauncher launchUrl command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2\n     */\n    export interface LaunchUrlRequest extends TypeFromSchema<typeof TlvLaunchUrlRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.2\n     */\n    export enum Status {\n        /**\n         * Command succeeded\n         */\n        Success = 0,\n\n        /**\n         * Requested URL could not be reached by device.\n         */\n        UrlNotAvailable = 1,\n\n        /**\n         * Requested URL returned 401 error code.\n         */\n        AuthFailed = 2,\n\n        /**\n         * Requested Text Track (in PlaybackPreferences) not available\n         */\n        TextTrackNotAvailable = 3,\n\n        /**\n         * Requested Audio Track (in PlaybackPreferences) not available\n         */\n        AudioTrackNotAvailable = 4\n    }\n\n    /**\n     * This command shall be generated in response to LaunchContent and LaunchURL commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.3\n     */\n    export const TlvLauncherResponse = TlvObject({\n        /**\n         * This field shall indicate the status of the command which resulted in this response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.3.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This field shall indicate Optional app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.3.2\n         */\n        data: TlvOptionalField(1, TlvString)\n    });\n\n    /**\n     * This command shall be generated in response to LaunchContent and LaunchURL commands.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.3\n     */\n    export interface LauncherResponse extends TypeFromSchema<typeof TlvLauncherResponse> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.3\n     */\n    export enum ParameterEnum {\n        /**\n         * Actor represents an actor credited in video media content; for example, \u201CGaby Hoffman\u201D\n         */\n        Actor = 0,\n\n        /**\n         * Channel represents the identifying data for a television channel; for example, \"PBS\"\n         */\n        Channel = 1,\n\n        /**\n         * A character represented in video media content; for example, \u201CSnow White\u201D\n         */\n        Character = 2,\n\n        /**\n         * A director of the video media content; for example, \u201CSpike Lee\u201D\n         */\n        Director = 3,\n\n        /**\n         * An event is a reference to a type of event; examples would include sports, music, or other types of events.\n         * For example, searching for \"Football games\" would search for a 'game' event entity and a 'football' sport\n         * entity.\n         */\n        Event = 4,\n\n        /**\n         * A franchise is a video entity which can represent a number of video entities, like movies or TV shows. For\n         * example, take the fictional franchise \"Intergalactic Wars\" which represents a collection of movie trilogies,\n         * as well as animated and live action TV shows. This entity type was introduced to account for requests by\n         * customers such as \"Find Intergalactic Wars movies\", which would search for all 'Intergalactic Wars' programs\n         * of the MOVIE MediaType, rather than attempting to match to a single title.\n         */\n        Franchise = 5,\n\n        /**\n         * Genre represents the genre of video media content such as action, drama or comedy.\n         */\n        Genre = 6,\n\n        /**\n         * League represents the categorical information for a sporting league; for example, \"NCAA\"\n         */\n        League = 7,\n\n        /**\n         * Popularity indicates whether the user asks for popular content.\n         */\n        Popularity = 8,\n\n        /**\n         * The provider (MSP) the user wants this media to be played on; for example, \"Netflix\".\n         */\n        Provider = 9,\n\n        /**\n         * Sport represents the categorical information of a sport; for example, football\n         */\n        Sport = 10,\n\n        /**\n         * SportsTeam represents the categorical information of a professional sports team; for example, \"University of\n         * Washington Huskies\"\n         */\n        SportsTeam = 11,\n\n        /**\n         * The type of content requested. Supported types are \"Movie\", \"MovieSeries\", \"TVSeries\", \"TVSeason\",\n         * \"TVEpisode\", \"Trailer\", \"SportsEvent\", \"LiveEvent\", and \"Video\"\n         */\n        Type = 12,\n\n        /**\n         * Video represents the identifying data for a specific piece of video content; for example, \"Manchester by the\n         * Sea\".\n         */\n        Video = 13,\n\n        /**\n         * Season represents the specific season number within a TV series.\n         */\n        Season = 14,\n\n        /**\n         * Episode represents a specific episode number within a Season in a TV series.\n         */\n        Episode = 15,\n\n        /**\n         * Represents a search text input across many parameter types or even outside of the defined param types.\n         */\n        Any = 16\n    }\n\n    /**\n     * This object defines additional name=value pairs that can be used for identifying content.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.5\n     */\n    export const TlvAdditionalInfo = TlvObject({\n        /**\n         * This field shall indicate the name of external id, ex. \"musicbrainz\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.5.1\n         */\n        name: TlvField(0, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field shall indicate the value for external id, ex. \"ST0000000666661\".\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.5.2\n         */\n        value: TlvField(1, TlvString.bound({ maxLength: 8192 }))\n    });\n\n    /**\n     * This object defines additional name=value pairs that can be used for identifying content.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.5\n     */\n    export interface AdditionalInfo extends TypeFromSchema<typeof TlvAdditionalInfo> {}\n\n    /**\n     * This object defines inputs to a search for content for display or playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.6\n     */\n    export const TlvParameter = TlvObject({\n        /**\n         * This field shall indicate the entity type.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.6.1\n         */\n        type: TlvField(0, TlvEnum<ParameterEnum>()),\n\n        /**\n         * This field shall indicate the entity value, which is a search string, ex. \u201CManchester by the Sea\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.6.2\n         */\n        value: TlvField(1, TlvString.bound({ maxLength: 1024 })),\n\n        /**\n         * This field shall indicate the list of additional external content identifiers.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.6.3\n         */\n        externalIdList: TlvOptionalField(2, TlvArray(TlvAdditionalInfo))\n    });\n\n    /**\n     * This object defines inputs to a search for content for display or playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.6\n     */\n    export interface Parameter extends TypeFromSchema<typeof TlvParameter> {}\n\n    /**\n     * This object defines inputs to a search for content for display or playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.7\n     */\n    export const TlvContentSearch = TlvObject({\n        /**\n         * This field shall indicate the list of parameters comprising the search. If multiple parameters are provided,\n         * the search parameters shall be joined with 'AND' logic. e.g. action movies with Tom Cruise will be\n         * represented as [{Actor: 'Tom Cruise'}, {Type: 'Movie'}, {Genre: 'Action'}]\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.7.1\n         */\n        parameterList: TlvField(0, TlvArray(TlvParameter))\n    });\n\n    /**\n     * This object defines inputs to a search for content for display or playback.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.5.7\n     */\n    export interface ContentSearch extends TypeFromSchema<typeof TlvContentSearch> {}\n\n    /**\n     * Input to the ContentLauncher launchContent command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1\n     */\n    export const TlvLaunchContentRequest = TlvObject({\n        /**\n         * This field shall indicate the content to launch.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1.1\n         */\n        search: TlvField(0, TlvContentSearch),\n\n        /**\n         * This field shall indicate whether to automatically start playing content, where:\n         *\n         *   \u2022 TRUE means best match should start playing automatically.\n         *\n         *   \u2022 FALSE means matches should be displayed on screen for user selection.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1.2\n         */\n        autoPlay: TlvField(1, TlvBoolean),\n\n        /**\n         * This field, if present, shall indicate app-specific data.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1.3\n         */\n        data: TlvOptionalField(2, TlvString),\n\n        /**\n         * This field, if present, shall indicate the user\u2019s preferred Text/AudioTracks and playbackPosition for the\n         * media, sent from the client to the server. If the server does not find an available track for the title\n         * being played exactly matching a Track requested here, in the list of available tracks, it may default to\n         * picking another track that closely matches the requested track. Alternately, it may go with user preferences\n         * set on the server side (it will use this option if these PlaybackPreferences are not specified). In the case\n         * of text tracks, that may mean that the subtitle text is not displayed at all. In the cases where the\n         * preferred Text/AudioTracks are not available, the server shall return the TextTrackNotAvailable and/or\n         * AudioTrackNotAvailable Status(es) in the LauncherResponse.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1.4\n         */\n        playbackPreferences: TlvOptionalField(3, TlvPlaybackPreferences),\n\n        /**\n         * This field, if present, shall indicate whether to consider the context of current ongoing activity on the\n         * receiver to fulfill the request. For example if the request only includes data in ContentSearch that\n         * specifies an Episode number, and UseCurrentContent is set to TRUE, if there is a TV series on going, the\n         * request refers to the specific episode of the ongoing season of the TV series. TRUE means current activity\n         * context may be considered FALSE means current activity context shall NOT be considered\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1.5\n         */\n        useCurrentContext: TlvOptionalField(4, TlvBoolean)\n    });\n\n    /**\n     * Input to the ContentLauncher launchContent command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1\n     */\n    export interface LaunchContentRequest extends TypeFromSchema<typeof TlvLaunchContentRequest> {}\n\n    /**\n     * A ContentLauncherCluster supports these elements if it supports feature UrlPlayback.\n     */\n    export const UrlPlaybackComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall provide a list of content types supported by the Video Player or Content App in the\n             * form of entries in the HTTP \"Accept\" request header.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.6.1\n             */\n            acceptHeader: Attribute(0x0, TlvArray(TlvString, { maxLength: 100 }), { persistent: true, default: [] }),\n\n            /**\n             * This attribute shall provide information about supported streaming protocols.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.6.2\n             */\n            supportedStreamingProtocols: Attribute(0x1, TlvBitmap(TlvUInt32, SupportedProtocols), { persistent: true })\n        },\n\n        commands: {\n            /**\n             * Upon receipt, this shall launch content from the specified URL.\n             *\n             * The content types supported include those identified in the AcceptHeader and SupportedStreaming\n             *\n             * Protocols attributes.\n             *\n             * A check shall be made to ensure the URL is secure (uses HTTPS).\n             *\n             * When playing a video stream in response to this command, an indication (ex. visual) of the identity of\n             * the origin node of the video stream shall be provided. This could be in the form of a friendly name\n             * label which uniquely identifies the node to the user. This friendly name label is typically assigned by\n             * the Matter Admin (ex. TV) at the time of commissioning and, when it\u2019s a device, is often editable by the\n             * user. It might be a combination of a company name and friendly name, for example, \u201DAcme\u201D or \u201CAcme\n             * Streaming Service on Alice\u2019s Phone\u201D.\n             *\n             * This command returns a Launch Response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.2\n             */\n            launchUrl: Command(0x1, TlvLaunchUrlRequest, 0x2, TlvLauncherResponse)\n        }\n    });\n\n    /**\n     * A ContentLauncherCluster supports these elements if it supports feature ContentSearch.\n     */\n    export const ContentSearchComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Upon receipt, this shall launch the specified content with optional search criteria. This command\n             * returns a Launch Response.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7.7.1\n             */\n            launchContent: Command(0x0, TlvLaunchContentRequest, 0x2, TlvLauncherResponse)\n        }\n    });\n\n    /**\n     * A ContentLauncherCluster supports these elements if it supports features ContentSearch or UrlPlayback.\n     */\n    export const ContentSearchOrUrlPlaybackComponent = MutableCluster.Component({});\n\n    /**\n     * These elements and properties are present in all ContentLauncher clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x50a,\n        name: \"ContentLauncher\",\n        revision: 2,\n\n        features: {\n            /**\n             * ContentSearch\n             *\n             * Device supports content search (non-app specific)\n             */\n            contentSearch: BitFlag(0),\n\n            /**\n             * UrlPlayback\n             *\n             * Device supports basic URL-based file playback\n             */\n            urlPlayback: BitFlag(1),\n\n            /**\n             * AdvancedSeek\n             *\n             * Enables clients to implement more advanced media seeking behavior in their user interface, such as for\n             * example a \"seek bar\".\n             */\n            advancedSeek: BitFlag(2),\n\n            /**\n             * TextTracks\n             *\n             * Device or app supports Text Tracks.\n             */\n            textTracks: BitFlag(3),\n\n            /**\n             * AudioTracks\n             *\n             * Device or app supports Audio Tracks.\n             */\n            audioTracks: BitFlag(4)\n        },\n\n        /**\n         * This metadata controls which ContentLauncherCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { urlPlayback: true }, component: UrlPlaybackComponent },\n            { flags: { contentSearch: true }, component: ContentSearchComponent },\n            { flags: { contentSearch: true }, component: ContentSearchOrUrlPlaybackComponent },\n            { flags: { urlPlayback: true }, component: ContentSearchOrUrlPlaybackComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster provides an interface for launching content on a Video Player device such as a Streaming Media\n     * Player, Smart TV or Smart Screen.\n     *\n     * This cluster would be supported on a Video Player device or devices that can playback content, such as a\n     * Streaming Media Player, Smart TV or Smart Screen. This cluster supports playing back content referenced by URL.\n     * It supports finding content by type and global identifier, and either playing the content or displaying the\n     * search results.\n     *\n     * The cluster server for Content Launcher is implemented by an endpoint that can launch content, such as a Video\n     * Player, or an endpoint representing a Content App on such a device.\n     *\n     * When this cluster is implemented for an Content App Endpoint (Endpoint with type \u201CContent App\u201D and having an\n     * Application Basic cluster), the Video Player device shall launch the application when a client invokes the\n     * LaunchContent or LaunchURL commands.\n     *\n     * ContentLauncherCluster supports optional features that you can enable with the ContentLauncherCluster.with()\n     * factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.7\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const UP = { urlPlayback: true };\n    const CS = { contentSearch: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            acceptHeader: MutableCluster.AsConditional(\n                UrlPlaybackComponent.attributes.acceptHeader,\n                { mandatoryIf: [UP] }\n            ),\n            supportedStreamingProtocols: MutableCluster.AsConditional(\n                UrlPlaybackComponent.attributes.supportedStreamingProtocols,\n                { mandatoryIf: [UP] }\n            )\n        },\n\n        commands: {\n            launchContent: MutableCluster.AsConditional(\n                ContentSearchComponent.commands.launchContent,\n                { mandatoryIf: [CS] }\n            ),\n            launchUrl: MutableCluster.AsConditional(UrlPlaybackComponent.commands.launchUrl, { mandatoryIf: [UP] })\n        }\n    });\n\n    /**\n     * This cluster supports all ContentLauncher features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type ContentLauncherCluster = ContentLauncher.Cluster;\nexport const ContentLauncherCluster = ContentLauncher.Cluster;\nClusterRegistry.register(ContentLauncher.Complete);\n"],
  "mappings": "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",
  "names": ["ContentLauncher", "Feature", "MetricType", "Status", "ParameterEnum"]
}
