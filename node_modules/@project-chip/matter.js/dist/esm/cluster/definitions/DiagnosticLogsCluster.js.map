{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/DiagnosticLogsCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command } from \"../Cluster.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvEnum, TlvEpochUs, TlvSysTimeUs } from \"../../tlv/TlvNumber.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace DiagnosticLogs {\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.1\n     */\n    export enum Intent {\n        /**\n         * Logs to be used for end- user support\n         *\n         * shall indicate that the purpose of the log request is to retrieve logs for the intention of providing\n         * support to an end-user.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.1.1\n         */\n        EndUserSupport = 0,\n\n        /**\n         * Logs to be used for network diagnostics\n         *\n         * shall indicate that the purpose of the log request is to diagnose the network(s) for which the Node is\n         * currently commissioned (and/or connected) or has previously been commissioned (and/or connected).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.1.2\n         */\n        NetworkDiag = 1,\n\n        /**\n         * Obtain crash logs from the Node\n         *\n         * shall indicate that the purpose of the log request is to retrieve any crash logs that may be present on a\n         * Node.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.1.3\n         */\n        CrashLogs = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.3\n     */\n    export enum TransferProtocol {\n        /**\n         * Logs to be returned as a response\n         *\n         * shall be used by a Client to request that logs are transferred using the LogContent attribute of the response\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.3.1\n         */\n        ResponsePayload = 0,\n\n        /**\n         * Logs to be returned using BDX\n         *\n         * shall be used by a Client to request that logs are transferred using BDX as defined in BDX Protocol\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.3.2\n         */\n        Bdx = 1\n    }\n\n    /**\n     * Input to the DiagnosticLogs retrieveLogsRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1\n     */\n    export const TlvRetrieveLogsRequest = TlvObject({\n        /**\n         * This field shall indicate why the diagnostic logs are being retrieved from the Node. A Node may utilize this\n         * field to selectively determine the logs to transfer.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1.1\n         */\n        intent: TlvField(0, TlvEnum<Intent>()),\n\n        /**\n         * This field shall be used to indicate how the log transfer is to be realized. If the field is set to BDX,\n         * then if the receiving Node supports BDX it shall attempt to use BDX to transfer any potential diagnostic\n         * logs; if the receiving Node does not support BDX then the Node shall follow the requirements defined for a\n         * TransferProtocolEnum of ResponsePayload. If this field is set to ResponsePayload the receiving Node shall\n         * only utilize the LogContent field of the RetrieveLogsResponse command to transfer diagnostic log information.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1.2\n         */\n        requestedProtocol: TlvField(1, TlvEnum<TransferProtocol>()),\n\n        /**\n         * This field shall be present if the RequestedProtocol is BDX. The TransferFileDesignator shall be set as the\n         * File Designator of the BDX transfer if initiated.\n         *\n         * Effect on Receipt\n         *\n         * On receipt of this command, the Node shall respond with a RetrieveLogsResponse command.\n         *\n         * If the RequestedProtocol is set to BDX the Node SHOULD immediately realize the RetrieveLogsResponse command\n         * by initiating a BDX Transfer, sending a BDX SendInit message with the File Designator field of the message\n         * set to the value of the TransferFileDesignator field of the RetrieveLogsRequest. On reception of a BDX\n         * SendAccept message the Node shall send a RetrieveLogsResponse command with a Status field set to Success and\n         * proceed with the log transfer over BDX. If a failure StatusReport is received in response to the SendInit\n         * message, the Node shall send a RetrieveLogsResponse command with a Status of Denied. In the case where the\n         * Node is able to fit the entirety of the requested logs within the LogContent field, the Status field of the\n         * RetrieveLogsResponse shall be set to Exhausted and a BDX session shall NOT be initiated.\n         *\n         * If the RequestedProtocol is set to BDX and either the Node does not support BDX or it is not possible for\n         * the Node to establish a BDX session, then the Node shall utilize the LogContent field of the\n         * RetrieveLogsResponse command to transfer as much of the current logs as it can fit within the response, and\n         * the Status field of the RetrieveLogsResponse shall be set to Exhausted.\n         *\n         * If the RequestedProtocol is set to ResponsePayload the Node shall utilize the LogContent field of the\n         * RetrieveLogsResponse command to transfer as much of the current logs as it can fit within the response, and\n         * a BDX session shall NOT be initiated.\n         *\n         * If the RequestedProtocol is set to BDX and there is no TransferFileDesignator the command shall fail with a\n         * Status Code of INVALID_COMMAND.\n         *\n         * If the Intent and/or the RequestedProtocol arguments contain invalid (out of range) values the command shall\n         * fail with a Status Code of INVALID_COMMAND.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1.3\n         */\n        transferFileDesignator: TlvOptionalField(2, TlvString.bound({ maxLength: 32 }))\n    });\n\n    /**\n     * Input to the DiagnosticLogs retrieveLogsRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1\n     */\n    export interface RetrieveLogsRequest extends TypeFromSchema<typeof TlvRetrieveLogsRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2\n     */\n    export enum Status {\n        /**\n         * Successful transfer of logs\n         *\n         * shall be used if diagnostic logs will be or are being transferred.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2.1\n         */\n        Success = 0,\n\n        /**\n         * All logs has been transferred\n         *\n         * shall be used when a BDX session is requested, however, all available logs were provided in a LogContent\n         * field.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2.2\n         */\n        Exhausted = 1,\n\n        /**\n         * No logs of the requested type available\n         *\n         * shall be used if the Node does not currently have any diagnostic logs of the requested type (Intent) to\n         * transfer.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2.3\n         */\n        NoLogs = 2,\n\n        /**\n         * Unable to handle request, retry later\n         *\n         * shall be used if the Node is unable to handle the request (e.g. in the process of another transfer) and the\n         * Client SHOULD re-attempt the request later.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2.4\n         */\n        Busy = 3,\n\n        /**\n         * The request is denied, no logs being transferred\n         *\n         * shall be used if the Node is denying the current transfer of diagnostic logs for any reason.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.4.2.5\n         */\n        Denied = 4\n    }\n\n    /**\n     * This shall be generated as a response to the RetrieveLogsRequest. The data for this command is shown in the\n     * following.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2\n     */\n    export const TlvRetrieveLogsResponse = TlvObject({\n        /**\n         * This field shall indicate the result of an attempt to retrieve diagnostic logs.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This field shall be included in the command if the Status field has a value of Success or Exhausted. A Node\n         * SHOULD utilize this field to transfer the newest diagnostic log entries. This field shall be empty if BDX is\n         * requested and the Status field has a value of Success.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2.2\n         */\n        logContent: TlvField(1, TlvByteString.bound({ maxLength: 1024 })),\n\n        /**\n         * This field SHOULD be included in the command if the Status field has a value of Success and the Node\n         * maintains a wall clock. When included, the UTCTimeStamp field shall contain the value of the oldest log\n         * entry in the diagnostic logs that are being transferred.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2.3\n         */\n        utcTimeStamp: TlvOptionalField(2, TlvEpochUs),\n\n        /**\n         * This field SHOULD be included in the command if the Status field has a value of Success. When included, the\n         * TimeSinceBoot field shall contain the time of the oldest log entry in the diagnostic logs that are being\n         * transferred represented by the number of microseconds since the last time the Node went through a reboot.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2.4\n         */\n        timeSinceBoot: TlvOptionalField(3, TlvSysTimeUs)\n    });\n\n    /**\n     * This shall be generated as a response to the RetrieveLogsRequest. The data for this command is shown in the\n     * following.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.2\n     */\n    export interface RetrieveLogsResponse extends TypeFromSchema<typeof TlvRetrieveLogsResponse> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x32,\n        name: \"DiagnosticLogs\",\n        revision: 1,\n\n        commands: {\n            /**\n             * Reception of this command starts the process of retrieving diagnostic logs from a Node.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.11.5.1\n             */\n            retrieveLogsRequest: Command(0x0, TlvRetrieveLogsRequest, 0x1, TlvRetrieveLogsResponse)\n        }\n    });\n\n    /**\n     * This Cluster supports an interface to a Node. It provides commands for retrieving unstructured diagnostic logs\n     * from a Node that may be used to aid in diagnostics. It will often be the case that unstructured diagnostic logs\n     * will be Node-wide and not specific to any subset of Endpoints. When present, this Cluster shall be implemented\n     * once for the Node. The Node SHOULD also implement the BDX Initiator and BDX Sender roles as defined in the BDX\n     * Protocol.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.11\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type DiagnosticLogsCluster = DiagnosticLogs.Cluster;\nexport const DiagnosticLogsCluster = DiagnosticLogs.Cluster;\nClusterRegistry.register(DiagnosticLogs.Complete);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,sBAAsB;AAC/B,SAAS,eAAe;AACxB,SAAS,UAAU,kBAAkB,iBAAiB;AACtD,SAAS,SAAS,YAAY,oBAAoB;AAClD,SAAS,WAAW,qBAAqB;AAGzC,SAAS,uBAAuB;AAEzB,IAAU;AAAA,CAAV,CAAUA,oBAAV;AAII,MAAK;AAAL,IAAKC,YAAL;AASH,IAAAA,gBAAA,oBAAiB,KAAjB;AAUA,IAAAA,gBAAA,iBAAc,KAAd;AAUA,IAAAA,gBAAA,eAAY,KAAZ;AAAA,KA7BQ,SAAAD,gBAAA,WAAAA,gBAAA;AAmCL,MAAK;AAAL,IAAKE,sBAAL;AAQH,IAAAA,oCAAA,qBAAkB,KAAlB;AASA,IAAAA,oCAAA,SAAM,KAAN;AAAA,KAjBQ,mBAAAF,gBAAA,qBAAAA,gBAAA;AAyBL,EAAMA,gBAAA,yBAAyB,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAO5C,QAAQ,SAAS,GAAG,QAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWrC,mBAAmB,SAAS,GAAG,QAA0B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoC1D,wBAAwB,iBAAiB,GAAG,UAAU,MAAM,EAAE,WAAW,GAAG,CAAC,CAAC;AAAA,EAClF,CAAC;AAYM,MAAK;AAAL,IAAKG,YAAL;AAQH,IAAAA,gBAAA,aAAU,KAAV;AAUA,IAAAA,gBAAA,eAAY,KAAZ;AAUA,IAAAA,gBAAA,YAAS,KAAT;AAUA,IAAAA,gBAAA,UAAO,KAAP;AASA,IAAAA,gBAAA,YAAS,KAAT;AAAA,KA/CQ,SAAAH,gBAAA,WAAAA,gBAAA;AAwDL,EAAMA,gBAAA,0BAA0B,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM7C,QAAQ,SAAS,GAAG,QAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASrC,YAAY,SAAS,GAAG,cAAc,MAAM,EAAE,WAAW,KAAK,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAShE,cAAc,iBAAiB,GAAG,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAS5C,eAAe,iBAAiB,GAAG,YAAY;AAAA,EACnD,CAAC;AAaM,EAAMA,gBAAA,kBAAkB,eAAe;AAAA,IAC1C,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMN,qBAAqB,QAAQ,GAAKA,gBAAA,wBAAwB,GAAKA,gBAAA,uBAAuB;AAAA,IAC1F;AAAA,EACJ,CAAC;AAaM,EAAMA,gBAAA,UAAmBA,gBAAA;AACzB,EAAMA,gBAAA,WAAWA,gBAAA;AAAA,GArQX;AAyQV,MAAM,wBAAwB,eAAe;AACpD,gBAAgB,SAAS,eAAe,QAAQ;",
  "names": ["DiagnosticLogs", "Intent", "TransferProtocol", "Status"]
}
