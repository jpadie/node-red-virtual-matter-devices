{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/IdentifyCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { WritableAttribute, Attribute, Command, TlvNoResponse, AccessLevel, OptionalCommand } from \"../Cluster.js\";\nimport { TlvUInt16, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Identify {\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.4.1\n     */\n    export enum IdentifyType {\n        /**\n         * No presentation.\n         */\n        None = 0,\n\n        /**\n         * Light output of a lighting product.\n         */\n        LightOutput = 1,\n\n        /**\n         * Typically a small LED.\n         */\n        VisibleIndicator = 2,\n\n        AudibleBeep = 3,\n\n        /**\n         * Presentation will be visible on display screen.\n         */\n        Display = 4,\n\n        /**\n         * Presentation will be conveyed by actuator functionality such as through a window blind operation or in- wall\n         * relay.\n         */\n        Actuator = 5\n    }\n\n    /**\n     * Input to the Identify identify command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.1\n     */\n    export const TlvIdentifyRequest = TlvObject({ identifyTime: TlvField(0, TlvUInt16) });\n\n    /**\n     * Input to the Identify identify command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.1\n     */\n    export interface IdentifyRequest extends TypeFromSchema<typeof TlvIdentifyRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.4.2\n     */\n    export enum EffectIdentifier {\n        /**\n         * e.g., Light is turned on/off once.\n         */\n        Blink = 0,\n\n        /**\n         * e.g., Light is turned on/off over 1 second and repeated 15 times.\n         */\n        Breathe = 1,\n\n        /**\n         * e.g., Colored light turns green for 1 second; non-colored light flashes twice.\n         */\n        Okay = 2,\n\n        /**\n         * e.g., Colored light turns orange for 8 seconds; non-colored light switches to the maximum brightness for\n         * 0.5s and then minimum brightness for 7.5s.\n         */\n        ChannelChange = 11,\n\n        /**\n         * Complete the current effect sequence before terminating. e.g., if in the middle of a breathe effect (as\n         * above), first complete the current 1s breathe effect and then terminate the effect.\n         */\n        FinishEffect = 254,\n\n        /**\n         * Terminate the effect as soon as possible.\n         */\n        StopEffect = 255\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.4.3\n     */\n    export enum EffectVariant {\n        /**\n         * Indicates the default effect is used\n         */\n        Default = 0\n    }\n\n    /**\n     * Input to the Identify triggerEffect command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.2\n     */\n    export const TlvTriggerEffectRequest = TlvObject({\n        /**\n         * This field specifies the identify effect to use and shall contain one of the non-reserved values in\n         * EffectIdentifierEnum.\n         *\n         * All values of the EffectIdentifierEnum shall be supported. Implementors may deviate from the example light\n         * effects in EffectIdentifierEnum, but they SHOULD indicate during testing how they handle each effect.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.2.1\n         */\n        effectIdentifier: TlvField(0, TlvEnum<EffectIdentifier>()),\n\n        /**\n         * This field is used to indicate which variant of the effect, indicated in the EffectIdentifier field, SHOULD\n         * be triggered. If a device does not support the given variant, it shall use the default variant. This field\n         * shall contain one of the values in EffectVariantEnum.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.2.2\n         */\n        effectVariant: TlvField(1, TlvEnum<EffectVariant>())\n    });\n\n    /**\n     * Input to the Identify triggerEffect command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.2\n     */\n    export interface TriggerEffectRequest extends TypeFromSchema<typeof TlvTriggerEffectRequest> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x3,\n        name: \"Identify\",\n        revision: 4,\n\n        attributes: {\n            /**\n             * This attribute specifies the remaining length of time, in seconds, that the endpoint will continue to\n             * identify itself.\n             *\n             * If this attribute is set to a value other than 0 then the device shall enter its identification state,\n             * in order to indicate to an observer which of several nodes and/or endpoints it is. It is recommended\n             * that this state consists of flashing a light with a period of 0.5 seconds. The IdentifyTime attribute\n             * shall be decremented every second while in this state.\n             *\n             * If this attribute reaches or is set to the value 0 then the device shall terminate its identification\n             * state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.5.1\n             */\n            identifyTime: WritableAttribute(0x0, TlvUInt16, { default: 0 }),\n\n            /**\n             * This attribute specifies how the identification state is presented to the user.\n             *\n             * This field shall contain one of the values defined in IdentifyTypeEnum. The value None shall NOT be used\n             * if the device is capable of presenting its identification state using one of the other methods defined\n             * in IdentifyTypeEnum.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.5.2\n             */\n            identifyType: Attribute(0x1, TlvEnum<IdentifyType>())\n        },\n\n        commands: {\n            /**\n             * This command starts or stops the receiving device identifying itself.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.1\n             */\n            identify: Command(0x0, TlvIdentifyRequest, 0x0, TlvNoResponse, { invokeAcl: AccessLevel.Manage }),\n\n            /**\n             * This command allows the support of feedback to the user, such as a certain light effect. It is used to\n             * allow an implementation to provide visual feedback to the user under certain circumstances such as a\n             * color light turning green when it has successfully connected to a network. The use of this command and\n             * the effects themselves are entirely up to the implementer to use whenever a visual feedback is useful\n             * but it is not the same as and does not replace the identify mechanism used during commissioning.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2.6.2\n             */\n            triggerEffect: OptionalCommand(\n                0x40,\n                TlvTriggerEffectRequest,\n                0x40,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports an endpoint identification state (e.g., flashing a light), that indicates to an observer\n     * (e.g., an installer) which of several nodes and/or endpoints it is. It also supports a multicast request that\n     * any endpoint that is identifying itself to respond to the initiator.\n     *\n     * The state of this cluster may be shared on more than one endpoint on a node.\n     *\n     * For Example: Two endpoints on a single node, one a temperature sensor, and one a humidity sensor, may both share\n     * the same cluster instance and therefore identification state (e.g. single LED on the node).\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type IdentifyCluster = Identify.Cluster;\nexport const IdentifyCluster = Identify.Cluster;\nClusterRegistry.register(Identify.Complete);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,sBAAsB;AAC/B,SAAS,mBAAmB,WAAW,SAAS,eAAe,aAAa,uBAAuB;AACnG,SAAS,WAAW,eAAe;AACnC,SAAS,UAAU,iBAAiB;AAGpC,SAAS,uBAAuB;AAEzB,IAAU;AAAA,CAAV,CAAUA,cAAV;AAII,MAAK;AAAL,IAAKC,kBAAL;AAIH,IAAAA,4BAAA,UAAO,KAAP;AAKA,IAAAA,4BAAA,iBAAc,KAAd;AAKA,IAAAA,4BAAA,sBAAmB,KAAnB;AAEA,IAAAA,4BAAA,iBAAc,KAAd;AAKA,IAAAA,4BAAA,aAAU,KAAV;AAMA,IAAAA,4BAAA,cAAW,KAAX;AAAA,KA3BQ,eAAAD,UAAA,iBAAAA,UAAA;AAmCL,EAAMA,UAAA,qBAAqB,UAAU,EAAE,cAAc,SAAS,GAAG,SAAS,EAAE,CAAC;AAY7E,MAAK;AAAL,IAAKE,sBAAL;AAIH,IAAAA,oCAAA,WAAQ,KAAR;AAKA,IAAAA,oCAAA,aAAU,KAAV;AAKA,IAAAA,oCAAA,UAAO,KAAP;AAMA,IAAAA,oCAAA,mBAAgB,MAAhB;AAMA,IAAAA,oCAAA,kBAAe,OAAf;AAKA,IAAAA,oCAAA,gBAAa,OAAb;AAAA,KA/BQ,mBAAAF,UAAA,qBAAAA,UAAA;AAqCL,MAAK;AAAL,IAAKG,mBAAL;AAIH,IAAAA,8BAAA,aAAU,KAAV;AAAA,KAJQ,gBAAAH,UAAA,kBAAAA,UAAA;AAYL,EAAMA,UAAA,0BAA0B,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAU7C,kBAAkB,SAAS,GAAG,QAA0B,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASzD,eAAe,SAAS,GAAG,QAAuB,CAAC;AAAA,EACvD,CAAC;AAYM,EAAMA,UAAA,kBAAkB,eAAe;AAAA,IAC1C,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IAEV,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeR,cAAc,kBAAkB,GAAK,WAAW,EAAE,SAAS,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAW9D,cAAc,UAAU,GAAK,QAAsB,CAAC;AAAA,IACxD;AAAA,IAEA,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMN,UAAU,QAAQ,GAAKA,UAAA,oBAAoB,GAAK,eAAe,EAAE,WAAW,YAAY,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWhG,eAAe;AAAA,QACX;AAAA,QACAA,UAAA;AAAA,QACA;AAAA,QACA;AAAA,QACA,EAAE,WAAW,YAAY,OAAO;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ,CAAC;AAgBM,EAAMA,UAAA,UAAmBA,UAAA;AACzB,EAAMA,UAAA,WAAWA,UAAA;AAAA,GAhNX;AAoNV,MAAM,kBAAkB,SAAS;AACxC,gBAAgB,SAAS,SAAS,QAAQ;",
  "names": ["Identify", "IdentifyType", "EffectIdentifier", "EffectVariant"]
}
