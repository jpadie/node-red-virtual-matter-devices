{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/TemperatureControlCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, FixedAttribute, Command, TlvNoResponse } from \"../Cluster.js\";\nimport { TlvInt16, TlvUInt8 } from \"../../tlv/TlvNumber.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace TemperatureControl {\n    /**\n     * These are optional features supported by TemperatureControlCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4\n     */\n    export enum Feature {\n        /**\n         * TemperatureNumber (TN)\n         *\n         * For devices that use an actual temperature value for the temperature setpoint, such as some water heaters,\n         * the feature TN shall be used. Note that this cluster provides and supports temperatures in degrees Celsius\n         * via the temperature data type.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.1\n         */\n        TemperatureNumber = \"TemperatureNumber\",\n\n        /**\n         * TemperatureLevel (TL)\n         *\n         * For devices that use vendor-specific temperature levels for the temperature setpoint, such as some washers,\n         * the feature TL shall be used.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.2\n         */\n        TemperatureLevel = \"TemperatureLevel\",\n\n        /**\n         * TemperatureStep (STEP)\n         *\n         * For devices that support discrete temperature setpoints that are larger than the temperature resolution\n         * imposed via the temperature data type, the Step feature may be used.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.3\n         */\n        TemperatureStep = \"TemperatureStep\"\n    }\n\n    /**\n     * Input to the TemperatureControl setTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.6.1\n     */\n    export const TlvSetTemperatureRequest = TlvObject({\n        /**\n         * This field shall specify the desired temperature setpoint that the server is to be set to.\n         *\n         * The TargetTemperature shall be from MinTemperature to MaxTemperature inclusive. If the Step attribute is\n         * supported, TargetTemperature shall be such that (TargetTemperature - MinTemperature) % Step == 0.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.6.1.1\n         */\n        targetTemperature: TlvOptionalField(0, TlvInt16),\n\n        /**\n         * This field shall specify the index of the list item in the SupportedTemperatureLevels list that represents\n         * the desired temperature level setting of the server. The value of this field shall be between 0 and the\n         * length of the SupportedTemperatureLevels list -1.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.6.1.2\n         */\n        targetTemperatureLevel: TlvOptionalField(1, TlvUInt8)\n    });\n\n    /**\n     * Input to the TemperatureControl setTemperature command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.6.1\n     */\n    export interface SetTemperatureRequest extends TypeFromSchema<typeof TlvSetTemperatureRequest> {}\n\n    /**\n     * A TemperatureControlCluster supports these elements if it supports feature TemperatureNumber.\n     */\n    export const TemperatureNumberComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the desired Temperature Setpoint on the device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.1\n             */\n            temperatureSetpoint: Attribute(0x0, TlvInt16),\n\n            /**\n             * Indicates the minimum temperature to which the TemperatureSetpoint attribute may be set.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.2\n             */\n            minTemperature: FixedAttribute(0x1, TlvInt16),\n\n            /**\n             * Indicates the maximum temperature to which the TemperatureSetpoint attribute may be set.\n             *\n             * If the Step attribute is supported, this attribute shall be such that MaxTemperature = MinTemperature +\n             * Step * n, where n is an integer and n > 0. If the Step attribute is not supported, this attribute shall\n             * be such that MaxTemperature > MinTemperature.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.3\n             */\n            maxTemperature: FixedAttribute(0x2, TlvInt16)\n        }\n    });\n\n    /**\n     * A TemperatureControlCluster supports these elements if it supports feature TemperatureStep.\n     */\n    export const TemperatureStepComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the discrete value by which the TemperatureSetpoint attribute can be changed via the\n             * SetTemperature command.\n             *\n             * For example, if the value of MinTemperature is 25.00C (2500) and the Step value is 0.50C (50), valid\n             * values of the TargetTemperature field of the SetTemperature command would be 25.50C (2550), 26.00C\n             * (2600), 26.50C (2650), etc.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.4\n             */\n            step: FixedAttribute(0x3, TlvInt16)\n        }\n    });\n\n    /**\n     * A TemperatureControlCluster supports these elements if it supports feature TemperatureLevel.\n     */\n    export const TemperatureLevelComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the currently selected temperature level setting of the server. This attribute shall be the\n             * positional index of the list item in the SupportedTemperatureLevels list that represents the currently\n             * selected temperature level setting of the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.5\n             */\n            selectedTemperatureLevel: Attribute(0x4, TlvUInt8.bound({ max: 31 })),\n\n            /**\n             * Indicates the list of supported temperature level settings that may be selected via the\n             * TargetTemperatureLevel field in the SetTemperature command. Each string is readable text that describes\n             * each temperature level setting in a way that can be easily understood by humans. For example, a washing\n             * machine can have temperature levels like \"Cold\", \"Warm\", and \"Hot\". Each string is specified by the\n             * manufacturer.\n             *\n             * Each item in this list shall represent a unique temperature level. Each entry in this list shall have a\n             * unique value. The entries in this list shall appear in order of increasing temperature level with list\n             * item 0 being the setting with the lowest temperature level.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.5.6\n             */\n            supportedTemperatureLevels: Attribute(0x5, TlvArray(TlvString, { maxLength: 32 }), { default: [] })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all TemperatureControl clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x56,\n        name: \"TemperatureControl\",\n        revision: 1,\n\n        features: {\n            /**\n             * TemperatureNumber\n             *\n             * For devices that use an actual temperature value for the temperature setpoint, such as some water\n             * heaters, the feature TN shall be used. Note that this cluster provides and supports temperatures in\n             * degrees Celsius via the temperature data type.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.1\n             */\n            temperatureNumber: BitFlag(0),\n\n            /**\n             * TemperatureLevel\n             *\n             * For devices that use vendor-specific temperature levels for the temperature setpoint, such as some\n             * washers, the feature TL shall be used.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.2\n             */\n            temperatureLevel: BitFlag(1),\n\n            /**\n             * TemperatureStep\n             *\n             * For devices that support discrete temperature setpoints that are larger than the temperature resolution\n             * imposed via the temperature data type, the Step feature may be used.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.4.3\n             */\n            temperatureStep: BitFlag(2)\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2.6.1\n             */\n            setTemperature: Command(0x0, TlvSetTemperatureRequest, 0x0, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which TemperatureControlCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { temperatureNumber: true }, component: TemperatureNumberComponent },\n            { flags: { temperatureStep: true }, component: TemperatureStepComponent },\n            { flags: { temperatureLevel: true }, component: TemperatureLevelComponent },\n            { flags: { temperatureStep: true, temperatureNumber: false }, component: false },\n            { flags: { temperatureNumber: true, temperatureLevel: true }, component: false },\n            { flags: { temperatureNumber: false, temperatureLevel: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides an interface to the setpoint temperature on devices such as washers, refrigerators, and\n     * water heaters. The setpoint temperature is the temperature to which a device using this cluster would attempt to\n     * control to. This cluster does not provide access to the actual or physical temperature associated with any\n     * device using this cluster. Access to the physical temperature associated with a device using this cluster would\n     * be provided by other clusters as part of that devices device type definition.\n     *\n     * The values and constraints of the attributes communicated to clients SHOULD match the controls on any physical\n     * interface on a device implementing this server. For example, the value of the Step attribute SHOULD match the\n     * incremental value by which the temperature setpoint can be changed on the physical device.\n     *\n     * Per the Matter specification you cannot use {@link TemperatureControlCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.2\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const TN = { temperatureNumber: true };\n    const STEP = { temperatureStep: true };\n    const TL = { temperatureLevel: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            temperatureSetpoint: MutableCluster.AsConditional(\n                TemperatureNumberComponent.attributes.temperatureSetpoint,\n                { mandatoryIf: [TN] }\n            ),\n            minTemperature: MutableCluster.AsConditional(\n                TemperatureNumberComponent.attributes.minTemperature,\n                { mandatoryIf: [TN] }\n            ),\n            maxTemperature: MutableCluster.AsConditional(\n                TemperatureNumberComponent.attributes.maxTemperature,\n                { mandatoryIf: [TN] }\n            ),\n            step: MutableCluster.AsConditional(TemperatureStepComponent.attributes.step, { mandatoryIf: [STEP] }),\n            selectedTemperatureLevel: MutableCluster.AsConditional(\n                TemperatureLevelComponent.attributes.selectedTemperatureLevel,\n                { mandatoryIf: [TL] }\n            ),\n            supportedTemperatureLevels: MutableCluster.AsConditional(\n                TemperatureLevelComponent.attributes.supportedTemperatureLevels,\n                { mandatoryIf: [TL] }\n            )\n        },\n\n        commands: Base.commands\n    });\n\n    /**\n     * This cluster supports all TemperatureControl features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type TemperatureControlCluster = TemperatureControl.Cluster;\nexport const TemperatureControlCluster = TemperatureControl.Cluster;\nClusterRegistry.register(TemperatureControl.Complete);\n"],
  "mappings": "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",
  "names": ["TemperatureControl", "Feature"]
}
