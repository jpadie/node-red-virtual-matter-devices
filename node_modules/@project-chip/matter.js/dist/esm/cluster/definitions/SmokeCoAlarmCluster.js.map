{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/SmokeCoAlarmCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    OptionalAttribute,\n    OptionalWritableAttribute,\n    AccessLevel,\n    Event,\n    EventPriority,\n    OptionalEvent,\n    OptionalFixedAttribute,\n    OptionalCommand,\n    TlvNoResponse\n} from \"../Cluster.js\";\nimport { TlvEnum, TlvEpochS } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace SmokeCoAlarm {\n    /**\n     * These are optional features supported by SmokeCoAlarmCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.4\n     */\n    export enum Feature {\n        /**\n         * SmokeAlarm (SMOKE)\n         *\n         * Supports Smoke alarm\n         */\n        SmokeAlarm = \"SmokeAlarm\",\n\n        /**\n         * CoAlarm (CO)\n         *\n         * Supports CO alarm\n         */\n        CoAlarm = \"CoAlarm\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.1\n     */\n    export enum AlarmState {\n        /**\n         * Nominal state, the device is not alarming\n         *\n         * This value shall indicate that this alarm is not alarming.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.1.1\n         */\n        Normal = 0,\n\n        /**\n         * Warning state\n         *\n         * This value shall indicate that this alarm is in a warning state. Alarms in this state SHOULD be subject to\n         * being muted via physical interaction.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.1.2\n         */\n        Warning = 1,\n\n        /**\n         * Critical state\n         *\n         * This value shall indicate that this alarm is in a critical state. Alarms in this state shall NOT be subject\n         * to being muted via physical interaction.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.1.3\n         */\n        Critical = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.6\n     */\n    export enum ContaminationState {\n        /**\n         * Nominal state, the sensor is not contaminated\n         *\n         * This value shall indicate that the smoke sensor has nominal contamination levels, no customer action is\n         * required.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.6.1\n         */\n        Normal = 0,\n\n        /**\n         * Low contamination\n         *\n         * This value shall indicate that the smoke sensor has detectable contamination levels, but the contamination\n         * is too low to cause a visible or audible alarm.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.6.2\n         */\n        Low = 1,\n\n        /**\n         * Warning state\n         *\n         * This value shall indicate that the smoke sensor has contamination levels in a warning state. At this level,\n         * the contamination may cause a visible or audible alarm. User intervention is suggested.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.6.3\n         */\n        Warning = 2,\n\n        /**\n         * Critical state, will cause nuisance alarms\n         *\n         * This value shall indicate that the smoke sensor has contamination levels in a critical state. At this level,\n         * the contamination should cause a visible or audible alarm. User intervention is required. Critical\n         * contamination of the sensor shall also be reflected as a HardwareFault.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.6.4\n         */\n        Critical = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.2\n     */\n    export enum Sensitivity {\n        /**\n         * High sensitivity\n         */\n        High = 0,\n\n        /**\n         * Standard Sensitivity\n         */\n        Standard = 1,\n\n        /**\n         * Low sensitivity\n         */\n        Low = 2\n    }\n\n    /**\n     * Body of the SmokeCoAlarm smokeAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.1\n     */\n    export const TlvSmokeAlarmEvent = TlvObject({\n        /**\n         * This field shall indicate the current value of the SmokeState attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.1.1\n         */\n        alarmSeverityLevel: TlvField(0, TlvEnum<AlarmState>())\n    });\n\n    /**\n     * Body of the SmokeCoAlarm smokeAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.1\n     */\n    export interface SmokeAlarmEvent extends TypeFromSchema<typeof TlvSmokeAlarmEvent> {}\n\n    /**\n     * Body of the SmokeCoAlarm interconnectSmokeAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.9\n     */\n    export const TlvInterconnectSmokeAlarmEvent = TlvObject({\n        /**\n         * This field shall indicate the current value of the InterconnectSmokeAlarm attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.9.1\n         */\n        alarmSeverityLevel: TlvField(0, TlvEnum<AlarmState>())\n    });\n\n    /**\n     * Body of the SmokeCoAlarm interconnectSmokeAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.9\n     */\n    export interface InterconnectSmokeAlarmEvent extends TypeFromSchema<typeof TlvInterconnectSmokeAlarmEvent> {}\n\n    /**\n     * Body of the SmokeCoAlarm coAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.2\n     */\n    export const TlvCoAlarmEvent = TlvObject({\n        /**\n         * This field shall indicate the current value of the COState attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.2.1\n         */\n        alarmSeverityLevel: TlvField(0, TlvEnum<AlarmState>())\n    });\n\n    /**\n     * Body of the SmokeCoAlarm coAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.2\n     */\n    export interface CoAlarmEvent extends TypeFromSchema<typeof TlvCoAlarmEvent> {}\n\n    /**\n     * Body of the SmokeCoAlarm interconnectCoAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.10\n     */\n    export const TlvInterconnectCoAlarmEvent = TlvObject({\n        /**\n         * This field shall indicate the current value of the InterconnectCOAlarm attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.10.1\n         */\n        alarmSeverityLevel: TlvField(0, TlvEnum<AlarmState>())\n    });\n\n    /**\n     * Body of the SmokeCoAlarm interconnectCoAlarm event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.10\n     */\n    export interface InterconnectCoAlarmEvent extends TypeFromSchema<typeof TlvInterconnectCoAlarmEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3\n     */\n    export enum ExpressedState {\n        /**\n         * Nominal state, the device is not alarming\n         *\n         * This value shall indicate that this alarm is not alarming.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.1\n         */\n        Normal = 0,\n\n        /**\n         * Smoke Alarm state\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of Smoke Alarm. This\n         * value shall indicate that the alarm is currently expressing audible indication of Smoke Alarm unless the\n         * DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.2\n         */\n        SmokeAlarm = 1,\n\n        /**\n         * CO Alarm state\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of CO Alarm. This value\n         * shall indicate that the alarm is currently expressing audible indication of CO Alarm unless the DeviceMuted\n         * attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.3\n         */\n        CoAlarm = 2,\n\n        /**\n         * Battery Alert State\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of Critical Low Battery.\n         * This value shall indicate that the alarm is currently expressing audible indication of Critical Low Battery\n         * unless the DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.4\n         */\n        BatteryAlert = 3,\n\n        /**\n         * Test in Progress\n         *\n         * This value shall indicate that this alarm is currently expressing visual and audible indication of SelfTest.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.5\n         */\n        Testing = 4,\n\n        /**\n         * Hardware Fault Alert State\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of Hardware Fault. This\n         * value shall indicate that the alarm is currently expressing audible indication of Hardware Fault unless the\n         * DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.6\n         */\n        HardwareFault = 5,\n\n        /**\n         * End of Service Alert State\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of End Of Service. This\n         * value shall indicate that the alarm is currently expressing audible indication of End of Service unless the\n         * DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.7\n         */\n        EndOfService = 6,\n\n        /**\n         * Interconnected Smoke Alarm State\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of Smoke Alarm caused by\n         * Interconnect. This value shall indicate that the alarm is currently expressing audible indication of Smoke\n         * Alarm caused by Interconnect unless the DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.8\n         */\n        InterconnectSmoke = 7,\n\n        /**\n         * Interconnected CO Alarm State\n         *\n         * This value shall indicate that this alarm is currently expressing visual indication of CO Alarm caused by\n         * Interconnect. This value shall indicate that the alarm is currently expressing audible indication of CO\n         * Alarm caused by Interconnect unless the DeviceMuted attribute is supported and set to Muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.3.9\n         */\n        InterconnectCo = 8\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.4\n     */\n    export enum MuteState {\n        /**\n         * Not Muted\n         *\n         * This value shall indicate that the device is not muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.4.1\n         */\n        NotMuted = 0,\n\n        /**\n         * Muted\n         *\n         * This value shall indicate that the device is muted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.4.2\n         */\n        Muted = 1\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.5\n     */\n    export enum EndOfService {\n        /**\n         * Device has not expired\n         *\n         * This value shall indicate that the device has not yet reached its end of service, and does not need to be\n         * imminently replaced.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.5.2\n         */\n        Normal = 0,\n\n        /**\n         * Device has reached its end of service\n         *\n         * This value shall indicate that the device has reached its end of service, and needs to be replaced.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.5.5.1\n         */\n        Expired = 1\n    }\n\n    /**\n     * Body of the SmokeCoAlarm lowBattery event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.3\n     */\n    export const TlvLowBatteryEvent = TlvObject({\n        /**\n         * This field shall indicate the current value of the BatteryAlert attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.3.1\n         */\n        alarmSeverityLevel: TlvField(0, TlvEnum<AlarmState>())\n    });\n\n    /**\n     * Body of the SmokeCoAlarm lowBattery event\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.3\n     */\n    export interface LowBatteryEvent extends TypeFromSchema<typeof TlvLowBatteryEvent> {}\n\n    /**\n     * A SmokeCoAlarmCluster supports these elements if it supports feature SmokeAlarm.\n     */\n    export const SmokeAlarmComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates whether the device\u2019s smoke sensor is currently triggering a smoke alarm.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.2\n             */\n            smokeState: Attribute(0x1, TlvEnum<AlarmState>(), { persistent: true }),\n\n            /**\n             * Indicates the contamination level of the smoke sensor.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.11\n             */\n            contaminationState: OptionalAttribute(0xa, TlvEnum<ContaminationState>()),\n\n            /**\n             * Indicates the sensitivity level of the smoke sensor configured on the device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.12\n             */\n            smokeSensitivityLevel: OptionalWritableAttribute(\n                0xb,\n                TlvEnum<Sensitivity>(),\n                { writeAcl: AccessLevel.Manage }\n            )\n        },\n\n        events: {\n            /**\n             * This event shall be generated when SmokeState attribute changes to either Warning or Critical state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.1\n             */\n            smokeAlarm: Event(0x0, EventPriority.Critical, TlvSmokeAlarmEvent),\n\n            /**\n             * This event shall be generated when the device hosting the server receives a smoke alarm from an\n             * interconnected sensor.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.9\n             */\n            interconnectSmokeAlarm: OptionalEvent(0x8, EventPriority.Critical, TlvInterconnectSmokeAlarmEvent)\n        }\n    });\n\n    /**\n     * A SmokeCoAlarmCluster supports these elements if it supports feature CoAlarm.\n     */\n    export const CoAlarmComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates whether the device\u2019s CO sensor is currently triggering a CO alarm.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.3\n             */\n            coState: Attribute(0x2, TlvEnum<AlarmState>(), { persistent: true })\n        },\n\n        events: {\n            /**\n             * This event shall be generated when COState attribute changes to either Warning or Critical state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.2\n             */\n            coAlarm: Event(0x1, EventPriority.Critical, TlvCoAlarmEvent),\n\n            /**\n             * This event shall be generated when the device hosting the server receives a CO alarm from an\n             * interconnected sensor.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.10\n             */\n            interconnectCoAlarm: OptionalEvent(0x9, EventPriority.Critical, TlvInterconnectCoAlarmEvent)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all SmokeCoAlarm clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x5c,\n        name: \"SmokeCoAlarm\",\n        revision: 1,\n\n        features: {\n            /**\n             * SmokeAlarm\n             *\n             * Supports Smoke alarm\n             */\n            smokeAlarm: BitFlag(0),\n\n            /**\n             * CoAlarm\n             *\n             * Supports CO alarm\n             */\n            coAlarm: BitFlag(1)\n        },\n\n        attributes: {\n            /**\n             * Indicates the visibly- and audibly-expressed state of the alarm. When multiple alarm conditions are\n             * being reflected in the server, this attribute shall indicate the condition with the highest priority.\n             * Priority order of conditions is determined by the manufacturer and shall be supplied as a part of\n             * certification procedure. If the value of ExpressedState is not Normal, the attribute corresponding to\n             * the value shall NOT be Normal. For example, if the ExpressedState is set to SmokeAlarm, the value of the\n             * SmokeState will indicate the severity of the alarm (Warning or Critical). Clients SHOULD also read the\n             * other attributes to be aware of further alarm conditions beyond the one indicated in ExpressedState.\n             *\n             * Visible expression is typically a LED light pattern. Audible expression is a horn or speaker pattern.\n             * Audible expression shall BE suppressed if the DeviceMuted attribute is supported and set to Muted.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.1\n             */\n            expressedState: Attribute(0x0, TlvEnum<ExpressedState>(), { persistent: true }),\n\n            /**\n             * Indicates whether the power resource fault detection mechanism is currently triggered at the device. If\n             * the detection mechanism is triggered, this attribute shall be set to Warning or Critical, otherwise it\n             * shall be set to Normal. The battery state shall also be reflected in the Power Source cluster\n             * representing the device\u2019s battery using the appropriate supported attributes and events.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.4\n             */\n            batteryAlert: Attribute(0x3, TlvEnum<AlarmState>(), { persistent: true }),\n\n            /**\n             * Indicates the whether the audible expression of the device is currently muted. Audible expression is\n             * typically a horn or speaker pattern.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.5\n             */\n            deviceMuted: OptionalAttribute(0x4, TlvEnum<MuteState>(), { persistent: true }),\n\n            /**\n             * Indicates whether the device self-test is currently activated. If the device self- test is activated,\n             * this attribute shall be set to True, otherwise it shall be set to False.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.6\n             */\n            testInProgress: Attribute(0x5, TlvBoolean),\n\n            /**\n             * Indicates whether the hardware fault detection mechanism is currently triggered. If the detection\n             * mechanism is triggered, this attribute shall be set to True, otherwise it shall be set to False.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.7\n             */\n            hardwareFaultAlert: Attribute(0x6, TlvBoolean, { persistent: true }),\n\n            /**\n             * Indicates whether the end-of-service has been triggered at the device. This attribute shall be set to\n             * Expired when the device reaches the end-of-service.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.8\n             */\n            endOfServiceAlert: Attribute(0x7, TlvEnum<EndOfService>(), { persistent: true }),\n\n            /**\n             * Indicates whether the interconnected smoke alarm is currently triggering by branching devices. When the\n             * interconnected smoke alarm is being triggered, this attribute shall be set to Warning or Critical,\n             * otherwise it shall be set to Normal.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.9\n             */\n            interconnectSmokeAlarm: OptionalAttribute(0x8, TlvEnum<AlarmState>()),\n\n            /**\n             * Indicates whether the interconnected CO alarm is currently triggering by branching devices. When the\n             * interconnected CO alarm is being triggered, this attribute shall be set to Warning or Critical,\n             * otherwise it shall be set to Normal.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.10\n             */\n            interconnectCoAlarm: OptionalAttribute(0x9, TlvEnum<AlarmState>()),\n\n            /**\n             * Indicates the date when the device reaches its stated expiry date. After the ExpiryDate has been\n             * reached, the EndOfServiceAlert shall start to be triggered. To account for better customer experience\n             * across time zones, the EndOfServiceAlert may be delayed by up to 24 hours after the ExpiryDate.\n             * Similarly, clients may delay any actions based on the ExpiryDate by up to 24 hours to best align with\n             * the local time zone.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.6.13\n             */\n            expiryDate: OptionalFixedAttribute(0xc, TlvEpochS)\n        },\n\n        commands: {\n            /**\n             * This command shall initiate a device self-test. The return status shall indicate whether the test was\n             * successfully initiated. Only one SelfTestRequest may be processed at a time. When the value of the\n             * ExpressedState attribute is any of SmokeAlarm, COAlarm, Testing, InterconnectSmoke, Inter\n             *\n             * connectCO, the device shall NOT execute the self-test, and shall return status code BUSY.\n             *\n             * Upon successful acceptance of SelfTestRequest, the TestInProgress attribute shall be set to True and\n             * ExpressedState attribute shall be set to Testing. Any faults identified during the test shall be\n             * reflected in the appropriate attributes and events. Upon completion of the self test procedure, the\n             * SelfTestComplete event shall be generated, the TestInProgress attribute shall be set to False and\n             * ExpressedState attribute shall be updated to reflect the current state of the server.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.7.1\n             */\n            selfTestRequest: OptionalCommand(0x0, TlvNoArguments, 0x0, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when BatteryAlert attribute changes to either Warning or Critical state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.3\n             */\n            lowBattery: Event(0x2, EventPriority.Info, TlvLowBatteryEvent),\n\n            /**\n             * This event shall be generated when the device detects a hardware fault that leads to setting\n             * HardwareFaultAlert to True.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.4\n             */\n            hardwareFault: Event(0x3, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when the EndOfServiceAlert is set to Expired.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.5\n             */\n            endOfService: Event(0x4, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when the SelfTest completes, and the attribute TestInProgress changes to\n             * False.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.6\n             */\n            selfTestComplete: Event(0x5, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when the DeviceMuted attribute changes to Muted.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.7\n             */\n            alarmMuted: OptionalEvent(0x6, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when DeviceMuted attribute changes to NotMuted.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.8\n             */\n            muteEnded: OptionalEvent(0x7, EventPriority.Info, TlvNoArguments),\n\n            /**\n             * This event shall be generated when ExpressedState attribute returns to Normal state.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11.8.11\n             */\n            allClear: Event(0xa, EventPriority.Info, TlvNoArguments)\n        },\n\n        /**\n         * This metadata controls which SmokeCoAlarmCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { smokeAlarm: true }, component: SmokeAlarmComponent },\n            { flags: { coAlarm: true }, component: CoAlarmComponent },\n            { flags: { smokeAlarm: false, coAlarm: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides an interface for observing and managing the state of smoke and CO alarms.\n     *\n     * Per the Matter specification you cannot use {@link SmokeCoAlarmCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 2.11\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const SMOKE = { smokeAlarm: true };\n    const CO = { coAlarm: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            smokeState: MutableCluster.AsConditional(\n                SmokeAlarmComponent.attributes.smokeState,\n                { mandatoryIf: [SMOKE] }\n            ),\n            coState: MutableCluster.AsConditional(CoAlarmComponent.attributes.coState, { mandatoryIf: [CO] }),\n            contaminationState: MutableCluster.AsConditional(\n                SmokeAlarmComponent.attributes.contaminationState,\n                { optionalIf: [SMOKE] }\n            ),\n            smokeSensitivityLevel: MutableCluster.AsConditional(\n                SmokeAlarmComponent.attributes.smokeSensitivityLevel,\n                { optionalIf: [SMOKE] }\n            )\n        },\n\n        commands: Base.commands,\n\n        events: {\n            ...Base.events,\n            smokeAlarm: MutableCluster.AsConditional(SmokeAlarmComponent.events.smokeAlarm, { mandatoryIf: [SMOKE] }),\n            coAlarm: MutableCluster.AsConditional(CoAlarmComponent.events.coAlarm, { mandatoryIf: [CO] }),\n            interconnectSmokeAlarm: MutableCluster.AsConditional(\n                SmokeAlarmComponent.events.interconnectSmokeAlarm,\n                { optionalIf: [SMOKE] }\n            ),\n            interconnectCoAlarm: MutableCluster.AsConditional(\n                CoAlarmComponent.events.interconnectCoAlarm,\n                { optionalIf: [CO] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all SmokeCoAlarm features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type SmokeCoAlarmCluster = SmokeCoAlarm.Cluster;\nexport const SmokeCoAlarmCluster = SmokeCoAlarm.Cluster;\nClusterRegistry.register(SmokeCoAlarm.Complete);\n"],
  "mappings": "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",
  "names": ["SmokeCoAlarm", "Feature", "AlarmState", "ContaminationState", "Sensitivity", "ExpressedState", "MuteState", "EndOfService"]
}
