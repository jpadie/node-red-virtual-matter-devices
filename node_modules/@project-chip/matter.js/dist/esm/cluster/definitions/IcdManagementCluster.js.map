{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/IcdManagementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    FabricScopedAttribute,\n    AccessLevel,\n    Attribute,\n    FixedAttribute,\n    Command,\n    TlvNoResponse,\n    OptionalFixedAttribute,\n    OptionalCommand\n} from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvNodeId } from \"../../datatype/NodeId.js\";\nimport { TlvSubjectId } from \"../../datatype/SubjectId.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvUInt32, TlvUInt16, TlvBitmap, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvByteString, TlvString } from \"../../tlv/TlvString.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace IcdManagement {\n    /**\n     * These are optional features supported by IcdManagementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4\n     */\n    export enum Feature {\n        /**\n         * CheckInProtocolSupport (CIP)\n         *\n         * When this feature is supported, the device shall support all the associated commands and attributes to\n         * properly support the Check-In Protocol.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.1\n         */\n        CheckInProtocolSupport = \"CheckInProtocolSupport\",\n\n        /**\n         * UserActiveModeTrigger (UAT)\n         *\n         * This feature is supported if and only if the device has a user active mode trigger.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.2\n         */\n        UserActiveModeTrigger = \"UserActiveModeTrigger\",\n\n        /**\n         * LongIdleTimeSupport (LITS)\n         *\n         * This feature is supported if and only the device is a Long Idle Time ICD.\n         *\n         * NOTE In this version of the specification, the support for the feature is provisional.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.3\n         */\n        LongIdleTimeSupport = \"LongIdleTimeSupport\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.2\n     */\n    export const TlvMonitoringRegistration = TlvObject({\n        /**\n         * This field shall indicate the NodeID of the Node to which Check-In messages will be sent when the\n         * MonitoredSubject is not subscribed.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.2.1\n         */\n        checkInNodeId: TlvField(1, TlvNodeId),\n\n        /**\n         * This field shall indicate the monitored Subject ID. This field shall be used to determine if a particular\n         * client has an active subscription for the given entry. The MonitoredSubject, when it is a NodeID, may be the\n         * same as the CheckInNodeID. The MonitoredSubject gives the registering client the flexibility of having a\n         * different CheckInNodeID from the MonitoredSubject. A subscription shall count as an active subscription for\n         * this entry if:\n         *\n         *   \u2022 It is on the associated fabric of this entry, and\n         *\n         *   \u2022 The subject of this entry matches the ISD of the SubscriptionRequest message that created the\n         *     subscription. Matching shall be determined using the subject_matches function defined in the Access\n         *     Control Privilege Granting Algorithm.\n         *\n         * For example, if the MonitoredSubject is Node ID 0x1111_2222_3333_AAAA, and one of the subscribers to the\n         * server on the entry\u2019s associated fabric bears that Node ID, then the entry matches.\n         *\n         * Another example is if the MonitoredSubject has the value 0xFFFF_FFFD_AA12_0002, and one of the subscribers\n         * to the server on the entry\u2019s associated fabric bears the CASE Authenticated TAG value 0xAA12 and the version\n         * 0x0002 or higher within its NOC, then the entry matches.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.2.2\n         */\n        monitoredSubject: TlvField(2, TlvSubjectId),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.2\n     */\n    export interface MonitoringRegistration extends TypeFromSchema<typeof TlvMonitoringRegistration> {}\n\n    /**\n     * Input to the IcdManagement registerClient command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1\n     */\n    export const TlvRegisterClientRequest = TlvObject({\n        /**\n         * This field shall provide the node ID to which a Check-In message will be sent if there are no active\n         * subscriptions matching MonitoredSubject.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1.1\n         */\n        checkInNodeId: TlvField(0, TlvNodeId),\n\n        /**\n         * This field shall provide the monitored subject ID.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1.2\n         */\n        monitoredSubject: TlvField(1, TlvSubjectId),\n\n        /**\n         * This field shall provide the shared secret between the client and the ICD to encrypt the Check-In message.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1.3\n         */\n        key: TlvField(2, TlvByteString.bound({ length: 16 })),\n\n        /**\n         * This field shall provide the verification key. The verification key represents the key already stored on the\n         * server. The verification key provided in this field shall be used by the server to guarantee that a client\n         * with manage permissions can only modify entries that contain a Key equal to the verification key. The\n         * verification key shall be provided for clients with manage permissions. The verification key SHOULD NOT be\n         * provided by clients with administrator permissions for the server cluster. The verification key shall be\n         * ignored by the server if it is provided by a client with administrator permissions for the server cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1.4\n         */\n        verificationKey: TlvOptionalField(3, TlvByteString.bound({ length: 16 }))\n    });\n\n    /**\n     * Input to the IcdManagement registerClient command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1\n     */\n    export interface RegisterClientRequest extends TypeFromSchema<typeof TlvRegisterClientRequest> {}\n\n    /**\n     * This command shall be sent by the ICD Management Cluster server in response to a successful RegisterClient\n     * command.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.2\n     */\n    export const TlvRegisterClientResponse = TlvObject({ icdCounter: TlvField(0, TlvUInt32) });\n\n    /**\n     * This command shall be sent by the ICD Management Cluster server in response to a successful RegisterClient\n     * command.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.2\n     */\n    export interface RegisterClientResponse extends TypeFromSchema<typeof TlvRegisterClientResponse> {}\n\n    /**\n     * Input to the IcdManagement unregisterClient command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.3\n     */\n    export const TlvUnregisterClientRequest = TlvObject({\n        /**\n         * This field shall provide the registered client node ID to remove from storage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.3.1\n         */\n        checkInNodeId: TlvField(0, TlvNodeId),\n\n        /**\n         * This field shall provide the verification key associated with the CheckInNodeID to remove from storage. The\n         * verification key represents the key already stored on the server. The verification key provided in this\n         * field shall be used by the server to guarantee that a client with manage permissions can only remove entries\n         * that contain a Key equal to the stored key. The verification key shall be provided for clients with manage\n         * permissions. The verification key SHOULD NOT be provided by clients with administrator permissions for the\n         * server cluster. The verification key shall be ignored by the server if it is provided by a client with\n         * administrator permissions for the server cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.3.2\n         */\n        verificationKey: TlvOptionalField(1, TlvByteString.bound({ length: 16 }))\n    });\n\n    /**\n     * Input to the IcdManagement unregisterClient command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.3\n     */\n    export interface UnregisterClientRequest extends TypeFromSchema<typeof TlvUnregisterClientRequest> {}\n\n    /**\n     * See the UserActiveModeTriggerHint table for requirements associated to each bit.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.1\n     */\n    export const UserActiveModeTrigger = {\n        /**\n         * Power Cycle to transition the device to ActiveMode\n         */\n        powerCycle: BitFlag(0),\n\n        /**\n         * Settings menu on the device informs how to transition the device to ActiveMode\n         */\n        settingsMenu: BitFlag(1),\n\n        /**\n         * Custom Instruction on how to transition the device to ActiveMode\n         */\n        customInstruction: BitFlag(2),\n\n        /**\n         * Device Manual informs how to transition the device to ActiveMode\n         */\n        deviceManual: BitFlag(3),\n\n        /**\n         * Actuate Sensor to transition the device to ActiveMode\n         */\n        actuateSensor: BitFlag(4),\n\n        /**\n         * Actuate Sensor for N seconds to transition the device to ActiveMode\n         */\n        actuateSensorSeconds: BitFlag(5),\n\n        /**\n         * Actuate Sensor N times to transition the device to ActiveMode\n         */\n        actuateSensorTimes: BitFlag(6),\n\n        /**\n         * Actuate Sensor until light blinks to transition the device to ActiveMode\n         */\n        actuateSensorLightsBlink: BitFlag(7),\n\n        /**\n         * Press Reset Button to transition the device to ActiveMode\n         */\n        resetButton: BitFlag(8),\n\n        /**\n         * Press Reset Button until light blinks to transition the device to ActiveMode\n         */\n        resetButtonLightsBlink: BitFlag(9),\n\n        /**\n         * Press Reset Button for N seconds to transition the device to ActiveMode\n         */\n        resetButtonSeconds: BitFlag(10),\n\n        /**\n         * Press Reset Button N times to transition the device to ActiveMode\n         */\n        resetButtonTimes: BitFlag(11),\n\n        /**\n         * Press Setup Button to transition the device to ActiveMode\n         */\n        setupButton: BitFlag(12),\n\n        /**\n         * Press Setup Button for N seconds to transition the device to ActiveMode\n         */\n        setupButtonSeconds: BitFlag(13),\n\n        /**\n         * Press Setup Button until light blinks to transition the device to ActiveMode\n         */\n        setupButtonLightsBlink: BitFlag(14),\n\n        /**\n         * Press Setup Button N times to transition the device to ActiveMode\n         */\n        setupButtonTimes: BitFlag(15),\n\n        /**\n         * Press the N Button to transition the device to ActiveMode\n         */\n        appDefinedButton: BitFlag(16)\n    };\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.5.3\n     */\n    export enum OperatingMode {\n        /**\n         * ICD is operating as a Short Idle Time ICD.\n         */\n        Sit = 0,\n\n        /**\n         * ICD is operating as a Long Idle Time ICD.\n         */\n        Lit = 1\n    }\n\n    /**\n     * Input to the IcdManagement stayActiveRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.4\n     */\n    export const TlvStayActiveRequest = TlvObject({ stayActiveDuration: TlvField(0, TlvUInt32) });\n\n    /**\n     * Input to the IcdManagement stayActiveRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.4\n     */\n    export interface StayActiveRequest extends TypeFromSchema<typeof TlvStayActiveRequest> {}\n\n    /**\n     * This message shall be sent by the ICD in response to the StayActiveRequest command and shall contain the\n     * computed duration (in milliseconds) that the ICD intends to stay active for.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.5\n     */\n    export const TlvStayActiveResponse = TlvObject({\n        /**\n         * This field shall provide the actual duration that the ICD server can stay active from the time it receives\n         * the StayActiveRequest command.\n         *\n         * ### Minimum Value for PromisedActiveDuration\n         *\n         * The minimum value of the PromisedActiveDuration field shall be equal to either 30000 milliseconds or\n         * StayActiveDuration (from the received StayActiveRequest command), whichever is smaller.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.5.1\n         */\n        promisedActiveDuration: TlvField(0, TlvUInt32)\n    });\n\n    /**\n     * This message shall be sent by the ICD in response to the StayActiveRequest command and shall contain the\n     * computed duration (in milliseconds) that the ICD intends to stay active for.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.5\n     */\n    export interface StayActiveResponse extends TypeFromSchema<typeof TlvStayActiveResponse> {}\n\n    /**\n     * A IcdManagementCluster supports these elements if it supports feature CheckInProtocolSupport.\n     */\n    export const CheckInProtocolSupportComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * This attribute shall contain all clients registered to receive notification if their subscription is\n             * lost. The maximum number of entries that can be in the list shall be ClientsSupportedPerFabric for each\n             * fabric supported on the server, as indicated by the value of the SupportedFabrics attribute in the\n             * Operational Credentials cluster.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.4\n             */\n            registeredClients: FabricScopedAttribute(\n                0x3,\n                TlvArray(TlvMonitoringRegistration),\n                { persistent: true, default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This attribute returns the value of the ICD Counter.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.5\n             */\n            icdCounter: Attribute(\n                0x4,\n                TlvUInt32,\n\n                {\n                    persistent: true,\n                    omitChanges: true,\n                    default: 0,\n                    readAcl: AccessLevel.Administer,\n                    writeAcl: AccessLevel.Administer\n                }\n            ),\n\n            /**\n             * Indicates the maximum number of entries that the server is able to store for each fabric in the\n             * RegisteredClients attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.6\n             */\n            clientsSupportedPerFabric: FixedAttribute(0x5, TlvUInt16.bound({ min: 1 }), { default: 1 })\n        },\n\n        commands: {\n            /**\n             * This command allows a client to register itself with the ICD to be notified when the device is available\n             * for communication.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.1\n             */\n            registerClient: Command(\n                0x0,\n                TlvRegisterClientRequest,\n                0x1,\n                TlvRegisterClientResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * This command allows a client to unregister itself with the ICD. Example: a client that is leaving the\n             * network (e.g. running on a phone which is leaving the home) can (and should) remove its subscriptions\n             * and send this UnregisterClient command before leaving to prevent the burden on the ICD of an absent\n             * client.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.3\n             */\n            unregisterClient: Command(\n                0x2,\n                TlvUnregisterClientRequest,\n                0x2,\n                TlvNoResponse,\n                { invokeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * A IcdManagementCluster supports these elements if it supports feature UserActiveModeTrigger.\n     */\n    export const UserActiveModeTriggerComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates which user action(s) will trigger the ICD to switch to Active mode. If the attribute indicates\n             * support for a trigger that is dependent on the UserActiveModeTriggerInstruction in the\n             * UserActiveModeTriggerHint table, the UserActiveModeTriggerInstruction attribute shall be implemented and\n             * shall provide the required information, unless specified otherwise in the requirement column of the\n             * UserActiveModeTriggerHint table.\n             *\n             * ActuateSensorLightsBlink, ResetButtonLightsBlink and SetupButtonLightsBlink (i.e. bits 7, 9 and 14) have\n             * a dependency on the UserActiveModeTriggerInstruction attribute but do not require the attribute to be\n             * present.\n             *\n             * An ICD can indicate multiple ways of being put into Active Mode by setting multiple bits in the bitmap\n             * at the same time. However, a device shall NOT set more than one bit which has a dependency on the\n             * UserActiveModeTriggerInstruction attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.7\n             */\n            userActiveModeTriggerHint: FixedAttribute(0x6, TlvBitmap(TlvUInt32, UserActiveModeTrigger))\n        }\n    });\n\n    /**\n     * A IcdManagementCluster supports these elements if it supports feature LongIdleTimeSupport.\n     */\n    export const LongIdleTimeSupportComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the operating mode of the ICD as specified in the OperatingModeEnum.\n             *\n             *   \u2022 If the ICD is operating as a LIT ICD, OperatingMode shall be LIT.\n             *\n             *   \u2022 If the ICD is operating as a SIT ICD, OperatingMode shall be SIT.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.9\n             */\n            operatingMode: Attribute(0x8, TlvEnum<OperatingMode>())\n        },\n\n        commands: {\n            /**\n             * This command allows a client to request that the server stays in active mode for at least a given time\n             * duration (in milliseconds) from when this command is received.\n             *\n             * This StayActiveDuration may be longer than the ActiveModeThreshold value and would, typically, be used\n             * by the client to request the server to stay active and responsive for this period to allow a sequence of\n             * message exchanges during that period. The client may slightly overestimate the duration it wants the ICD\n             * to be active for, in order to account for network delays.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.4\n             */\n            stayActiveRequest: Command(0x3, TlvStayActiveRequest, 0x4, TlvStayActiveResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all IcdManagement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x46,\n        name: \"IcdManagement\",\n        revision: 2,\n\n        features: {\n            /**\n             * CheckInProtocolSupport\n             *\n             * When this feature is supported, the device shall support all the associated commands and attributes to\n             * properly support the Check-In Protocol.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.1\n             */\n            checkInProtocolSupport: BitFlag(0),\n\n            /**\n             * UserActiveModeTrigger\n             *\n             * This feature is supported if and only if the device has a user active mode trigger.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.2\n             */\n            userActiveModeTrigger: BitFlag(1),\n\n            /**\n             * LongIdleTimeSupport\n             *\n             * This feature is supported if and only the device is a Long Idle Time ICD.\n             *\n             * NOTE In this version of the specification, the support for the feature is provisional.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.4.3\n             */\n            longIdleTimeSupport: BitFlag(2)\n        },\n\n        attributes: {\n            /**\n             * Indicates the maximum interval in seconds the server can stay in idle mode. The IdleModeDuration shall\n             * NOT be smaller than the ActiveModeDuration.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.1\n             */\n            idleModeDuration: FixedAttribute(0x0, TlvUInt32.bound({ min: 1, max: 64800 }), { default: 1 }),\n\n            /**\n             * Indicates the minimum interval in milliseconds the server typically will stay in active mode after\n             * initial transition out of idle mode. The ActiveModeDuration does not include the ActiveModeThreshold.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.2\n             */\n            activeModeDuration: FixedAttribute(0x1, TlvUInt32, { default: 300 }),\n\n            /**\n             * Indicates the minimum amount of time in milliseconds the server typically will stay active after network\n             * activity when in active mode.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.3\n             */\n            activeModeThreshold: FixedAttribute(0x2, TlvUInt16, { default: 300 }),\n\n            /**\n             * The meaning of the attribute is dependent upon the UserActiveModeTriggerHint attribute value, and the\n             * conformance is in indicated in the \"dependency\" column in UserActiveModeTriggerHint table. The\n             * UserActiveModeTriggerInstruction attribute may give additional information on how to transition the\n             * device to Active Mode. If the attribute is present, the value shall be encoded as a valid UTF-8 string\n             * with a maximum length of 128 bytes. If the UserActiveModeTriggerHint has the ActuateSensorSeconds,\n             * ActuateSensorTimes, ResetButtonSeconds, ResetButtonTimes, SetupButtonSeconds or SetupButtonTimes set,\n             * the string shall consist solely of an encoding of N as a decimal\n             *\n             * unsigned integer using the ASCII digits 0-9, and without leading zeros.\n             *\n             * For example, given UserActiveModeTriggerHint=\"2048\", ResetButtonTimes is set which indicates \"Press\n             * Reset Button for N seconds\". Therefore, a value of UserActiveModeTriggerInstruction=\"10\" would indicate\n             * that N is 10 in that context.\n             *\n             * When CustomInstruction is set by the UserActiveModeTriggerHint attribute, indicating presence of a\n             * custom string, the ICD SHOULD perform localization (translation to user\u2019s preferred language, as\n             * indicated in the Device\u2019s currently configured locale). The Custom Instruction option SHOULD NOT be used\n             * by an ICD that does not have knowledge of the user\u2019s language preference.\n             *\n             * ### When the UserActiveModeTriggerHint key indicates a light to blink (ActuateSensorLightsBlink,\n             * ResetButtonLightsBlink or SetupButtonLightsBlink), information on color of light may be made available\n             * via the UserActiveModeTriggerInstruction attribute. When using such color indication in the\n             * UserActiveModeTriggerInstruction attribute, only basic primary and secondary colors that could\n             * unambiguously be decoded by a commissioner and understood by an end-user, but without worry of\n             * localization, SHOULD be used, e.g. white, red, green, blue, orange, yellow, purple. The length of the\n             * attribute SHOULD be kept small.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.6.8\n             */\n            userActiveModeTriggerInstruction: OptionalFixedAttribute(\n                0x7,\n                TlvString.bound({ maxLength: 128 }),\n                { default: \"\" }\n            )\n        },\n\n        commands: {\n            /**\n             * This command allows a client to request that the server stays in active mode for at least a given time\n             * duration (in milliseconds) from when this command is received.\n             *\n             * This StayActiveDuration may be longer than the ActiveModeThreshold value and would, typically, be used\n             * by the client to request the server to stay active and responsive for this period to allow a sequence of\n             * message exchanges during that period. The client may slightly overestimate the duration it wants the ICD\n             * to be active for, in order to account for network delays.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.17.7.4\n             */\n            stayActiveRequest: OptionalCommand(0x3, TlvStayActiveRequest, 0x4, TlvStayActiveResponse)\n        },\n\n        /**\n         * This metadata controls which IcdManagementCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { checkInProtocolSupport: true }, component: CheckInProtocolSupportComponent },\n            { flags: { userActiveModeTrigger: true }, component: UserActiveModeTriggerComponent },\n            { flags: { longIdleTimeSupport: true }, component: LongIdleTimeSupportComponent },\n            { flags: { longIdleTimeSupport: true, checkInProtocolSupport: false }, component: false },\n            { flags: { longIdleTimeSupport: true, userActiveModeTrigger: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * ICD Management Cluster enables configuration of the ICD\u2019s behavior and ensuring that listed clients can be\n     * notified when an intermittently connected device, ICD, is available for communication.\n     *\n     * The cluster implements the requirements of the Check-In Protocol that enables the ICD Check-In use case.\n     *\n     * NOTE This feature is provisional.\n     *\n     * IcdManagementCluster supports optional features that you can enable with the IcdManagementCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.17\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const CIP = { checkInProtocolSupport: true };\n    const UAT = { userActiveModeTrigger: true };\n    const LITS = { longIdleTimeSupport: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            registeredClients: MutableCluster.AsConditional(\n                CheckInProtocolSupportComponent.attributes.registeredClients,\n                { mandatoryIf: [CIP] }\n            ),\n            icdCounter: MutableCluster.AsConditional(\n                CheckInProtocolSupportComponent.attributes.icdCounter,\n                { mandatoryIf: [CIP] }\n            ),\n            clientsSupportedPerFabric: MutableCluster.AsConditional(\n                CheckInProtocolSupportComponent.attributes.clientsSupportedPerFabric,\n                { mandatoryIf: [CIP] }\n            ),\n            userActiveModeTriggerHint: MutableCluster.AsConditional(\n                UserActiveModeTriggerComponent.attributes.userActiveModeTriggerHint,\n                { mandatoryIf: [UAT] }\n            ),\n            operatingMode: MutableCluster.AsConditional(\n                LongIdleTimeSupportComponent.attributes.operatingMode,\n                { mandatoryIf: [LITS] }\n            )\n        },\n\n        commands: {\n            ...Cluster.commands,\n            registerClient: MutableCluster.AsConditional(\n                CheckInProtocolSupportComponent.commands.registerClient,\n                { mandatoryIf: [CIP] }\n            ),\n            unregisterClient: MutableCluster.AsConditional(\n                CheckInProtocolSupportComponent.commands.unregisterClient,\n                { mandatoryIf: [CIP] }\n            ),\n            stayActiveRequest: MutableCluster.AsConditional(\n                LongIdleTimeSupportComponent.commands.stayActiveRequest,\n                { mandatoryIf: [LITS] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all IcdManagement features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type IcdManagementCluster = IcdManagement.Cluster;\nexport const IcdManagementCluster = IcdManagement.Cluster;\nClusterRegistry.register(IcdManagement.Complete);\n"],
  "mappings": "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",
  "names": ["IcdManagement", "Feature", "OperatingMode"]
}
