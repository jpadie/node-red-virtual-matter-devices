{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/MediaInputCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command, TlvNoResponse, AccessLevel, Attribute } from \"../Cluster.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvUInt8, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace MediaInput {\n    /**\n     * These are optional features supported by MediaInputCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.4\n     */\n    export enum Feature {\n        /**\n         * NameUpdates (NU)\n         *\n         * Supports updates to the input names\n         */\n        NameUpdates = \"NameUpdates\"\n    }\n\n    /**\n     * Input to the MediaInput renameInput command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.4\n     */\n    export const TlvRenameInputRequest = TlvObject({ index: TlvField(0, TlvUInt8), name: TlvField(1, TlvString) });\n\n    /**\n     * Input to the MediaInput renameInput command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.4\n     */\n    export interface RenameInputRequest extends TypeFromSchema<typeof TlvRenameInputRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.1\n     */\n    export enum InputType {\n        /**\n         * Indicates content not coming from a physical input.\n         */\n        Internal = 0,\n\n        Aux = 1,\n        Coax = 2,\n        Composite = 3,\n        Hdmi = 4,\n        Input = 5,\n        Line = 6,\n        Optical = 7,\n        Video = 8,\n        Scart = 9,\n        Usb = 10,\n        Other = 11\n    }\n\n    /**\n     * This contains information about an input.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2\n     */\n    export const TlvInputInfo = TlvObject({\n        /**\n         * This field shall indicate the unique index into the list of Inputs.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2.1\n         */\n        index: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall indicate the type of input\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2.2\n         */\n        inputType: TlvField(1, TlvEnum<InputType>()),\n\n        /**\n         * This field shall indicate the input name, such as \u201CHDMI 1\u201D. This field may be blank, but SHOULD be provided\n         * when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2.3\n         */\n        name: TlvField(2, TlvString),\n\n        /**\n         * This field shall indicate the user editable input description, such as \u201CLiving room Playstation\u201D. This field\n         * may be blank, but SHOULD be provided when known.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2.4\n         */\n        description: TlvField(3, TlvString)\n    });\n\n    /**\n     * This contains information about an input.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.5.2\n     */\n    export interface InputInfo extends TypeFromSchema<typeof TlvInputInfo> {}\n\n    /**\n     * Input to the MediaInput selectInput command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.1\n     */\n    export const TlvSelectInputRequest = TlvObject({\n        /**\n         * This field shall indicate the index field of the InputInfoStruct from the InputList attribute in which to\n         * change to.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.1.1\n         */\n        index: TlvField(0, TlvUInt8)\n    });\n\n    /**\n     * Input to the MediaInput selectInput command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.1\n     */\n    export interface SelectInputRequest extends TypeFromSchema<typeof TlvSelectInputRequest> {}\n\n    /**\n     * A MediaInputCluster supports these elements if it supports feature NameUpdates.\n     */\n    export const NameUpdatesComponent = MutableCluster.Component({\n        commands: {\n            /**\n             * Upon receipt, this command shall rename the input at a specific index in the Input List. Updates to the\n             * input name shall appear in the device\u2019s settings menus.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.4\n             */\n            renameInput: Command(0x3, TlvRenameInputRequest, 0x3, TlvNoResponse, { invokeAcl: AccessLevel.Manage })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all MediaInput clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x507,\n        name: \"MediaInput\",\n        revision: 1,\n\n        features: {\n            /**\n             * NameUpdates\n             *\n             * Supports updates to the input names\n             */\n            nameUpdates: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * This attribute shall provide a list of the media inputs supported by the device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.6.1\n             */\n            inputList: Attribute(0x0, TlvArray(TlvInputInfo), { default: [] }),\n\n            /**\n             * This attribute shall contain the value of the index field of the currently selected InputInfoStruct.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.6.2\n             */\n            currentInput: Attribute(0x1, TlvUInt8)\n        },\n\n        commands: {\n            /**\n             * Upon receipt, this command shall change the media input on the device to the input at a specific index\n             * in the Input List.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.1\n             */\n            selectInput: Command(0x0, TlvSelectInputRequest, 0x0, TlvNoResponse),\n\n            /**\n             * Upon receipt, this command shall display the active status of the input list on screen.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.2\n             */\n            showInputStatus: Command(0x1, TlvNoArguments, 0x1, TlvNoResponse),\n\n            /**\n             * Upon receipt, this command shall hide the input list from the screen.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9.7.3\n             */\n            hideInputStatus: Command(0x2, TlvNoArguments, 0x2, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which MediaInputCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions({ flags: { nameUpdates: true }, component: NameUpdatesComponent })\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * This cluster provides an interface for controlling the Input Selector on a media device such as a Video Player.\n     *\n     * This cluster would be implemented on TV and other media streaming devices, as well as devices that provide input\n     * to or output from such devices.\n     *\n     * This cluster provides the list of available inputs and provides commands for selecting and renaming them.\n     *\n     * The cluster server for Media Input is implemented by a device that has selectable input, such as a Video Player\n     * device.\n     *\n     * MediaInputCluster supports optional features that you can enable with the MediaInputCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.9\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const NU = { nameUpdates: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n        attributes: Cluster.attributes,\n        commands: {\n            ...Cluster.commands,\n            renameInput: MutableCluster.AsConditional(NameUpdatesComponent.commands.renameInput, { mandatoryIf: [NU] })\n        }\n    });\n\n    /**\n     * This cluster supports all MediaInput features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type MediaInputCluster = MediaInput.Cluster;\nexport const MediaInputCluster = MediaInput.Cluster;\nClusterRegistry.register(MediaInput.Complete);\n"],
  "mappings": "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",
  "names": ["MediaInput", "Feature", "InputType"]
}
