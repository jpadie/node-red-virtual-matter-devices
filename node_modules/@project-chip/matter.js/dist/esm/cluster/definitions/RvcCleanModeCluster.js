/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MutableCluster } from "../mutation/MutableCluster.js";
import { BitFlag } from "../../schema/BitmapSchema.js";
import { FixedAttribute, Attribute, Command, TlvNoResponse } from "../Cluster.js";
import { TlvArray } from "../../tlv/TlvArray.js";
import { ModeBase } from "./ModeBaseCluster.js";
import { TlvUInt8 } from "../../tlv/TlvNumber.js";
import { ClusterRegistry } from "../ClusterRegistry.js";
var RvcCleanMode;
((RvcCleanMode2) => {
  let Feature;
  ((Feature2) => {
    Feature2["OnOff"] = "OnOff";
  })(Feature = RvcCleanMode2.Feature || (RvcCleanMode2.Feature = {}));
  let ModeChangeStatus;
  ((ModeChangeStatus2) => {
    ModeChangeStatus2[ModeChangeStatus2["CleaningInProgress"] = 64] = "CleaningInProgress";
  })(ModeChangeStatus = RvcCleanMode2.ModeChangeStatus || (RvcCleanMode2.ModeChangeStatus = {}));
  let ModeTag;
  ((ModeTag2) => {
    ModeTag2[ModeTag2["DeepClean"] = 16384] = "DeepClean";
    ModeTag2[ModeTag2["Vacuum"] = 16385] = "Vacuum";
    ModeTag2[ModeTag2["Mop"] = 16386] = "Mop";
  })(ModeTag = RvcCleanMode2.ModeTag || (RvcCleanMode2.ModeTag = {}));
  RvcCleanMode2.Base = MutableCluster.Component({
    id: 85,
    name: "RvcCleanMode",
    revision: 2,
    features: {
      /**
       * OnOff
       *
       * This feature creates a dependency between an OnOff cluster instance and this cluster instance on the
       * same endpoint. See OnMode for more information.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.4.1
       */
      onOff: BitFlag(0)
    },
    attributes: {
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.3.6
       */
      supportedModes: FixedAttribute(
        0,
        TlvArray(ModeBase.TlvModeOption, { minLength: 2, maxLength: 255 }),
        { default: [] }
      ),
      /**
       * @see {@link MatterSpecification.v13.Cluster} ยง 7.3.6
       */
      currentMode: Attribute(1, TlvUInt8, { scene: true, persistent: true })
    },
    commands: {
      /**
       * This command is used to change device modes.
       *
       * On receipt of this command the device shall respond with a ChangeToModeResponse command.
       *
       * @see {@link MatterSpecification.v13.Cluster} ยง 1.10.7.1
       */
      changeToMode: Command(0, ModeBase.TlvChangeToModeRequest, 0, TlvNoResponse)
    },
    /**
     * This metadata controls which RvcCleanModeCluster elements matter.js activates for specific feature
     * combinations.
     */
    extensions: MutableCluster.Extensions()
  });
  RvcCleanMode2.ClusterInstance = MutableCluster(RvcCleanMode2.Base);
  RvcCleanMode2.Cluster = RvcCleanMode2.ClusterInstance;
  RvcCleanMode2.Complete = RvcCleanMode2.Cluster;
})(RvcCleanMode || (RvcCleanMode = {}));
const RvcCleanModeCluster = RvcCleanMode.Cluster;
ClusterRegistry.register(RvcCleanMode.Complete);
export {
  RvcCleanMode,
  RvcCleanModeCluster
};
//# sourceMappingURL=RvcCleanModeCluster.js.map
