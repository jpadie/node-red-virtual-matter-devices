{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/EnergyPreferenceCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, WritableAttribute } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvPercent, TlvUInt8, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace EnergyPreference {\n    /**\n     * These are optional features supported by EnergyPreferenceCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.4\n     */\n    export enum Feature {\n        /**\n         * EnergyBalance (BALA)\n         *\n         * This feature allows a user to select from a list of energy balances with associated descriptions of which\n         * strategies a device will use to target the specified balance.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.4.1\n         */\n        EnergyBalance = \"EnergyBalance\",\n\n        /**\n         * LowPowerModeSensitivity (LPMS)\n         *\n         * This feature allows the user to select a condition or set of conditions which will cause the device to\n         * switch to a mode using less power. For example, a device might provide a scale of durations that must elapse\n         * without user interaction before it goes to sleep.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.4.2\n         */\n        LowPowerModeSensitivity = \"LowPowerModeSensitivity\"\n    }\n\n    /**\n     * This represents a step along a scale of preferences.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.2\n     */\n    export const TlvBalance = TlvObject({\n        /**\n         * This field shall indicate the relative value of this step.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.2.1\n         */\n        step: TlvField(0, TlvPercent),\n\n        /**\n         * This field shall indicate an optional string explaining which actions a device might take at the given step\n         * value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.2.2\n         */\n        label: TlvOptionalField(1, TlvString.bound({ maxLength: 64 }))\n    });\n\n    /**\n     * This represents a step along a scale of preferences.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.2\n     */\n    export interface Balance extends TypeFromSchema<typeof TlvBalance> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.1\n     */\n    export enum EnergyPriority {\n        /**\n         * This value shall emphasize user comfort; e.g. local temperature for a thermostat.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.1.1\n         */\n        Comfort = 0,\n\n        /**\n         * This value shall emphasize how quickly a device accomplishes its targeted use; e.g. how quickly a robot\n         * vacuum completes a cleaning cycle.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.1.2\n         */\n        Speed = 1,\n\n        /**\n         * This value shall emphasize how much energy a device uses; e.g. electricity usage for a Pump.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.5.1.3\n         */\n        Efficiency = 2,\n\n        WaterConsumption = 3\n    }\n\n    /**\n     * A EnergyPreferenceCluster supports these elements if it supports feature EnergyBalance.\n     */\n    export const EnergyBalanceComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates a list of BalanceStructs, each representing a step along a linear scale\n             *\n             * of relative priorities. A Step field with a value of zero shall indicate that the device SHOULD entirely\n             * favor the priority specified by the first element in EnergyPriorities; whereas a Step field with a value\n             * of 100 shall indicate that the device SHOULD entirely favor the priority specified by the second element\n             * in EnergyPriorities. The midpoint value of 50 shall indicate an even split between the two priorities.\n             *\n             * This shall contain at least two BalanceStructs.\n             *\n             * Each BalanceStruct shall have a Step field larger than the Step field on the previous BalanceStruct in\n             * the list.\n             *\n             * The first BalanceStruct shall have a Step value of zero, and the last BalanceStruct shall have a Step\n             * value of 100.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.6.1\n             */\n            energyBalances: FixedAttribute(0x0, TlvArray(TlvBalance, { minLength: 2, maxLength: 10 })),\n\n            /**\n             * Indicates the current preference of the user for balancing different priorities during device use. The\n             * value of this attribute is the index, 0-based, into the EnergyBalances attribute for the currently\n             * selected balance.\n             *\n             * If an attempt is made to set this attribute to an index outside the maximum index for EnergyBalances, a\n             * response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the value of EnergyBalances changes after an update, the device shall migrate the value of the\n             * CurrentEnergyBalance attribute to the index which the manufacturer specifies most closely matches the\n             * previous value, while preserving extreme preferences as follows:\n             *\n             *   1. If the previous value of CurrentEnergyBalance was zero, indicating a total preference for the\n             *      priority specified by the first element in EnergyPriorities, the new value of CurrentEnergyBalance\n             *      shall also be zero.\n             *\n             *   2. If the previous value of CurrentEnergyBalance was the index of the last BalanceStruct in the\n             *      previous value of EnergyBalances, indicating a total preference for the priority specified by the\n             *      last element in EnergyPriorities, the new value of CurrentEnergyBalance shall be the index of the\n             *      last element in the updated value of EnergyBalances.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.6.2\n             */\n            currentEnergyBalance: WritableAttribute(0x1, TlvUInt8, { persistent: true }),\n\n            /**\n             * Indicates two extremes for interpreting the values in the EnergyBalances attribute. These two priorities\n             * shall be in opposition to each other; e.g. Comfort vs. Efficiency or Speed vs. WaterConsumption.\n             *\n             * If the value of EnergyPriorities changes after an update to represent a new balance between priorities,\n             * the value of the CurrentEnergyBalance attribute shall be set to its default.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.6.3\n             */\n            energyPriorities: FixedAttribute(0x2, TlvArray(TlvEnum<EnergyPriority>(), { length: 2 }))\n        }\n    });\n\n    /**\n     * A EnergyPreferenceCluster supports these elements if it supports feature LowPowerModeSensitivity.\n     */\n    export const LowPowerModeSensitivityComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates a list of BalanceStructs, each representing a condition or set of conditions for the device to\n             * enter a low power mode.\n             *\n             * This shall contain at least two BalanceStructs.\n             *\n             * Each BalanceStruct shall have a Step field larger than the Step field on the previous BalanceStruct in\n             * the list.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.6.4\n             */\n            lowPowerModeSensitivities: FixedAttribute(0x3, TlvArray(TlvBalance, { minLength: 2, maxLength: 10 })),\n\n            /**\n             * Indicates the current preference of the user for determining when the device should enter a low power\n             * mode. The value of this attribute is the index, 0-based, into the LowPowerModeSensitivities attribute\n             * for the currently selected preference.\n             *\n             * If an attempt is made to set this attribute to an index outside the maximum index for\n             * LowPowerModeSensitivities, a response with the status code CONSTRAINT_ERROR shall be returned.\n             *\n             * If the value of LowPowerModeSensitivities changes after an update, the device shall migrate the value of\n             * the LowPowerModeSensitivity attribute to the index which the manufacturer specifies most closely matches\n             * the previous value.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.6.5\n             */\n            currentLowPowerModeSensitivity: WritableAttribute(0x4, TlvUInt8, { persistent: true })\n        }\n    });\n\n    /**\n     * These elements and properties are present in all EnergyPreference clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x9b,\n        name: \"EnergyPreference\",\n        revision: 1,\n\n        features: {\n            /**\n             * EnergyBalance\n             *\n             * This feature allows a user to select from a list of energy balances with associated descriptions of\n             * which strategies a device will use to target the specified balance.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.4.1\n             */\n            energyBalance: BitFlag(0),\n\n            /**\n             * LowPowerModeSensitivity\n             *\n             * This feature allows the user to select a condition or set of conditions which will cause the device to\n             * switch to a mode using less power. For example, a device might provide a scale of durations that must\n             * elapse without user interaction before it goes to sleep.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5.4.2\n             */\n            lowPowerModeSensitivity: BitFlag(1)\n        },\n\n        /**\n         * This metadata controls which EnergyPreferenceCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { energyBalance: true }, component: EnergyBalanceComponent },\n            { flags: { lowPowerModeSensitivity: true }, component: LowPowerModeSensitivityComponent },\n            { flags: { energyBalance: false, lowPowerModeSensitivity: false }, component: false }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * This cluster provides an interface to specify preferences for how devices should consume energy.\n     *\n     * NOTE Support for Energy Preference cluster is provisional.\n     *\n     * Per the Matter specification you cannot use {@link EnergyPreferenceCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 9.5\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const BALA = { energyBalance: true };\n    const LPMS = { lowPowerModeSensitivity: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            energyBalances: MutableCluster.AsConditional(\n                EnergyBalanceComponent.attributes.energyBalances,\n                { mandatoryIf: [BALA] }\n            ),\n            currentEnergyBalance: MutableCluster.AsConditional(\n                EnergyBalanceComponent.attributes.currentEnergyBalance,\n                { mandatoryIf: [BALA] }\n            ),\n            energyPriorities: MutableCluster.AsConditional(\n                EnergyBalanceComponent.attributes.energyPriorities,\n                { mandatoryIf: [BALA] }\n            ),\n            lowPowerModeSensitivities: MutableCluster.AsConditional(\n                LowPowerModeSensitivityComponent.attributes.lowPowerModeSensitivities,\n                { mandatoryIf: [LPMS] }\n            ),\n            currentLowPowerModeSensitivity: MutableCluster.AsConditional(\n                LowPowerModeSensitivityComponent.attributes.currentLowPowerModeSensitivity,\n                { mandatoryIf: [LPMS] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all EnergyPreference features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type EnergyPreferenceCluster = EnergyPreference.Cluster;\nexport const EnergyPreferenceCluster = EnergyPreference.Cluster;\nClusterRegistry.register(EnergyPreference.Complete);\n"],
  "mappings": "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",
  "names": ["EnergyPreference", "Feature", "EnergyPriority"]
}
