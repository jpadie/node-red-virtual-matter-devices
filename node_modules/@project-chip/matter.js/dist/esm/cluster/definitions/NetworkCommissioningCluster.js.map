{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/NetworkCommissioningCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { FixedAttribute, Command, AccessLevel, Attribute, WritableAttribute } from \"../Cluster.js\";\nimport { TlvUInt8, TlvUInt64, TlvEnum, TlvBitmap, TlvUInt16, TlvInt8, TlvInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvOptionalField, TlvObject, TlvField } from \"../../tlv/TlvObject.js\";\nimport { TlvByteString, TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace NetworkCommissioning {\n    /**\n     * These are optional features supported by NetworkCommissioningCluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.4\n     */\n    export enum Feature {\n        /**\n         * WiFiNetworkInterface (WI)\n         *\n         * Wi-Fi related features\n         */\n        WiFiNetworkInterface = \"WiFiNetworkInterface\",\n\n        /**\n         * ThreadNetworkInterface (TH)\n         *\n         * Thread related features\n         */\n        ThreadNetworkInterface = \"ThreadNetworkInterface\",\n\n        /**\n         * EthernetNetworkInterface (ET)\n         *\n         * Ethernet related features\n         */\n        EthernetNetworkInterface = \"EthernetNetworkInterface\"\n    }\n\n    /**\n     * Input to the NetworkCommissioning scanNetworks command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1\n     */\n    export const TlvScanNetworksRequest = TlvObject({\n        /**\n         * This field, if present, shall contain the SSID for a directed scan of that particular Wi-Fi SSID. Otherwise,\n         * if the field is absent, or if it is null, this shall indicate scanning of all BSSID in range. This field\n         * shall be ignored for ScanNetworks invocations on non-Wi-Fi server instances.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1.1\n         */\n        ssid: TlvOptionalField(0, TlvNullable(TlvByteString.bound({ minLength: 1, maxLength: 32 }))),\n\n        /**\n         * The Breadcrumb field, if present, shall be used to atomically set the Breadcrumb attribute in the General\n         * Commissioning cluster on success of the associated command. If the command fails, the Breadcrumb attribute\n         * in the General Commissioning cluster shall be left unchanged.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1.2\n         */\n        breadcrumb: TlvOptionalField(1, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning scanNetworks command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1\n     */\n    export interface ScanNetworksRequest extends TypeFromSchema<typeof TlvScanNetworksRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.4\n     */\n    export enum NetworkCommissioningStatus {\n        /**\n         * OK, no error\n         */\n        Success = 0,\n\n        /**\n         * Value Outside Range\n         */\n        OutOfRange = 1,\n\n        /**\n         * A collection would exceed its size limit\n         */\n        BoundsExceeded = 2,\n\n        /**\n         * The NetworkID is not among the collection of added networks\n         */\n        NetworkIdNotFound = 3,\n\n        /**\n         * The NetworkID is already among the collection of added networks\n         */\n        DuplicateNetworkId = 4,\n\n        /**\n         * Cannot find AP: SSID Not found\n         */\n        NetworkNotFound = 5,\n\n        /**\n         * Cannot find AP: Mismatch on band/channels/regulatory domain / 2.4GHz vs 5GHz\n         */\n        RegulatoryError = 6,\n\n        /**\n         * Cannot associate due to authentication failure\n         */\n        AuthFailure = 7,\n\n        /**\n         * Cannot associate due to unsupported security mode\n         */\n        UnsupportedSecurity = 8,\n\n        /**\n         * Other association failure\n         */\n        OtherConnectionFailure = 9,\n\n        /**\n         * Failure to generate an IPv6 address\n         */\n        Ipv6Failed = 10,\n\n        /**\n         * Failure to bind Wi-Fi <-> IP interfaces\n         */\n        IpBindFailed = 11,\n\n        /**\n         * Unknown error\n         */\n        UnknownError = 12\n    }\n\n    /**\n     * WiFiSecurityBitmap encodes the supported Wi-Fi security types present in the Security field of the\n     * WiFiInterfaceScanResultStruct.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.1\n     */\n    export const WiFiSecurity = {\n        /**\n         * Supports unencrypted Wi-Fi\n         */\n        unencrypted: BitFlag(0),\n\n        /**\n         * Supports Wi-Fi using WEP security\n         */\n        wep: BitFlag(1),\n\n        /**\n         * Supports Wi-Fi using WPA-Personal security\n         */\n        wpaPersonal: BitFlag(2),\n\n        /**\n         * Supports Wi-Fi using WPA2-Personal security\n         */\n        wpa2Personal: BitFlag(3),\n\n        /**\n         * Supports Wi-Fi using WPA3-Personal security\n         */\n        wpa3Personal: BitFlag(4)\n    };\n\n    /**\n     * WiFiBandEnum encodes a supported Wi-Fi frequency band present in the WiFiBand field of the\n     * WiFiInterfaceScanResultStruct.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.3\n     */\n    export enum WiFiBand {\n        /**\n         * 2.4GHz - 2.401GHz to2.495GHz(802.11b/g/n/ax)\n         */\n        \"2G4\" = 0,\n\n        /**\n         * 3.65GHz - 3.655GHz to3.695GHz (802.11y)\n         */\n        \"3G65\" = 1,\n\n        /**\n         * 5GHz - 5.150GHz to5.895GHz(802.11a/n/ac/ax)\n         */\n        \"5G\" = 2,\n\n        /**\n         * 6GHz - 5.925GHz to7.125GHz (802.11ax / Wi-Fi 6E)\n         */\n        \"6G\" = 3,\n\n        /**\n         * 60GHz - 57.24GHz to70.20GHz (802.11ad/ay)\n         */\n        \"60G\" = 4,\n\n        /**\n         * Sub-1GHz - 755MHz to 931MHz (802.11ah)\n         */\n        \"1G\" = 5\n    }\n\n    /**\n     * WiFiInterfaceScanResultStruct represents a single Wi-Fi network scan result.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.6\n     */\n    export const TlvWiFiInterfaceScanResult = TlvObject({\n        security: TlvOptionalField(0, TlvBitmap(TlvUInt8, WiFiSecurity)),\n        ssid: TlvOptionalField(1, TlvByteString.bound({ maxLength: 32 })),\n        bssid: TlvOptionalField(2, TlvByteString.bound({ length: 6 })),\n        channel: TlvOptionalField(3, TlvUInt16),\n\n        /**\n         * This field, if present, may be used to differentiate overlapping channel number values across different\n         * Wi-Fi frequency bands.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.6.1\n         */\n        wiFiBand: TlvOptionalField(4, TlvEnum<WiFiBand>()),\n\n        /**\n         * This field, if present, shall denote the signal strength in dBm of the associated scan result.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.6.2\n         */\n        rssi: TlvOptionalField(5, TlvInt8)\n    });\n\n    /**\n     * WiFiInterfaceScanResultStruct represents a single Wi-Fi network scan result.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.6\n     */\n    export interface WiFiInterfaceScanResult extends TypeFromSchema<typeof TlvWiFiInterfaceScanResult> {}\n\n    /**\n     * ThreadInterfaceScanResultStruct represents a single Thread network scan result.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.7\n     */\n    export const TlvThreadInterfaceScanResult = TlvObject({\n        panId: TlvOptionalField(0, TlvUInt16.bound({ max: 65534 })),\n        extendedPanId: TlvOptionalField(1, TlvUInt64),\n        networkName: TlvOptionalField(2, TlvString.bound({ minLength: 1, maxLength: 16 })),\n        channel: TlvOptionalField(3, TlvUInt16),\n        version: TlvOptionalField(4, TlvUInt8),\n\n        /**\n         * ExtendedAddress stands for an IEEE 802.15.4 Extended Address.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.7.1\n         */\n        extendedAddress: TlvOptionalField(5, TlvByteString),\n\n        rssi: TlvOptionalField(6, TlvInt8),\n        lqi: TlvOptionalField(7, TlvUInt8)\n    });\n\n    /**\n     * ThreadInterfaceScanResultStruct represents a single Thread network scan result.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.7\n     */\n    export interface ThreadInterfaceScanResult extends TypeFromSchema<typeof TlvThreadInterfaceScanResult> {}\n\n    /**\n     * This command shall contain the status of the last ScanNetworks command, and the associated scan results if the\n     * operation was successful.\n     *\n     * Results are valid only if NetworkingStatus is Success.\n     *\n     * Before generating a ScanNetworksResponse, the server shall set the LastNetworkingStatus attribute value to the\n     * NetworkingStatus matching the response.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2\n     */\n    export const TlvScanNetworksResponse = TlvObject({\n        /**\n         * The NetworkingStatus field shall indicate the status of the last scan operation, taking one of these values:\n         *\n         *   \u2022 Success: Scanning succeeded.\n         *\n         *   \u2022 NetworkNotFound: No instance of an explicitly-provided network identifier was found during the scan.\n         *     This error cannot occur if no network identifier was provided, such as when scanning for all available\n         *     networks.\n         *\n         *   \u2022 OutOfRange: Network identifier was invalid (e.g. empty, too long, etc).\n         *\n         *   \u2022 RegulatoryError: Could not scan on any bands due to lack of regulatory configuration.\n         *\n         *   \u2022 UnknownError: An internal error occurred during scanning.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2.1\n         */\n        networkingStatus: TlvField(0, TlvEnum<NetworkCommissioningStatus>()),\n\n        /**\n         * This field, if present and non-empty, may contain error information which may be communicated to the user in\n         * case the NetworkingStatus was not Success. Its purpose is to help developers in troubleshooting errors and\n         * may go into logs or crash reports.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2.2\n         */\n        debugText: TlvOptionalField(1, TlvString.bound({ maxLength: 512 })),\n\n        /**\n         * If NetworkingStatus was Success, this field shall contain the Wi-Fi network scan results. The list may be\n         * empty if none were found in range on the bands supported by the interface, or if directed scanning had been\n         * used and the desired SSID was not found in range.\n         *\n         * The maximum number of results present in the result list supported may depend on memory and may contain a\n         * subset of possibilities, to avoid memory exhaustion on the cluster server and avoid crossing the maximum\n         * command response size supported (see Section 4.4.4, \u201CMessage Size Requirements\u201D).\n         *\n         * The order in which results are reported is implementation-specific. Results SHOULD be reported in decreasing\n         * RSSI order, even if RSSI is not reported in the response, to maximize the likelihood that most likely to be\n         * reachable elements are included within the size limits of the response.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2.3\n         */\n        wiFiScanResults: TlvOptionalField(2, TlvArray(TlvWiFiInterfaceScanResult)),\n\n        /**\n         * If NetworkingStatus was Success, this field shall contain the Thread network scan results. The list may be\n         * empty if none were found in range on the bands supported by the interface.\n         *\n         * The maximum number of results present in the result list supported may depend on memory and may contain a\n         * subset of possibilities, to avoid memory exhaustion on the cluster server and avoid crossing the maximum\n         * command response size supported (see Section 4.4.4, \u201CMessage Size Requirements\u201D).\n         *\n         * The order in which results are reported is implementation-specific. Results SHOULD be reported in decreasing\n         * LQI order, to maximize the likelihood that most likely to be reachable elements are included within the size\n         * limits of the response.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2.4\n         */\n        threadScanResults: TlvOptionalField(3, TlvArray(TlvThreadInterfaceScanResult))\n    });\n\n    /**\n     * This command shall contain the status of the last ScanNetworks command, and the associated scan results if the\n     * operation was successful.\n     *\n     * Results are valid only if NetworkingStatus is Success.\n     *\n     * Before generating a ScanNetworksResponse, the server shall set the LastNetworkingStatus attribute value to the\n     * NetworkingStatus matching the response.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.2\n     */\n    export interface ScanNetworksResponse extends TypeFromSchema<typeof TlvScanNetworksResponse> {}\n\n    /**\n     * Input to the NetworkCommissioning removeNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6\n     */\n    export const TlvRemoveNetworkRequest = TlvObject({\n        /**\n         * This field shall contain the NetworkID for the entry to remove: the SSID for Wi-Fi and XPAN ID for Thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6.1\n         */\n        networkId: TlvField(0, TlvByteString.bound({ minLength: 1, maxLength: 32 })),\n\n        /**\n         * See Section 11.9.7.1.2, \u201CBreadcrumb Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6.2\n         */\n        breadcrumb: TlvOptionalField(1, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning removeNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6\n     */\n    export interface RemoveNetworkRequest extends TypeFromSchema<typeof TlvRemoveNetworkRequest> {}\n\n    /**\n     * This response command relates status information for some commands which require it as their response command.\n     * See each individual cluster server command for the situations that may cause a NetworkingStatus different than\n     * Success.\n     *\n     * Before generating a NetworkConfigResponse, the server shall set the LastNetworkingStatus attribute value to the\n     * NetworkingStatus matching the response.\n     *\n     * Before generating a NetworkConfigResponse, the server shall set the LastNetworkID attribute value to the\n     * NetworkID that was used in the command for which an invocation caused the response to be generated.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.7\n     */\n    export const TlvNetworkConfigResponse = TlvObject({\n        /**\n         * The NetworkingStatus field shall indicate the status of the last operation attempting to modify the Networks\n         * attribute configuration, taking one of these values:\n         *\n         *   \u2022 Success: Operation succeeded.\n         *\n         *   \u2022 OutOfRange: Network identifier was invalid (e.g. empty, too long, etc).\n         *\n         *   \u2022 BoundsExceeded: Adding this network configuration would exceed the limit defined by Section 11.9.6.1,\n         *     \u201CMaxNetworks Attribute\u201D.\n         *\n         *   \u2022 NetworkIdNotFound: The network identifier was expected to be found, but was not found among the added\n         *     network configurations in Networks attribute.\n         *\n         *   \u2022 UnknownError: An internal error occurred during the operation.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.7.1\n         */\n        networkingStatus: TlvField(0, TlvEnum<NetworkCommissioningStatus>()),\n\n        /**\n         * See Section 11.9.7.2.2, \u201CDebugText Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.7.2\n         */\n        debugText: TlvOptionalField(1, TlvString.bound({ maxLength: 512 })),\n\n        /**\n         * When the NetworkingStatus is Success, this field shall be present. It shall contain the 0-based index of the\n         * entry in the Networks attribute that was last added, updated or removed successfully by the associated\n         * request command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.7.3\n         */\n        networkIndex: TlvOptionalField(2, TlvUInt8)\n    });\n\n    /**\n     * This response command relates status information for some commands which require it as their response command.\n     * See each individual cluster server command for the situations that may cause a NetworkingStatus different than\n     * Success.\n     *\n     * Before generating a NetworkConfigResponse, the server shall set the LastNetworkingStatus attribute value to the\n     * NetworkingStatus matching the response.\n     *\n     * Before generating a NetworkConfigResponse, the server shall set the LastNetworkID attribute value to the\n     * NetworkID that was used in the command for which an invocation caused the response to be generated.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.7\n     */\n    export interface NetworkConfigResponse extends TypeFromSchema<typeof TlvNetworkConfigResponse> {}\n\n    /**\n     * Input to the NetworkCommissioning connectNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8\n     */\n    export const TlvConnectNetworkRequest = TlvObject({\n        /**\n         * This field shall contain the NetworkID for the entry used to configure the connection: the SSID for Wi-Fi\n         * and XPAN ID for Thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8.1\n         */\n        networkId: TlvField(0, TlvByteString.bound({ minLength: 1, maxLength: 32 })),\n\n        /**\n         * See Section 11.9.7.1.2, \u201CBreadcrumb Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8.2\n         */\n        breadcrumb: TlvOptionalField(1, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning connectNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8\n     */\n    export interface ConnectNetworkRequest extends TypeFromSchema<typeof TlvConnectNetworkRequest> {}\n\n    /**\n     * Before generating a ConnectNetworkResponse, the server shall:\n     *\n     *   \u2022 Set the LastNetworkingStatus attribute value to the NetworkingStatus matching the response.\n     *\n     *   \u2022 Set the LastNetworkID attribute value to the NetworkID that was used in the ConnectNetwork command which\n     *     caused the response to be generated.\n     *\n     *   \u2022 Set the LastConnectErrorValue attribute value to the ErrorValue matching the response, including setting it\n     *     to null if the ErrorValue is not applicable.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.9\n     */\n    export const TlvConnectNetworkResponse = TlvObject({\n        /**\n         * The NetworkingStatus field shall indicate the status of the last connection attempt, taking one of these\n         * values:\n         *\n         *   \u2022 Success: Connection succeeded.\n         *\n         *   \u2022 NetworkNotFound: No instance of an explicitly-provided network identifier was found during the attempt\n         *     to join the network.\n         *\n         *   \u2022 OutOfRange: Network identifier was invalid (e.g. empty, too long, etc).\n         *\n         *   \u2022 NetworkIdNotFound: The network identifier was not found among the added network configurations in\n         *     Networks attribute.\n         *\n         *   \u2022 RegulatoryError: Could not connect to a network due to lack of regulatory configuration.\n         *\n         *   \u2022 UnknownError: An internal error occurred during the operation.\n         *\n         *   \u2022 Association errors (see also description of errors in Section 11.9.5.4, \u201CNetworkCommissioningStatusEnum\n         *     Type\u201D): AuthFailure, UnsupportedSecurity, OtherConnectionFailure, IPV6Failed, IPBindFailed\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.9.1\n         */\n        networkingStatus: TlvField(0, TlvEnum<NetworkCommissioningStatus>()),\n\n        /**\n         * See Section 11.9.7.2.2, \u201CDebugText Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.9.2\n         */\n        debugText: TlvOptionalField(1, TlvString),\n\n        /**\n         *   \u2022 ErrorValue interpretation for Wi-Fi association errors:\n         *\n         *     \u25E6 On any association failure during enabling of a network, the ErrorValue field shall be set to the\n         *       Status Code value that was present in the last frame related to association where Status Code was not\n         *       equal to zero and which caused the failure of a final retry attempt, if this final failure was due to\n         *       one of the following Management frames:\n         *\n         *       \u25AA Association Response (Type 0, Subtype 1)\n         *\n         *       \u25AA Reassociation Response (Type 0, Subtype 3)\n         *\n         *       \u25AA Authentication (Type 0, Subtype 11)\n         *\n         *     \u25E6 Table 9-50 \"Status Codes\" in IEEE 802.11-2020 contains a description of all values possible, which can\n         *       unambiguously be used to determine the cause, such as an invalid security type, unsupported rate, etc.\n         *\n         *   \u2022 Otherwise, the ErrorValue field shall contain an implementation-dependent value which may be used by a\n         *     reader of the structure to record, report or diagnose the failure.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.9.3\n         */\n        errorValue: TlvField(2, TlvNullable(TlvInt32))\n    });\n\n    /**\n     * Before generating a ConnectNetworkResponse, the server shall:\n     *\n     *   \u2022 Set the LastNetworkingStatus attribute value to the NetworkingStatus matching the response.\n     *\n     *   \u2022 Set the LastNetworkID attribute value to the NetworkID that was used in the ConnectNetwork command which\n     *     caused the response to be generated.\n     *\n     *   \u2022 Set the LastConnectErrorValue attribute value to the ErrorValue matching the response, including setting it\n     *     to null if the ErrorValue is not applicable.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.9\n     */\n    export interface ConnectNetworkResponse extends TypeFromSchema<typeof TlvConnectNetworkResponse> {}\n\n    /**\n     * Input to the NetworkCommissioning reorderNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10\n     */\n    export const TlvReorderNetworkRequest = TlvObject({\n        /**\n         * This field shall contain the NetworkID for the entry to reorder: the SSID for Wi-Fi and XPAN ID for Thread.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10.1\n         */\n        networkId: TlvField(0, TlvByteString.bound({ minLength: 1, maxLength: 32 })),\n\n        /**\n         * This field shall contain the 0-based index of the new desired position of the entry in the Networks\n         * attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10.2\n         */\n        networkIndex: TlvField(1, TlvUInt8),\n\n        /**\n         * See Section 11.9.7.1.2, \u201CBreadcrumb Field\u201D for usage.\n         *\n         * Effect when received\n         *\n         * If the Networks attribute does not contain a matching entry, the command shall immediately respond with\n         * NetworkConfigResponse having NetworkingStatus status field set to NetworkIdNotFound.\n         *\n         * If the NetworkIndex field has a value larger or equal to the current number of entries in the Networks\n         * attribute, the command shall immediately respond with NetworkConfigResponse having NetworkingStatus status\n         * field set to OutOfRange.\n         *\n         * On success, the NetworkConfigResponse command shall have its NetworkIndex field set to the 0- based index of\n         * the entry in the Networks attribute that was just updated, matching the incoming NetworkIndex, and a\n         * NetworkingStatus status field set to Success.\n         *\n         * The entry selected shall be inserted at the new position in the list. All other entries, if any exist, shall\n         * be moved to allow the insertion, in a way that they all retain their existing relative order between each\n         * other, with the exception of the newly re-ordered entry.\n         *\n         * Re-ordering to the same NetworkIndex as the current location shall be considered as a success and yield no\n         * visible changes of the Networks attribute.\n         *\n         * Examples of re-ordering\n         *\n         * To better illustrate the re-ordering operation, consider this initial state, exemplary of a Wi-Fi device:\n         *\n         * On receiving ReorderNetwork with:\n         *\n         *   \u2022 NetworkId = Home-Guest\n         *\n         *   \u2022 NetworkIndex = 0\n         *\n         * The outcome, after applying to the initial state would be:\n         *\n         * In the above outcome, FancyCat and BlueDolphin moved \"down\" and Home-Guest became the highest priority\n         * network in the list.\n         *\n         * On receiving ReorderNetwork with:\n         *\n         *   \u2022 NetworkId = FancyCat\n         *\n         *   \u2022 NetworkIndex = 3\n         *\n         * The outcome, after applying to the initial state would be:\n         *\n         * In the above outcome, BlueDolphin, Home-Guest and WillowTree moved \"up\" and FancyCat became the lowest\n         * priority network in the list.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10.3\n         */\n        breadcrumb: TlvOptionalField(2, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning reorderNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10\n     */\n    export interface ReorderNetworkRequest extends TypeFromSchema<typeof TlvReorderNetworkRequest> {}\n\n    /**\n     * Input to the NetworkCommissioning addOrUpdateWiFiNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3\n     */\n    export const TlvAddOrUpdateWiFiNetworkRequest = TlvObject({\n        /**\n         * This field shall contain the SSID to which to attempt connection. Specific BSSID selection is not supported\n         * by this cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3.1\n         */\n        ssid: TlvField(0, TlvByteString.bound({ maxLength: 32 })),\n\n        /**\n         * Credentials is the passphrase or PSK for the network (if any is needed).\n         *\n         * Security type, cipher and credential format (passphrase or PSK) shall be contextually auto- selected during\n         * execution of the ConnectNetwork Command and during subsequent operational state network connections, based\n         * on the most secure Wi-Fi security type available within beacons and probe responses for the set of all\n         * discovered BSSIDs for the configured SSID. The type of PSK or passphrase used shall be inferred based on the\n         * length and contents of the Credentials field provided, matching the security type chosen.\n         *\n         * Valid Credentials length are:\n         *\n         *   \u2022 0 bytes: Unsecured (open) connection\n         *\n         *   \u2022 5 bytes: WEP-64 passphrase\n         *\n         *   \u2022 10 hexadecimal ASCII characters: WEP-64 40-bit hex raw PSK\n         *\n         *   \u2022 13 bytes: WEP-128 passphrase\n         *\n         *   \u2022 26 hexadecimal ASCII characters: WEP-128 104-bit hex raw PSK\n         *\n         *   \u2022 8..63 bytes: WPA/WPA2/WPA3 passphrase\n         *\n         *   \u2022 64 bytes: WPA/WPA2/WPA3 raw hex PSK\n         *\n         * These lengths shall be contextually interpreted based on the security type of the BSSID where connection\n         * will occur.\n         *\n         * When the length of Credentials and available set of BSSID admits more than one option, such as the presence\n         * of both WPA2 and WPA security type within the result set, WPA2 shall be considered more secure.\n         *\n         * Note that it may occur that a station cannot connect to a particular access point with higher security and\n         * selects a lower security connectivity type if the link quality is deemed to be too low to achieve successful\n         * operation, or if all retry attempts fail.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3.2\n         */\n        credentials: TlvField(1, TlvByteString.bound({ maxLength: 64 })),\n\n        /**\n         * See Section 11.9.7.1.2, \u201CBreadcrumb Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3.3\n         */\n        breadcrumb: TlvOptionalField(2, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning addOrUpdateWiFiNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3\n     */\n    export interface AddOrUpdateWiFiNetworkRequest extends TypeFromSchema<typeof TlvAddOrUpdateWiFiNetworkRequest> {}\n\n    /**\n     * The ThreadCapabilitiesBitmap encodes the supported Thread features and capabilities of a Thread- enabled network\n     * interface.\n     *\n     * NOTE\n     *\n     * The valid combinations of capabilities are restricted and dependent on Thread version.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.2\n     */\n    export const ThreadCapabilities = {\n        /**\n         * Thread Border Router functionality is present\n         */\n        isBorderRouterCapable: BitFlag(0),\n\n        /**\n         * Router mode is supported (interface could be in router or REED mode)\n         */\n        isRouterCapable: BitFlag(1),\n\n        /**\n         * Sleepy end-device mode is supported\n         */\n        isSleepyEndDeviceCapable: BitFlag(2),\n\n        /**\n         * Device is a full Thread device (opposite of Minimal Thread Device)\n         */\n        isFullThreadDevice: BitFlag(3),\n\n        /**\n         * Synchronized sleepy end-device mode is supported\n         */\n        isSynchronizedSleepyEndDeviceCapable: BitFlag(4)\n    };\n\n    /**\n     * Input to the NetworkCommissioning addOrUpdateThreadNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4\n     */\n    export const TlvAddOrUpdateThreadNetworkRequest = TlvObject({\n        /**\n         * The OperationalDataset field shall contain the Thread Network Parameters, including channel, PAN ID, and\n         * Extended PAN ID.\n         *\n         * The encoding for the OperationalDataset field is defined in the Thread specification. The client shall pass\n         * the OperationalDataset as an opaque octet string.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4.1\n         */\n        operationalDataset: TlvField(0, TlvByteString.bound({ maxLength: 254 })),\n\n        /**\n         * See Section 11.9.7.1.2, \u201CBreadcrumb Field\u201D for usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4.2\n         */\n        breadcrumb: TlvOptionalField(1, TlvUInt64)\n    });\n\n    /**\n     * Input to the NetworkCommissioning addOrUpdateThreadNetwork command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4\n     */\n    export interface AddOrUpdateThreadNetworkRequest extends TypeFromSchema<typeof TlvAddOrUpdateThreadNetworkRequest> {}\n\n    /**\n     * NetworkInfoStruct struct describes an existing network configuration, as provided in the Networks attribute.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.5\n     */\n    export const TlvNetworkInfo = TlvObject({\n        /**\n         * Every network is uniquely identified (for purposes of commissioning) by a NetworkID mapping to the following\n         * technology-specific properties:\n         *\n         *   \u2022 SSID for Wi-Fi\n         *\n         *   \u2022 Extended PAN ID for Thread\n         *\n         *   \u2022 Network interface instance name at operating system (or equivalent unique name) for Ethernet.\n         *\n         * The semantics of the NetworkID field therefore varies between network types accordingly. It contains SSID\n         * for Wi-Fi networks, Extended PAN ID (XPAN ID) for Thread networks and netif name for Ethernet networks.\n         *\n         * NOTE\n         *\n         * SSID in Wi-Fi is a collection of 1-32 bytes, the text encoding of which is not specified. Implementations\n         * must be careful to support reporting byte strings without requiring a particular encoding for transfer. Only\n         * the commissioner should try to potentially decode the bytes. The most common encoding is UTF-8, however this\n         * is just a convention. Some configurations may use Latin-1 or other character sets. A commissioner may decode\n         * using UTF-8, replacing encoding errors with \"?\" at the application level while retaining the underlying\n         * representation.\n         *\n         * XPAN ID is a big-endian 64-bit unsigned number, represented on the first 8 octets of the octet string.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.5.1\n         */\n        networkId: TlvField(0, TlvByteString.bound({ minLength: 1, maxLength: 32 })),\n\n        /**\n         * This field shall indicate the connected status of the associated network, where \"connected\" means currently\n         * linked to the network technology (e.g. Associated for a Wi-Fi network, media connected for an Ethernet\n         * network).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.5.2\n         */\n        connected: TlvField(1, TlvBoolean)\n    });\n\n    /**\n     * NetworkInfoStruct struct describes an existing network configuration, as provided in the Networks attribute.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.5.5\n     */\n    export interface NetworkInfo extends TypeFromSchema<typeof TlvNetworkInfo> {}\n\n    /**\n     * A NetworkCommissioningCluster supports these elements if it supports features WiFiNetworkInterface or\n     * ThreadNetworkInterface.\n     */\n    export const WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the maximum duration taken, in seconds, by the network interface on this cluster server\n             * instance to provide scan results.\n             *\n             * See Section 11.9.7.1, \u201CScanNetworks Command\u201D for usage.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.3\n             */\n            scanMaxTimeSeconds: FixedAttribute(0x2, TlvUInt8),\n\n            /**\n             * Indicates the maximum duration taken, in seconds, by the network interface on this cluster server\n             * instance to report a successful or failed network connection indication. This maximum time shall account\n             * for all operations needed until a successful network connection is deemed to have occurred, including,\n             * for example, obtaining IP addresses, or the execution of necessary internal retries.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.4\n             */\n            connectMaxTimeSeconds: FixedAttribute(0x3, TlvUInt8)\n        },\n\n        commands: {\n            /**\n             * This command shall scan on the Cluster instance\u2019s associated network interface for either of:\n             *\n             *   \u2022 All available networks (non-directed scanning)\n             *\n             *   \u2022 Specific networks (directed scanning)\n             *\n             * Scanning for available networks detects all networks of the type corresponding to the cluster server\n             * instance\u2019s associated network interface that are possible to join, such as all visible Wi-Fi access\n             * points for Wi-Fi cluster server instances, all Thread PANs for Thread cluster server instances, within\n             * bounds of the maximum response size.\n             *\n             * Scanning for a specific network (i.e. directed scanning) takes place if a network identifier (e.g. Wi-Fi\n             * SSID) is provided in the command arguments. Directed scanning shall restrict the result set to the\n             * specified network only.\n             *\n             * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n             * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n             *\n             * The client shall NOT expect the server to be done scanning and have responded with ScanNetworksResponse\n             * before ScanMaxTimeSeconds seconds have elapsed. Enough transport time affordances for retries SHOULD be\n             * expected before a client determines the operation to have timed-out.\n             *\n             * This command shall fail with a status code of BUSY if the server determines that it will fail to\n             * reliably send a response due to changes of networking interface configuration at runtime for the\n             * interface over which the command was invoked, or if it is currently unable to proceed with such an\n             * operation.\n             *\n             * For Wi-Fi-supporting servers (WI feature) the server shall always honor directed scans, and attempt to\n             * provide all matching BSSID which are reachable on the bands which would otherwise be attempted if a\n             * ConnectNetwork having the specified SSID were to take place. This command is useful for clients to\n             * determine reachability capabilities as seen by the server\u2019s own radios.\n             *\n             * For Wi-Fi-supporting servers the server shall always scan on all bands supported by the interface\n             *\n             * associated with the cluster instance on which the command was invoked.\n             *\n             * If the command was invoked over the same link whose configuration is managed by a given server cluster\n             * instance, there may be an impact on other communication from the invoking client, as well as other\n             * clients, while the network interface is processing the scan. Clients SHOULD NOT use this command unless\n             * actively in the process of re-configuring network connectivity.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.1\n             */\n            scanNetworks: Command(\n                0x0,\n                TlvScanNetworksRequest,\n                0x1,\n                TlvScanNetworksResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command shall remove the network configuration from the Cluster if there was already a network\n             * configuration with the same NetworkID. The relative order of the entries in the Networks\n             *\n             * attribute shall remain unchanged, except for the removal of the requested network configuration.\n             *\n             * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n             * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n             *\n             * If the Networks attribute does not contain a matching entry, the command shall immediately respond with\n             * NetworkConfigResponse having NetworkingStatus status field set to NetworkIdNotFound.\n             *\n             * On success, the NetworkConfigResponse command shall have its NetworkIndex field set to the 0- based\n             * index of the entry in the Networks attribute that was just removed, and a NetworkingStatus status field\n             * set to Success.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.6\n             */\n            removeNetwork: Command(\n                0x4,\n                TlvRemoveNetworkRequest,\n                0x5,\n                TlvNetworkConfigResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command shall attempt to connect to a network whose configuration was previously added by either\n             * the AddOrUpdateWiFiNetwork or AddOrUpdateThreadNetwork commands. Network is identified by its NetworkID.\n             *\n             * This command shall fail with a BUSY status code returned to the initiator if the server is currently\n             * unable to proceed with such an operation, such as if it is currently attempting to connect in the\n             * background, or is already proceeding with a prior ConnectNetwork.\n             *\n             * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n             * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n             *\n             * Success or failure of this command shall be communicated by the ConnectNetworkResponse command, unless\n             * some data model validations caused a FAILURE status to be sent prior to finishing execution of the\n             * command. The ConnectNetworkResponse shall indicate the value Success in the NetworkingStatus field on\n             * successful connection. On failure to connect, the ConnectNetworkResponse shall contain an appropriate\n             * NetworkingStatus, DebugText and ErrorValue indicating the reason for failure.\n             *\n             * The amount of time needed to determine successful or failing connectivity on the cluster server\u2019s\n             * associated interface is provided by the ConnectMaxTimeSeconds attribute. Clients shall NOT consider the\n             * connection to have timed-out until at least that duration has taken place. For non-concurrent\n             * commissioning situations, the client SHOULD allow additional margin of time to account for its delay in\n             * executing operational discovery of the Node once it is connected to the new network.\n             *\n             * On successful connection, the entry associated with the given Network configuration in the Networks\n             * attribute shall indicate its Connected field set to true, and all other entries, if any exist, shall\n             * indicate their Connected field set to false.\n             *\n             * On failure to connect, the entry associated with the given Network configuration in the Networks\n             * attribute shall indicate its Connected field set to false.\n             *\n             * The precedence order of any entry subject to ConnectNetwork shall NOT change within the Networks\n             * attribute.\n             *\n             * Even after successfully connecting to a network, the configuration shall revert to the prior state of\n             * configuration if the CommissioningComplete command (see Section 11.10.6.6, \u201CCommissioningComplete\n             * Command\u201D) is not successfully invoked before expiry of the Fail-Safe timer.\n             *\n             * When non-concurrent commissioning is being used by a Commissioner or Administrator, the\n             * ConnectNetworkResponse shall be sent with the NetworkingStatus field set to Success prior to closing the\n             * commissioning channel, even if not yet connected to the operational network, unless the device would be\n             * incapable of joining that network, in which case the usual failure path described in the prior\n             * paragraphs shall be followed. Once the commissioning channel is closed, the operational channel will be\n             * started. It is possible that the only method to determine success of the operation is operational\n             * discovery of the Node on the new operational network. Therefore, before invoking the ConnectNetwork\n             * command, the client SHOULD re-invoke the Arm Fail-Safe command with a duration that meets the following:\n             *\n             *   1. Sufficient time to meet the minimum required time (see Section 11.9.6.4, \u201CConnectMaxTimeSeconds\n             *      Attribute\u201D) that may be taken by the server to connect to the desired network.\n             *\n             *   2. Sufficient time to account for possible message-layer retries when a response is requested.\n             *\n             *   3. Sufficient time to allow operational discovery on the new network by a Commissioner or\n             *      Administrator.\n             *\n             *   4. Sufficient time to establish a CASE session after operational discovery\n             *\n             *   5. Not so long that, in error situations, the delay to reverting back to being discoverable for\n             *      commissioning with a previous configuration would cause significant user-perceived delay.\n             *\n             * Note as well that the CommissioningTimeout duration provided in a prior OpenCommissioningWindow or\n             * OpenBasicCommissioningWindow command may impact the total time available to proceed with error recovery\n             * after a connection failure.\n             *\n             * The LastNetworkingStatus, LastNetworkID and LastConnectErrorValue attributes may assist the client in\n             * determining the reason for a failure after reconnecting over a Commissioning channel, especially in\n             * non-concurrent commissioning situations.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.8\n             */\n            connectNetwork: Command(\n                0x6,\n                TlvConnectNetworkRequest,\n                0x7,\n                TlvConnectNetworkResponse,\n                { invokeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * This command shall set the specific order of the network configuration selected by its NetworkID in the\n             * Networks attribute to match the position given by NetworkIndex.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.10\n             */\n            reorderNetwork: Command(\n                0x8,\n                TlvReorderNetworkRequest,\n                0x5,\n                TlvNetworkConfigResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        }\n    });\n\n    /**\n     * A NetworkCommissioningCluster supports these elements if it supports feature WiFiNetworkInterface.\n     */\n    export const WiFiNetworkInterfaceComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates all the frequency bands supported by the Wi-Fi interface configured by the cluster instance.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.9\n             */\n            supportedWiFiBands: FixedAttribute(0x8, TlvArray(TlvEnum<WiFiBand>(), { minLength: 1 }))\n        },\n\n        commands: {\n            /**\n             * This command shall be used to add or modify Wi-Fi network configurations.\n             *\n             * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n             * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n             *\n             * The Credentials associated with the network are not readable after execution of this command, as they do\n             * not appear in the Networks attribute, for security reasons.\n             *\n             * If this command contains a ClientIdentifier, and the Networks list does not contain an entry with a\n             * matching ClientIdentifier, then this command shall fail with a status of NOT_FOUND.\n             *\n             * See Section 11.9.7.5, \u201CCommon processing of AddOrUpdateWiFiNetwork and AddOrUpdateThreadNetwork\u201D for\n             * behavior of addition/update.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.3\n             */\n            addOrUpdateWiFiNetwork: Command(\n                0x2,\n                TlvAddOrUpdateWiFiNetworkRequest,\n                0x5,\n                TlvNetworkConfigResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        }\n    });\n\n    /**\n     * A NetworkCommissioningCluster supports these elements if it supports feature ThreadNetworkInterface.\n     */\n    export const ThreadNetworkInterfaceComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates all of the Thread features supported by the Thread interface configured by the cluster\n             * instance.\n             *\n             * This attribute is primarily used to determine the most important general capabilities of the Thread\n             * interface associated with the cluster instance, as opposed to the current runtime dynamic configuration.\n             * Note that most run-time details of the actual Thread interface are found in the Thread Network\n             * Diagnostics cluster, if supported.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.10\n             */\n            supportedThreadFeatures: FixedAttribute(0x9, TlvBitmap(TlvUInt16, ThreadCapabilities)),\n\n            /**\n             * Indicates the Thread version supported by the Thread interface configured by the cluster instance.\n             *\n             * The format shall match the value mapping found in the \"Version TLV\" section of Thread specification. For\n             * example, Thread 1.3.0 would have ThreadVersion set to 4.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.11\n             */\n            threadVersion: FixedAttribute(0xa, TlvUInt16)\n        },\n\n        commands: {\n            /**\n             * This command shall be used to add or modify Thread network configurations.\n             *\n             * If this command is received without an armed fail-safe context (see Section 11.10.6.2, \u201CArmFailSafe\n             * Command\u201D), then this command shall fail with a FAILSAFE_REQUIRED status code sent back to the initiator.\n             *\n             * See Section 11.9.7.5, \u201CCommon processing of AddOrUpdateWiFiNetwork and AddOrUpdateThreadNetwork\u201D for\n             * behavior of addition/update.\n             *\n             * The XPAN ID in the OperationalDataset serves as the NetworkID for the network configuration to be added\n             * or updated.\n             *\n             * If the Networks attribute does not contain an entry with the same NetworkID as the one provided in the\n             * OperationalDataset, the operation shall be considered an addition, otherwise, it shall be considered an\n             * update.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.7.4\n             */\n            addOrUpdateThreadNetwork: Command(\n                0x3,\n                TlvAddOrUpdateThreadNetworkRequest,\n                0x5,\n                TlvNetworkConfigResponse,\n                { invokeAcl: AccessLevel.Administer }\n            )\n        }\n    });\n\n    /**\n     * These elements and properties are present in all NetworkCommissioning clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x31,\n        name: \"NetworkCommissioning\",\n        revision: 2,\n\n        features: {\n            /**\n             * WiFiNetworkInterface\n             *\n             * Wi-Fi related features\n             */\n            wiFiNetworkInterface: BitFlag(0),\n\n            /**\n             * ThreadNetworkInterface\n             *\n             * Thread related features\n             */\n            threadNetworkInterface: BitFlag(1),\n\n            /**\n             * EthernetNetworkInterface\n             *\n             * Ethernet related features\n             */\n            ethernetNetworkInterface: BitFlag(2)\n        },\n\n        attributes: {\n            /**\n             * This shall indicate the maximum number of network configuration entries that can be added, based on\n             * available device resources. The length of the Networks attribute shall be less than or equal to this\n             * value.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.1\n             */\n            maxNetworks: FixedAttribute(\n                0x0,\n                TlvUInt8.bound({ min: 1 }),\n                { readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * Indicates the network configurations that are usable on the network interface represented by this\n             * cluster server instance.\n             *\n             * The order of configurations in the list reflects precedence. That is, any time the Node attempts to\n             * connect to the network it shall attempt to do so using the configurations in Networks Attribute in the\n             * order as they appear in the list.\n             *\n             * The order of list items shall only be modified by the AddOrUpdateThreadNetwork, AddOrUpdateWiFiNetwork\n             * and ReorderNetwork commands. In other words, the list shall be stable over time, unless mutated\n             * externally.\n             *\n             * Ethernet networks shall be automatically populated by the cluster server. Ethernet Network Commissioning\n             * Cluster instances shall always have exactly one NetworkInfoStruct instance in their Networks attribute.\n             * There shall be no way to add, update or remove Ethernet network configurations to those Cluster\n             * instances.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.2\n             */\n            networks: Attribute(\n                0x1,\n                TlvArray(TlvNetworkInfo),\n                { default: [], readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * Indicates whether the associated network interface is enabled or not. By default all network interfaces\n             * SHOULD be enabled during initial commissioning (InterfaceEnabled set to true).\n             *\n             * It is undefined what happens if InterfaceEnabled is written to false on the same interface as that which\n             * is used to write the value. In that case, it is possible that the Administrator would have to await\n             * expiry of the fail-safe, and associated recovery of network configuration to prior safe values, before\n             * being able to communicate with the node again (see Section 11.10.6.2, \u201CArmFailSafe Command\u201D).\n             *\n             * It may be possible to disable Ethernet interfaces but it is implementation-defined. If not supported, a\n             * write to this attribute with a value of false shall fail with a status of INVALID_ACTION. When disabled,\n             * an Ethernet interface would longer employ media detection. That is, a simple unplug and replug of the\n             * cable shall NOT re-enable the interface.\n             *\n             * On Ethernet-only Nodes, there shall always be at least one of the Network Commissioning server cluster\n             * instances with InterfaceEnabled set to true.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.5\n             */\n            interfaceEnabled: WritableAttribute(\n                0x4,\n                TlvBoolean,\n                { persistent: true, default: true, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * Indicates the status of the last attempt either scan or connect to an operational network, using this\n             * interface, whether by invocation of the ConnectNetwork command or by autonomous connection after loss of\n             * connectivity or during initial establishment. If no such attempt was made, or no network configurations\n             * exist in the Networks attribute, then this attribute shall be set to null.\n             *\n             * This attribute is present to assist with error recovery during Network commissioning and to assist in\n             * non-concurrent networking commissioning flows.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.6\n             */\n            lastNetworkingStatus: Attribute(\n                0x5,\n                TlvNullable(TlvEnum<NetworkCommissioningStatus>()),\n                { default: null, readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * Indicates the NetworkID used in the last attempt to connect to an operational network, using this\n             * interface, whether by invocation of the ConnectNetwork command or by autonomous connection after loss of\n             * connectivity or during initial establishment. If no such attempt was made, or no network configurations\n             * exist in the Networks attribute, then this attribute shall be set to null.\n             *\n             * If a network configuration is removed from the Networks attribute using the RemoveNetwork command after\n             * a connection attempt, this field may indicate a NetworkID that is no longer configured on the Node.\n             *\n             * This attribute is present to assist with error recovery during Network commissioning and to assist in\n             * non-concurrent networking commissioning flows.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.7\n             */\n            lastNetworkId: Attribute(\n                0x6,\n                TlvNullable(TlvByteString.bound({ minLength: 1, maxLength: 32 })),\n                { default: null, readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            ),\n\n            /**\n             * Indicates the ErrorValue used in the last failed attempt to connect to an operational network, using\n             * this interface, whether by invocation of the ConnectNetwork command or by\n             *\n             * autonomous connection after loss of connectivity or during initial establishment. If no such attempt was\n             * made, or no network configurations exist in the Networks attribute, then this attribute shall be set to\n             * null.\n             *\n             * If the last connection succeeded, as indicated by a value of Success in the LastNetworkingStatus\n             * attribute, then this field shall be set to null.\n             *\n             * This attribute is present to assist with error recovery during Network commissioning and to assist in\n             * non-concurrent networking commissioning flows.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.9.6.8\n             */\n            lastConnectErrorValue: Attribute(\n                0x7,\n                TlvNullable(TlvInt32),\n                { default: null, readAcl: AccessLevel.Administer, writeAcl: AccessLevel.Administer }\n            )\n        },\n\n        /**\n         * This metadata controls which NetworkCommissioningCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { wiFiNetworkInterface: true }, component: WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent },\n            {\n                flags: { threadNetworkInterface: true },\n                component: WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent\n            },\n            { flags: { wiFiNetworkInterface: true }, component: WiFiNetworkInterfaceComponent },\n            { flags: { threadNetworkInterface: true }, component: ThreadNetworkInterfaceComponent },\n            { flags: { wiFiNetworkInterface: true, threadNetworkInterface: true }, component: false },\n            { flags: { wiFiNetworkInterface: true, ethernetNetworkInterface: true }, component: false },\n            { flags: { threadNetworkInterface: true, ethernetNetworkInterface: true }, component: false },\n            {\n                flags: { wiFiNetworkInterface: false, threadNetworkInterface: false, ethernetNetworkInterface: false },\n                component: false\n            }\n        )\n    })\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster.ExtensibleOnly(Base);\n\n    /**\n     * Network commissioning is part of the overall Node commissioning. The main goal of Network Commissioning Cluster\n     * is to associate a Node with or manage a Node\u2019s one or more network interfaces. These network interfaces can\n     * include the following types.\n     *\n     *   \u2022 Wi-Fi (IEEE 802.11-2020)\n     *\n     *   \u2022 Ethernet (802.3)\n     *\n     *   \u2022 Thread (802.15.4)\n     *\n     * An instance of the Network Commissioning Cluster only applies to a single network interface instance present. An\n     * interface, in this context, is a unique entity that can have an IPv6 address assigned to it and ingress and\n     * egress IP packets.\n     *\n     * Per the Matter specification you cannot use {@link NetworkCommissioningCluster} without enabling certain feature\n     * combinations. You must use the {@link with} factory method to obtain a working cluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.9\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const WI = { wiFiNetworkInterface: true };\n    const TH = { threadNetworkInterface: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Base.id,\n        name: Base.name,\n        revision: Base.revision,\n        features: Base.features,\n\n        attributes: {\n            ...Base.attributes,\n            scanMaxTimeSeconds: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.attributes.scanMaxTimeSeconds,\n                { mandatoryIf: [WI, TH] }\n            ),\n            connectMaxTimeSeconds: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.attributes.connectMaxTimeSeconds,\n                { mandatoryIf: [WI, TH] }\n            ),\n            supportedWiFiBands: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceComponent.attributes.supportedWiFiBands,\n                { mandatoryIf: [WI] }\n            ),\n            supportedThreadFeatures: MutableCluster.AsConditional(\n                ThreadNetworkInterfaceComponent.attributes.supportedThreadFeatures,\n                { mandatoryIf: [TH] }\n            ),\n            threadVersion: MutableCluster.AsConditional(\n                ThreadNetworkInterfaceComponent.attributes.threadVersion,\n                { mandatoryIf: [TH] }\n            )\n        },\n\n        commands: {\n            scanNetworks: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.commands.scanNetworks,\n                { mandatoryIf: [WI, TH] }\n            ),\n            addOrUpdateWiFiNetwork: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceComponent.commands.addOrUpdateWiFiNetwork,\n                { mandatoryIf: [WI] }\n            ),\n            addOrUpdateThreadNetwork: MutableCluster.AsConditional(\n                ThreadNetworkInterfaceComponent.commands.addOrUpdateThreadNetwork,\n                { mandatoryIf: [TH] }\n            ),\n            removeNetwork: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.commands.removeNetwork,\n                { mandatoryIf: [WI, TH] }\n            ),\n            connectNetwork: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.commands.connectNetwork,\n                { mandatoryIf: [WI, TH] }\n            ),\n            reorderNetwork: MutableCluster.AsConditional(\n                WiFiNetworkInterfaceOrThreadNetworkInterfaceComponent.commands.reorderNetwork,\n                { mandatoryIf: [WI, TH] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all NetworkCommissioning features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type NetworkCommissioningCluster = NetworkCommissioning.Cluster;\nexport const NetworkCommissioningCluster = NetworkCommissioning.Cluster;\nClusterRegistry.register(NetworkCommissioning.Complete);\n"],
  "mappings": "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",
  "names": ["NetworkCommissioning", "Feature", "NetworkCommissioningStatus", "WiFiBand"]
}
