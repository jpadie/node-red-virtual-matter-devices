{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OvenCavityOperationalStateCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    OptionalAttribute,\n    OptionalCommand,\n    TlvNoResponse,\n    Event,\n    EventPriority,\n    OptionalEvent\n} from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvUInt8, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { OperationalState } from \"./OperationalStateCluster.js\";\nimport { TlvNoArguments } from \"../../tlv/TlvNoArguments.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OvenCavityOperationalState {\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x48,\n        name: \"OvenCavityOperationalState\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * Indicates a list of names of different phases that the device can go through for the selected function\n             * or mode. The list may not be in sequence order. For example in a washing machine this could include\n             * items such as \"pre-soak\", \"rinse\", and \"spin\". These phases are manufacturer specific and may change\n             * when a different function or mode is selected.\n             *\n             * A null value indicates that the device does not present phases during its operation. When this\n             * attribute\u2019s value is null, the CurrentPhase attribute shall also be set to null.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.1\n             */\n            phaseList: Attribute(0x0, TlvNullable(TlvArray(TlvString, { maxLength: 32 }))),\n\n            /**\n             * This attribute represents the current phase of operation being performed by the server. This shall be\n             * the positional index representing the value from the set provided in the PhaseList Attribute, where the\n             * first item in that list is an index of 0. Thus, this attribute shall have a maximum value that is\n             * \"length(PhaseList) - 1\".\n             *\n             * Null if the PhaseList attribute is null or if the PhaseList attribute is an empty list.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.2\n             */\n            currentPhase: Attribute(0x1, TlvNullable(TlvUInt8)),\n\n            /**\n             * Indicates the estimated time left before the operation is completed, in seconds. Changes to this value\n             * shall NOT be reported in a subscription (note the C Quality). A Client implementation may periodically\n             * poll this value to ensure alignment of any local rendering of the CountdownTime with the device provided\n             * value.\n             *\n             * A value of 0 means that the operation has completed.\n             *\n             * When this attribute is null, that represents that there is no time currently defined until operation\n             * completion. This may happen, for example, because no operation is in progress or because the completion\n             * time is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.3\n             */\n            countdownTime: OptionalAttribute(\n                0x2,\n                TlvNullable(TlvUInt32.bound({ max: 259200 })),\n                { omitChanges: true, default: null }\n            ),\n\n            /**\n             * This attribute describes the set of possible operational states that the device exposes. An operational\n             * state is a fundamental device state such as Running or Error. Details of the phase of a device when, for\n             * example, in a state of Running are provided by the CurrentPhase attribute.\n             *\n             * All devices shall, at a minimum, expose the set of states matching the commands that are also supported\n             * by the cluster instance, in addition to Error. The set of possible device states are defined in the\n             * OperationalStateEnum. A device type requiring implementation of this cluster shall define the set of\n             * states that are applicable to that specific device type.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.4\n             */\n            operationalStateList: Attribute(0x3, TlvArray(OperationalState.TlvOperationalStateStruct), { default: [] }),\n\n            /**\n             * This attribute specifies the current operational state of a device. This shall be populated with a valid\n             * OperationalStateID from the set of values in the OperationalStateList Attribute.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.5\n             */\n            operationalState: Attribute(0x4, TlvUInt8),\n\n            /**\n             * This attribute shall specify the details of any current error condition being experienced on the device\n             * when the OperationalState attribute is populated with Error. Please see ErrorStateStruct for general\n             * requirements on the population of this attribute.\n             *\n             * When there is no error detected, this shall have an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.5.6\n             */\n            operationalError: Attribute(0x5, OperationalState.TlvErrorState)\n        },\n\n        commands: {\n            /**\n             * This command shall be supported if the device supports remotely pausing the operation. If this command\n             * is supported, the Resume command shall also be supported.\n             *\n             * On receipt of this command, the device shall pause its operation if it is possible based on the current\n             * function of the server. For example, if it is at a point where it is safe to do so and/or permitted, but\n             * can be restarted from the point at which pause occurred.\n             *\n             * If this command is received when already in the Paused state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that receives this command in any state which is not Pause-compatible shall respond\n             *\n             * with an OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take\n             * no further action.\n             *\n             * States are defined as Pause-compatible as follows:\n             *\n             *   \u2022 For states defined in this cluster specification, in Table 3, \u201CPause Compatibility\u201D.\n             *\n             *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n             *\n             *   \u2022 For manufacturer-specific states, by the manufacturer.\n             *\n             * A device that is unable to honor the Pause command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Paused.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * The following table defines the compatibility of this cluster\u2019s states with the Pause command.\n             *\n             * ### Table 3. Pause Compatibility\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.1\n             */\n            pause: OptionalCommand(0x0, TlvNoArguments, 0x0, TlvNoResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely stopping the operation.\n             *\n             * On receipt of this command, the device shall stop its operation if it is at a position where it is safe\n             * to do so and/or permitted. Restart of the device following the receipt of the Stop command shall require\n             * attended operation unless remote start is allowed by the device type and any jurisdiction governing\n             * remote operation of the device.\n             *\n             * If this command is received when already in the Stopped state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that is unable to honor the Stop command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Stopped.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.2\n             */\n            stop: OptionalCommand(0x1, TlvNoArguments, 0x1, TlvNoResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely starting the operation. If this command\n             * is supported, the 'Stop command shall also be supported.\n             *\n             * On receipt of this command, the device shall start its operation if it is safe to do so and the device\n             * is in an operational state from which it can be started. There may be either regulatory or\n             * manufacturer-imposed safety and security requirements that first necessitate some specific action at the\n             * device before a Start command can be honored. In such instances, a device shall respond with a status\n             * code of CommandInvalidInState if a Start command is received prior to the required on- device action.\n             *\n             * If this command is received when already in the Running state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that is unable to honor the Start command for whatever reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to Running.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.3\n             */\n            start: OptionalCommand(0x2, TlvNoArguments, 0x2, TlvNoResponse),\n\n            /**\n             * This command shall be supported if the device supports remotely resuming the operation. If this command\n             * is supported, the Pause command shall also be supported.\n             *\n             * On receipt of this command, the device shall resume its operation from the point it was at when it\n             * received the Pause command, or from the point when it was paused by means outside of this cluster (for\n             * example by manual button press).\n             *\n             * If this command is received when already in the Running state the device shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of NoError but take no further action.\n             *\n             * A device that receives this command in any state which is not Resume-compatible shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of CommandInvalidInState and shall take no\n             * further action.\n             *\n             * States are defined as Resume-compatible as follows:\n             *\n             *   \u2022 For states defined in this cluster specification, in Table 4, \u201CResume Compatibility\u201D.\n             *\n             *   \u2022 For states defined by derived cluster specifications, in the corresponding specifications.\n             *\n             *   \u2022 For manufacturer-specific states, by the manufacturer.\n             *\n             * The following table defines the compatibility of this cluster\u2019s states with the Resume command.\n             *\n             * ### Table 4. Resume Compatibility\n             *\n             * A device that is unable to honor the Resume command for any other reason shall respond with an\n             * OperationalCommandResponse command with an ErrorStateID of UnableToStartOrResume but take no further\n             * action.\n             *\n             * Otherwise, on success:\n             *\n             *   \u2022 The OperationalState attribute shall be set to the most recent non-Error operational state prior to\n             *     entering the Paused state.\n             *\n             *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.6.4\n             */\n            resume: OptionalCommand(0x3, TlvNoArguments, 0x3, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event is generated when a reportable error condition is detected. A device that generates this\n             * event shall also set the OperationalState attribute to Error, indicating an error condition.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.1\n             */\n            operationalError: Event(0x0, EventPriority.Critical, OperationalState.TlvOperationalErrorEvent),\n\n            /**\n             * This event is generated when the overall operation ends, successfully or otherwise. For example, the\n             * completion of a cleaning operation in a Robot Vacuum Cleaner, or the completion of a wash cycle in a\n             * Washing Machine.\n             *\n             * This event shall contain the following fields:\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.14.7.2\n             */\n            operationCompletion: OptionalEvent(0x1, EventPriority.Info, OperationalState.TlvOperationCompletionEvent)\n        }\n    });\n\n    /**\n     * This cluster provides an interface for monitoring the operational state of an oven.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 8.10\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type OvenCavityOperationalStateCluster = OvenCavityOperationalState.Cluster;\nexport const OvenCavityOperationalStateCluster = OvenCavityOperationalState.Cluster;\nClusterRegistry.register(OvenCavityOperationalState.Complete);\n"],
  "mappings": "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",
  "names": ["OvenCavityOperationalState"]
}
