{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/LevelControlCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport {\n    Attribute,\n    OptionalAttribute,\n    WritableAttribute,\n    AccessLevel,\n    Command,\n    TlvNoResponse,\n    OptionalWritableAttribute\n} from \"../Cluster.js\";\nimport { TlvUInt16, TlvUInt8, TlvBitmap, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport { TlvField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { ClusterType } from \"../ClusterType.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace LevelControl {\n    /**\n     * These are optional features supported by LevelControlCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.4\n     */\n    export enum Feature {\n        /**\n         * OnOff (OO)\n         *\n         * Dependency with the On/Off cluster\n         */\n        OnOff = \"OnOff\",\n\n        /**\n         * Lighting (LT)\n         *\n         * This feature supports an interface for controlling the level of a light source. For the CurrentLevel\n         * attribute:\n         *\n         * A value of 0x00 shall NOT be used.\n         *\n         * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall\n         * indicate the maximum level that can be attained on a device. A value of null shall represent an undefined\n         * value.\n         *\n         * All other values are application specific gradations from the minimum to the maximum level.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.4.2\n         */\n        Lighting = \"Lighting\",\n\n        /**\n         * Frequency (FQ)\n         *\n         * NOTE The Frequency feature is provisional.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.4.3\n         */\n        Frequency = \"Frequency\"\n    }\n\n    /**\n     * Input to the LevelControl moveToClosestFrequency command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.5\n     */\n    export const TlvMoveToClosestFrequencyRequest = TlvObject({ frequency: TlvField(0, TlvUInt16) });\n\n    /**\n     * Input to the LevelControl moveToClosestFrequency command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.5\n     */\n    export interface MoveToClosestFrequencyRequest extends TypeFromSchema<typeof TlvMoveToClosestFrequencyRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.5.1\n     */\n    export const Options = {\n        /**\n         * Dependency on On/Off cluster\n         *\n         * This bit indicates if this cluster has a dependency with the On/Off cluster.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.5.1.1\n         */\n        executeIfOff: BitFlag(0),\n\n        /**\n         * Dependency on Color Control cluster\n         *\n         * This bit indicates if this cluster has a dependency with the Color Control cluster.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.5.1.2\n         */\n        coupleColorTempToLevel: BitFlag(1)\n    };\n\n    /**\n     * Input to the LevelControl moveToLevel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.1\n     */\n    export const TlvMoveToLevelRequest = TlvObject({\n        level: TlvField(0, TlvUInt8.bound({ max: 254 })),\n        transitionTime: TlvField(1, TlvNullable(TlvUInt16)),\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the LevelControl moveToLevel command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.1\n     */\n    export interface MoveToLevelRequest extends TypeFromSchema<typeof TlvMoveToLevelRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.5.2\n     */\n    export enum MoveMode {\n        /**\n         * Increase the level\n         */\n        Up = 0,\n\n        /**\n         * Decrease the level\n         */\n        Down = 1\n    }\n\n    /**\n     * Input to the LevelControl move command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.2\n     */\n    export const TlvMoveRequest = TlvObject({\n        /**\n         * This field shall be one of the non-reserved values in MoveModeEnum.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.2.1\n         */\n        moveMode: TlvField(0, TlvEnum<MoveMode>()),\n\n        /**\n         * This field shall indicate the rate of movement in units per second. The actual rate of movement SHOULD be as\n         * close to this rate as the device is able. If the Rate field is equal to null, then the value in\n         * DefaultMoveRate attribute shall be used. However, if the Rate field is equal to null and the DefaultMoveRate\n         * attribute is not supported, or if the Rate field is equal to null and the value of the DefaultMoveRate\n         * attribute is equal to null, then the device SHOULD move as fast as it is able. If the device is not able to\n         * move at a variable rate, this field may be disregarded.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.2.2\n         */\n        rate: TlvField(1, TlvNullable(TlvUInt8)),\n\n        optionsMask: TlvField(2, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(3, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the LevelControl move command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.2\n     */\n    export interface MoveRequest extends TypeFromSchema<typeof TlvMoveRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.5.3\n     */\n    export enum StepMode {\n        /**\n         * Step upwards\n         */\n        Up = 0,\n\n        /**\n         * Step downwards\n         */\n        Down = 1\n    }\n\n    /**\n     * Input to the LevelControl step command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3\n     */\n    export const TlvStepRequest = TlvObject({\n        /**\n         * This field shall be one of the non-reserved values in StepModeEnum.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3.1\n         */\n        stepMode: TlvField(0, TlvEnum<StepMode>()),\n\n        /**\n         * This field shall indicate the change to CurrentLevel.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3.2\n         */\n        stepSize: TlvField(1, TlvUInt8),\n\n        /**\n         * This field shall indicate the time that shall be taken to perform the step, in tenths of a second. A step is\n         * a change in the CurrentLevel of StepSize units. The actual time taken SHOULD be as close to this as the\n         * device is able. If the TransitionTime field is equal to null, the device SHOULD move as fast as it is able.\n         *\n         * If the device is not able to move at a variable rate, the TransitionTime field may be disregarded.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3.3\n         */\n        transitionTime: TlvField(2, TlvNullable(TlvUInt16)),\n\n        optionsMask: TlvField(3, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(4, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the LevelControl step command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3\n     */\n    export interface StepRequest extends TypeFromSchema<typeof TlvStepRequest> {}\n\n    /**\n     * Input to the LevelControl stop command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.4\n     */\n    export const TlvStopRequest = TlvObject({\n        optionsMask: TlvField(0, TlvBitmap(TlvUInt8, Options)),\n        optionsOverride: TlvField(1, TlvBitmap(TlvUInt8, Options))\n    });\n\n    /**\n     * Input to the LevelControl stop command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.4\n     */\n    export interface StopRequest extends TypeFromSchema<typeof TlvStopRequest> {}\n\n    /**\n     * A LevelControlCluster supports these elements if it supports feature Lighting.\n     */\n    export const LightingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the time remaining until the current command is complete - it is specified in 1/10ths of a\n             * second.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.3\n             */\n            remainingTime: Attribute(0x1, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the minimum value of CurrentLevel that is capable of being assigned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.4\n             */\n            minLevel: OptionalAttribute(0x2, TlvUInt8.bound({ min: 1 }), { default: 1 }),\n\n            /**\n             * Indicates the desired startup level for a device when it is supplied with power and this level shall be\n             * reflected in the CurrentLevel attribute. The values of the StartUpCurrentLevel attribute are listed\n             * below:\n             *\n             * This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentLevel\n             * attribute shall return to its value prior to the restart.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.15\n             */\n            startUpCurrentLevel: WritableAttribute(\n                0x4000,\n                TlvNullable(TlvUInt8),\n                { persistent: true, writeAcl: AccessLevel.Manage }\n            )\n        }\n    });\n\n    /**\n     * A LevelControlCluster supports these elements if doesn't support feature LT.\n     */\n    export const NotLightingComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the minimum value of CurrentLevel that is capable of being assigned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.4\n             */\n            minLevel: OptionalAttribute(0x2, TlvUInt8, { default: 0 })\n        }\n    });\n\n    /**\n     * A LevelControlCluster supports these elements if it supports feature Frequency.\n     */\n    export const FrequencyComponent = MutableCluster.Component({\n        attributes: {\n            /**\n             * Indicates the frequency at which the device is at CurrentLevel. A CurrentFrequency of 0 is unknown.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.6\n             */\n            currentFrequency: Attribute(0x4, TlvUInt16, { scene: true, default: 0 }),\n\n            /**\n             * Indicates the minimum value of CurrentFrequency that is capable of being assigned. MinFrequency shall be\n             * less than or equal to MaxFrequency. A value of 0 indicates undefined.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.7\n             */\n            minFrequency: Attribute(0x5, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the maximum value of CurrentFrequency that is capable of being assigned. MaxFrequency shall be\n             * greater than or equal to MinFrequency. A value of 0 indicates undefined.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.8\n             */\n            maxFrequency: Attribute(0x6, TlvUInt16, { default: 0 })\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.5\n             */\n            moveToClosestFrequency: Command(0x8, TlvMoveToClosestFrequencyRequest, 0x8, TlvNoResponse)\n        }\n    });\n\n    /**\n     * These elements and properties are present in all LevelControl clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x8,\n        name: \"LevelControl\",\n        revision: 5,\n\n        features: {\n            /**\n             * OnOff\n             *\n             * Dependency with the On/Off cluster\n             */\n            onOff: BitFlag(0),\n\n            /**\n             * Lighting\n             *\n             * This feature supports an interface for controlling the level of a light source. For the CurrentLevel\n             * attribute:\n             *\n             * A value of 0x00 shall NOT be used.\n             *\n             * A value of 0x01 shall indicate the minimum level that can be attained on a device. A value of 0xFE shall\n             * indicate the maximum level that can be attained on a device. A value of null shall represent an\n             * undefined value.\n             *\n             * All other values are application specific gradations from the minimum to the maximum level.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.4.2\n             */\n            lighting: BitFlag(1),\n\n            /**\n             * Frequency\n             *\n             * NOTE The Frequency feature is provisional.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.4.3\n             */\n            frequency: BitFlag(2)\n        },\n\n        attributes: {\n            /**\n             * Indicates the current level of this device. The meaning of 'level' is device dependent.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.2\n             */\n            currentLevel: Attribute(0x0, TlvNullable(TlvUInt8), { scene: true, persistent: true, default: null }),\n\n            /**\n             * Indicates the maximum value of CurrentLevel that is capable of being assigned.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.5\n             */\n            maxLevel: OptionalAttribute(0x3, TlvUInt8.bound({ max: 254 }), { default: 254 }),\n\n            /**\n             * Indicates the selected options of the device.\n             *\n             * The Options attribute is a bitmap that determines the default behavior of some cluster commands. Each\n             * command that is dependent on the Options attribute shall first construct a temporary Options bitmap that\n             * is in effect during the command processing. The temporary Options bitmap has the same format and meaning\n             * as the Options attribute, but includes any bits that may be overridden by command fields.\n             *\n             * This attribute is meant to be changed only during commissioning.\n             *\n             * Command execution shall NOT continue beyond the Options processing if all of these criteria are true:\n             *\n             *   \u2022 The command is one of the \u2018without On/Off\u2019 commands: Move, Move to Level, Step, or Stop.\n             *\n             *   \u2022 The On/Off cluster exists on the same endpoint as this cluster.\n             *\n             *   \u2022 The OnOff attribute of the On/Off cluster, on this endpoint, is FALSE.\n             *\n             *   \u2022 The value of the ExecuteIfOff bit is 0.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.9\n             */\n            options: WritableAttribute(0xf, TlvBitmap(TlvUInt8, Options)),\n\n            /**\n             * Indicates the time taken to move to or from the target level when On or Off commands are received by an\n             * On/Off cluster on the same endpoint. It is specified in 1/10ths of a second.\n             *\n             * The actual time taken SHOULD be as close to OnOffTransitionTime as the device is able. Please note that\n             * if the device is not able to move at a variable rate, the OnOffTransitionTime attribute SHOULD NOT be\n             * implemented.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.10\n             */\n            onOffTransitionTime: OptionalWritableAttribute(0x10, TlvUInt16, { default: 0 }),\n\n            /**\n             * Indicates the value that the CurrentLevel attribute is set to when the OnOff attribute of an On/Off\n             * cluster on the same endpoint is set to TRUE, as a result of processing an On/Off cluster command. If the\n             * OnLevel attribute is not implemented, or is set to the null value, it has no effect. For more details\n             * see Effect of On/Off Commands on the CurrentLevel Attribute.\n             *\n             * OnLevel represents a mandatory field that was previously not present or optional. Implementers should be\n             * aware that older devices may not implement it.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.11\n             */\n            onLevel: WritableAttribute(0x11, TlvNullable(TlvUInt8), { default: null }),\n\n            /**\n             * Indicates the time taken to move the current level from the minimum level to the maximum level when an\n             * On command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a\n             * second. If this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be\n             * used instead.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.12\n             */\n            onTransitionTime: OptionalWritableAttribute(0x12, TlvNullable(TlvUInt16), { default: null }),\n\n            /**\n             * Indicates the time taken to move the current level from the maximum level to the minimum level when an\n             * Off command is received by an On/Off cluster on the same endpoint. It is specified in 1/10ths of a\n             * second. If this attribute is not implemented, or contains a null value, the OnOffTransitionTime shall be\n             * used instead.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.13\n             */\n            offTransitionTime: OptionalWritableAttribute(0x13, TlvNullable(TlvUInt16), { default: null }),\n\n            /**\n             * Indicates the movement rate, in units per second, when a Move command is received with a null value Rate\n             * parameter.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.6.14\n             */\n            defaultMoveRate: OptionalWritableAttribute(0x14, TlvNullable(TlvUInt8))\n        },\n\n        commands: {\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.1\n             */\n            moveToLevel: Command(0x0, TlvMoveToLevelRequest, 0x0, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.2\n             */\n            move: Command(0x1, TlvMoveRequest, 0x1, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.3\n             */\n            step: Command(0x2, TlvStepRequest, 0x2, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7.4\n             */\n            stop: Command(0x3, TlvStopRequest, 0x3, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7\n             */\n            moveToLevelWithOnOff: Command(0x4, TlvMoveToLevelRequest, 0x4, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7\n             */\n            moveWithOnOff: Command(0x5, TlvMoveRequest, 0x5, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7\n             */\n            stepWithOnOff: Command(0x6, TlvStepRequest, 0x6, TlvNoResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6.7\n             */\n            stopWithOnOff: Command(0x7, TlvStopRequest, 0x7, TlvNoResponse)\n        },\n\n        /**\n         * This metadata controls which LevelControlCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions(\n            { flags: { lighting: true }, component: LightingComponent },\n            { flags: { lighting: false }, component: NotLightingComponent },\n            { flags: { frequency: true }, component: FrequencyComponent }\n        )\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(\n        { ...Base, supportedFeatures: { onOff: true }, base: ClusterType(Base) },\n        NotLightingComponent\n    );\n\n    /**\n     * This cluster provides an interface for controlling a characteristic of a device that can be set to a level, for\n     * example the brightness of a light, the degree of closure of a door, or the power output of a heater.\n     *\n     * LevelControlCluster supports optional features that you can enable with the LevelControlCluster.with() factory\n     * method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.6\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    const LT = { lighting: true };\n    const FQ = { frequency: true };\n\n    /**\n     * @see {@link Complete}\n     */\n    export const CompleteInstance = MutableCluster({\n        id: Cluster.id,\n        name: Cluster.name,\n        revision: Cluster.revision,\n        features: Cluster.features,\n\n        attributes: {\n            ...Cluster.attributes,\n            remainingTime: MutableCluster.AsConditional(\n                LightingComponent.attributes.remainingTime,\n                { mandatoryIf: [LT] }\n            ),\n            minLevel: MutableCluster.AsConditional(LightingComponent.attributes.minLevel, { optionalIf: [LT] }),\n            currentFrequency: MutableCluster.AsConditional(\n                FrequencyComponent.attributes.currentFrequency,\n                { mandatoryIf: [FQ] }\n            ),\n            minFrequency: MutableCluster.AsConditional(\n                FrequencyComponent.attributes.minFrequency,\n                { mandatoryIf: [FQ] }\n            ),\n            maxFrequency: MutableCluster.AsConditional(\n                FrequencyComponent.attributes.maxFrequency,\n                { mandatoryIf: [FQ] }\n            ),\n            startUpCurrentLevel: MutableCluster.AsConditional(\n                LightingComponent.attributes.startUpCurrentLevel,\n                { mandatoryIf: [LT] }\n            )\n        },\n\n        commands: {\n            ...Cluster.commands,\n            moveToClosestFrequency: MutableCluster.AsConditional(\n                FrequencyComponent.commands.moveToClosestFrequency,\n                { mandatoryIf: [FQ] }\n            )\n        }\n    });\n\n    /**\n     * This cluster supports all LevelControl features. It may support illegal feature combinations.\n     *\n     * If you use this cluster you must manually specify which features are active and ensure the set of active\n     * features is legal per the Matter specification.\n     */\n    export interface Complete extends Identity<typeof CompleteInstance> {}\n\n    export const Complete: Complete = CompleteInstance;\n}\n\nexport type LevelControlCluster = LevelControl.Cluster;\nexport const LevelControlCluster = LevelControl.Cluster;\nClusterRegistry.register(LevelControl.Complete);\n"],
  "mappings": "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",
  "names": ["LevelControl", "Feature", "MoveMode", "StepMode"]
}
