{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ScenesManagementCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport {\n    OptionalAttribute,\n    FixedAttribute,\n    FabricScopedAttribute,\n    Command,\n    AccessLevel,\n    TlvNoResponse,\n    OptionalCommand\n} from \"../Cluster.js\";\nimport { TlvNodeId } from \"../../datatype/NodeId.js\";\nimport { TlvNullable } from \"../../tlv/TlvNullable.js\";\nimport {\n    TlvUInt16,\n    TlvUInt8,\n    TlvUInt32,\n    TlvInt8,\n    TlvInt16,\n    TlvInt32,\n    TlvUInt64,\n    TlvInt64,\n    TlvEnum,\n    TlvBitmap\n} from \"../../tlv/TlvNumber.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvGroupId } from \"../../datatype/GroupId.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvFabricIndex } from \"../../datatype/FabricIndex.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { TlvClusterId } from \"../../datatype/ClusterId.js\";\nimport { TlvAttributeId } from \"../../datatype/AttributeId.js\";\nimport { StatusCode } from \"../../protocol/interaction/StatusCode.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace ScenesManagement {\n    /**\n     * These are optional features supported by ScenesManagementCluster.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.4\n     */\n    export enum Feature {\n        /**\n         * SceneNames (SN)\n         *\n         * This feature indicates the ability to store a name for a scene when a scene is added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.4.1\n         */\n        SceneNames = \"SceneNames\"\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2\n     */\n    export const TlvSceneInfo = TlvObject({\n        /**\n         * This field shall indicate the number of scenes currently used in the server\u2019s Scene Table on the endpoint\n         * where the Scenes Management cluster appears.\n         *\n         * This only includes the count for the associated fabric.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2.1\n         */\n        sceneCount: TlvField(0, TlvUInt8),\n\n        /**\n         * This field shall indicate the scene identifier of the scene last invoked on the associated fabric. If no\n         * scene has been invoked, the value of this field shall be 0xFF, the undefined scene identifier.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2.2\n         */\n        currentScene: TlvField(1, TlvUInt8),\n\n        /**\n         * This field shall indicate the group identifier of the scene last invoked on the associated fabric, or 0 if\n         * the scene last invoked is not associated with a group.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2.3\n         */\n        currentGroup: TlvField(2, TlvGroupId),\n\n        /**\n         * This field shall indicate whether the state of the server corresponds to that associated with the\n         * CurrentScene and CurrentGroup fields of the SceneInfoStruct they belong to. TRUE indicates that these fields\n         * are valid, FALSE indicates that they are not valid.\n         *\n         * This field shall be set to False for all other fabrics when an attribute with the Scenes (\"S\") designation\n         * in the Quality column of another cluster present on the same endpoint is modified or when the current scene\n         * is modified by a fabric through the RecallScene or StoreScene commands, regardless of the fabric-scoped\n         * access quality of the command.\n         *\n         * In the event where the SceneValid field is set to False for a fabric, the CurrentScene and CurrentGroup\n         * fields shall be the last invoked scene and group for that fabric. In the event where no scene was previously\n         * invoked for that fabric, the CurrentScene and CurrentGroup fields shall be their default values.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2.4\n         */\n        sceneValid: TlvField(3, TlvBoolean),\n\n        /**\n         * This field shall indicate the remaining capacity of the Scene Table on this endpoint for the accessing\n         * fabric. Note that this value may change between reads, even if no entries are added or deleted on the\n         * accessing fabric, due to other clients associated with other fabrics adding or deleting entries that impact\n         * the resource usage on the device.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2.5\n         */\n        remainingCapacity: TlvField(4, TlvUInt8.bound({ max: 253 })),\n\n        fabricIndex: TlvField(254, TlvFabricIndex)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.2\n     */\n    export interface SceneInfo extends TypeFromSchema<typeof TlvSceneInfo> {}\n\n    /**\n     * This data type indicates a combination of an identifier and the value of an attribute.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.3\n     */\n    export const TlvAttributeValuePair = TlvObject({\n        /**\n         * This field shall be present for all instances in a given ExtensionFieldSetStruct.\n         *\n         * The data type of AttributeValue shall be the data type of the attribute indicated by AttributeID.\n         *\n         * The AttributeID field shall NOT refer to an attribute without the Scenes (\"S\") designation in the Quality\n         * column of the cluster specification.\n         *\n         *   1.4.7.3.2. ValueUnsigned8, ValueSigned8, ValueUnsigned16, ValueSigned16, ValueUnsigned32, ValueSigned32,\n         *              ValueUnsigned64, ValueSigned64 Fields\n         *\n         * These fields shall indicate the attribute value as part of an extension field set, associated with a given\n         * AttributeID under an ExtensionFieldSetStruct\u2019s ClusterID. The proper field shall be present that maps to the\n         * data type of the attribute indicated.\n         *\n         *   \u2022 Data types bool, map8, and uint8 shall map to ValueUnsigned8.\n         *\n         *   \u2022 Data types int8 shall map to ValueSigned8.\n         *\n         *   \u2022 Data types map16 and uint16 shall map to ValueUnsigned16.\n         *\n         *   \u2022 Data types int16 shall map to ValueSigned16.\n         *\n         *   \u2022 Data types map32, uint24, and uint32 shall map to ValueUnsigned32.\n         *\n         *   \u2022 Data types int24 and int32 shall map to ValueSigned32.\n         *\n         *   \u2022 Data types map64, uint48, uint56 and uint64 shall map to ValueUnsigned64.\n         *\n         *   \u2022 Data types int48, int56 and int64 shall map to ValueSigned64.\n         *\n         *   \u2022 For nullable attributes, any value that is not a valid numeric value for the attribute\u2019s type after\n         *     accounting for range reductions due to being nullable and constraints shall be considered to have the\n         *     null value for the type.\n         *\n         *   \u2022 For non-nullable attributes, any value that is not a valid numeric value for the attribute\u2019s type after\n         *     accounting for constraints shall be considered to have the maximum legal value in the attribute\u2019s\n         *     constrained range.\n         *\n         * Examples of processing are:\n         *\n         *   \u2022 ColorControl cluster CurrentX (AttributeID 0x0003) has a type of uint16 and is not nullable.\n         *\n         *     \u25E6 AttributeValue of 0xAB12 would be used as-is, as it is in range.\n         *\n         *     \u25E6 AttributeValue of 0xAA0011 is outside of the range of uint16, and would be saturated to the maximum of\n         *       the attribute\u2019s constraint range: 0xFEFF.\n         *\n         *   \u2022 LevelControl cluster CurrentLevel (AttributeID 0x0000) has a type of uint8 and is nullable.\n         *\n         *     \u25E6 AttributeValue of 0xA1 would be used as-is, as it is in range.\n         *\n         *     \u25E6 AttributeValue of 0xBB12 is outside the range of nullable uint8, and would be considered as the null\n         *       value.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.3.1\n         */\n        attributeId: TlvField(0, TlvAttributeId),\n\n        valueUnsigned8: TlvOptionalField(1, TlvUInt8),\n        valueSigned8: TlvOptionalField(2, TlvInt8),\n        valueUnsigned16: TlvOptionalField(3, TlvUInt16),\n        valueSigned16: TlvOptionalField(4, TlvInt16),\n        valueUnsigned32: TlvOptionalField(5, TlvUInt32),\n        valueSigned32: TlvOptionalField(6, TlvInt32),\n        valueUnsigned64: TlvOptionalField(7, TlvUInt64),\n        valueSigned64: TlvOptionalField(8, TlvInt64)\n    });\n\n    /**\n     * This data type indicates a combination of an identifier and the value of an attribute.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.3\n     */\n    export interface AttributeValuePair extends TypeFromSchema<typeof TlvAttributeValuePair> {}\n\n    /**\n     * This data type indicates for a given cluster a set of attributes and their values.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.4\n     */\n    export const TlvExtensionFieldSet = TlvObject({\n        /**\n         * This field shall indicate the cluster-id of the cluster whose attributes are in the AttributeValueList field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.4.1\n         */\n        clusterId: TlvField(0, TlvClusterId),\n\n        /**\n         * This field shall indicate a set of attributes and their values which are stored as part of a scene.\n         *\n         * Attributes which do not have the Scenes (\"S\") designation in the Quality column of their cluster\n         * specification shall NOT be used in the AttributeValueList field.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.4.2\n         */\n        attributeValueList: TlvField(1, TlvArray(TlvAttributeValuePair))\n    });\n\n    /**\n     * This data type indicates for a given cluster a set of attributes and their values.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.4\n     */\n    export interface ExtensionFieldSet extends TypeFromSchema<typeof TlvExtensionFieldSet> {}\n\n    /**\n     * Input to the ScenesManagement addScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2\n     */\n    export const TlvAddSceneRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field shall indicate the scene identifier in the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * This field shall indicate the transition time of the scene, measured in milliseconds.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2.3\n         */\n        transitionTime: TlvField(2, TlvUInt32.bound({ max: 60000000 })),\n\n        /**\n         * This field shall indicate the name of the scene.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2.4\n         */\n        sceneName: TlvField(3, TlvString.bound({ maxLength: 16 })),\n\n        /**\n         * This field shall contains the list of extension fields.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2.5\n         */\n        extensionFieldSetStructs: TlvField(4, TlvArray(TlvExtensionFieldSet))\n    });\n\n    /**\n     * Input to the ScenesManagement addScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2\n     */\n    export interface AddSceneRequest extends TypeFromSchema<typeof TlvAddSceneRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.3\n     */\n    export const TlvAddSceneResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for AddScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.3.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * The GroupID field shall be set to the corresponding field of the received AddScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.3.2\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * The SceneID field shall be set to the corresponding field of the received AddScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.3.3\n         */\n        sceneId: TlvField(2, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.3\n     */\n    export interface AddSceneResponse extends TypeFromSchema<typeof TlvAddSceneResponse> {}\n\n    /**\n     * Input to the ScenesManagement viewScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.4\n     */\n    export const TlvViewSceneRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.4.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field shall indicate the scene identifier in the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.4.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * Input to the ScenesManagement viewScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.4\n     */\n    export interface ViewSceneRequest extends TypeFromSchema<typeof TlvViewSceneRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5\n     */\n    export const TlvViewSceneResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for ViewScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * The GroupID field shall be set to the corresponding field of the received ViewScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.2\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * The SceneID field shall be set to the corresponding field of the received ViewScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.3\n         */\n        sceneId: TlvField(2, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * If the status is SUCCESS, this field shall be copied from the corresponding field in the Scene Table entry,\n         * otherwise it shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.4\n         */\n        transitionTime: TlvOptionalField(3, TlvUInt32.bound({ max: 60000000 })),\n\n        /**\n         * If the status is SUCCESS, this field shall be copied from the corresponding field in the Scene Table entry,\n         * otherwise it shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.5\n         */\n        sceneName: TlvOptionalField(4, TlvString.bound({ maxLength: 16 })),\n\n        /**\n         * If the status is SUCCESS, this field shall be copied from the corresponding field in the Scene Table entry,\n         * otherwise it shall be omitted.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5.6\n         */\n        extensionFieldSetStructs: TlvOptionalField(5, TlvArray(TlvExtensionFieldSet))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.5\n     */\n    export interface ViewSceneResponse extends TypeFromSchema<typeof TlvViewSceneResponse> {}\n\n    /**\n     * Input to the ScenesManagement removeScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.6\n     */\n    export const TlvRemoveSceneRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.6.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field shall indicate the scene identifier in the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.6.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * Input to the ScenesManagement removeScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.6\n     */\n    export interface RemoveSceneRequest extends TypeFromSchema<typeof TlvRemoveSceneRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.7\n     */\n    export const TlvRemoveSceneResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for RemoveScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.7.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * The GroupID field shall be set to the corresponding field of the received RemoveScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.7.2\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * The SceneID field shall be set to the corresponding field of the received RemoveScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.7.3\n         */\n        sceneId: TlvField(2, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.7\n     */\n    export interface RemoveSceneResponse extends TypeFromSchema<typeof TlvRemoveSceneResponse> {}\n\n    /**\n     * Input to the ScenesManagement removeAllScenes command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.8\n     */\n    export const TlvRemoveAllScenesRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.8.1\n         */\n        groupId: TlvField(0, TlvGroupId)\n    });\n\n    /**\n     * Input to the ScenesManagement removeAllScenes command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.8\n     */\n    export interface RemoveAllScenesRequest extends TypeFromSchema<typeof TlvRemoveAllScenesRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.9\n     */\n    export const TlvRemoveAllScenesResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for RemoveAllScenes command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.9.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * The GroupID field shall be set to the corresponding field of the received RemoveAllScenes command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.9.2\n         */\n        groupId: TlvField(1, TlvGroupId)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.9\n     */\n    export interface RemoveAllScenesResponse extends TypeFromSchema<typeof TlvRemoveAllScenesResponse> {}\n\n    /**\n     * Input to the ScenesManagement storeScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.10\n     */\n    export const TlvStoreSceneRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.10.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field shall indicate the scene identifier in the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.10.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * Input to the ScenesManagement storeScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.10\n     */\n    export interface StoreSceneRequest extends TypeFromSchema<typeof TlvStoreSceneRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.11\n     */\n    export const TlvStoreSceneResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for StoreScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.11.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * The GroupID field shall be set to the corresponding field of the received StoreScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.11.2\n         */\n        groupId: TlvField(1, TlvGroupId),\n\n        /**\n         * The SceneID field shall be set to the corresponding field of the received StoreScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.11.3\n         */\n        sceneId: TlvField(2, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.11\n     */\n    export interface StoreSceneResponse extends TypeFromSchema<typeof TlvStoreSceneResponse> {}\n\n    /**\n     * Input to the ScenesManagement recallScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12\n     */\n    export const TlvRecallSceneRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12.1\n         */\n        groupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field shall indicate the scene identifier in the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * This field shall indicate the transition time of the scene, measured in milliseconds.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12.3\n         */\n        transitionTime: TlvOptionalField(2, TlvNullable(TlvUInt32.bound({ max: 60000000 })))\n    });\n\n    /**\n     * Input to the ScenesManagement recallScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12\n     */\n    export interface RecallSceneRequest extends TypeFromSchema<typeof TlvRecallSceneRequest> {}\n\n    /**\n     * Input to the ScenesManagement getSceneMembership command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.13\n     */\n    export const TlvGetSceneMembershipRequest = TlvObject({\n        /**\n         * This field shall indicate the group identifier in the Group Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.13.1\n         */\n        groupId: TlvField(0, TlvGroupId)\n    });\n\n    /**\n     * Input to the ScenesManagement getSceneMembership command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.13\n     */\n    export interface GetSceneMembershipRequest extends TypeFromSchema<typeof TlvGetSceneMembershipRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14\n     */\n    export const TlvGetSceneMembershipResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for GetSceneMembership command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * This field shall contain the remaining capacity of the Scene Table of the server (for all groups for the\n         * accessing fabric). The following values apply:\n         *\n         *   \u2022 0 - No further scenes may be added.\n         *\n         *   \u2022 0 < Capacity < 0xFE - Capacity holds the number of scenes that may be added.\n         *\n         *   \u2022 0xFE - At least 1 further scene may be added (exact number is unknown).\n         *\n         *   \u2022 null - It is unknown if any further scenes may be added.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14.2\n         */\n        capacity: TlvField(1, TlvNullable(TlvUInt8)),\n\n        /**\n         * This field shall be set to the corresponding field of the received GetSceneMembership command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14.3\n         */\n        groupId: TlvField(2, TlvGroupId),\n\n        /**\n         * If the status is not SUCCESS then this field shall be omitted, else this field shall contain the identifiers\n         * of all the scenes in the Scene Table with the corresponding Group ID.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14.4\n         */\n        sceneList: TlvOptionalField(3, TlvArray(TlvUInt8))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.14\n     */\n    export interface GetSceneMembershipResponse extends TypeFromSchema<typeof TlvGetSceneMembershipResponse> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.1\n     */\n    export const CopyMode = {\n        /**\n         * Copy all scenes in the scene table\n         */\n        copyAllScenes: BitFlag(0)\n    };\n\n    /**\n     * Input to the ScenesManagement copyScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15\n     */\n    export const TlvCopySceneRequest = TlvObject({\n        /**\n         * This field shall contain the information of how the scene copy is to proceed.\n         *\n         * The CopyAllScenes bit of the Mode indicates whether all scenes are to be copied. If this value is set to 1,\n         * all scenes are to be copied and the SceneIdentifierFrom and SceneIdentifierTo fields shall be ignored.\n         * Otherwise this bit is set to 0.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15.1\n         */\n        mode: TlvField(0, TlvBitmap(TlvUInt8, CopyMode)),\n\n        /**\n         * This field shall indicate the identifier of the group from which the scene is to be copied. Together with\n         * the SceneIdentifierFrom field, this field uniquely identifies the scene to copy from the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15.2\n         */\n        groupIdentifierFrom: TlvField(1, TlvGroupId),\n\n        /**\n         * This field shall indicate the identifier of the scene from which the scene is to be copied. Together with\n         * the GroupIdentifierFrom field, this field uniquely identifies the scene to copy from the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15.3\n         */\n        sceneIdentifierFrom: TlvField(2, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * This field shall indicate the identifier of the group to which the scene is to be copied. Together with the\n         * SceneIdentifierTo field, this field uniquely identifies the scene to copy to the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15.4\n         */\n        groupIdentifierTo: TlvField(3, TlvGroupId),\n\n        /**\n         * This field shall indicate the identifier of the scene to which the scene is to be copied. Together with the\n         * GroupIdentifierTo field, this field uniquely identifies the scene to copy to the Scene Table.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15.5\n         */\n        sceneIdentifierTo: TlvField(4, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * Input to the ScenesManagement copyScene command\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15\n     */\n    export interface CopySceneRequest extends TypeFromSchema<typeof TlvCopySceneRequest> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.16\n     */\n    export const TlvCopySceneResponse = TlvObject({\n        /**\n         * This field shall be set according to the Effect on Receipt section for the CopyScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.16.1\n         */\n        status: TlvField(0, TlvEnum<StatusCode>()),\n\n        /**\n         * This field shall be set to the same values as in the corresponding fields of the received CopyScene command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.16.2\n         */\n        groupIdentifierFrom: TlvField(1, TlvGroupId),\n\n        /**\n         * This field shall be set to the same values as in the corresponding fields of the received CopyScene\n         *\n         * command.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.16.3\n         */\n        sceneIdentifierFrom: TlvField(2, TlvUInt8.bound({ max: 254 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.16\n     */\n    export interface CopySceneResponse extends TypeFromSchema<typeof TlvCopySceneResponse> {}\n\n    /**\n     * The Scene Table is used to store information for each scene capable of being invoked on the server. Each scene\n     * is defined for a particular group. The Scene Table is defined here as a conceptual illustration to assist in\n     * understanding the underlying data to be stored when scenes are defined. Though the Scene Table is defined here\n     * using the data model architecture rules and format, the design is not normative.\n     *\n     * The Scene table is logically a list of fabric-scoped structs. The logical fields of each Scene Table entry\n     * struct are illustrated below. An ExtensionFieldSetStruct may be present for each Scenes-supporting cluster\n     * implemented on the same endpoint.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5\n     */\n    export const TlvLogicalSceneTable = TlvObject({\n        /**\n         * This field is the group identifier for which this scene applies, or 0 if the scene is not associated with a\n         * group.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5.1\n         */\n        sceneGroupId: TlvField(0, TlvGroupId),\n\n        /**\n         * This field is unique within this group, which is used to identify this scene.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5.2\n         */\n        sceneId: TlvField(1, TlvUInt8.bound({ max: 254 })),\n\n        /**\n         * The field is the name of the scene.\n         *\n         * If scene names are not supported, any commands that write a scene name shall simply discard the name, and\n         * any command that returns a scene name shall return an empty string.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5.3\n         */\n        sceneName: TlvOptionalField(2, TlvString.bound({ maxLength: 16 })),\n\n        /**\n         * This field is the amount of time, in milliseconds, it will take for a cluster to change from its current\n         * state to the requested state.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5.4\n         */\n        sceneTransitionTime: TlvField(3, TlvUInt32.bound({ max: 60000000 })),\n\n        /**\n         * See the Scene Table Extensions subsections of individual clusters. A Scene Table Extension shall only use\n         * attributes with the Scene quality. Each ExtensionFieldSetStruct holds a set of values of these attributes\n         * for a cluster implemented on the same endpoint where the Scene (\"S\") designation appears in the quality\n         * column. A scene is the aggregate of all such fields across all clusters on the endpoint.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5.5\n         */\n        extensionFields: TlvField(4, TlvArray(TlvExtensionFieldSet))\n    });\n\n    /**\n     * The Scene Table is used to store information for each scene capable of being invoked on the server. Each scene\n     * is defined for a particular group. The Scene Table is defined here as a conceptual illustration to assist in\n     * understanding the underlying data to be stored when scenes are defined. Though the Scene Table is defined here\n     * using the data model architecture rules and format, the design is not normative.\n     *\n     * The Scene table is logically a list of fabric-scoped structs. The logical fields of each Scene Table entry\n     * struct are illustrated below. An ExtensionFieldSetStruct may be present for each Scenes-supporting cluster\n     * implemented on the same endpoint.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.7.5\n     */\n    export interface LogicalSceneTable extends TypeFromSchema<typeof TlvLogicalSceneTable> {}\n\n    /**\n     * These elements and properties are present in all ScenesManagement clusters.\n     */\n    export const Base = MutableCluster.Component({\n        id: 0x62,\n        name: \"ScenesManagement\",\n        revision: 1,\n\n        features: {\n            /**\n             * SceneNames\n             *\n             * This feature indicates the ability to store a name for a scene when a scene is added.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.4.1\n             */\n            sceneNames: BitFlag(0)\n        },\n\n        attributes: {\n            /**\n             * Indicates the Node ID of the node that last configured the Scene Table.\n             *\n             * The null value indicates that the server has not been configured, or that the identifier of the node\n             * that last configured the Scenes Management cluster is not known.\n             *\n             * The Node ID is scoped to the accessing fabric.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.8.1\n             */\n            lastConfiguredBy: OptionalAttribute(0x0, TlvNullable(TlvNodeId), { default: null }),\n\n            /**\n             * Indicates the number of entries in the Scene Table on this endpoint. This is the total across all\n             * fabrics; note that a single fabric cannot use all those entries (see Handling of fabric- scoping). The\n             * minimum size of this table, (i.e., the minimum number of scenes to support across all fabrics per\n             * endpoint) shall be 16, unless a device type in which this cluster is used, defines a larger value in the\n             * device type definition.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.8.2\n             */\n            sceneTableSize: FixedAttribute(0x1, TlvUInt16, { default: 16 }),\n\n            /**\n             * Indicates a list of fabric scoped information about scenes on this endpoint.\n             *\n             * The number of list entries for this attribute shall NOT exceed the number of supported fabrics by the\n             * device.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.8.3\n             */\n            fabricSceneInfo: FabricScopedAttribute(0x2, TlvArray(TlvSceneInfo), { default: [] })\n        },\n\n        commands: {\n            /**\n             * It is not mandatory for an extension field set to be included in the command for every cluster on that\n             * endpoint that has a defined extension field set. Extension field sets may be omitted, including the case\n             * of no extension field sets at all.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.2\n             */\n            addScene: Command(0x0, TlvAddSceneRequest, 0x0, TlvAddSceneResponse, { invokeAcl: AccessLevel.Manage }),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.4\n             */\n            viewScene: Command(0x1, TlvViewSceneRequest, 0x1, TlvViewSceneResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.6\n             */\n            removeScene: Command(\n                0x2,\n                TlvRemoveSceneRequest,\n                0x2,\n                TlvRemoveSceneResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.8\n             */\n            removeAllScenes: Command(\n                0x3,\n                TlvRemoveAllScenesRequest,\n                0x3,\n                TlvRemoveAllScenesResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.10\n             */\n            storeScene: Command(\n                0x4,\n                TlvStoreSceneRequest,\n                0x4,\n                TlvStoreSceneResponse,\n                { invokeAcl: AccessLevel.Manage }\n            ),\n\n            /**\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.12\n             */\n            recallScene: Command(0x5, TlvRecallSceneRequest, 0x5, TlvNoResponse),\n\n            /**\n             * This command can be used to get the used scene identifiers within a certain group, for the endpoint that\n             * implements this cluster.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.13\n             */\n            getSceneMembership: Command(0x6, TlvGetSceneMembershipRequest, 0x6, TlvGetSceneMembershipResponse),\n\n            /**\n             * This command allows a client to efficiently copy scenes from one group/scene identifier pair to another\n             * group/scene identifier pair.\n             *\n             * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4.9.15\n             */\n            copyScene: OptionalCommand(\n                0x40,\n                TlvCopySceneRequest,\n                0x40,\n                TlvCopySceneResponse,\n                { invokeAcl: AccessLevel.Manage }\n            )\n        },\n\n        /**\n         * This metadata controls which ScenesManagementCluster elements matter.js activates for specific feature\n         * combinations.\n         */\n        extensions: MutableCluster.Extensions()\n    });\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster(Base);\n\n    /**\n     * The Scenes Management cluster provides attributes and commands for setting up and recalling scenes. Each scene\n     * corresponds to a set of stored values of specified attributes for one or more clusters on the same end point as\n     * the Scenes Management cluster.\n     *\n     * In most cases scenes are associated with a particular group identifier. Scenes may also exist without a group,\n     * in which case the value 0 replaces the group identifier. Note that extra care is required in these cases to\n     * avoid a scene identifier collision, and that commands related to scenes without a group may only be unicast,\n     * i.e., they may not be multicast or broadcast.\n     *\n     * NOTE Support for Scenes Management cluster is provisional.\n     *\n     * ScenesManagementCluster supports optional features that you can enable with the ScenesManagementCluster.with()\n     * factory method.\n     *\n     * @see {@link MatterSpecification.v13.Cluster} \u00A7 1.4\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type ScenesManagementCluster = ScenesManagement.Cluster;\nexport const ScenesManagementCluster = ScenesManagement.Cluster;\nClusterRegistry.register(ScenesManagement.Complete);\n"],
  "mappings": "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",
  "names": ["ScenesManagement", "Feature"]
}
