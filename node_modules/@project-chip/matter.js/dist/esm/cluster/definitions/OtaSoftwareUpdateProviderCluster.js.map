{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/OtaSoftwareUpdateProviderCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Command, TlvNoResponse } from \"../Cluster.js\";\nimport { TlvField, TlvOptionalField, TlvObject } from \"../../tlv/TlvObject.js\";\nimport { TlvVendorId } from \"../../datatype/VendorId.js\";\nimport { TlvUInt16, TlvUInt32, TlvEnum } from \"../../tlv/TlvNumber.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvString, TlvByteString } from \"../../tlv/TlvString.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace OtaSoftwareUpdateProvider {\n    /**\n     * Note that only HTTP over TLS (HTTPS) is supported (see RFC 7230). Using HTTP without TLS shall\n     *\n     * NOT be supported, as there is no way to authenticate the involved participants.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.4.3\n     */\n    export enum DownloadProtocol {\n        /**\n         * Indicates support for synchronous BDX.\n         */\n        BdxSynchronous = 0,\n\n        /**\n         * Indicates support for asynchronous BDX.\n         */\n        BdxAsynchronous = 1,\n\n        /**\n         * Indicates support for HTTPS.\n         */\n        Https = 2,\n\n        /**\n         * Indicates support for vendor specific protocol.\n         */\n        VendorSpecific = 3\n    }\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider queryImage command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1\n     */\n    export const TlvQueryImageRequest = TlvObject({\n        /**\n         * The value shall be the Vendor ID applying to the OTA Requestor\u2019s Node and shall match the value reported by\n         * the Basic Information Cluster VendorID attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.1\n         */\n        vendorId: TlvField(0, TlvVendorId),\n\n        /**\n         * The value shall be the Product ID applying to the OTA Requestor\u2019s Node and shall match the value reported by\n         * the Basic Information Cluster ProductID attribute.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.2\n         */\n        productId: TlvField(1, TlvUInt16),\n\n        /**\n         * The SoftwareVersion included in the request payload shall provide the value representing the current version\n         * running on the OTA Requestor invoking the command. This version shall be equal to the Software Version\n         * attribute of the Basic Information Cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.3\n         */\n        softwareVersion: TlvField(2, TlvUInt32),\n\n        /**\n         * This field shall contain a list of all download protocols supported by the OTA Requestor.\n         *\n         * This field shall be used by the OTA Provider to generate the correct URI for the location of the Software\n         * Image when one is found to be available. The values of BDX Synchronous and BDX Asynchronous shall always be\n         * supported by an OTA Provider. Furthermore, OTA Providers with access to external networking SHOULD support\n         * the HTTPS protocol. OTA Providers may support other protocols.\n         *\n         * The algorithm to select the specific protocol to use in a given Software Image URI is\n         * implementation-dependent, provided that the rules in Section 11.20.3.3.1, \u201CDownload Protocol selection\u201D are\n         * followed.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D and Section 11.20.3.5, \u201CTransfer of OTA Software Update\n         * images\u201D for more details about usage of this field.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.4\n         */\n        protocolsSupported: TlvField(3, TlvArray(TlvEnum<DownloadProtocol>(), { maxLength: 8 })),\n\n        /**\n         * The value of this field, if present, shall contain the OTA Requestor\u2019s hardware version, and shall be equal\n         * to the HardwareVersion attribute of the Basic Information Cluster.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.5\n         */\n        hardwareVersion: TlvOptionalField(4, TlvUInt16),\n\n        /**\n         * The location, if present, shall provide the same value as the Basic Information Cluster Location attribute\n         * for the OTA Requestor as configured. This may be used by the OTA Provider logic to allow per-region\n         * selection of the Software Image.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.6\n         */\n        location: TlvOptionalField(5, TlvString.bound({ length: 2 })),\n\n        /**\n         * This field shall be set to true by an OTA Requestor that is capable of obtaining user consent for OTA\n         * application by virtue of built-in user interface capabilities. Otherwise, it shall be false.\n         *\n         * See Section 11.20.3.4, \u201CObtaining user consent for updating software\u201D for application details about usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.7\n         */\n        requestorCanConsent: TlvOptionalField(6, TlvBoolean),\n\n        /**\n         * This optional field, if present, shall consist of a top-level anonymous list; each list element shall have a\n         * profile-specific tag encoded in fully-qualified form. Each list element shall contain a\n         * manufacturer-specific payload, which the OTA Requestor invoking this command wants to expose to the\n         * receiving OTA Provider. This payload may be used for any purpose and SHOULD be as small as practical.\n         *\n         * The use of this field SHOULD be restricted to Vendor-specific usage and shall NOT be used as a selector\n         * required to match for the selection of a Software Image in production environments, unless absolutely\n         * necessary, as the interpretation of this field may be ambiguous to OTA Providers implementing the Cluster in\n         * a compliant but divergent way from the sender.\n         *\n         * An example of usage for this field is for an OTA Requestor to provide specific data about grouping or\n         * authentication in field trial environments, where the OTA Provider is likely to understand it and be able to\n         * act upon it, either for special selection of image, or recording of activity.\n         *\n         * An OTA Provider shall report the availability of Software Images, if one is found to be applicable using the\n         * other provided fields, even if the MetadataForProvider field is deemed to contain invalid or unknown\n         * information. That is, the contents of the MetadataForProvider field shall NOT be used to deny a software\n         * update to an OTA Requestor, unless both OTA Requestor and OTA Provider have an externally agreed-upon policy\n         * whereby strictly correct additional MetadataForProvider is expected to fulfill the OTA Software Update\n         * process.\n         *\n         * Usage of the QueryImage Command\n         *\n         * OTA Requestors shall send a QueryImage command to the OTA Provider to determine the availability of a new\n         * Software Image.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for full details about the OTA Software Update Query flow\n         * which makes use of this command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1.8\n         */\n        metadataForProvider: TlvOptionalField(7, TlvByteString.bound({ maxLength: 512 }))\n    });\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider queryImage command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1\n     */\n    export interface QueryImageRequest extends TypeFromSchema<typeof TlvQueryImageRequest> {}\n\n    /**\n     * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for the semantics of these values.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.4.1\n     */\n    export enum Status {\n        /**\n         * Indicates that the OTA Provider has an update available.\n         */\n        UpdateAvailable = 0,\n\n        /**\n         * Indicates OTA Provider may have an update, but it is not ready yet.\n         */\n        Busy = 1,\n\n        /**\n         * Indicates that there is definitely no update currently available from the OTA Provider.\n         */\n        NotAvailable = 2,\n\n        /**\n         * Indicates that the requested download protocol is not supported by the OTA Provider.\n         */\n        DownloadProtocolNotSupported = 3\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2\n     */\n    export const TlvQueryImageResponse = TlvObject({\n        /**\n         * This field shall contain the primary response regarding the availability of a Software Image.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for details about the possible values for this field and\n         * their meaning.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.1\n         */\n        status: TlvField(0, TlvEnum<Status>()),\n\n        /**\n         * This field shall convey the minimum time to wait, in seconds from the time of this response, before sending\n         * another QueryImage command or beginning a download from the OTA Provider. OTA Requestors shall respect this\n         * minimum delay, unless they had previously restarted and lost track of it. OTA Providers SHOULD expect OTA\n         * Requestors to follow this value to their best capability, however, a restarting Node may come back sooner,\n         * due to having lost track of this state response.\n         *\n         * The DelayedActionTime field shall only be present if the Status field is set to Busy.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for details about the rules regarding this field.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.2\n         */\n        delayedActionTime: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field, when present, shall contain a URI where the OTA Requestor SHOULD download a Software Image. The\n         * syntax of the ImageURI field shall follow the URI syntax as specified in RFC 3986.\n         *\n         * This field shall be present if it appears in a QueryImageResponse with a Status of UpdateAvailable.\n         *\n         * If the ImageURI specifies a BDX Protocol bdx: scheme, then the following rules describe the location to be\n         * used for download:\n         *\n         *   1. The URI\u2019s scheme field shall be exactly bdx in lowercase characters.\n         *\n         *   2. The URI\u2019s authority field shall contain only the host portion and shall use string representation of\n         *      the Operational Node ID of the Node where to proceed with the download, on the same Fabric on which the\n         *      OTA Requestor received the QueryImageResponse.\n         *\n         *   3. The encoding of the Node ID in the host field shall use an uppercase hexadecimal format, using exactly\n         *      16 characters to encode the network byte order value of the NodeID, in a similar fashion as the Node\n         *      Identifier portion of the Operational Instance Name.\n         *\n         *     a. The Operational Node ID in the host field shall match the NodeID of the OTA Provider responding with\n         *        the QueryImageResponse. The usage of a different Node ID than that of the provider is reserved for\n         *        future use. This constraint reduces the number of independent\n         *\n         * CASE secure channel sessions that have to be maintained to proceed with OTA software updates, thus reducing\n         * energy and resource utilization for the software update process.\n         *\n         * 4. The user section of the authority field shall be absent, as there are no \"users\" to be considered.\n         *\n         * 5. The port section of the authority field shall be absent, as the port for transport shall be determined\n         * through Operational Discovery of the target Node.\n         *\n         * 6. The URI shall not contain a query field.\n         *\n         * 7. The URI shall not contain a fragment field.\n         *\n         * 8. The path field shall employ absolute path representation and shall contain the file designator of the\n         * software image to download at the BDX server. When used with the BDX server, the leading / separating the\n         * URI authority from the path shall be omitted. When contacting the BDX server, further processing of the file\n         * designator shall NOT be done, including handling of URL-encoded escape sequences. Rather, the exact octets\n         * of the path, as received shall be the values used by both client and server in handling the file designator.\n         *\n         *   a. The path shall only contain valid URI characters.\n         *\n         * These rules above for BDX URIs simplify parsing for OTA Requestors receiving Image URIs. The following\n         * example procedure shows how the format constraints simplify the extraction of the necessary data to reach\n         * the BDX server for download.\n         *\n         *   1. Verify that the URI is 24 characters or longer, which is the minimum length of a valid BDX URI with all\n         *      elements present, for example bdx://00112233AABBCCDD/0.\n         *\n         *   2. Verify the presence of prefix bdx:// indicating a BDX URI.\n         *\n         *   3. Extract the next 16 characters and convert from uppercase hexadecimal to a 64-bit scalar value,\n         *      considering network byte order. This is the destination Node ID.\n         *\n         *   4. Verify the presence of a path separator / and skip it.\n         *\n         *   5. Extract the remaining characters of the string as the file designator to employ when initiating the BDX\n         *      transfer.\n         *\n         * Example ImageURI values are below, and illustrate some but not all of valid and invalid cases:\n         *\n         *   \u2022 Synchronous or Asynchronous BDX Protocol:\n         *\n         *     \u25E6 Valid: bdx://8899AABBCCDDEEFF/the_file_designator123\n         *\n         *       \u25AA Node ID: 0x8899AABBCCDDEEFF\n         *\n         *       \u25AA File designator: the_file_designator123\n         *\n         *     \u25E6 Valid: bdx://0099AABBCCDDEE77/the%20file%20designator/some_more\n         *\n         *       \u25AA Node ID: 0x0099AABBCCDDEE77\n         *\n         *       \u25AA File designator: the%20file%20designator/some_more. Note that the %20 are retained and not converted\n         *         to ASCII 0x20 (space). The file designator is the path as received verbatim, after the first '/'\n         *         (U+002F / SOLIDUS) following the host.\n         *\n         *     \u25E6 Invalid: bdx://99AABBCCDDEE77/the_file_designator123\n         *\n         *       \u25AA Node ID: Invalid since it is not exactly 16 characters long, due to having omitted leading zeros.\n         *\n         *     \u25E6 Invalid: bdx://0099aabbccddee77/the_file_designator123\n         *\n         *       \u25AA Node ID: Invalid since lowercase hexadecimal was used.\n         *\n         *     \u25E6 Invalid: bdx:8899AABBCCDDEEFF/the_file_designator123\n         *\n         *       \u25AA Invalid since bdx scheme does not contain an authority, that is, it does not have // after the first\n         *         :.\n         *\n         *   \u2022 HTTP over TLS:\n         *\n         *     \u25E6 Valid: https://example.domain:8466/software/image.bin\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for additional details about the flow.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.3\n         */\n        imageUri: TlvOptionalField(2, TlvString.bound({ maxLength: 256 })),\n\n        /**\n         * This field indicates the version of the image being provided to the OTA Requestor by the OTA Provider when\n         * the Status is UpdateAvailable.\n         *\n         * This field shall be present if it appears in a QueryImageResponse with a Status of UpdateAvailable.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for additional details about the flow and acceptable\n         * values.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.4\n         */\n        softwareVersion: TlvOptionalField(3, TlvUInt32),\n\n        /**\n         * This field provides a string version of the image being provided to the OTA Requestor by the OTA Provider\n         * when the Status is UpdateAvailable.\n         *\n         * This field shall be present if it appears in a QueryImageResponse with a Status of UpdateAvailable.\n         *\n         * See Section 11.20.3.2, \u201CQuerying the OTA Provider\u201D for additional details about the flow and acceptable\n         * values.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.5\n         */\n        softwareVersionString: TlvOptionalField(4, TlvString.bound({ minLength: 1, maxLength: 64 })),\n\n        /**\n         * This optional field shall be present when the Status field contains UpdateAvailable.\n         *\n         * See Section 11.20.3.6.1, \u201CUpdateToken usage\u201D for additional details about the generation and usage of\n         * UpdateToken.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.6\n         */\n        updateToken: TlvOptionalField(5, TlvByteString.bound({ minLength: 8, maxLength: 32 })),\n\n        /**\n         * This field, if present, shall only be interpreted if the OTA Requestor had previously indicated a value of\n         * True in the RequestorCanConsent field of the QueryImageRequest. This field, when present and set to True,\n         * shall indicate that a capable OTA Requestor must obtain user-visible consent prior to downloading the OTA\n         * Software Image.\n         *\n         * See Section 11.20.3.4, \u201CObtaining user consent for updating software\u201D for application details about usage.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.7\n         */\n        userConsentNeeded: TlvOptionalField(6, TlvBoolean),\n\n        /**\n         * This optional field, if present, shall consist of a top-level anonymous list; each list element shall have a\n         * profile-specific tag encoded in fully-qualified form. Each list element shall contain a\n         * manufacturer-specific payload, which the OTA Provider wants to expose to the receiving OTA Requestor. This\n         * payload may be used for any purpose and SHOULD be as small as practical.\n         *\n         * The presence of this field shall NOT be required for correct operation of any OTA Provider compliant with\n         * this Cluster specification.\n         *\n         * The data for this field does not exist in any Distributed Compliance Ledger record and SHOULD only be\n         * emitted by an OTA Provider with this additional knowledge if it has knowledge that the receiving OTA\n         * Requestor may be able to use it.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2.8\n         */\n        metadataForRequestor: TlvOptionalField(7, TlvByteString.bound({ maxLength: 512 }))\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.2\n     */\n    export interface QueryImageResponse extends TypeFromSchema<typeof TlvQueryImageResponse> {}\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider applyUpdateRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.3\n     */\n    export const TlvApplyUpdateRequest = TlvObject({\n        /**\n         * This field shall contain the UpdateToken as specified in Section 11.20.3.6.1, \u201CUpdateToken usage\u201D. This\n         * field may be used by the OTA Provider to track minimal lifecycle state to allow finer-grained scheduling of\n         * the application of Software Images by OTA Requestors.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.3.1\n         */\n        updateToken: TlvField(0, TlvByteString.bound({ minLength: 8, maxLength: 32 })),\n\n        /**\n         * The NewVersion field included in the request payload shall provide the SoftwareVersion value of the new\n         * Software Image which the OTA Requestor is ready to start applying. The OTA Provider may use this new version\n         * to track or record Software Image application by OTA Requestors.\n         *\n         * When Generated\n         *\n         * The ApplyUpdateRequest Command shall be invoked by an OTA Requestor once it is ready to apply a previously\n         * downloaded Software Image.\n         *\n         * Effect on Receipt\n         *\n         * Upon receipt of this command the OTA Provider shall respond with an Action field consistent with the next\n         * action the OTA Requestor should take, including any possible time delay.\n         *\n         * The OTA Provider shall NOT refer to previously stored state about any download progress to reply. If any\n         * state keeping is done by the OTA Provider, it shall only relate to the UpdateToken and the history of prior\n         * ApplyUpdateRequest commands.\n         *\n         * See Section 11.20.3.6, \u201CApplying a software update\u201D for a description of the flow in response to an OTA\n         * Provider receiving an invocation of this command.\n         *\n         * Handling Error Cases\n         *\n         * See Section 11.20.3.6, \u201CApplying a software update\u201D for all error-handling information.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.3.2\n         */\n        newVersion: TlvField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider applyUpdateRequest command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.3\n     */\n    export interface ApplyUpdateRequest extends TypeFromSchema<typeof TlvApplyUpdateRequest> {}\n\n    /**\n     * See Section 11.20.3.6, \u201CApplying a software update\u201D for the semantics of the values. This enumeration is used in\n     * the Action field of the ApplyUpdateResponse command. See (Section 11.20.6.5.4.1, \u201CAction Field\u201D).\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.4.2\n     */\n    export enum ApplyUpdateAction {\n        /**\n         * Apply the update.\n         */\n        Proceed = 0,\n\n        /**\n         * Wait at least the given delay time.\n         */\n        AwaitNextAction = 1,\n\n        /**\n         * The OTA Provider is conveying a desire to rescind a previously provided Software Image.\n         */\n        Discontinue = 2\n    }\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.4\n     */\n    export const TlvApplyUpdateResponse = TlvObject({\n        /**\n         * The Action field shall express the action that the OTA Provider requests from the OTA Requestor. See Section\n         * 11.20.3.6, \u201CApplying a software update\u201D for a description of the Action values provided in response to an\n         * OTA Provider receiving an invocation of this command.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.4.1\n         */\n        action: TlvField(0, TlvEnum<ApplyUpdateAction>()),\n\n        /**\n         * The minimum time period the OTA Requestor shall wait before executing the Action, in seconds from receipt.\n         *\n         * If this field has a value higher than 86400 seconds (24 hours), then the OTA Requestor may assume a value of\n         * 86400, in order to reduce undue Software Image application delays.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.4.2\n         */\n        delayedActionTime: TlvField(1, TlvUInt32)\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.4\n     */\n    export interface ApplyUpdateResponse extends TypeFromSchema<typeof TlvApplyUpdateResponse> {}\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider notifyUpdateApplied command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.5\n     */\n    export const TlvNotifyUpdateAppliedRequest = TlvObject({\n        /**\n         * This field shall contain the UpdateToken as specified in Section 11.20.3.6.1, \u201CUpdateToken usage\u201D.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.5.1\n         */\n        updateToken: TlvField(0, TlvByteString.bound({ minLength: 8, maxLength: 32 })),\n\n        /**\n         * The SoftwareVersion included in the request payload shall provide the same value as the SoftwareVersion\n         * attribute in the invoking OTA Requestor\u2019s Basic Information Cluster, and SHOULD be consistent with the value\n         * representing a new version running on the Node invoking the command.\n         *\n         * When Generated\n         *\n         * The NotifyUpdateApplied command SHOULD be invoked in the following two circumstances:\n         *\n         *   1. An OTA Requestor has just successfully applied a Software Image it had obtained from a previous\n         *      QueryImage response.\n         *\n         *   2. An OTA Requestor has just successfully applied a Software Image it had obtained through means different\n         *      than those of this Cluster.\n         *\n         * An OTA Provider may use the state of invocation of this command to help track the progress of update for OTA\n         * Requestors it knows require a new OTA Software Image. However, due to the possibility that an OTA Requestor\n         * may never come back (e.g. device removed from Fabric altogether, or a critical malfunction), an OTA Provider\n         * shall NOT expect every OTA Requestor to invoke this command for correct operation of the OTA Provider.\n         *\n         * This command shall be considered optional and shall not result in reduced availability of the OTA Provider\n         * functionality if OTA Requestors never invoke this command.\n         *\n         * Effect on Receipt\n         *\n         * An OTA Provider receiving an invocation of this command may log it internally.\n         *\n         * On receiving this command, an OTA Provider may use the information to update its bookkeeping of cached\n         * Software Images, or use it for other similar administrative purposes.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.5.2\n         */\n        softwareVersion: TlvField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the OtaSoftwareUpdateProvider notifyUpdateApplied command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.5\n     */\n    export interface NotifyUpdateAppliedRequest extends TypeFromSchema<typeof TlvNotifyUpdateAppliedRequest> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x29,\n        name: \"OtaSoftwareUpdateProvider\",\n        revision: 1,\n\n        commands: {\n            /**\n             * Upon receipt, this command shall trigger an attempt to find an updated Software Image by the OTA\n             * Provider to match the OTA Requestor\u2019s constraints provided in the payload fields.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.1\n             */\n            queryImage: Command(0x0, TlvQueryImageRequest, 0x1, TlvQueryImageResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.3\n             */\n            applyUpdateRequest: Command(0x2, TlvApplyUpdateRequest, 0x3, TlvApplyUpdateResponse),\n\n            /**\n             * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6.5.5\n             */\n            notifyUpdateApplied: Command(0x4, TlvNotifyUpdateAppliedRequest, 0x4, TlvNoResponse)\n        }\n    });\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 11.20.6\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type OtaSoftwareUpdateProviderCluster = OtaSoftwareUpdateProvider.Cluster;\nexport const OtaSoftwareUpdateProviderCluster = OtaSoftwareUpdateProvider.Cluster;\nClusterRegistry.register(OtaSoftwareUpdateProvider.Complete);\n"],
  "mappings": "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",
  "names": ["OtaSoftwareUpdateProvider", "DownloadProtocol", "Status", "ApplyUpdateAction"]
}
