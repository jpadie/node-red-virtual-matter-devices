{
  "version": 3,
  "sources": ["../../../../src/cluster/definitions/ActionsCluster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MutableCluster } from \"../mutation/MutableCluster.js\";\nimport { Attribute, OptionalAttribute, OptionalCommand, TlvNoResponse, Event, EventPriority } from \"../Cluster.js\";\nimport { TlvArray } from \"../../tlv/TlvArray.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvUInt16, TlvEnum, TlvBitmap, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvString } from \"../../tlv/TlvString.js\";\nimport { BitFlag } from \"../../schema/BitmapSchema.js\";\nimport { TypeFromSchema } from \"../../tlv/TlvSchema.js\";\nimport { TlvEndpointNumber } from \"../../datatype/EndpointNumber.js\";\nimport { Identity } from \"../../util/Type.js\";\nimport { ClusterRegistry } from \"../ClusterRegistry.js\";\n\nexport namespace Actions {\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2\n     */\n    export enum ActionType {\n        /**\n         * Use this only when none of the other values applies\n         */\n        Other = 0,\n\n        /**\n         * Bring the endpoints into a certain state\n         *\n         * Can be used to set a static state of the associated endpoints (typically using InstantAction or\n         * InstantActionWithTransition), or to bring these endpoints into a more dynamic state (typically using\n         * StartAction), where the endpoints would e.g. gradually cycle through certain colors for a pleasing effect. A\n         * voice controller could use \"set\" (to map to InstantAction) or \"play\" (to map to StartAction) to trigger such\n         * actions.\n         *\n         * Example: see examples 1 and 2.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.1\n         */\n        Scene = 1,\n\n        /**\n         * A sequence of states with a certain time pattern\n         *\n         * Indicates an action which involves a sequence of events/states of the associated endpoints, such as a\n         * wake-up experience.\n         *\n         * Example: see example 4.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.2\n         */\n        Sequence = 2,\n\n        /**\n         * Control an automation (e.g. motion sensor controlling lights)\n         *\n         * Indications an automation (e.g. a motion sensor controlling lights, an alarm system) which can bee.g.\n         * started, stopped, paused, resumed. Example: see example 3.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.3\n         */\n        Automation = 3,\n\n        /**\n         * Sequence that will run when something doesn\u2019t happen\n         *\n         * Indicates some action which the server will execute when a certain condition (which normally does not\n         * happen) is not met.\n         *\n         * Example: lock the doors when the server\u2019s system has detected no one is at home while the doors are in the\n         * 'unlocked' state.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.4\n         */\n        Exception = 4,\n\n        /**\n         * Use the endpoints to send a message to user\n         *\n         * Indicates an action that can be triggered (e.g. by InstantAction) to notify the user.\n         *\n         * Example: play a pattern on the lights in the living room if there is someone in the garden in the evening.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.5\n         */\n        Notification = 5,\n\n        /**\n         * Higher priority notification\n         *\n         * Similar to Notification but with a higher priority (and might override other endpoint states which\n         * Type=Notification would not override).\n         *\n         * Example: flash all lights in the house when CO sensor triggers.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.2.6\n         */\n        Alarm = 6\n    }\n\n    /**\n     * Note - The bit allocation of this bitmap shall follow the ID\u2019s of the Commands of this cluster.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.1\n     */\n    export const CommandBits = {\n        /**\n         * Indicate support for InstantAction command\n         */\n        instantAction: BitFlag(0),\n\n        /**\n         * Indicate support for InstantActionWithTransition command\n         */\n        instantActionWithTransition: BitFlag(1),\n\n        /**\n         * Indicate support for StartAction command\n         */\n        startAction: BitFlag(2),\n\n        /**\n         * Indicate support for StartActionWithDuration command\n         */\n        startActionWithDuration: BitFlag(3),\n\n        /**\n         * Indicate support for StopAction command\n         */\n        stopAction: BitFlag(4),\n\n        /**\n         * Indicate support for PauseAction command\n         */\n        pauseAction: BitFlag(5),\n\n        /**\n         * Indicate support for PauseActionWithDuration command\n         */\n        pauseActionWithDuration: BitFlag(6),\n\n        /**\n         * Indicate support for ResumeAction command\n         */\n        resumeAction: BitFlag(7),\n\n        /**\n         * Indicate support for EnableAction command\n         */\n        enableAction: BitFlag(8),\n\n        /**\n         * Indicate support for EnableActionWithDuration command\n         */\n        enableActionWithDuration: BitFlag(9),\n\n        /**\n         * Indicate support for DisableAction command\n         */\n        disableAction: BitFlag(10),\n\n        /**\n         * Indicate support for DisableActionWithDuration command\n         */\n        disableActionWithDuration: BitFlag(11)\n    };\n\n    /**\n     * Note that some of these states are applicable only for certain actions, as determined by their SupportedCommands.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.3\n     */\n    export enum ActionState {\n        /**\n         * The action is not active\n         */\n        Inactive = 0,\n\n        /**\n         * The action is active\n         */\n        Active = 1,\n\n        /**\n         * The action has been paused\n         */\n        Paused = 2,\n\n        /**\n         * The action has been disabled\n         */\n        Disabled = 3\n    }\n\n    /**\n     * This data type holds the details of a single action, and contains the data fields below.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6\n     */\n    export const TlvAction = TlvObject({\n        /**\n         * This field shall provide an unique identifier used to identify an action.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.1\n         */\n        actionId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate the name (as assigned by the user or automatically by the server) associated with\n         * this action. This can be used for identifying the action to the user by the client. Example: \"my colorful\n         * scene\".\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.2\n         */\n        name: TlvField(1, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This field shall indicate the type of action. The value of Type of an action, along with its\n         * SupportedCommands can be used by the client in its UX or logic to determine how to present or use such\n         * action. See ActionTypeEnum for details and examples.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.3\n         */\n        type: TlvField(2, TlvEnum<ActionType>()),\n\n        /**\n         * This field shall provide a reference to the associated endpoint list, which specifies the endpoints on this\n         * Node which will be impacted by this ActionID.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.4\n         */\n        endpointListId: TlvField(3, TlvUInt16),\n\n        /**\n         * This field is a bitmap which shall be used to indicate which of the cluster\u2019s commands are supported for\n         * this particular action, with a bit set to 1 for each supported command according to the table below. Other\n         * bits shall be set to 0.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.5\n         */\n        supportedCommands: TlvField(4, TlvBitmap(TlvUInt16, CommandBits)),\n\n        /**\n         * This field shall indicate the current state of this action.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6.6\n         */\n        state: TlvField(5, TlvEnum<ActionState>())\n    });\n\n    /**\n     * This data type holds the details of a single action, and contains the data fields below.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.6\n     */\n    export interface Action extends TypeFromSchema<typeof TlvAction> {}\n\n    /**\n     * The Room and Zone values are provided for the cases where a user (or the system on behalf of the user) has\n     * created logical grouping of the endpoints (e.g. bridged devices) based on location.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.5\n     */\n    export enum EndpointListType {\n        /**\n         * Another group of endpoints\n         *\n         * This value is provided for the case of an endpoint list which is tied specifically to this action i.e. not\n         * independently created by the user. For Type=Other the Name may be empty. A Matter controller would typically\n         * not use this for anything else than just to know which endpoints would be affected by the action.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.5.1\n         */\n        Other = 0,\n\n        /**\n         * User-configured group of endpoints where an endpoint can be in only one room\n         *\n         * Is used for the situation where an endpoint can only be part of one such rooms (e.g. physical mapping).\n         * Using these exposed logical groups, a Matter controller who has a similar grouping concept can use it to\n         * place each endpoint (bridged device) in the right room automatically, without user having to redo that setup\n         * for each device in each system - both at first contact and upon later updates to the endpoints (e.g. user\n         * adds a bridged device or creates a new room).\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.5.2\n         */\n        Room = 1,\n\n        /**\n         * User-configured group of endpoints where an endpoint can be in any number of zones\n         *\n         * Is a more general concept where an endpoint can be part of multiple zones, e.g. a light in the living room\n         * can be part of the \"reading corner\" zone (subset of the lights in the living room) but also part of the\n         * \"downstairs\" zone which contains all the lights on a floor, e.g. combining living room, kitchen and hallway.\n         * This indicates that a user has defined this list of endpoints as something they logically would like to\n         * control as a group, so Matter controllers could provide the user with a way to do as such.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.5.3\n         */\n        Zone = 2\n    }\n\n    /**\n     * This data type holds the details of a single endpoint list, which relates to a set of endpoints that have some\n     * logical relation, and contains the data fields below.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7\n     */\n    export const TlvEndpointList = TlvObject({\n        /**\n         * This field shall provide an unique identifier used to identify the endpoint list.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7.1\n         */\n        endpointListId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall indicate the name (as assigned by the user or automatically by the server) associated with\n         * the set of endpoints in this list. This can be used for identifying the action to the user by the client.\n         * Example: \"living room\".\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7.2\n         */\n        name: TlvField(1, TlvString.bound({ maxLength: 32 })),\n\n        /**\n         * This field shall indicate the type of endpoint list, see EndpointListTypeEnum.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7.3\n         */\n        type: TlvField(2, TlvEnum<EndpointListType>()),\n\n        /**\n         * This field shall provide a list of endpoint numbers.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7.4\n         */\n        endpoints: TlvField(3, TlvArray(TlvEndpointNumber, { maxLength: 256 }))\n    });\n\n    /**\n     * This data type holds the details of a single endpoint list, which relates to a set of endpoints that have some\n     * logical relation, and contains the data fields below.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.7\n     */\n    export interface EndpointList extends TypeFromSchema<typeof TlvEndpointList> {}\n\n    /**\n     * Input to the Actions instantAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.1\n     */\n    export const TlvInstantActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions instantAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.1\n     */\n    export interface InstantActionRequest extends TypeFromSchema<typeof TlvInstantActionRequest> {}\n\n    /**\n     * Input to the Actions instantActionWithTransition command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.2\n     */\n    export const TlvInstantActionWithTransitionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the transition time in 1/10th of seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.2.1\n         */\n        transitionTime: TlvField(2, TlvUInt16)\n    });\n\n    /**\n     * Input to the Actions instantActionWithTransition command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.2\n     */\n    export interface InstantActionWithTransitionRequest extends TypeFromSchema<typeof TlvInstantActionWithTransitionRequest> {}\n\n    /**\n     * Input to the Actions startAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.3\n     */\n    export const TlvStartActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions startAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.3\n     */\n    export interface StartActionRequest extends TypeFromSchema<typeof TlvStartActionRequest> {}\n\n    /**\n     * Input to the Actions startActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.4\n     */\n    export const TlvStartActionWithDurationRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the requested duration in seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.4.1\n         */\n        duration: TlvField(2, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions startActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.4\n     */\n    export interface StartActionWithDurationRequest extends TypeFromSchema<typeof TlvStartActionWithDurationRequest> {}\n\n    /**\n     * Input to the Actions stopAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.5\n     */\n    export const TlvStopActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions stopAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.5\n     */\n    export interface StopActionRequest extends TypeFromSchema<typeof TlvStopActionRequest> {}\n\n    /**\n     * Input to the Actions pauseAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.6\n     */\n    export const TlvPauseActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions pauseAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.6\n     */\n    export interface PauseActionRequest extends TypeFromSchema<typeof TlvPauseActionRequest> {}\n\n    /**\n     * Input to the Actions pauseActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.7\n     */\n    export const TlvPauseActionWithDurationRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the requested duration in seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.7.1\n         */\n        duration: TlvField(2, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions pauseActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.7\n     */\n    export interface PauseActionWithDurationRequest extends TypeFromSchema<typeof TlvPauseActionWithDurationRequest> {}\n\n    /**\n     * Input to the Actions resumeAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.8\n     */\n    export const TlvResumeActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions resumeAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.8\n     */\n    export interface ResumeActionRequest extends TypeFromSchema<typeof TlvResumeActionRequest> {}\n\n    /**\n     * Input to the Actions enableAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.9\n     */\n    export const TlvEnableActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions enableAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.9\n     */\n    export interface EnableActionRequest extends TypeFromSchema<typeof TlvEnableActionRequest> {}\n\n    /**\n     * Input to the Actions enableActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.10\n     */\n    export const TlvEnableActionWithDurationRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the requested duration in seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.10.1\n         */\n        duration: TlvField(2, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions enableActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.10\n     */\n    export interface EnableActionWithDurationRequest extends TypeFromSchema<typeof TlvEnableActionWithDurationRequest> {}\n\n    /**\n     * Input to the Actions disableAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.11\n     */\n    export const TlvDisableActionRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions disableAction command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.11\n     */\n    export interface DisableActionRequest extends TypeFromSchema<typeof TlvDisableActionRequest> {}\n\n    /**\n     * Input to the Actions disableActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.12\n     */\n    export const TlvDisableActionWithDurationRequest = TlvObject({\n        actionId: TlvField(0, TlvUInt16),\n        invokeId: TlvOptionalField(1, TlvUInt32),\n\n        /**\n         * This field shall indicate the requested duration in seconds.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.12.1\n         */\n        duration: TlvField(2, TlvUInt32)\n    });\n\n    /**\n     * Input to the Actions disableActionWithDuration command\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.12\n     */\n    export interface DisableActionWithDurationRequest extends TypeFromSchema<typeof TlvDisableActionWithDurationRequest> {}\n\n    /**\n     * Body of the Actions stateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1\n     */\n    export const TlvStateChangedEvent = TlvObject({\n        /**\n         * This field shall be set to the ActionID of the action which has changed state.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1.1\n         */\n        actionId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall be set to the InvokeID which was provided to the most recent command referencing this\n         * ActionID.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1.2\n         */\n        invokeId: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall be set to state that the action has changed to.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1.3\n         */\n        newState: TlvField(2, TlvEnum<ActionState>())\n    });\n\n    /**\n     * Body of the Actions stateChanged event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1\n     */\n    export interface StateChangedEvent extends TypeFromSchema<typeof TlvStateChangedEvent> {}\n\n    /**\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.4.4\n     */\n    export enum ActionError {\n        /**\n         * Other reason not listed in the row(s) below\n         */\n        Unknown = 0,\n\n        /**\n         * The action was interrupted by another command or interaction\n         */\n        Interrupted = 1\n    }\n\n    /**\n     * Body of the Actions actionFailed event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2\n     */\n    export const TlvActionFailedEvent = TlvObject({\n        /**\n         * This field shall be set to the ActionID of the action which encountered an error.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2.1\n         */\n        actionId: TlvField(0, TlvUInt16),\n\n        /**\n         * This field shall be set to the InvokeID which was provided to the most recent command referencing this\n         * ActionID.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2.2\n         */\n        invokeId: TlvField(1, TlvUInt32),\n\n        /**\n         * This field shall be set to state that the action is in at the time of generating the event.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2.3\n         */\n        newState: TlvField(2, TlvEnum<ActionState>()),\n\n        /**\n         * This field shall be set to indicate the reason for non-successful progress of the action.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2.4\n         */\n        error: TlvField(3, TlvEnum<ActionError>())\n    });\n\n    /**\n     * Body of the Actions actionFailed event\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2\n     */\n    export interface ActionFailedEvent extends TypeFromSchema<typeof TlvActionFailedEvent> {}\n\n    /**\n     * @see {@link Cluster}\n     */\n    export const ClusterInstance = MutableCluster({\n        id: 0x25,\n        name: \"Actions\",\n        revision: 1,\n\n        attributes: {\n            /**\n             * The ActionList attribute holds the list of actions. Each entry shall have an unique ActionID, and its\n             * EndpointListID shall exist in the EndpointLists attribute.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.5.1\n             */\n            actionList: Attribute(0x0, TlvArray(TlvAction, { maxLength: 256 }), { default: [] }),\n\n            /**\n             * The EndpointLists attribute holds the list of endpoint lists. Each entry shall have an unique\n             * EndpointListID.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.5.2\n             */\n            endpointLists: Attribute(0x1, TlvArray(TlvEndpointList, { maxLength: 256 }), { default: [] }),\n\n            /**\n             * The SetupURL attribute (when provided) shall indicate a URL; its syntax shall follow the syntax as\n             * specified in RFC 3986, max. 512 ASCII characters. The location referenced by this URL shall provide\n             * additional information for the actions provided:\n             *\n             *   \u2022 When used without suffix, it shall provide information about the various actions which the cluster\n             *     provides.\n             *\n             *     \u25E6 Example: SetupURL could take the value of example://Actions or https://domain.example/\n             *       Matter/bridgev1/Actions for this generic case (access generic info how to use actions provided by\n             *       this cluster).\n             *\n             *   \u2022 When used with a suffix of \"/?a=\" and the decimal value of ActionID for one of the actions, it may\n             *     provide information about that particular action. This could be a deeplink to\n             *     manufacturer-app/website (associated somehow to the server node) with the information/edit-screen\n             *     for this action so that the user can view and update details of the action, e.g. edit the scene, or\n             *     change the wake-up experience time period.\n             *\n             *     \u25E6 Example of SetupURL with suffix added: example://Actions/?a=12345 or\n             *       https://domain.example/Matter/bridgev1/Actions/?a=12345 for linking to specific info/editing of\n             *       the action with ActionID 0x3039.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.5.3\n             */\n            setupUrl: OptionalAttribute(0x2, TlvString.bound({ maxLength: 512 }))\n        },\n\n        commands: {\n            /**\n             * This command triggers an action (state change) on the involved endpoints, in a \"fire and forget\" manner.\n             * Afterwards, the action\u2019s state shall be Inactive.\n             *\n             * Example: recall a scene on a number of lights.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.1\n             */\n            instantAction: OptionalCommand(0x0, TlvInstantActionRequest, 0x0, TlvNoResponse),\n\n            /**\n             * It is recommended that, where possible (e.g., it is not possible for attributes with Boolean data type),\n             * a gradual transition SHOULD take place from the old to the new state over this time period. However, the\n             * exact transition is manufacturer dependent.\n             *\n             * This command triggers an action (state change) on the involved endpoints, with a specified time to\n             * transition from the current state to the new state. During the transition, the action\u2019s state shall be\n             * Active. Afterwards, the action\u2019s state shall be Inactive.\n             *\n             * Example: recall a scene on a number of lights, with a specified transition time.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.2\n             */\n            instantActionWithTransition: OptionalCommand(\n                0x1,\n                TlvInstantActionWithTransitionRequest,\n                0x1,\n                TlvNoResponse\n            ),\n\n            /**\n             * This command triggers the commencement of an action on the involved endpoints. Afterwards, the action\u2019s\n             * state shall be Active.\n             *\n             * Example: start a dynamic lighting pattern (such as gradually rotating the colors around the setpoints of\n             * the scene) on a set of lights.\n             *\n             * Example: start a sequence of events such as a wake-up experience involving lights moving through several\n             * brightness/color combinations and the window covering gradually opening.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.3\n             */\n            startAction: OptionalCommand(0x2, TlvStartActionRequest, 0x2, TlvNoResponse),\n\n            /**\n             * This command triggers the commencement of an action on the involved endpoints, and shall change the\n             * action\u2019s state to Active. After the specified Duration, the action will stop, and the action\u2019s state\n             * shall change to Inactive.\n             *\n             * Example: start a dynamic lighting pattern (such as gradually rotating the colors around the setpoints of\n             * the scene) on a set of lights for 1 hour (Duration=3600).\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.4\n             */\n            startActionWithDuration: OptionalCommand(0x3, TlvStartActionWithDurationRequest, 0x3, TlvNoResponse),\n\n            /**\n             * This command stops the ongoing action on the involved endpoints. Afterwards, the action\u2019s state shall be\n             * Inactive.\n             *\n             * Example: stop a dynamic lighting pattern which was previously started with StartAction.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.5\n             */\n            stopAction: OptionalCommand(0x4, TlvStopActionRequest, 0x4, TlvNoResponse),\n\n            /**\n             * This command pauses an ongoing action, and shall change the action\u2019s state to Paused.\n             *\n             * Example: pause a dynamic lighting effect (the lights stay at their current color) which was previously\n             * started with StartAction.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.6\n             */\n            pauseAction: OptionalCommand(0x5, TlvPauseActionRequest, 0x5, TlvNoResponse),\n\n            /**\n             * This command pauses an ongoing action, and shall change the action\u2019s state to Paused. After the\n             * specified Duration, the ongoing action will be automatically resumed. which shall change the action\u2019s\n             * state to Active.\n             *\n             * Example: pause a dynamic lighting effect (the lights stay at their current color) for 10 minutes\n             * (Duration=600).\n             *\n             * The difference between Pause/Resume and Disable/Enable is on the one hand semantic (the former is more\n             * of a transitionary nature while the latter is more permanent) and on the other hand these can be\n             * implemented slightly differently in the implementation of the action (e.g. a Pause would be\n             * automatically resumed after some hours or during a nightly reset, while an Disable would remain in\n             * effect until explicitly enabled again).\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.7\n             */\n            pauseActionWithDuration: OptionalCommand(0x6, TlvPauseActionWithDurationRequest, 0x6, TlvNoResponse),\n\n            /**\n             * This command resumes a previously paused action, and shall change the action\u2019s state to Active.\n             *\n             * The difference between ResumeAction and StartAction is that ResumeAction will continue the action from\n             * the state where it was paused, while StartAction will start the action from the beginning.\n             *\n             * Example: resume a dynamic lighting effect (the lights' colors will change gradually, continuing from the\n             * point they were paused).\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.8\n             */\n            resumeAction: OptionalCommand(0x7, TlvResumeActionRequest, 0x7, TlvNoResponse),\n\n            /**\n             * This command enables a certain action or automation. Afterwards, the action\u2019s state shall be Active.\n             *\n             * Example: enable a motion sensor to control the lights in an area.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.9\n             */\n            enableAction: OptionalCommand(0x8, TlvEnableActionRequest, 0x8, TlvNoResponse),\n\n            /**\n             * This command enables a certain action or automation, and shall change the action\u2019s state to be Active.\n             * After the specified Duration, the action or automation will stop, and the action\u2019s state shall change to\n             * Disabled.\n             *\n             * Example: enable a \"presence mimicking\" behavior for the lights in your home during a vacation; the\n             * Duration field is used to indicated the length of your absence from home. After that period, the\n             * presence mimicking behavior will no longer control these lights.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.10\n             */\n            enableActionWithDuration: OptionalCommand(0x9, TlvEnableActionWithDurationRequest, 0x9, TlvNoResponse),\n\n            /**\n             * This command disables a certain action or automation, and shall change the action\u2019s state to Inactive.\n             *\n             * Example: disable a motion sensor to no longer control the lights in an area.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.11\n             */\n            disableAction: OptionalCommand(0xa, TlvDisableActionRequest, 0xa, TlvNoResponse),\n\n            /**\n             * This command disables a certain action or automation, and shall change the action\u2019s state to Disabled.\n             * After the specified Duration, the action or automation will re-start, and the action\u2019s state shall\n             * change to either Inactive or Active, depending on the actions (see examples 4 and 6).\n             *\n             * Example: disable a \"wakeup\" experience for a period of 1 week when going on holiday (to prevent them\n             * from turning on in the morning while you\u2019re not at home). After this period, the wakeup experience will\n             * control the lights as before.\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.6.12\n             */\n            disableActionWithDuration: OptionalCommand(0xb, TlvDisableActionWithDurationRequest, 0xb, TlvNoResponse)\n        },\n\n        events: {\n            /**\n             * This event shall be generated when there is a change in the State of an ActionID during the execution of\n             * an action and the most recent command using that ActionID used an InvokeID data field.\n             *\n             * It provides feedback to the client about the progress of the action.\n             *\n             * Example: When InstantActionWithTransition is invoked (with an InvokeID data field), two StateChanged\n             * events will be generated:\n             *\n             *   \u2022 one when the transition starts (NewState=Active)\n             *\n             *   \u2022 one when the transition completed (NewState=Inactive)\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.1\n             */\n            stateChanged: Event(0x0, EventPriority.Info, TlvStateChangedEvent),\n\n            /**\n             * This event shall be generated when there is some error which prevents the action from its normal planned\n             * execution and the most recent command using that ActionID used an InvokeID data field.\n             *\n             * It provides feedback to the client about the non-successful progress of the action.\n             *\n             * Example: When InstantActionWithTransition is invoked (with an InvokeID data field), and another\n             * controller changes the state of one or more of the involved endpoints during the transition, thus\n             * interrupting the transition triggered by the action, two events would be generated:\n             *\n             *   \u2022 StateChanged when the transition starts (NewState=Active)\n             *\n             *   \u2022 ActionFailed when the interrupting command occurs (NewState=Inactive, Error=interrupted)\n             *\n             * Example: When InstantActionWithTransition is invoked (with an InvokeID data field = 1), and the same\n             * client invokes an InstantAction with (the same or another ActionId and) InvokeID = 2, and this second\n             * command interrupts the transition triggered by the first command, these events would be generated:\n             *\n             *   \u2022 StateChanged (InvokeID=1, NewState=Active) when the transition starts\n             *\n             *   \u2022 ActionFailed (InvokeID=2, NewState=Inactive, Error=interrupted) when the second command interrupts\n             *     the transition\n             *\n             *   \u2022 StateChanged (InvokeID=2, NewState=Inactive) upon the execution of the action for the second command\n             *\n             * @see {@link MatterSpecification.v13.Core} \u00A7 9.14.7.2\n             */\n            actionFailed: Event(0x1, EventPriority.Info, TlvActionFailedEvent)\n        }\n    });\n\n    /**\n     * This cluster provides a standardized way for a Node (typically a Bridge, but could be any Node) to expose\n     *\n     *   \u2022 Information about logical grouping of endpoints on the Node (example: lights in a room)\n     *\n     *   \u2022 Information about named actions that can be performed on such a group of endpoints\n     *\n     * ple: recall a scene for a group of lights by its name)\n     *\n     *   \u2022 Commands to trigger such actions\n     *\n     *   \u2022 Events to receive feedback on the state of such actions.\n     *\n     * The information on grouping and available actions is typically provided by the user or Bridge manufacturer via\n     * some means not defined in Matter, and therefore provided as read-only to Nodes. For example: a\n     * manufacturer-provided app allows a user to set up logical grouping and create/assign scene for such groups.\n     *\n     * Using this cluster, a Node can learn about such logical grouping, provided actions, and trigger such actions.\n     *\n     * While the origin of this cluster stems from use cases with a Bridge, its server side may also be implemented on\n     * any Node which can expose certain grouping, actions or automations to other users.\n     *\n     * After defining the attributes, commands and events for this cluster, and the associated data types, several\n     * examples are provided to illustrate the capabilities of this cluster.\n     *\n     * Actions can be defined in a flexible manner to suit the needs of the various nodes implementing this cluster.\n     * For each action, the commands available for that particular action are defined.\n     *\n     * This cluster can be used to expose only the grouping of endpoints without any actions defined by populating the\n     * EndpointList attribute accordingly and providing an empty list for ActionList.\n     *\n     * The term 'action' in the description of this cluster should not be confused with the term 'action' as used in\n     * the Interaction Model.\n     *\n     * @see {@link MatterSpecification.v13.Core} \u00A7 9.14\n     */\n    export interface Cluster extends Identity<typeof ClusterInstance> {}\n\n    export const Cluster: Cluster = ClusterInstance;\n    export const Complete = Cluster;\n}\n\nexport type ActionsCluster = Actions.Cluster;\nexport const ActionsCluster = Actions.Cluster;\nClusterRegistry.register(Actions.Complete);\n"],
  "mappings": "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",
  "names": ["Actions", "ActionType", "ActionState", "EndpointListType", "ActionError"]
}
