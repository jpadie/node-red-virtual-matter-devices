/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { FabricIndex } from "../../datatype/FabricIndex.js";
import { VendorId } from "../../datatype/VendorId.js";
import { Command } from "../Cluster.js";
import { AdministratorCommissioning } from "../definitions/AdministratorCommissioningCluster.js";
import { ClusterServerHandlers } from "./ClusterServerTypes.js";
export declare const AdministratorCommissioningHandler: () => ClusterServerHandlers<typeof AdministratorCommissioning.Cluster>;
declare const AdministratorCommissioningBasicCluster: import("../export.js").ClusterComposer.Of<import("../ClusterType.js").ClusterType.Of<{
    readonly id: 60;
    readonly name: "AdministratorCommissioning";
    readonly revision: 1;
    readonly features: {
        readonly basic: import("../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly windowStatus: import("../Cluster.js").Attribute<AdministratorCommissioning.CommissioningWindowStatus, any>;
        readonly adminFabricIndex: import("../Cluster.js").Attribute<FabricIndex | null, any>;
        readonly adminVendorId: import("../Cluster.js").Attribute<VendorId | null, any>;
    };
    readonly commands: {
        readonly openCommissioningWindow: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
            commissioningTimeout: import("../../tlv/TlvObject.js").FieldType<number>;
            pakePasscodeVerifier: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            discriminator: import("../../tlv/TlvObject.js").FieldType<number>;
            iterations: import("../../tlv/TlvObject.js").FieldType<number>;
            salt: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
        }>, void, any>;
        readonly revokeCommissioning: Command<void, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly basic: true;
        };
        readonly component: {
            readonly commands: {
                readonly openBasicCommissioningWindow: Command<import("../../tlv/TlvObject.js").TypeFromFields<{
                    commissioningTimeout: import("../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }];
}>, readonly ["Basic"]>;
export declare const BasicAdminCommissioningHandler: () => ClusterServerHandlers<typeof AdministratorCommissioningBasicCluster>;
export {};
//# sourceMappingURL=AdministratorCommissioningServer.d.ts.map