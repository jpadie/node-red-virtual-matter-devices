{
  "version": 3,
  "sources": ["../../../../src/cluster/server/GeneralDiagnosticsServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NotImplementedError } from \"../../common/MatterError.js\";\nimport { WrapCommandHandler } from \"../../device/Device.js\";\nimport { Network, NetworkInterfaceDetailed } from \"../../net/Network.js\";\nimport { Time } from \"../../time/Time.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport { iPv4ToByteArray, iPv6ToByteArray } from \"../../util/Ip.js\";\nimport { NamedHandler } from \"../../util/NamedHandler.js\";\nimport { GeneralDiagnostics, GeneralDiagnosticsCluster } from \"../definitions/GeneralDiagnosticsCluster.js\";\nimport { AttributeServer } from \"./AttributeServer.js\";\nimport { ClusterServer } from \"./ClusterServer.js\";\nimport { ClusterServerHandlers } from \"./ClusterServerTypes.js\";\n\nexport const GeneralDiagnosticsClusterHandler: () => Promise<\n    ClusterServerHandlers<typeof GeneralDiagnosticsCluster>\n> = async () => {\n    let bootUpTime = 0;\n\n    // We update the totalOperationalHours attribute every hour\n    let totalOperationalHoursAttribute: AttributeServer<number> | undefined = undefined;\n    const totalOperationalHoursUpdateTimer = Time.getPeriodicTimer(\n        \"GeneralDiagnosticsCluster.totalOperationalHoursUpdate\",\n        60 * 60_1000,\n        () => {\n            if (totalOperationalHoursAttribute === undefined) return;\n            totalOperationalHoursAttribute.setLocal(totalOperationalHoursAttribute.getLocal() + 1);\n        },\n    );\n\n    const network = Network.get();\n    const interfaces = await network.getNetInterfaces();\n    const interfaceDetails = new Array<NetworkInterfaceDetailed>();\n    for (const { name, type } of interfaces) {\n        const details = await network.getIpMac(name);\n        if (details !== undefined) {\n            interfaceDetails.push({ name, type, ...details });\n        }\n    }\n\n    return {\n        initializeClusterServer: ({ attributes: { totalOperationalHours, networkInterfaces } }) => {\n            bootUpTime = Time.nowMs();\n            if (totalOperationalHours?.getLocal() !== undefined) {\n                totalOperationalHoursAttribute = totalOperationalHours;\n                totalOperationalHoursUpdateTimer.start();\n            }\n\n            // Filter all unassigned MACs out, sort operational on top, limit to 8 entries and map to the required format.\n            networkInterfaces.setLocal(\n                interfaceDetails\n                    .filter(({ mac }) => mac !== \"00:00:00:00:00:00\")\n                    .slice(0, 8)\n                    .map(({ name, mac, ipV4, ipV6, type }) => ({\n                        name,\n                        isOperational: true,\n                        offPremiseServicesReachableIPv4: null, // null means unknown or not supported\n                        offPremiseServicesReachableIPv6: null, // null means unknown or not supported\n                        hardwareAddress: ByteArray.fromHex(mac.replace(/[^\\da-fA-F]/g, \"\")),\n                        iPv4Addresses: ipV4.slice(0, 4).map(ip => iPv4ToByteArray(ip)),\n                        iPv6Addresses: ipV6.slice(0, 8).map(ip => iPv6ToByteArray(ip)),\n                        type: type ?? GeneralDiagnostics.InterfaceType.Ethernet,\n                    })),\n            );\n        },\n\n        destroyClusterServer: () => {\n            totalOperationalHoursUpdateTimer.stop();\n        },\n\n        upTimeAttributeGetter: () => {\n            return Math.round((Time.nowMs() - bootUpTime) / 1000);\n        },\n\n        testEventTrigger: () => {},\n        timeSnapshot: () => {\n            throw new NotImplementedError();\n        },\n    };\n};\n\nexport const createDefaultGeneralDiagnosticsClusterServer = async (commandHandler: NamedHandler<any>) =>\n    ClusterServer(\n        GeneralDiagnosticsCluster,\n        {\n            networkInterfaces: [],\n            rebootCount: 0,\n            upTime: 0,\n            totalOperationalHours: 0,\n            bootReason: GeneralDiagnostics.BootReason.Unspecified,\n            activeHardwareFaults: [],\n            activeRadioFaults: [],\n            activeNetworkFaults: [],\n            testEventTriggersEnabled: false,\n        },\n        WrapCommandHandler(await GeneralDiagnosticsClusterHandler(), commandHandler),\n        {\n            bootReason: true,\n        },\n    );\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,2BAA2B;AACpC,SAAS,0BAA0B;AACnC,SAAS,eAAyC;AAClD,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB,uBAAuB;AAEjD,SAAS,oBAAoB,iCAAiC;AAE9D,SAAS,qBAAqB;AAGvB,MAAM,mCAET,YAAY;AACZ,MAAI,aAAa;AAGjB,MAAI,iCAAsE;AAC1E,QAAM,mCAAmC,KAAK;AAAA,IAC1C;AAAA,IACA,KAAK;AAAA,IACL,MAAM;AACF,UAAI,mCAAmC,OAAW;AAClD,qCAA+B,SAAS,+BAA+B,SAAS,IAAI,CAAC;AAAA,IACzF;AAAA,EACJ;AAEA,QAAM,UAAU,QAAQ,IAAI;AAC5B,QAAM,aAAa,MAAM,QAAQ,iBAAiB;AAClD,QAAM,mBAAmB,IAAI,MAAgC;AAC7D,aAAW,EAAE,MAAM,KAAK,KAAK,YAAY;AACrC,UAAM,UAAU,MAAM,QAAQ,SAAS,IAAI;AAC3C,QAAI,YAAY,QAAW;AACvB,uBAAiB,KAAK,EAAE,MAAM,MAAM,GAAG,QAAQ,CAAC;AAAA,IACpD;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,yBAAyB,CAAC,EAAE,YAAY,EAAE,uBAAuB,kBAAkB,EAAE,MAAM;AACvF,mBAAa,KAAK,MAAM;AACxB,UAAI,uBAAuB,SAAS,MAAM,QAAW;AACjD,yCAAiC;AACjC,yCAAiC,MAAM;AAAA,MAC3C;AAGA,wBAAkB;AAAA,QACd,iBACK,OAAO,CAAC,EAAE,IAAI,MAAM,QAAQ,mBAAmB,EAC/C,MAAM,GAAG,CAAC,EACV,IAAI,CAAC,EAAE,MAAM,KAAK,MAAM,MAAM,KAAK,OAAO;AAAA,UACvC;AAAA,UACA,eAAe;AAAA,UACf,iCAAiC;AAAA;AAAA,UACjC,iCAAiC;AAAA;AAAA,UACjC,iBAAiB,UAAU,QAAQ,IAAI,QAAQ,gBAAgB,EAAE,CAAC;AAAA,UAClE,eAAe,KAAK,MAAM,GAAG,CAAC,EAAE,IAAI,QAAM,gBAAgB,EAAE,CAAC;AAAA,UAC7D,eAAe,KAAK,MAAM,GAAG,CAAC,EAAE,IAAI,QAAM,gBAAgB,EAAE,CAAC;AAAA,UAC7D,MAAM,QAAQ,mBAAmB,cAAc;AAAA,QACnD,EAAE;AAAA,MACV;AAAA,IACJ;AAAA,IAEA,sBAAsB,MAAM;AACxB,uCAAiC,KAAK;AAAA,IAC1C;AAAA,IAEA,uBAAuB,MAAM;AACzB,aAAO,KAAK,OAAO,KAAK,MAAM,IAAI,cAAc,GAAI;AAAA,IACxD;AAAA,IAEA,kBAAkB,MAAM;AAAA,IAAC;AAAA,IACzB,cAAc,MAAM;AAChB,YAAM,IAAI,oBAAoB;AAAA,IAClC;AAAA,EACJ;AACJ;AAEO,MAAM,+CAA+C,OAAO,mBAC/D;AAAA,EACI;AAAA,EACA;AAAA,IACI,mBAAmB,CAAC;AAAA,IACpB,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,uBAAuB;AAAA,IACvB,YAAY,mBAAmB,WAAW;AAAA,IAC1C,sBAAsB,CAAC;AAAA,IACvB,mBAAmB,CAAC;AAAA,IACpB,qBAAqB,CAAC;AAAA,IACtB,0BAA0B;AAAA,EAC9B;AAAA,EACA,mBAAmB,MAAM,iCAAiC,GAAG,cAAc;AAAA,EAC3E;AAAA,IACI,YAAY;AAAA,EAChB;AACJ;",
  "names": []
}
