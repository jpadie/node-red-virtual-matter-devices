/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { NetworkError } from "../Network.js";
import { MAX_UDP_MESSAGE_SIZE } from "../UdpChannel.js";
import { FAKE_INTERFACE_NAME, SimulatedNetwork } from "./SimulatedNetwork.js";
class UdpChannelFake {
  constructor(localAddress, listeningAddress, listeningPort) {
    this.localAddress = localAddress;
    this.listeningAddress = listeningAddress;
    this.listeningPort = listeningPort ?? 1024 + Math.floor(Math.random() * 64511);
  }
  static async create(network, { listeningAddress, listeningPort, netInterface, type }) {
    const { ipV4, ipV6 } = network.getIpMac(netInterface ?? FAKE_INTERFACE_NAME);
    const localAddress = type === "udp4" ? ipV4[0] : ipV6[0] ?? ipV4[0];
    if (localAddress === void 0) {
      throw new NetworkError("No matching IP on the specified interface");
    }
    return new UdpChannelFake(localAddress, listeningAddress, listeningPort);
  }
  netListeners = new Array();
  simulatedNetwork = SimulatedNetwork.get();
  listeningPort;
  maxPayloadSize = MAX_UDP_MESSAGE_SIZE;
  onData(listener) {
    const netListener = this.simulatedNetwork.onUdpData(this.listeningAddress, this.listeningPort, listener);
    this.netListeners.push(netListener);
    return netListener;
  }
  async send(host, port, data) {
    this.simulatedNetwork.sendUdp(this.localAddress, this.listeningPort, host, port, data);
  }
  async close() {
    for (const netListener of this.netListeners) {
      await netListener.close();
    }
    this.netListeners.length = 0;
  }
  async [Symbol.asyncDispose]() {
    return this.close();
  }
  get port() {
    return this.listeningPort;
  }
}
export {
  UdpChannelFake
};
//# sourceMappingURL=UdpChannelFake.js.map
