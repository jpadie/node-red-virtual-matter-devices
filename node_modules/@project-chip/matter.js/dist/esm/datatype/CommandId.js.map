{
  "version": 3,
  "sources": ["../../../src/datatype/CommandId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\n\n/**\n * A Command ID is a 32 bit number and indicates a command defined in a cluster specification.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.18.2.18\n */\nexport type CommandId = Branded<number, \"CommandId\">;\n\nexport function CommandId(commandId: number, validate = true): CommandId {\n    if (!validate) {\n        return commandId as CommandId;\n    }\n    const { typeSuffix } = Mei.fromMei(commandId);\n    if (typeSuffix >= 0x00 && typeSuffix <= 0xff) {\n        return commandId as CommandId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid command ID: ${commandId}`);\n}\n\nexport namespace CommandId {\n    export const isValid = validatorOf(CommandId);\n}\n\n/** Tlv schema for an Command Id. */\nexport const TlvCommandId = new TlvWrapper<CommandId, number>(\n    TlvUInt32,\n    commandId => commandId,\n    value => CommandId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,4BAA4B,mBAAmB;AACxD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AASb,SAAS,UAAU,WAAmB,WAAW,MAAiB;AACrE,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,QAAM,EAAE,WAAW,IAAI,IAAI,QAAQ,SAAS;AAC5C,MAAI,cAAc,KAAQ,cAAc,KAAM;AAC1C,WAAO;AAAA,EACX;AACA,QAAM,IAAI,2BAA2B,uBAAuB,SAAS,EAAE;AAC3E;AAAA,CAEO,CAAUA,eAAV;AACI,EAAMA,WAAA,UAAU,YAAYA,UAAS;AAAA,GAD/B;AAKV,MAAM,eAAe,IAAI;AAAA,EAC5B;AAAA,EACA,eAAa;AAAA,EACb,WAAS,UAAU,OAAO,KAAK;AAAA;AACnC;",
  "names": ["CommandId"]
}
