{
  "version": 3,
  "sources": ["../../../src/datatype/DeviceTypeId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\n\n/**\n * A Device type ID is a 32-bit number that defines the type of the device.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.15\n */\nexport type DeviceTypeId = Branded<number, \"DeviceTypeId\">;\n\nexport function DeviceTypeId(deviceTypeId: number, validate = true): DeviceTypeId {\n    if (!validate) {\n        return deviceTypeId as DeviceTypeId;\n    }\n    const { typeSuffix } = Mei.fromMei(deviceTypeId);\n    if (typeSuffix >= 0x0000 && typeSuffix <= 0xbfff) {\n        return deviceTypeId as DeviceTypeId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid device type ID: ${deviceTypeId}`);\n}\n\nexport namespace DeviceTypeId {\n    export const isValid = validatorOf(DeviceTypeId);\n}\n\n/** Tlv schema for a Device type ID. */\nexport const TlvDeviceTypeId = new TlvWrapper<DeviceTypeId, number>(\n    TlvUInt32,\n    deviceTypeId => deviceTypeId,\n    value => DeviceTypeId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,4BAA4B,mBAAmB;AACxD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AASb,SAAS,aAAa,cAAsB,WAAW,MAAoB;AAC9E,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,QAAM,EAAE,WAAW,IAAI,IAAI,QAAQ,YAAY;AAC/C,MAAI,cAAc,KAAU,cAAc,OAAQ;AAC9C,WAAO;AAAA,EACX;AACA,QAAM,IAAI,2BAA2B,2BAA2B,YAAY,EAAE;AAClF;AAAA,CAEO,CAAUA,kBAAV;AACI,EAAMA,cAAA,UAAU,YAAYA,aAAY;AAAA,GADlC;AAKV,MAAM,kBAAkB,IAAI;AAAA,EAC/B;AAAA,EACA,kBAAgB;AAAA,EAChB,WAAS,aAAa,OAAO,KAAK;AAAA;AACtC;",
  "names": ["DeviceTypeId"]
}
