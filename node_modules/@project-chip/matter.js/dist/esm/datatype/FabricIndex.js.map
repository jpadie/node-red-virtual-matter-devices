{
  "version": 3,
  "sources": ["../../../src/datatype/FabricIndex.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TlvUInt8 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\n\n/**\n * Each fabric supported on a node is referenced by fabric-index that is unique on the node. This\n * fabric-index enables the look-up of the full fabric information from the fabric-index. A fabric-index\n * of 0 (zero) or null SHALL indicate that there is no fabric associated with the context in which the\n * fabric-index is being used. If fabric-index is used in a context that is exclusively associated with\n * a fabric, such as fabric-scoped data model elements, then the fabric-index values SHALL NOT include 0\n * (zero) or null.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.5.2\n */\nexport type FabricIndex = Branded<number, \"FabricIndex\">;\n\nexport function FabricIndex(value: number): FabricIndex {\n    return value as FabricIndex;\n}\n\nexport namespace FabricIndex {\n    export const NO_FABRIC = 0 as FabricIndex;\n    export const OMIT_FABRIC = -1 as FabricIndex;\n}\n\nclass FabricIndexTlvWrapper extends TlvWrapper<FabricIndex, number | undefined> {\n    constructor() {\n        super(\n            TlvUInt8.bound({ min: 0, max: 254 }),\n            fabricIndex => (fabricIndex === FabricIndex.OMIT_FABRIC ? undefined : fabricIndex),\n            value => {\n                switch (value) {\n                    case undefined:\n                        return FabricIndex.OMIT_FABRIC;\n                    case 0:\n                        return FabricIndex.NO_FABRIC;\n                    default:\n                        return value as FabricIndex;\n                }\n            },\n        );\n    }\n\n    override validate(value: FabricIndex): void {\n        const wrappedValue = this.wrap(value);\n        // Because the FabricIndex is omitted sometimes we do not validate id it is absent\n        if (wrappedValue !== undefined) {\n            this.underlyingSchema.validate(wrappedValue);\n        }\n    }\n}\n\n/** Tlv Schema for a Fabric Index. */\nexport const TlvFabricIndex = new FabricIndexTlvWrapper();\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAepB,SAAS,YAAY,OAA4B;AACpD,SAAO;AACX;AAAA,CAEO,CAAUA,iBAAV;AACI,EAAMA,aAAA,YAAY;AAClB,EAAMA,aAAA,cAAc;AAAA,GAFd;AAKjB,MAAM,8BAA8B,WAA4C;AAAA,EAC5E,cAAc;AACV;AAAA,MACI,SAAS,MAAM,EAAE,KAAK,GAAG,KAAK,IAAI,CAAC;AAAA,MACnC,iBAAgB,gBAAgB,YAAY,cAAc,SAAY;AAAA,MACtE,WAAS;AACL,gBAAQ,OAAO;AAAA,UACX,KAAK;AACD,mBAAO,YAAY;AAAA,UACvB,KAAK;AACD,mBAAO,YAAY;AAAA,UACvB;AACI,mBAAO;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAES,SAAS,OAA0B;AACxC,UAAM,eAAe,KAAK,KAAK,KAAK;AAEpC,QAAI,iBAAiB,QAAW;AAC5B,WAAK,iBAAiB,SAAS,YAAY;AAAA,IAC/C;AAAA,EACJ;AACJ;AAGO,MAAM,iBAAiB,IAAI,sBAAsB;",
  "names": ["FabricIndex"]
}
