{
  "version": 3,
  "sources": ["../../../src/datatype/FieldId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\n\n/**\n * A \"field ID\" is an unsigned 32-bit integer that identifies a specific field\n * in a cluster struct type.\n *\n * @see {@link MatterSpecification.v11.Core} \u00A7 7.18.2.18\n */\nexport type FieldId = Branded<number, \"FieldId\">;\n\nexport function FieldId(fieldId: number, validate = true): FieldId {\n    if (!validate) {\n        return fieldId as FieldId;\n    }\n    if (fieldId >= 0xe0 && fieldId <= 0xfe) {\n        // Global\n        return fieldId as FieldId;\n    }\n    const { typeSuffix } = Mei.fromMei(fieldId);\n    if (typeSuffix >= 0x00 && typeSuffix <= 0xdf) {\n        return fieldId as FieldId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid field ID: ${fieldId}`);\n}\n\nexport namespace FieldId {\n    export const isGlobal = (fieldId: number): boolean => {\n        return fieldId >= 0xe0 && fieldId <= 0xfe;\n    };\n\n    export const isValid = validatorOf(FieldId);\n}\n\n// TODO Adjust how to encode Field IDs\n//  Field IDs SHALL be encoded as:\n//    \u2022 A context tag when the MEI prefix encodes a standard/scoped source.\n//    \u2022 A fully-qualified profile-specific tag when the MEI prefix encodes a manufacturer code. The Vendor ID SHALL be\n//      set to the manufacturer code, the profile number set to 0 and the tag number set to the MEI suffix.\n//  NOTE Support for encoding Field IDs with an MC source is provisional.\n/** TLV schema for a field ID. */\nexport const TlvFieldId = new TlvWrapper<FieldId, number>(\n    TlvUInt32,\n    fieldId => fieldId,\n    value => FieldId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,4BAA4B,mBAAmB;AACxD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AAUb,SAAS,QAAQ,SAAiB,WAAW,MAAe;AAC/D,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,MAAI,WAAW,OAAQ,WAAW,KAAM;AAEpC,WAAO;AAAA,EACX;AACA,QAAM,EAAE,WAAW,IAAI,IAAI,QAAQ,OAAO;AAC1C,MAAI,cAAc,KAAQ,cAAc,KAAM;AAC1C,WAAO;AAAA,EACX;AACA,QAAM,IAAI,2BAA2B,qBAAqB,OAAO,EAAE;AACvE;AAAA,CAEO,CAAUA,aAAV;AACI,EAAMA,SAAA,WAAW,CAAC,YAA6B;AAClD,WAAO,WAAW,OAAQ,WAAW;AAAA,EACzC;AAEO,EAAMA,SAAA,UAAU,YAAYA,QAAO;AAAA,GAL7B;AAeV,MAAM,aAAa,IAAI;AAAA,EAC1B;AAAA,EACA,aAAW;AAAA,EACX,WAAS,QAAQ,OAAO,KAAK;AAAA;AACjC;",
  "names": ["FieldId"]
}
