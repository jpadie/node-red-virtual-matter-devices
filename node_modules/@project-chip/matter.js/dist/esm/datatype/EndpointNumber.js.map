{
  "version": 3,
  "sources": ["../../../src/datatype/EndpointNumber.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt16 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\n\n/**\n * A Endpoint Number is a 16-bit number that that indicates an instance of a device type.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.18.2.11\n */\nexport type EndpointNumber = Branded<number, \"EndpointNumber\">;\n\nexport function EndpointNumber(endpointId: number, validate = true): EndpointNumber {\n    if (!validate || (endpointId >= 0 && endpointId <= 0xfffe)) {\n        return endpointId as EndpointNumber;\n    }\n    throw new ValidationOutOfBoundsError(`EndpointNumber must be between 0 and 0xFFFE, got ${endpointId}`);\n}\n\nexport namespace EndpointNumber {\n    export const isValid = validatorOf(EndpointNumber);\n}\n\n/** Tlv schema for an Endpoint number. */\nexport const TlvEndpointNumber = new TlvWrapper<EndpointNumber, number>(\n    TlvUInt16,\n    endpointNumber => endpointNumber,\n    value => EndpointNumber(value, false), // No automatic validation on decode\n);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,4BAA4B,mBAAmB;AACxD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAUpB,SAAS,eAAe,YAAoB,WAAW,MAAsB;AAChF,MAAI,CAAC,YAAa,cAAc,KAAK,cAAc,OAAS;AACxD,WAAO;AAAA,EACX;AACA,QAAM,IAAI,2BAA2B,oDAAoD,UAAU,EAAE;AACzG;AAAA,CAEO,CAAUA,oBAAV;AACI,EAAMA,gBAAA,UAAU,YAAYA,eAAc;AAAA,GADpC;AAKV,MAAM,oBAAoB,IAAI;AAAA,EACjC;AAAA,EACA,oBAAkB;AAAA,EAClB,WAAS,eAAe,OAAO,KAAK;AAAA;AACxC;",
  "names": ["EndpointNumber"]
}
