{
  "version": 3,
  "sources": ["../../../src/datatype/AttributeId.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ValidationOutOfBoundsError, validatorOf } from \"../common/ValidationError.js\";\nimport { TlvUInt32 } from \"../tlv/TlvNumber.js\";\nimport { TlvWrapper } from \"../tlv/TlvWrapper.js\";\nimport { Branded } from \"../util/Type.js\";\nimport { Mei } from \"./ManufacturerExtensibleIdentifier.js\";\n\n/**\n * An Attribute ID is a 32 bit number and indicates an attribute defined in a cluster specification.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 7.18.2.15\n */\nexport type AttributeId = Branded<number, \"AttributeId\">;\n\nexport function AttributeId(attributeId: number, validate = true): AttributeId {\n    if (!validate) {\n        return attributeId as AttributeId;\n    }\n    if (attributeId >= 0xf000 && attributeId <= 0xfffe) {\n        return attributeId as AttributeId;\n    }\n    const { typeSuffix } = Mei.fromMei(attributeId);\n    if (typeSuffix >= 0x0000 && typeSuffix <= 0x4fff) {\n        return attributeId as AttributeId;\n    }\n    throw new ValidationOutOfBoundsError(`Invalid attribute ID: ${attributeId}`);\n}\n\nexport namespace AttributeId {\n    export const isGlobal = (attributeId: AttributeId | number): boolean => {\n        return attributeId >= 0xf000 && attributeId <= 0xfffe;\n    };\n\n    export const isValid = validatorOf(AttributeId);\n}\n\n/** Tlv schema for an Attribute Id. */\nexport const TlvAttributeId = new TlvWrapper<AttributeId, number>(\n    TlvUInt32,\n    attributeId => attributeId,\n    value => AttributeId(value, false), // No automatic validation on decode\n);\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,4BAA4B,mBAAmB;AACxD,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAE3B,SAAS,WAAW;AASb,SAAS,YAAY,aAAqB,WAAW,MAAmB;AAC3E,MAAI,CAAC,UAAU;AACX,WAAO;AAAA,EACX;AACA,MAAI,eAAe,SAAU,eAAe,OAAQ;AAChD,WAAO;AAAA,EACX;AACA,QAAM,EAAE,WAAW,IAAI,IAAI,QAAQ,WAAW;AAC9C,MAAI,cAAc,KAAU,cAAc,OAAQ;AAC9C,WAAO;AAAA,EACX;AACA,QAAM,IAAI,2BAA2B,yBAAyB,WAAW,EAAE;AAC/E;AAAA,CAEO,CAAUA,iBAAV;AACI,EAAMA,aAAA,WAAW,CAAC,gBAA+C;AACpE,WAAO,eAAe,SAAU,eAAe;AAAA,EACnD;AAEO,EAAMA,aAAA,UAAU,YAAYA,YAAW;AAAA,GALjC;AASV,MAAM,iBAAiB,IAAI;AAAA,EAC9B;AAAA,EACA,iBAAe;AAAA,EACf,WAAS,YAAY,OAAO,KAAK;AAAA;AACrC;",
  "names": ["AttributeId"]
}
