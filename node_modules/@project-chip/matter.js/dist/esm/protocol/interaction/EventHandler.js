/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { EventPriority } from "../../cluster/Cluster.js";
import { resolveEventName } from "../../cluster/ClusterHelper.js";
import { EventNumber } from "../../datatype/EventNumber.js";
import { Logger } from "../../log/Logger.js";
import { Construction } from "../../util/Construction.js";
import { MaybePromise } from "../../util/Promises.js";
const logger = Logger.get("EventHandler");
const MAX_EVENTS = 1e4;
class EventHandler {
  constructor(eventStorage) {
    this.eventStorage = eventStorage;
    this.#construction = Construction(this, async () => {
      this.eventNumber = await this.eventStorage.get("lastEventNumber", this.eventNumber);
      logger.debug(`Set/Restore last event number: ${this.eventNumber}`);
    });
  }
  eventNumber = EventNumber(0);
  storedEventCount = 0;
  events = {
    [EventPriority.Critical]: new Array(),
    [EventPriority.Info]: new Array(),
    [EventPriority.Debug]: new Array()
  };
  #construction;
  get construction() {
    return this.#construction;
  }
  static async create(eventStorage) {
    const handler = new EventHandler(eventStorage);
    await handler.#construction;
    return handler;
  }
  getEvents(eventPath, filters, filterForFabricIndex) {
    const eventFilter = filters !== void 0 && filters.length > 0 ? (event) => filters.some(
      (filter) => filter.eventMin !== void 0 && event.eventNumber >= EventNumber(filter.eventMin)
    ) : () => true;
    const events = new Array();
    const { endpointId, clusterId, eventId } = eventPath;
    for (const priority of [EventPriority.Critical, EventPriority.Info, EventPriority.Debug]) {
      const eventsToCheck = this.events[priority];
      for (const event of eventsToCheck) {
        if (endpointId === event.endpointId && clusterId === event.clusterId && eventId === event.eventId) {
          if (eventFilter(event)) {
            events.push(event);
          }
        }
      }
    }
    logger.debug(
      `Got ${events.length} events for ${resolveEventName(eventPath)} with filters: ${Logger.toJSON(filters)}`
    );
    if (filterForFabricIndex !== void 0) {
      return events.filter(({ data }) => !("fabricIndex" in data) || data.fabricIndex === filterForFabricIndex);
    }
    return events;
  }
  pushEvent(event) {
    const eventData = {
      eventNumber: EventNumber(++this.eventNumber),
      ...event
    };
    logger.debug(`Received event: ${Logger.toJSON(eventData)}`);
    this.events[event.priority].push(eventData);
    this.storedEventCount++;
    const setPromise = this.eventStorage.set("lastEventNumber", this.eventNumber);
    if (MaybePromise.is(setPromise)) {
      return setPromise.then(() => {
        this.cleanUpEvents();
        return eventData;
      });
    }
    this.cleanUpEvents();
    return eventData;
  }
  cleanUpEvents() {
    if (this.storedEventCount < MAX_EVENTS) return;
    const eventsToDelete = this.storedEventCount - MAX_EVENTS;
    for (const priority of [EventPriority.Debug, EventPriority.Info, EventPriority.Critical]) {
      const events = this.events[priority];
      if (events.length > 0) {
        const removedEvents = events.splice(0, events.length - eventsToDelete);
        logger.debug(`Removed ${removedEvents.length} events from priority ${priority}`);
        return;
      }
    }
  }
}
export {
  EventHandler
};
//# sourceMappingURL=EventHandler.js.map
