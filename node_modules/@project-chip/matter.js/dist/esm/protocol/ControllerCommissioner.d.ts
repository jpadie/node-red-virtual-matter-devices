/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { RootCertificateManager } from "../certificate/RootCertificateManager.js";
import { GeneralCommissioning } from "../cluster/definitions/GeneralCommissioningCluster.js";
import { MatterError } from "../common/MatterError.js";
import { NodeId } from "../datatype/NodeId.js";
import { VendorId } from "../datatype/VendorId.js";
import { Fabric } from "../fabric/Fabric.js";
import { InteractionClient } from "./interaction/InteractionClient.js";
/**
 * User specific options for the Commissioning process
 */
export type CommissioningOptions = {
    /** Regulatory Location (Indoor/Outdoor) where the device is used. */
    regulatoryLocation: GeneralCommissioning.RegulatoryLocationType;
    /** Country Code where the device is used. */
    regulatoryCountryCode: string;
    /** Wifi network credentials to commission the device to. */
    wifiNetwork?: {
        wifiSsid: string;
        wifiCredentials: string;
    };
    /** Thread network credentials to commission the device to. */
    threadNetwork?: {
        networkName: string;
        operationalDataset: string;
    };
    nodeId?: NodeId;
};
/** Result code of a single commissioning step. */
declare enum CommissioningStepResultCode {
    Success = 0,
    Failure = 1,
    Skipped = 2
}
/**
 * Result of a single commissioning step
 * Breadcrump value is stored for each step for transparency
 */
type CommissioningStepResult = {
    code: CommissioningStepResultCode;
    breadcrumb: number;
};
/** Error that throws when Commissioning fails and process cannot be continued. */
export declare class CommissioningError extends MatterError {
}
/**
 * Special Error instance used to detect if the commissioning was successfully finished externally and the device is
 * now operational.
 */
export declare class CommissioningSuccessfullyFinished extends MatterError {
}
/**
 * Class to abstract the Device commission flow in a step wise way as defined in Specs. The specs are not 100%
 */
export declare class ControllerCommissioner {
    /** InteractionClient for the initiated PASE session */
    private interactionClient;
    /** CertificateManager of the controller. */
    private readonly certificateManager;
    /** Fabric of the controller. */
    private readonly fabric;
    /** Commissioning options for the commissioning process. */
    private readonly commissioningOptions;
    /** NodeId to assign to the device to commission. */
    private readonly nodeId;
    /** Administrator/Controller VendorId */
    private readonly adminVendorId;
    /**
     * Callback to operative discover and connect to the device and establish a CASE session with the device.
     * The callback should return an InteractionClient to use to finish the commissioning process, or throw one of the following errors:
     * * CommissioningSuccessfullyFinished: This special error can be used to notify that the commissioning completion was done by own logic and the device is now operational. The commissioner will not do any further steps.
     * * CommissioningError: This error will stop the commissioning process in an error state.
     * * other errors: Any other error will be logged and the commissioning process should be restarted.
     */
    private readonly doOperativeDeviceConnectionCallback;
    private readonly commissioningSteps;
    private readonly commissioningStepResults;
    private readonly clusterClients;
    private commissioningStartedTime;
    private commissioningExpiryTime;
    private lastFailSafeTime;
    private lastBreadcrumb;
    private collectedCommissioningData;
    private failSafeTimeMs;
    constructor(
    /** InteractionClient for the initiated PASE session */
    interactionClient: InteractionClient, 
    /** CertificateManager of the controller. */
    certificateManager: RootCertificateManager, 
    /** Fabric of the controller. */
    fabric: Fabric, 
    /** Commissioning options for the commissioning process. */
    commissioningOptions: CommissioningOptions, 
    /** NodeId to assign to the device to commission. */
    nodeId: NodeId, 
    /** Administrator/Controller VendorId */
    adminVendorId: VendorId, 
    /**
     * Callback to operative discover and connect to the device and establish a CASE session with the device.
     * The callback should return an InteractionClient to use to finish the commissioning process, or throw one of the following errors:
     * * CommissioningSuccessfullyFinished: This special error can be used to notify that the commissioning completion was done by own logic and the device is now operational. The commissioner will not do any further steps.
     * * CommissioningError: This error will stop the commissioning process in an error state.
     * * other errors: Any other error will be logged and the commissioning process should be restarted.
     */
    doOperativeDeviceConnectionCallback: () => Promise<InteractionClient>);
    /**
     * Helper method to create ClusterClients. If not feature specific and for the Root Endpoint they are also reused.
     */
    private getClusterClient;
    /**
     * Initialize commissioning steps and add them in the default order
     */
    private initializeCommissioningSteps;
    /**
     * Execute the commissioning process in the defined order. The steps are sorted before execution based on the step
     * number and sub step number.
     * If >50% of the failsafe time has passed, the failsafe timer is re-armed (50% of 60s default are 30s and each
     * action is allowed to take 30s at minimum based on specs).
     */
    executeCommissioning(): Promise<void>;
    private sortSteps;
    private setCommissioningStepResult;
    getCommissioningStepResult(stepNumber: number, subStepNumber: number): CommissioningStepResult | undefined;
    /** Helper method to check for errorCode/debugTest responses and throw error on failure */
    private ensureOperationalCredentialsSuccess;
    /** Helper method to check for errorCode/debugTest responses and throw error on failure */
    private ensureGeneralCommissioningSuccess;
    /**
     * Initial Step to receive some common data used by other steps
     */
    private getInitialData;
    /**
     * Step 3
     * Upon completion of PASE session establishment, the Commissionee SHALL autonomously arm the Fail-safe timer for a
     * timeout of 60 seconds. This is to guard against the Commissioner aborting the Commissioning process without
     * arming the fail-safe, which may leave the device unable to accept additional connections.
     * A Commissioner MAY obtain device information including guidance on the fail-safe value from the Commissionee by
     * reading BasicCommissioningInfo attribute (see Section 11.9.5.2, “BasicCommissioningInfo Attribute”) prior to
     * invoking the ArmFailSafe command.
     */
    private armFailsafe;
    private resetFailsafeTimer;
    /**
     * Step 5 - 1
     * Commissioner SHALL configure regulatory information in the Commissionee if it has at least one instance of
     * Network Commissioning cluster on any endpoint with either the WI (i.e. Wi-Fi) or TH (i.e. Thread) feature flags
     * set in its FeatureMap.
     * The regulatory information is configured using SetRegulatoryConfig (see Section 11.9.6.4,
     * “SetRegulatoryConfig Command”).
     */
    private configureRegulatoryInformation;
    /**
     * Step 5 - 2
     * Commissioner SHOULD configure UTC time, timezone, and DST offset, if the Commissionee supports the time cluster.
     * The order of configuration of this information is not critical. The UTC time is configured using SetUtcTime
     * command (see Section 11.16.9.1, “SetUtcTime Command”) while timezone and DST offset are set through TimeZone
     * (see Section 11.16.8.6, “TimeZone Attribute”) and DstOffset attribute (see Section 11.16.8.7,
     * “DSTOffset Attribute”), respectively.
     */
    private synchronizeTime;
    /**
     * Step 6
     * Commissioner SHALL establish the authenticity of the Commissionee as a certified Matter device (see Section
     * 6.2.3, “Device Attestation Procedure”).
     */
    private deviceAttestation;
    /**
     * Step 7-9
     * 7: Following the Device Attestation Procedure yielding a decision to proceed with commissioning, the Commissioner
     * SHALL request operational CSR from Commissionee using the CSRRequest command (see Section 11.17.6.5,
     * “CSRRequest Command”). The CSRRequest command will cause the generation of a new operational key pair at the
     * Commissionee.
     * 8: Commissioner SHALL generate or otherwise obtain an Operational Certificate containing Operational ID after
     * receiving the CSRResponse command from the Commissionee (see Section 11.17.6.5, “CSRRequest Command”), using
     * implementation-specific means.
     * 9: Commissioner SHALL install operational credentials (see Figure 38, “Node Operational Credentials flow”) on
     * the Commissionee using the AddTrustedRootCertificate and AddNOC commands.
     */
    private certificates;
    /**
     * Step 10
     * Commissioner MAY configure the Access Control List (see Access Control Cluster) on the Commissionee in any way
     * it sees fit, if the singular entry added by the AddNOC command in the previous step granting Administer
     * privilege over CASE authentication type for the Node ID provided with the command is not sufficient to express
     * its desired access control policies.
     */
    private configureAccessControlLists;
    /**
     * Step 11-12
     * 11: If the Commissionee both supports it and requires it, the Commissioner SHALL configure the operational network
     * at the Commissionee using commands such as AddOrUpdateWiFiNetwork (see Section 11.8.7.3, “AddOrUpdateWiFiNetwork
     * Command”) and AddOrUpdateThreadNetwork (see Section 11.8.7.4, “AddOrUpdateThreadNetwork Command”).
     * A Commissionee requires network commissioning if it is not already on the desired operational network.
     * A Commissionee supports network commissioning if it has any NetworkCommissioning cluster instances.
     * A Commissioner MAY learn about the networks visible to the Commissionee using ScanNetworks command
     * (see Section 11.8.7.1, “ScanNetworks Command”).
     * 12: The Commissioner SHALL trigger the Commissionee to connect to the operational network using ConnectNetwork
     * command (see Section 11.8.7.9, “ConnectNetwork Command”) unless the Commissionee is already on the desired operational network.
     */
    private validateNetwork;
    private configureNetworkWifi;
    private configureNetworkThread;
    /**
     * Step 13-14
     * 13: Finalization of the Commissioning process begins. An Administrator configured in the ACL of the Commissionee
     * by the Commissioner SHALL use Operational Discovery to discover the Commissionee. This Administrator MAY be
     * the Commissioner itself, or another Node to which the Commissioner has delegated the task.
     * 14: The Administrator SHALL open a CASE (see Section 4.13.2, “Certificate Authenticated Session Establishment
     * (CASE)”) session with the Commissionee over the operational network.
     *
     */
    private reconnectWithDevice;
    /**
     * Step 15
     * The Administrator having established a CASE session with the Commissionee over the operational network in the
     * previous steps SHALL invoke the CommissioningComplete command (see Section 11.9.6.6,
     * “CommissioningComplete Command”). A success response after invocation of the CommissioningComplete command ends
     * the commissioning process.
     */
    private completeCommissioning;
}
export {};
//# sourceMappingURL=ControllerCommissioner.d.ts.map