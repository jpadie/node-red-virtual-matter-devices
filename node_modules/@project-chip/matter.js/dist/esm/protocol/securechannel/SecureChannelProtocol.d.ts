/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Message } from "../../codec/MessageCodec.js";
import { MessageExchange } from "../../protocol/MessageExchange.js";
import { ProtocolHandler } from "../../protocol/ProtocolHandler.js";
import { PaseServer } from "../../session/pase/PaseServer.js";
export declare class StatusReportOnlySecureChannelProtocol implements ProtocolHandler<any> {
    getId(): number;
    onNewExchange(exchange: MessageExchange<any>, message: Message): Promise<void>;
    handleInitialStatusReport(exchange: MessageExchange<any>, message: Message): Promise<void>;
    close(): Promise<void>;
}
export declare class SecureChannelProtocol extends StatusReportOnlySecureChannelProtocol {
    private commissioningCancelledCallback;
    private paseCommissioner;
    private readonly caseCommissioner;
    constructor(commissioningCancelledCallback: () => Promise<void>);
    setPaseCommissioner(paseServer: PaseServer): void;
    removePaseCommissioner(): void;
    onNewExchange(exchange: MessageExchange<any>, message: Message): Promise<void>;
    static isStandaloneAck(protocolId: number, messageType: number): boolean;
}
//# sourceMappingURL=SecureChannelProtocol.d.ts.map