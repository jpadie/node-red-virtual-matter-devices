{
  "version": 3,
  "sources": ["../../../../src/protocol/securechannel/SecureChannelMessages.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const SECURE_CHANNEL_PROTOCOL_ID = 0x0000;\n\nexport enum MessageType {\n    /**\n     * The Message Counter Synchronization Request message queries the current message counter from a peer to bootstrap\n     * replay protection.\n     */\n    MsgCounterSyncReq = 0x00,\n\n    /**\n     * The Message Counter Synchronization Response message provides the current message counter from a peer to\n     * bootstrap replay protection.\n     */\n    MsgCounterSyncRsp = 0x01,\n\n    /**\n     * This message is dedicated for the purpose of sending a stand-alone acknowledgement when there is no other data\n     * message available to piggyback an acknowledgement on top of.\n     */\n    StandaloneAck = 0x10,\n\n    /** The request for PBKDF parameters necessary to complete the PASE protocol. */\n    PbkdfParamRequest = 0x20,\n\n    /** The PBKDF parameters sent in response to PBKDFParamRequest during the PASE protocol. */\n    PbkdfParamResponse = 0x21,\n\n    /** The first PAKE message of the PASE protocol. */\n    PasePake1 = 0x22,\n\n    /** The second PAKE message of the PASE protocol. */\n    PasePake2 = 0x23,\n\n    /** The third PAKE message of the PASE protocol. */\n    PasePake3 = 0x24,\n\n    /** The first message of the CASE protocol. */\n    Sigma1 = 0x30,\n\n    /** The second message of the CASE protocol. */\n    Sigma2 = 0x31,\n\n    /** The third message of the CASE protocol. */\n    Sigma3 = 0x32,\n\n    /** The second resumption message of the CASE protocol. */\n    Sigma2Resume = 0x33,\n\n    /** The Status Report message encodes the result of an operation in the Secure Channel as well as other protocols. */\n    StatusReport = 0x40,\n\n    /** The Check-in message notifies a client that the ICD is available for communication. */\n    IcdCheckInMessage = 0x50,\n}\n\nexport enum ProtocolStatusCode {\n    /** Indication that the last session establishment message was successfully processed. */\n    Success = 0x0000,\n\n    /** Failure to find a common set of shared roots. */\n    NoSharedTrustRoots = 0x0001,\n\n    /** Generic failure during session establishment. */\n    InvalidParam = 0x0002,\n\n    /** Indication that the sender will close the current session. See Section \u201CCloseSession\u201D for more details. */\n    CloseSession = 0x0003,\n\n    /** Indication that the sender cannot currently fulfill the request. See Section \u201CBusy\u201D for more details. */\n    Busy = 0x0004,\n}\n\nexport enum GeneralStatusCode {\n    /** Operation completed successfully. */\n    Success = 0,\n\n    /** Generic failure, additional details may be included in the protocol specific status. */\n    Failure = 1,\n\n    /** Operation was rejected by the system because the system is in an invalid state. */\n    BadPrecondition = 2,\n\n    /** A value was out of a required range */\n    OutOfRange = 3,\n\n    /** A request was unrecognized or malformed */\n    BadRequest = 4,\n\n    /** An unrecognized or unsupported request was received. */\n    Unsupported = 5,\n\n    /** A request was not expected at this time. */\n    Unexpected = 6,\n\n    /** Insufficient resources to process the given request. */\n    ResourceExhausted = 7,\n\n    /** Device is busy and cannot handle this request at this time. */\n    Busy = 8,\n\n    /** A timeout occurred. */\n    Timeout = 9,\n\n    /** Context-specific signal to proceed */\n    Continue = 10,\n\n    /** Failure, may be due to a concurrency error. */\n    Aborted = 11,\n\n    /** An invalid/unsupported argument was provided. */\n    InvalidArgument = 12,\n\n    /** Some requested entity was not found. */\n    NotFound = 13,\n\n    /** The sender attempted to create something that already exists. */\n    AlreadyExists = 14,\n\n    /** The sender does not have sufficient permissions to execute the requested operations. */\n    PermissionDenied = 15,\n\n    /** Unrecoverable data loss or corruption has occurred. */\n    DataLoss = 16,\n\n    /** Message size is larger than the recipient can handle. */\n    MessageTooLarge = 17,\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMO,MAAM,6BAA6B;AAEnC,IAAK,cAAL,kBAAKA,iBAAL;AAKH,EAAAA,0BAAA,uBAAoB,KAApB;AAMA,EAAAA,0BAAA,uBAAoB,KAApB;AAMA,EAAAA,0BAAA,mBAAgB,MAAhB;AAGA,EAAAA,0BAAA,uBAAoB,MAApB;AAGA,EAAAA,0BAAA,wBAAqB,MAArB;AAGA,EAAAA,0BAAA,eAAY,MAAZ;AAGA,EAAAA,0BAAA,eAAY,MAAZ;AAGA,EAAAA,0BAAA,eAAY,MAAZ;AAGA,EAAAA,0BAAA,YAAS,MAAT;AAGA,EAAAA,0BAAA,YAAS,MAAT;AAGA,EAAAA,0BAAA,YAAS,MAAT;AAGA,EAAAA,0BAAA,kBAAe,MAAf;AAGA,EAAAA,0BAAA,kBAAe,MAAf;AAGA,EAAAA,0BAAA,uBAAoB,MAApB;AAlDQ,SAAAA;AAAA,GAAA;AAqDL,IAAK,qBAAL,kBAAKC,wBAAL;AAEH,EAAAA,wCAAA,aAAU,KAAV;AAGA,EAAAA,wCAAA,wBAAqB,KAArB;AAGA,EAAAA,wCAAA,kBAAe,KAAf;AAGA,EAAAA,wCAAA,kBAAe,KAAf;AAGA,EAAAA,wCAAA,UAAO,KAAP;AAdQ,SAAAA;AAAA,GAAA;AAiBL,IAAK,oBAAL,kBAAKC,uBAAL;AAEH,EAAAA,sCAAA,aAAU,KAAV;AAGA,EAAAA,sCAAA,aAAU,KAAV;AAGA,EAAAA,sCAAA,qBAAkB,KAAlB;AAGA,EAAAA,sCAAA,gBAAa,KAAb;AAGA,EAAAA,sCAAA,gBAAa,KAAb;AAGA,EAAAA,sCAAA,iBAAc,KAAd;AAGA,EAAAA,sCAAA,gBAAa,KAAb;AAGA,EAAAA,sCAAA,uBAAoB,KAApB;AAGA,EAAAA,sCAAA,UAAO,KAAP;AAGA,EAAAA,sCAAA,aAAU,KAAV;AAGA,EAAAA,sCAAA,cAAW,MAAX;AAGA,EAAAA,sCAAA,aAAU,MAAV;AAGA,EAAAA,sCAAA,qBAAkB,MAAlB;AAGA,EAAAA,sCAAA,cAAW,MAAX;AAGA,EAAAA,sCAAA,mBAAgB,MAAhB;AAGA,EAAAA,sCAAA,sBAAmB,MAAnB;AAGA,EAAAA,sCAAA,cAAW,MAAX;AAGA,EAAAA,sCAAA,qBAAkB,MAAlB;AArDQ,SAAAA;AAAA,GAAA;",
  "names": ["MessageType", "ProtocolStatusCode", "GeneralStatusCode"]
}
