{
  "version": 3,
  "sources": ["../../../src/common/InstanceBroadcaster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ProductDescription } from \"../behavior/system/product-description/ProductDescription.js\";\nimport { VendorId } from \"../datatype/VendorId.js\";\nimport { Fabric } from \"../fabric/Fabric.js\";\nimport { BitFlag, BitmapSchema, TypeFromPartialBitSchema } from \"../schema/BitmapSchema.js\";\n\nexport const PairingHintBitmap = {\n    /**\n     * The Device will automatically enter Commissioning Mode upon power cycle (unplug/re- plug, remove/re-insert\n     * batteries). This bit SHALL be set to 1 for devices using Standard Commissioning Flow, and set to 0 otherwise.\n     */\n    powerCycle: BitFlag(0),\n\n    /**\n     * This SHALL be set to 1 for devices requiring Custom Commissioning Flow before they can be available for\n     * Commissioning by any Commissioner. For such a flow, the user SHOULD be sent to the URL specified in the\n     * CommissioningCustomFlowUrl of the DeviceModel schema entry indexed by the Vendor ID and Product ID (e.g., as\n     * found in the announcement) in the Distributed Compliance Ledger.\n     */\n    deviceManufacturerUrl: BitFlag(1),\n\n    /**\n     * The Device has been commissioned. Any Administrator that commissioned the device provides a user interface that\n     * may be used to put the device into Commissioning Mode.\n     */\n    administrator: BitFlag(2),\n\n    /**\n     * The settings menu on the Device provides instructions to put it into Commissioning Mode.\n     */\n    settingsMenuOnNode: BitFlag(3),\n\n    /**\n     * The PI key/value pair describes a custom way to put the Device into Commissioning Mode. This Custom Instruction\n     * option is NOT recommended for use by a Device that does not have knowledge of the user\u2019s language preference.\n     */\n    customInstruction: BitFlag(4),\n\n    /**\n     * The Device Manual provides special instructions to put the Device into Commissioning Mode (see Section 11.22.5.8,\n     * \u201CUserManualUrl\u201D). This is a catch-all option to capture user interactions that are not codified by other options\n     * in this table.\n     */\n    deviceManual: BitFlag(5),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed.\n     */\n    pressResetButton: BitFlag(6),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed when applying power to it.\n     */\n    pressResetButtonWithApplicationOfPower: BitFlag(7),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed for N seconds. The exact value of N SHALL\n     * be made available via PI key.\n     */\n    pressRestButtonForNumberOfSeconds: BitFlag(8),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed until associated light blinks.\n     * Information on color of light MAY be made available via PI key (see Note 1).\n     */\n    pressResetButtonUntilLightBlinks: BitFlag(9),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed for N seconds when applying power to it.\n     * The exact value of N SHALL be made available via PI key.\n     */\n    pressResetButtonForNumberOfSecondsWithApplicationOfPower: BitFlag(10),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed until associated light blinks when\n     * applying power to the Device. Information on color of light MAY be made available via PI key (see Note 1).\n     */\n    pressResetButtonUntilLightBlinksWithApplicationOfPower: BitFlag(11),\n\n    /**\n     * The Device will enter Commissioning Mode when reset button is pressed N times with maximum 1 second between each\n     * press. The exact value of N SHALL be made available via PI key.\n     */\n    pressResetButtonNumberOfTimes: BitFlag(12),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed.\n     */\n    pressSetupButton: BitFlag(13),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed when applying power to it.\n     */\n    pressSetupButtonWithApplicationOfPower: BitFlag(14),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed for N seconds. The exact value of N SHALL\n     * be made available via PI key.\n     */\n    pressSetupButtonForNumberOfSeconds: BitFlag(15),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed until associated light blinks.\n     * Information on color of light MAY be made available via PI key (see Note 1).\n     */\n    pressSetupButtonUntilLightBlinks: BitFlag(16),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed for N seconds when applying power to it.\n     * The exact value of N SHALL be made available via PI key.\n     */\n    pressSetupButtonForNumberOfSecondsWithApplicationOfPower: BitFlag(17),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed until associated light blinks when\n     * applying power to the Device. Information on color of light MAY be made available via PI key (see Note 1).\n     */\n    pressSetupButtonUntilLightBlinksWithApplicationOfPower: BitFlag(18),\n\n    /**\n     * The Device will enter Commissioning Mode when setup button is pressed N times with maximum 1 second between each\n     * press. The exact value of N SHALL be made available via PI key.\n     */\n    pressSetupButtonNumberOfTimes: BitFlag(19),\n};\n\nexport const PairingHintBitmapSchema = BitmapSchema(PairingHintBitmap);\n\nexport interface CommissioningModeInstanceData extends ProductDescription {\n    /** Device discriminator for commissionable announcements. */\n    discriminator: number;\n\n    /** Session Idle Interval of the device for commissionable announcements. */\n    sessionIdleInterval?: number;\n\n    /** Session Active Interval of the device for commissionable announcements. */\n    sessionActiveInterval?: number;\n\n    /** Duration of time the node should stay Active after the last network activity. **/\n    sessionActiveThreshold?: number;\n\n    /** Pairing Hint of the device for commissionable announcements. */\n    pairingHint?: TypeFromPartialBitSchema<typeof PairingHintBitmap>;\n\n    /** Pairing Instruction of the device for commissionable announcements. */\n    pairingInstructions?: string;\n}\n\nexport type CommissionerInstanceData = {\n    /** Device name for commissionable announcements. */\n    deviceName: string;\n\n    /** Device type for commissionable announcements. */\n    vendorId: VendorId;\n\n    /** Vendor ID for commissionable announcements. */\n    productId: number;\n\n    /** Device type for commissionable announcements. */\n    deviceType?: number;\n\n    /** Session Idle Interval of the device for commissionable announcements. */\n    sessionIdleInterval?: number;\n\n    /** Session Active Interval of the device for commissionable announcements. */\n    sessionActiveInterval?: number;\n\n    /** This key defines the duration of time the node stays Active after the last network activity. **/\n    sessionActiveThreshold?: number;\n};\n\nexport type OperationalInstanceData = {\n    /** Session Idle Interval of the device for operational announcements. */\n    sessionIdleInterval?: number;\n\n    /** Session Active Interval of the device for operational announcements. */\n    sessionActiveInterval?: number;\n\n    /** This key defines the duration of time the node stays Active after the last network activity. **/\n    sessionActiveThreshold?: number;\n};\n\n/** Interface for classes that allow to announce one Matter instance. */\nexport interface InstanceBroadcaster {\n    /** Set a commissionable mode and details to announce a commissionable device. */\n    setCommissionMode(mode: number, deviceData: CommissioningModeInstanceData): Promise<void>;\n\n    /**\n     * Set operational details to Announce an operational device which is already commissioned.\n     * Use expireCommissioningAnnouncements = true when Fabrics are changed after a n commissioning process.\n     */\n    setFabrics(fabrics: Fabric[], expireCommissioningAnnouncements?: boolean): Promise<void>;\n\n    /** Set commissioner details to announce a commissioner service for User directed commissioning (UDC). */\n    setCommissionerInfo(commissionerData: CommissionerInstanceData): Promise<void>;\n\n    /** Send out announcements for this instance. */\n    announce(): Promise<void>;\n\n    /** Expire the announcement for this operative instance. */\n    expireFabricAnnouncement(): Promise<void>;\n\n    /** Expire the announcement for this commissioning instance. */\n    expireCommissioningAnnouncement(): Promise<void>;\n\n    /** Expire all announcements. */\n    expireAllAnnouncements(): Promise<void>;\n\n    /** Destroy the instance */\n    close(): Promise<void>;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,SAAS,oBAA8C;AAEzD,MAAM,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAK7B,YAAY,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,uBAAuB,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,eAAe,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,EAKxB,oBAAoB,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,mBAAmB,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO5B,cAAc,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,EAKvB,kBAAkB,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA,EAK3B,wCAAwC,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjD,mCAAmC,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5C,kCAAkC,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3C,0DAA0D,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpE,wDAAwD,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlE,+BAA+B,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA,EAKzC,kBAAkB,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA,EAK5B,wCAAwC,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlD,oCAAoC,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9C,kCAAkC,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5C,0DAA0D,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpE,wDAAwD,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlE,+BAA+B,QAAQ,EAAE;AAC7C;AAEO,MAAM,0BAA0B,aAAa,iBAAiB;",
  "names": []
}
