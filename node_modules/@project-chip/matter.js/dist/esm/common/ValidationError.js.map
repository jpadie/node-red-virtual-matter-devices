{
  "version": 3,
  "sources": ["../../../src/common/ValidationError.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StatusCode, StatusResponseError } from \"../protocol/interaction/StatusCode.js\";\n\n/**\n * Base class for validation errors and used when Data validation fails. Please check the provided data.\n * We encode this as StatusResponseError that returns a ConstrainError which is suitable for most\n * \"invalid/out-of-bounds values\" cases. If you can use any of the more detailed errors derived from this class please\n * do so!\n */\nexport class ValidationError extends StatusResponseError {\n    public constructor(\n        message: string,\n        public fieldName?: string,\n        errorCode = StatusCode.ConstraintError,\n    ) {\n        super(message, errorCode);\n\n        this.message = `(${this.constructor.name}/${this.code}) ${message}`;\n    }\n}\n\n/** Validation error that is thrown when a value is out of bounds, but datatype and such is correct. */\nexport class ValidationOutOfBoundsError extends ValidationError {}\n\n/**\n * Validation error that is thrown when a value is of the wrong datatype. This is a more specific version of the\n * ValidationError class and returns an InvalidAction error.\n */\nexport class ValidationDatatypeMismatchError extends ValidationError {\n    public constructor(message: string, fieldName?: string) {\n        super(message, fieldName, StatusCode.InvalidAction);\n    }\n}\n\n/**\n * Validation error that is thrown when a mandatory field is missing. This is a more specific version of the\n * ValidationError class and returns an InvalidAction error.\n */\nexport class ValidationMandatoryFieldMissingError extends ValidationError {\n    public constructor(message: string, fieldName?: string) {\n        super(message, fieldName, StatusCode.InvalidAction);\n    }\n}\n\n/**\n * Convert a function that may throw a ValidationError into a boolean predicate.\n */\nexport function validatorOf<A extends any[]>(test: (...a: A) => void) {\n    return (...a: A) => {\n        try {\n            test(...a);\n            return true;\n        } catch (e) {\n            ValidationError.accept(e);\n            return false;\n        }\n    };\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,YAAY,2BAA2B;AAQzC,MAAM,wBAAwB,oBAAoB;AAAA,EAC9C,YACH,SACO,WACP,YAAY,WAAW,iBACzB;AACE,UAAM,SAAS,SAAS;AAHjB;AAKP,SAAK,UAAU,IAAI,KAAK,YAAY,IAAI,IAAI,KAAK,IAAI,KAAK,OAAO;AAAA,EACrE;AACJ;AAGO,MAAM,mCAAmC,gBAAgB;AAAC;AAM1D,MAAM,wCAAwC,gBAAgB;AAAA,EAC1D,YAAY,SAAiB,WAAoB;AACpD,UAAM,SAAS,WAAW,WAAW,aAAa;AAAA,EACtD;AACJ;AAMO,MAAM,6CAA6C,gBAAgB;AAAA,EAC/D,YAAY,SAAiB,WAAoB;AACpD,UAAM,SAAS,WAAW,WAAW,aAAa;AAAA,EACtD;AACJ;AAKO,SAAS,YAA6B,MAAyB;AAClE,SAAO,IAAI,MAAS;AAChB,QAAI;AACA,WAAK,GAAG,CAAC;AACT,aAAO;AAAA,IACX,SAAS,GAAG;AACR,sBAAgB,OAAO,CAAC;AACxB,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;",
  "names": []
}
