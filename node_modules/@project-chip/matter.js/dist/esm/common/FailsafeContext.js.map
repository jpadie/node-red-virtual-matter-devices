{
  "version": 3,
  "sources": ["../../../src/common/FailsafeContext.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type { MatterDevice } from \"../MatterDevice.js\";\nimport { CaseAuthenticatedTag } from \"../datatype/CaseAuthenticatedTag.js\";\nimport { NodeId } from \"../datatype/NodeId.js\";\nimport { VendorId } from \"../datatype/VendorId.js\";\nimport { Fabric, FabricBuilder } from \"../fabric/Fabric.js\";\nimport { FabricManager } from \"../fabric/FabricManager.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { SecureSession } from \"../session/SecureSession.js\";\nimport { SessionManager } from \"../session/SessionManager.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { Construction } from \"../util/Construction.js\";\nimport { AsyncObservable } from \"../util/Observable.js\";\nimport { FailsafeTimer, MatterFabricConflictError } from \"./FailsafeTimer.js\";\nimport { MatterFlowError, UnexpectedDataError } from \"./MatterError.js\";\nimport { ValidationError } from \"./ValidationError.js\";\n\nconst logger = Logger.get(\"FailsafeContext\");\n\nexport class MatterFabricInvalidAdminSubjectError extends MatterFlowError {}\n\n/**\n * A \"timed operation\" is a command or sequence of commands that operate with a failsafe timer that will abort the\n * operation if it does not complete within a specific window.\n *\n * FailsafeContext maintains the failsafe timer and tracks information required to rollback state if the operation\n * aborts.\n *\n * Timed operations are exclusive for a node.\n */\nexport abstract class FailsafeContext {\n    #sessions: SessionManager<MatterDevice>;\n    #fabrics: FabricManager;\n    #failsafe?: FailsafeTimer;\n    #construction: Construction<FailsafeContext>;\n    #associatedFabric?: Fabric;\n    #csrSessionId?: number;\n    #forUpdateNoc?: boolean;\n    #fabricBuilder = new FabricBuilder();\n\n    #commissioned = AsyncObservable<[], void>();\n\n    constructor(options: FailsafeContext.Options) {\n        const { expiryLengthSeconds, associatedFabric, maxCumulativeFailsafeSeconds } = options;\n\n        this.#sessions = options.sessions;\n        this.#fabrics = options.fabrics;\n        this.#associatedFabric = options.associatedFabric;\n\n        this.#construction = Construction(this, async () => {\n            // Ensure derived class construction is complete\n            await Promise.resolve();\n\n            await this.storeEndpointState();\n\n            // If ExpiryLengthSeconds is non-zero and the fail-safe timer was not currently armed, then the fail-safe\n            // timer SHALL be armed for that duration.\n            this.#failsafe = new FailsafeTimer(\n                associatedFabric,\n                expiryLengthSeconds,\n                maxCumulativeFailsafeSeconds,\n                () => this.#failSafeExpired(),\n            );\n            logger.debug(`Arm failSafe timer for ${expiryLengthSeconds}s.`);\n        });\n    }\n\n    async extend(fabric: Fabric | undefined, expiryLengthSeconds: number) {\n        await this.#construction;\n        await this.#failsafe?.reArm(fabric, expiryLengthSeconds);\n        if (expiryLengthSeconds > 0) {\n            logger.debug(`Extend failSafe timer for ${expiryLengthSeconds}s.`);\n        }\n    }\n\n    get fabricIndex() {\n        return this.#fabricBuilder.fabricIndex;\n    }\n\n    get construction() {\n        return this.#construction;\n    }\n\n    get commissioned() {\n        return this.#commissioned;\n    }\n\n    get associatedFabric() {\n        return this.#associatedFabric;\n    }\n\n    get csrSessionId() {\n        return this.#csrSessionId;\n    }\n\n    get forUpdateNoc() {\n        return this.#forUpdateNoc;\n    }\n\n    get hasRootCert() {\n        return this.#fabricBuilder.hasRootCert();\n    }\n\n    get rootCert() {\n        return this.#fabricBuilder.rootCert;\n    }\n\n    async completeCommission() {\n        // 1. The Fail-Safe timer associated with the current Fail-Safe context SHALL be disarmed.\n        if (this.#failsafe === undefined) {\n            throw new MatterFlowError(\"armFailSafe should be called first!\"); // TODO\n        }\n        this.#failsafe.complete();\n\n        if (this.fabricIndex !== undefined) {\n            await this.#fabrics.persistFabrics();\n        }\n\n        this.#failsafe = undefined;\n\n        // 2. The commissioning window at the Server SHALL be closed.\n        await this.commissioned.emit();\n\n        // TODO 3. Any temporary administrative privileges automatically granted to any open PASE session SHALL be revoked (see Section 6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D).\n\n        // 4. The Secure Session Context of any PASE session still established at the Server SHALL be cleared.\n        await this.removePaseSession();\n\n        await this.close();\n    }\n\n    getFailSafeContext() {\n        if (this.#failsafe === undefined) throw new MatterFlowError(\"armFailSafe should be called first!\");\n        return this.#failsafe;\n    }\n\n    getNextFabricIndex() {\n        return this.#fabrics.getNextFabricIndex();\n    }\n\n    async addFabric(fabric: Fabric) {\n        this.#fabrics.addFabric(fabric);\n        if (this.#failsafe !== undefined) {\n            this.#associatedFabric = this.#failsafe.associatedFabric = fabric;\n        }\n        return fabric.fabricIndex;\n    }\n\n    async updateFabric(fabric: Fabric) {\n        await this.#fabrics.updateFabric(fabric);\n        await this.#sessions.updateFabricForResumptionRecords(fabric);\n    }\n\n    /**\n     * Handles a CSR from OperationalCredentials cluster and stores additional internal information for further\n     * validity checks.\n     */\n    createCertificateSigningRequest(isForUpdateNoc: boolean, sessionId: number) {\n        if (this.#fabrics.findByKeypair(this.#fabricBuilder.keyPair)) {\n            throw new MatterFlowError(\"Key pair already exists.\"); // becomes Failure as StateResponse\n        }\n\n        const result = this.#fabricBuilder.createCertificateSigningRequest();\n        this.#csrSessionId = sessionId;\n        this.#forUpdateNoc = isForUpdateNoc;\n        return result;\n    }\n\n    async removePaseSession() {\n        const session = this.#sessions.getPaseSession();\n        if (session) {\n            await session.close(true);\n        }\n    }\n\n    async close() {\n        await this.#construction;\n        await this.#construction.close(async () => {\n            if (this.#failsafe) {\n                await this.#failsafe.close();\n                this.#failsafe = undefined;\n                await this.rollback();\n            }\n        });\n    }\n\n    /** Handles adding a trusted root certificate from Operational Credentials cluster. */\n    setRootCert(rootCert: ByteArray) {\n        this.#fabricBuilder.setRootCert(rootCert);\n    }\n\n    /**\n     * Build a new Fabric object based on an existing fabric for the \"UpdateNoc\" case of the Operational Credentials\n     * cluster.\n     */\n    async buildUpdatedFabric(nocValue: ByteArray, icacValue: ByteArray | undefined) {\n        if (this.associatedFabric === undefined) {\n            throw new MatterFlowError(\"No fabric associated with failsafe context, but we prepare an Fabric update.\");\n        }\n        this.#fabricBuilder.initializeFromFabricForUpdate(this.associatedFabric);\n        this.#fabricBuilder.setOperationalCert(nocValue, icacValue);\n        return await this.#fabricBuilder.build(this.associatedFabric.fabricIndex);\n    }\n\n    /** Build a new Fabric object for a new fabric for the \"AddNoc\" case of the Operational Credentials cluster. */\n    async buildFabric(nocData: {\n        nocValue: ByteArray;\n        icacValue: ByteArray | undefined;\n        adminVendorId: VendorId;\n        ipkValue: ByteArray;\n        caseAdminSubject: NodeId;\n    }) {\n        const builder = this.#fabricBuilder;\n\n        const { nocValue, icacValue, adminVendorId, ipkValue, caseAdminSubject } = nocData;\n\n        // Handle error if the CaseAdminSubject field is not a valid ACL subject in the context of AuthMode set to CASE\n        if (!NodeId.isOperationalNodeId(caseAdminSubject) && !NodeId.isCaseAuthenticatedTag(caseAdminSubject)) {\n            try {\n                if (CaseAuthenticatedTag.getVersion(NodeId.extractAsCaseAuthenticatedTag(caseAdminSubject)) === 0) {\n                    throw new MatterFabricInvalidAdminSubjectError();\n                }\n            } catch (error) {\n                // Validation error can happen when parsing the CaseAuthenticatedTag, then it is invalid too\n                if (error instanceof ValidationError || error instanceof UnexpectedDataError) {\n                    throw new MatterFabricInvalidAdminSubjectError();\n                } else {\n                    throw error;\n                }\n            }\n        }\n\n        builder.setOperationalCert(nocValue, icacValue);\n        const fabricAlreadyExisting = this.#fabrics.getFabrics().find(fabric => builder.matchesToFabric(fabric));\n\n        if (fabricAlreadyExisting) {\n            throw new MatterFabricConflictError(\n                `Fabric with Id ${builder.fabricId} and Node Id ${builder.nodeId} already exists.`,\n            );\n        }\n\n        return builder\n            .setRootVendorId(adminVendorId)\n            .setIdentityProtectionKey(ipkValue)\n            .setRootNodeId(caseAdminSubject)\n            .build(this.#fabrics.getNextFabricIndex());\n    }\n\n    async #failSafeExpired() {\n        logger.info(\"Failsafe timer expired, Reset fabric builder.\");\n\n        await this.close();\n    }\n\n    protected async rollback() {\n        if (this.fabricIndex !== undefined && !this.#forUpdateNoc) {\n            logger.debug(`Revoking fabric with index ${this.fabricIndex}`);\n            await this.#fabrics.revokeFabric(this.fabricIndex);\n        }\n\n        // On expiry of the fail-safe timer, the following actions SHALL be performed in order:\n        // 1. Terminate any open PASE secure session by clearing any associated Secure Session Context at the Server.\n        await this.removePaseSession();\n\n        // TODO 2. Revoke the temporary administrative privileges granted to any open PASE session (see Section 6.6.2.8, \u201CBootstrapping of the Access Control Cluster\u201D) at the Server.\n\n        // 3. If an AddNOC or UpdateNOC command has been successfully invoked, terminate all CASE sessions associated with the Fabric whose Fabric Index is recorded in the Fail-Safe context (see Section 11.9.6.2, \u201CArmFailSafe Command\u201D) by clearing any associated Secure Session Context at the Server.\n        let fabric: Fabric | undefined = undefined;\n        if (this.fabricIndex !== undefined) {\n            const fabricIndex = this.fabricIndex;\n            fabric = this.#fabrics.getFabrics().find(fabric => fabric.fabricIndex === fabricIndex);\n            if (fabric !== undefined) {\n                const session = this.#sessions.getSessionForNode(fabric, fabric.rootNodeId);\n                if (session !== undefined && session.isSecure) {\n                    await (session as SecureSession<any>).close(false);\n                }\n            }\n        }\n\n        // 4. Reset the configuration of all Network Commissioning Networks attribute to their state prior to the\n        //    Fail-Safe being armed.\n        await this.restoreNetworkState();\n\n        // 5. If an UpdateNOC command had been successfully invoked, revert the state of operational key pair, NOC and\n        //    ICAC for that Fabric to the state prior to the Fail-Safe timer being armed, for the Fabric Index that was\n        //    the subject of the UpdateNOC command.\n        if (this.#forUpdateNoc && this.associatedFabric !== undefined) {\n            // update FabricManager and Resumption records but leave current session intact\n            await this.restoreFabric(this.associatedFabric);\n        }\n\n        // 6. If an AddNOC command had been successfully invoked, achieve the equivalent effect of invoking the RemoveFabric command against the Fabric Index stored in the Fail-Safe Context for the Fabric Index that was the subject of the AddNOC command. This SHALL remove all associations to that Fabric including all fabric-scoped data, and MAY possibly factory-reset the device depending on current device state. This SHALL only apply to Fabrics added during the fail-safe period as the result of the AddNOC command.\n        // 7. Remove any RCACs added by the AddTrustedRootCertificate command that are not currently referenced by any entry in the Fabrics attribute.\n        if (!this.#forUpdateNoc && fabric !== undefined) {\n            const fabricIndex = this.fabricIndex;\n            if (fabricIndex !== undefined) {\n                const fabric = this.#fabrics.getFabrics().find(fabric => fabric.fabricIndex === fabricIndex);\n                if (fabric !== undefined) {\n                    await this.revokeFabric(fabric);\n                }\n            }\n        }\n\n        // 8. Reset the Breadcrumb attribute to zero.\n        await this.restoreBreadcrumb();\n\n        // TODO 9. Optionally: if no factory-reset resulted from the previous steps, it is RECOMMENDED that the\n        //  Node rollback the state of all non fabric-scoped data present in the Fail-Safe context.\n        //  In theory happens automatically by revoking last fabric\n    }\n\n    abstract storeEndpointState(): Promise<void>;\n\n    /** Restore Cluster data when the FailSafe context expired. */\n    abstract restoreNetworkState(): Promise<void>;\n\n    async restoreFabric(fabric: Fabric) {\n        await this.updateFabric(fabric);\n    }\n\n    abstract revokeFabric(fabric: Fabric): Promise<void>;\n\n    abstract restoreBreadcrumb(): Promise<void>;\n}\n\nexport namespace FailsafeContext {\n    export interface Options {\n        sessions: SessionManager<MatterDevice>;\n        fabrics: FabricManager;\n        expiryLengthSeconds: number;\n        maxCumulativeFailsafeSeconds: number;\n        associatedFabric: Fabric | undefined;\n    }\n}\n"],
  "mappings": "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",
  "names": ["fabric"]
}
