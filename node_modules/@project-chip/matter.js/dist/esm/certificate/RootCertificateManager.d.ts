/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { BinaryKeyPair } from "../crypto/Key.js";
import { CaseAuthenticatedTag } from "../datatype/CaseAuthenticatedTag.js";
import { FabricId } from "../datatype/FabricId.js";
import { NodeId } from "../datatype/NodeId.js";
import { StorageContext } from "../storage/StorageContext.js";
import { ByteArray } from "../util/ByteArray.js";
import { Construction } from "../util/Construction.js";
export declare class RootCertificateManager {
    #private;
    private rootCertId;
    private rootKeyPair;
    private rootKeyIdentifier;
    private rootCertBytes;
    private nextCertificateId;
    get construction(): Construction<RootCertificateManager>;
    static create(options: StorageContext | RootCertificateManager.Data): Promise<RootCertificateManager>;
    constructor(options: StorageContext | RootCertificateManager.Data);
    get rootCert(): Uint8Array;
    get data(): RootCertificateManager.Data;
    private generateRootCert;
    generateNoc(publicKey: ByteArray, fabricId: FabricId, nodeId: NodeId, caseAuthenticatedTags?: CaseAuthenticatedTag[]): Uint8Array;
}
export declare namespace RootCertificateManager {
    type Data = {
        rootCertId: bigint;
        rootKeyPair: BinaryKeyPair;
        rootKeyIdentifier: ByteArray;
        rootCertBytes: ByteArray;
        nextCertificateId: bigint;
    };
}
//# sourceMappingURL=RootCertificateManager.d.ts.map