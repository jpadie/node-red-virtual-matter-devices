/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Crypto } from "../crypto/Crypto.js";
import { PrivateKey } from "../crypto/Key.js";
import { Logger } from "../log/Logger.js";
import { StorageContext } from "../storage/StorageContext.js";
import { Time } from "../time/Time.js";
import { ByteArray } from "../util/ByteArray.js";
import { Construction, asyncNew } from "../util/Construction.js";
import { toHex } from "../util/Number.js";
import {
  CertificateManager,
  TlvOperationalCertificate,
  TlvRootCertificate,
  jsToMatterDate
} from "./CertificateManager.js";
const logger = Logger.get("RootCertificateManager");
class RootCertificateManager {
  rootCertId = BigInt(0);
  rootKeyPair = Crypto.createKeyPair();
  rootKeyIdentifier = Crypto.hash(this.rootKeyPair.publicKey).slice(0, 20);
  rootCertBytes = this.generateRootCert();
  nextCertificateId = BigInt(1);
  #construction;
  get construction() {
    return this.#construction;
  }
  static async create(options) {
    return asyncNew(RootCertificateManager, options);
  }
  constructor(options) {
    this.#construction = Construction(this, async () => {
      const certValues = options instanceof StorageContext ? await options.values() : options;
      if (typeof certValues.rootCertId === "bigint" && (ArrayBuffer.isView(certValues.rootKeyPair) || typeof certValues.rootKeyPair === "object") && ArrayBuffer.isView(certValues.rootKeyIdentifier) && ArrayBuffer.isView(certValues.rootCertBytes) && (typeof certValues.nextCertificateId === "number" || typeof certValues.nextCertificateId === "bigint")) {
        this.rootCertId = BigInt(certValues.rootCertId);
        this.rootKeyPair = PrivateKey(certValues.rootKeyPair);
        this.rootKeyIdentifier = certValues.rootKeyIdentifier;
        this.rootCertBytes = certValues.rootCertBytes;
        this.nextCertificateId = BigInt(certValues.nextCertificateId);
        logger.debug(`Loaded root certificate with ID ${this.rootCertId} from storage`);
        return;
      }
      logger.debug(`Created new root certificate with ID ${this.rootCertId}`);
      if (options instanceof StorageContext) {
        await options.set({
          rootCertId: this.rootCertId,
          rootKeyPair: this.rootKeyPair.keyPair,
          rootKeyIdentifier: this.rootKeyIdentifier,
          rootCertBytes: this.rootCertBytes,
          nextCertificateId: this.nextCertificateId
        });
      }
    });
  }
  get rootCert() {
    return this.rootCertBytes;
  }
  get data() {
    return {
      rootCertId: this.rootCertId,
      rootKeyPair: this.rootKeyPair.keyPair,
      rootKeyIdentifier: this.rootKeyIdentifier,
      rootCertBytes: this.rootCertBytes,
      nextCertificateId: this.nextCertificateId
    };
  }
  generateRootCert() {
    const now = Time.get().now();
    const unsignedCertificate = {
      serialNumber: ByteArray.fromHex(toHex(this.rootCertId)),
      signatureAlgorithm: 1,
      publicKeyAlgorithm: 1,
      ellipticCurveIdentifier: 1,
      issuer: { rcacId: this.rootCertId },
      notBefore: jsToMatterDate(now, -1),
      notAfter: jsToMatterDate(now, 10),
      subject: { rcacId: this.rootCertId },
      ellipticCurvePublicKey: this.rootKeyPair.publicKey,
      extensions: {
        basicConstraints: { isCa: true },
        keyUsage: {
          keyCertSign: true,
          cRLSign: true
        },
        subjectKeyIdentifier: this.rootKeyIdentifier,
        authorityKeyIdentifier: this.rootKeyIdentifier
      }
    };
    const signature = Crypto.sign(this.rootKeyPair, CertificateManager.rootCertToAsn1(unsignedCertificate));
    return TlvRootCertificate.encode({ ...unsignedCertificate, signature });
  }
  generateNoc(publicKey, fabricId, nodeId, caseAuthenticatedTags) {
    const now = Time.get().now();
    const certId = this.nextCertificateId++;
    const unsignedCertificate = {
      serialNumber: ByteArray.fromHex(toHex(certId)),
      signatureAlgorithm: 1,
      publicKeyAlgorithm: 1,
      ellipticCurveIdentifier: 1,
      issuer: { rcacId: this.rootCertId },
      notBefore: jsToMatterDate(now, -1),
      notAfter: jsToMatterDate(now, 10),
      subject: { fabricId, nodeId, caseAuthenticatedTags },
      ellipticCurvePublicKey: publicKey,
      extensions: {
        basicConstraints: { isCa: false },
        keyUsage: {
          digitalSignature: true
        },
        extendedKeyUsage: [2, 1],
        subjectKeyIdentifier: Crypto.hash(publicKey).slice(0, 20),
        authorityKeyIdentifier: this.rootKeyIdentifier
      }
    };
    const signature = Crypto.sign(
      this.rootKeyPair,
      CertificateManager.nodeOperationalCertToAsn1(unsignedCertificate)
    );
    return TlvOperationalCertificate.encode({ ...unsignedCertificate, signature });
  }
}
export {
  RootCertificateManager
};
//# sourceMappingURL=RootCertificateManager.js.map
