{
  "version": 3,
  "sources": ["../../../../../src/model/logic/cluster-variance/VarianceCondition.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ClusterModel } from \"../../models/index.js\";\nimport { FeatureBitmap, translateBitmap } from \"./FeatureBitmap.js\";\n\n/**\n * The condition for supported patterns of complex variance on Cluster Attributes, Commands and Events.\n */\nexport type VarianceCondition = {\n    anyOf?: string[];\n    allOf?: string[];\n    not?: string;\n};\n\n/**\n * Convert a VarianceCondition to an array of FeatureBitmaps.\n */\nexport function conditionToBitmaps(condition: VarianceCondition, cluster: ClusterModel): FeatureBitmap[] {\n    const bitmap = {} as FeatureBitmap;\n    if (condition.allOf) {\n        for (const name of condition.allOf) {\n            bitmap[name] = true;\n        }\n    }\n    if (condition.not) {\n        bitmap[condition.not] = false;\n    }\n\n    if (!condition.anyOf) {\n        return [translateBitmap(bitmap, cluster)];\n    }\n\n    const bitmaps = Array<typeof bitmap>();\n    for (const name of condition.anyOf) {\n        bitmaps.push(translateBitmap({ ...bitmap, [name]: true }, cluster));\n    }\n\n    return bitmaps;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,SAAwB,uBAAuB;AAcxC,SAAS,mBAAmB,WAA8B,SAAwC;AACrG,QAAM,SAAS,CAAC;AAChB,MAAI,UAAU,OAAO;AACjB,eAAW,QAAQ,UAAU,OAAO;AAChC,aAAO,IAAI,IAAI;AAAA,IACnB;AAAA,EACJ;AACA,MAAI,UAAU,KAAK;AACf,WAAO,UAAU,GAAG,IAAI;AAAA,EAC5B;AAEA,MAAI,CAAC,UAAU,OAAO;AAClB,WAAO,CAAC,gBAAgB,QAAQ,OAAO,CAAC;AAAA,EAC5C;AAEA,QAAM,UAAU,MAAqB;AACrC,aAAW,QAAQ,UAAU,OAAO;AAChC,YAAQ,KAAK,gBAAgB,EAAE,GAAG,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,OAAO,CAAC;AAAA,EACtE;AAEA,SAAO;AACX;",
  "names": []
}
