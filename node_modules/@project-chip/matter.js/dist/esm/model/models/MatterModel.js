/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterElement } from "../elements/index.js";
import { SemanticNamespaceModel } from "../index.js";
import { ModelTraversal } from "../logic/ModelTraversal.js";
import { Matter } from "../standard/index.js";
import { AttributeModel } from "./AttributeModel.js";
import { ClusterModel } from "./ClusterModel.js";
import { DeviceTypeModel } from "./DeviceTypeModel.js";
import { FabricModel } from "./FabricModel.js";
import { FieldModel } from "./FieldModel.js";
import { Model } from "./Model.js";
class MatterModel extends Model {
  tag = MatterElement.Tag;
  isTypeScope = true;
  /**
   * The default instance of the canonical MatterModel.
   */
  static standard = new MatterModel(Matter);
  /**
   * All sub-cluster global elements from the standard model.
   *
   * This is the set of utility datatypes required by cluster definitions.
   *
   * The returned elements are clones as we use this to initialize empty models for testing or diagnostic purposes.
   */
  static get seedGlobals() {
    return MatterModel.standard.children.filter((child) => child.isSeed).map((child) => child.clone());
  }
  /**
   * Clusters.
   */
  get clusters() {
    return this.all(ClusterModel);
  }
  /**
   * Device types.
   */
  get deviceTypes() {
    return this.all(DeviceTypeModel);
  }
  /**
   * Semantic tag namespaces.
   */
  get semanticNamespaces() {
    return this.all(SemanticNamespaceModel);
  }
  /**
   * Global datatypes.
   */
  get datatypes() {
    return this.all(FieldModel);
  }
  /**
   * Global attributes.
   */
  get attributes() {
    return this.all(AttributeModel);
  }
  /**
   * Fabrics.
   */
  get fabrics() {
    return this.all(FabricModel);
  }
  get children() {
    return super.children;
  }
  set children(children) {
    super.children = children;
  }
  /**
   * Create a new MatterModel.
   *
   * @param definition the MatterElement that defines the model
   * @param globals predefined globals, usually tiehr
   */
  constructor(definition = Matter) {
    const children = [...definition.children || []];
    super({ ...definition, name: definition.name, children });
  }
  static {
    Model.types[MatterElement.Tag] = this;
  }
}
ModelTraversal.fallbackScope = MatterModel.standard;
export {
  MatterModel
};
//# sourceMappingURL=MatterModel.js.map
