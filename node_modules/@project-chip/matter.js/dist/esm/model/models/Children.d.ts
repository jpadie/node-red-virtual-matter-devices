/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { AnyElement, ElementTag } from "../index.js";
import { Model } from "./Model.js";
/**
 * Children of a model.  This is a {@link Model} array with some specialization for model-specific operations.
 *
 * @template M Model types accepted as children
 * @template E Element types accepted as children
 */
export interface Children<M extends Model = Model, E extends AnyElement = AnyElement> extends Array<M> {
    /**
     * Add a child.
     *
     * Operates like a standard array push but we adjust the type to allow insertion of elements as well as models.
     */
    push(...children: (M | E)[]): number;
    /**
     * Array splice.
     *
     * Allows splicing in elements or models.
     */
    splice(index: number, deleteCount?: number, ...toAdd: (M | E)[]): M[];
    /**
     * Access a model of specific type by ID or name.  This is an optimized operation that uses internal index lookup.
     */
    get<T extends Model>(type: Model.Type<T>, idOrName: number | string): T | undefined;
    /**
     * Access all models of a specific type, optionally filtered to a specific ID or number.  Even if filtered there
     * may be multiple return values if there are different variants of the element defined.
     */
    all<T extends Model>(type: Model.Type<T>, idOrName?: number | string): T[];
    /**
     * Access a model using a {@link Children.Selector}.  This is an optimized primitive used by various tree traversal
     * algorithms.
     */
    select(selector: Children.Selector, allowedTags?: Children.TagSelector, except?: Set<Model>): Model | undefined;
    /**
     * Like {@link select} but retrieves all models for which selection applies.
     */
    selectAll(selector: Children.Selector, allowedTags?: Children.TagSelector, except?: Set<Model>): Model[];
    /**
     * Models invoke this when their ID changes so we can update internal bookkeeping.
     */
    updateId(child: Model, oldId: number | undefined): void;
    /**
     * Models invoke this when their name changes so we can update internal bookkeeping.
     */
    updateName(child: Model, oldName: string): void;
    /**
     * Freeze the set of children.
     */
    freeze(): void;
}
/**
 * Invoked by {@link Model} to instantiate a new child array.
 */
export declare function Children<M extends Model = Model, E extends AnyElement = AnyElement>(initial: Iterable<M | AnyElement>, adopt: (child: Model) => void, disown: (child: Model) => boolean): Children<M>;
export declare namespace Children {
    /**
     * A model selector designates models for retrieval.  It may be a model name, number, or a predicate function.
     */
    type Selector = string | number | ((child: Model) => boolean);
    /**
     * A tag selector filters models based on type.  It may be a tag name, a list of tag names, or "*" or undefined to
     * disable type filtering.
     */
    type TagSelector = undefined | ElementTag | "*" | ElementTag[];
}
//# sourceMappingURL=Children.d.ts.map