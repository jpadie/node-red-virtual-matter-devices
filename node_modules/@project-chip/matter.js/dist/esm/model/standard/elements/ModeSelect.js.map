{
  "version": 3,
  "sources": ["../../../../../src/model/standard/elements/ModeSelect.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { Matter } from \"../Matter.js\";\nimport {\n    ClusterElement as Cluster,\n    AttributeElement as Attribute,\n    FieldElement as Field,\n    CommandElement as Command,\n    DatatypeElement as Datatype\n} from \"../../elements/index.js\";\n\nexport const ModeSelect = Cluster({\n    name: \"ModeSelect\", id: 0x50, classification: \"application\", pics: \"MOD\",\n\n    details: \"This cluster provides an interface for controlling a characteristic of a device that can be set to \" +\n        \"one of several predefined values. For example, the light pattern of a disco ball, the mode of a \" +\n        \"massage chair, or the wash cycle of a laundry machine.\" +\n        \"\\n\" +\n        \"The server allows the client to set a mode on the server. A mode is one of a list of options that \" +\n        \"may be presented by a client for a user choice, or understood by the client, via the semantic tags \" +\n        \"on the mode.\" +\n        \"\\n\" +\n        \"A semantic tag is either a standard tag within a standard category namespace, or a manufacturer \" +\n        \"specific tag, within the namespace of the vendor ID of the manufacturer. If there is no semantic \" +\n        \"tag, the mode is anonymous, and the selection is made by the user solely based on the Label string.\" +\n        \"\\n\" +\n        \"Each cluster ID that indicates this specification shall define a distinct purpose for the cluster \" +\n        \"instance. For example: A LightBlinking cluster ID supports blinking modes for a light (and is \" +\n        \"described that way).\" +\n        \"\\n\" +\n        \"An anonymous mode shall support the derived cluster purpose. A manufacturer specific semantic tag \" +\n        \"shall support the derived cluster purpose. An anonymous mode shall NOT replace the meaning of a \" +\n        \"standard semantic tag, when one exists, for the cluster purpose.\",\n\n    xref: { document: \"cluster\", section: \"1.9\" },\n\n    children: [\n        Attribute({ name: \"ClusterRevision\", id: 0xfffd, type: \"ClusterRevision\", default: 2 }),\n\n        Attribute({\n            name: \"FeatureMap\", id: 0xfffc, type: \"FeatureMap\",\n            xref: { document: \"cluster\", section: \"1.9.4\" },\n\n            children: [Field({\n                name: \"DEPONOFF\", constraint: \"0\", description: \"OnOff\",\n                details: \"This feature creates a dependency between an OnOff cluster instance and this cluster instance on \" +\n                    \"the same endpoint. See OnMode for more information.\",\n                xref: { document: \"cluster\", section: \"1.9.4.1\" }\n            })]\n        }),\n\n        Attribute({\n            name: \"Description\", id: 0x0, type: \"string\", access: \"R V\", conformance: \"M\", constraint: \"max 64\",\n            quality: \"F\",\n\n            details: \"This attribute describes the purpose of the server, in readable text.\" +\n                \"\\n\" +\n                \"For example, a coffee machine may have a Mode Select cluster for the amount of milk to add, and \" +\n                \"another Mode Select cluster for the amount of sugar to add. In this case, the first instance can \" +\n                \"have the description Milk and the second instance can have the description Sugar. This allows the \" +\n                \"user to tell the purpose of each of the instances.\",\n\n            xref: { document: \"cluster\", section: \"1.9.6.2\" }\n        }),\n\n        Attribute({\n            name: \"StandardNamespace\", id: 0x1, type: \"enum16\", access: \"R V\", conformance: \"M\",\n            constraint: \"desc\", default: null, quality: \"X F\",\n\n            details: \"This attribute, when not null, shall indicate a single standard namespace for any standard semantic \" +\n                \"tag value supported in this or any other cluster instance with the same value of this attribute. A\" +\n                \"\\n\" +\n                \"null value indicates no standard namespace, and therefore, no standard semantic tags are provided \" +\n                \"in this cluster instance. Each standard namespace and corresponding values and value meanings shall \" +\n                \"be defined in another document.\",\n\n            xref: { document: \"cluster\", section: \"1.9.6.3\" }\n        }),\n\n        Attribute({\n            name: \"SupportedModes\", id: 0x2, type: \"list\", access: \"R V\", conformance: \"M\",\n            constraint: \"max 255\", quality: \"F\",\n            details: \"This attribute is the list of supported modes that may be selected for the CurrentMode attribute. \" +\n                \"Each item in this list represents a unique mode as indicated by the Mode field of the \" +\n                \"ModeOptionStruct. Each entry in this list shall have a unique value for the Mode field.\",\n            xref: { document: \"cluster\", section: \"1.9.6.4\" },\n            children: [Field({ name: \"entry\", type: \"ModeOptionStruct\" })]\n        }),\n\n        Attribute({\n            name: \"CurrentMode\", id: 0x3, type: \"uint8\", access: \"R V\", conformance: \"M\", constraint: \"desc\",\n            quality: \"N S\",\n            details: \"This attribute represents the current mode of the server.\" +\n                \"\\n\" +\n                \"The value of this field must match the Mode field of one of the entries in the SupportedModes\" +\n                \"\\n\" +\n                \"attribute.\",\n            xref: { document: \"cluster\", section: \"1.9.6.5\" }\n        }),\n\n        Attribute({\n            name: \"StartUpMode\", id: 0x4, type: \"uint8\", access: \"RW VO\", conformance: \"O\", constraint: \"desc\",\n            quality: \"X N\",\n\n            details: \"The StartUpMode attribute value indicates the desired startup mode for the server when it is \" +\n                \"supplied with power.\" +\n                \"\\n\" +\n                \"If this attribute is not null, the CurrentMode attribute shall be set to the StartUpMode value, \" +\n                \"when the server is powered up, except in the case when the OnMode attribute overrides the \" +\n                \"StartUpMode attribute (see OnModeWithPowerUp).\" +\n                \"\\n\" +\n                \"This behavior does not apply to reboots associated with OTA. After an OTA restart, the CurrentMode \" +\n                \"attribute shall return to its value prior to the restart.\" +\n                \"\\n\" +\n                \"The value of this field shall match the Mode field of one of the entries in the SupportedModes\" +\n                \"\\n\" +\n                \"attribute.\" +\n                \"\\n\" +\n                \"If this attribute is not implemented, or is set to the null value, it shall have no effect.\",\n\n            xref: { document: \"cluster\", section: \"1.9.6.6\" }\n        }),\n\n        Attribute({\n            name: \"OnMode\", id: 0x5, type: \"uint8\", access: \"RW VO\", conformance: \"DEPONOFF\",\n            constraint: \"desc\", default: null, quality: \"X N\",\n\n            details: \"Indicates the value of CurrentMode that depends on the state of the On/Off cluster on the same \" +\n                \"endpoint. If this attribute is not present or is set to null, it shall NOT have an effect, \" +\n                \"otherwise the CurrentMode attribute shall depend on the OnOff attribute of the On/Off cluster\" +\n                \"\\n\" +\n                \"The value of this field shall match the Mode field of one of the entries in the SupportedModes \" +\n                \"attribute.\",\n\n            xref: { document: \"cluster\", section: \"1.9.6.7\" }\n        }),\n\n        Command({\n            name: \"ChangeToMode\", id: 0x0, access: \"O\", conformance: \"M\", direction: \"request\",\n            response: \"status\",\n            details: \"On receipt of this command, if the NewMode field indicates a valid mode transition within the \" +\n                \"supported list, the server shall set the CurrentMode attribute to the NewMode value, otherwise, the \" +\n                \"server shall respond with an INVALID_COMMAND status response.\",\n            xref: { document: \"cluster\", section: \"1.9.7.1\" },\n            children: [Field({ name: \"NewMode\", id: 0x0, type: \"uint8\", conformance: \"M\", constraint: \"desc\" })]\n        }),\n\n        Datatype({\n            name: \"SemanticTagStruct\", type: \"struct\",\n            details: \"A Semantic Tag is meant to be interpreted by the client for the purpose the cluster serves.\",\n            xref: { document: \"cluster\", section: \"1.9.5.1\" },\n\n            children: [\n                Field({\n                    name: \"MfgCode\", id: 0x0, type: \"vendor-id\", conformance: \"M\", constraint: \"desc\", quality: \"F\",\n                    details: \"This field shall indicate a manufacturer code (Vendor ID), and the Value field shall indicate a \" +\n                        \"semantic tag defined by the manufacturer. Each manufacturer code supports a single namespace of \" +\n                        \"values. The same manufacturer code and semantic tag value in separate cluster instances are part of \" +\n                        \"the same namespace and have the same meaning. For example: a manufacturer tag meaning \\\"pinch\\\", has \" +\n                        \"the same meaning in a cluster whose purpose is to choose the amount of sugar, or amount of salt.\",\n                    xref: { document: \"cluster\", section: \"1.9.5.1.2\" }\n                }),\n\n                Field({\n                    name: \"Value\", id: 0x1, type: \"uint16\", conformance: \"M\", quality: \"F\",\n                    details: \"This field shall indicate the semantic tag within a semantic tag namespace which is either \" +\n                        \"manufacturer specific or standard. For semantic tags in a standard namespace, see Standard \" +\n                        \"Namespace.\",\n                    xref: { document: \"cluster\", section: \"1.9.5.1.1\" }\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"ModeOptionStruct\", type: \"struct\",\n            details: \"This is a struct representing a possible mode of the server.\",\n            xref: { document: \"cluster\", section: \"1.9.5.2\" },\n\n            children: [\n                Field({\n                    name: \"Label\", id: 0x0, type: \"string\", conformance: \"M\", constraint: \"max 64\", quality: \"F\",\n                    details: \"This field is readable text that describes the mode option that can be used by a client to indicate \" +\n                        \"to the user what this option means. This field is meant to be readable and understandable by the \" +\n                        \"user.\",\n                    xref: { document: \"cluster\", section: \"1.9.5.2.1\" }\n                }),\n\n                Field({\n                    name: \"Mode\", id: 0x1, type: \"uint8\", conformance: \"M\", quality: \"F\",\n                    details: \"The Mode field is used to identify the mode option. The value shall be unique for every item in the \" +\n                        \"SupportedModes attribute.\",\n                    xref: { document: \"cluster\", section: \"1.9.5.2.2\" }\n                }),\n\n                Field({\n                    name: \"SemanticTags\", id: 0x2, type: \"list\", conformance: \"M\", constraint: \"max 64\", quality: \"F\",\n\n                    details: \"This field is a list of semantic tags that map to the mode option. This may be used by clients to \" +\n                        \"determine the meaning of the mode option as defined in a standard or manufacturer specific \" +\n                        \"namespace. Semantic tags can help clients look for options that meet certain criteria. A semantic \" +\n                        \"tag shall be either a standard tag or manufacturer specific tag as defined in each \" +\n                        \"SemanticTagStruct list entry.\" +\n                        \"\\n\" +\n                        \"A mode option may have more than one semantic tag. A mode option may be mapped to a mixture of \" +\n                        \"standard and manufacturer specific semantic tags.\" +\n                        \"\\n\" +\n                        \"All standard semantic tags are from a single namespace indicated by the StandardNamespace attribute.\" +\n                        \"\\n\" +\n                        \"For example: A mode labeled \\\"100%\\\" can have both the HIGH (MS) and MAX (standard) semantic tag. \" +\n                        \"Clients seeking the option for either HIGH or MAX will find the same option in this case.\",\n\n                    xref: { document: \"cluster\", section: \"1.9.5.2.3\" },\n                    children: [Field({ name: \"entry\", type: \"SemanticTagStruct\" })]\n                })\n            ]\n        })\n    ]\n});\n\nMatter.children.push(ModeSelect);\n"],
  "mappings": "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",
  "names": []
}
