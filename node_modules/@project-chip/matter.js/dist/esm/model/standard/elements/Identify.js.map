{
  "version": 3,
  "sources": ["../../../../../src/model/standard/elements/Identify.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { Matter } from \"../Matter.js\";\nimport {\n    ClusterElement as Cluster,\n    AttributeElement as Attribute,\n    CommandElement as Command,\n    FieldElement as Field,\n    DatatypeElement as Datatype\n} from \"../../elements/index.js\";\n\nexport const Identify = Cluster({\n    name: \"Identify\", id: 0x3, classification: \"endpoint\", pics: \"I\",\n\n    details: \"This cluster supports an endpoint identification state (e.g., flashing a light), that indicates to \" +\n        \"an observer (e.g., an installer) which of several nodes and/or endpoints it is. It also supports a \" +\n        \"multicast request that any endpoint that is identifying itself to respond to the initiator.\" +\n        \"\\n\" +\n        \"The state of this cluster may be shared on more than one endpoint on a node.\" +\n        \"\\n\" +\n        \"For Example: Two endpoints on a single node, one a temperature sensor, and one a humidity sensor, \" +\n        \"may both share the same cluster instance and therefore identification state (e.g. single LED on the \" +\n        \"node).\",\n\n    xref: { document: \"cluster\", section: \"1.2\" },\n\n    children: [\n        Attribute({ name: \"ClusterRevision\", id: 0xfffd, type: \"ClusterRevision\", default: 4 }),\n\n        Attribute({\n            name: \"IdentifyTime\", id: 0x0, type: \"uint16\", access: \"RW VO\", conformance: \"M\", default: 0,\n\n            details: \"This attribute specifies the remaining length of time, in seconds, that the endpoint will continue \" +\n                \"to identify itself.\" +\n                \"\\n\" +\n                \"If this attribute is set to a value other than 0 then the device shall enter its identification \" +\n                \"state, in order to indicate to an observer which of several nodes and/or endpoints it is. It is \" +\n                \"recommended that this state consists of flashing a light with a period of 0.5 seconds. The \" +\n                \"IdentifyTime attribute shall be decremented every second while in this state.\" +\n                \"\\n\" +\n                \"If this attribute reaches or is set to the value 0 then the device shall terminate its \" +\n                \"identification state.\",\n\n            xref: { document: \"cluster\", section: \"1.2.5.1\" }\n        }),\n\n        Attribute({\n            name: \"IdentifyType\", id: 0x1, type: \"IdentifyTypeEnum\", access: \"R V\", conformance: \"M\",\n            constraint: \"desc\",\n            details: \"This attribute specifies how the identification state is presented to the user.\" +\n                \"\\n\" +\n                \"This field shall contain one of the values defined in IdentifyTypeEnum. The value None shall NOT be \" +\n                \"used if the device is capable of presenting its identification state using one of the other methods \" +\n                \"defined in IdentifyTypeEnum.\",\n            xref: { document: \"cluster\", section: \"1.2.5.2\" }\n        }),\n\n        Command({\n            name: \"Identify\", id: 0x0, access: \"M\", conformance: \"M\", direction: \"request\", response: \"status\",\n            details: \"This command starts or stops the receiving device identifying itself.\",\n            xref: { document: \"cluster\", section: \"1.2.6.1\" },\n            children: [Field({ name: \"IdentifyTime\", id: 0x0, type: \"uint16\", conformance: \"M\" })]\n        }),\n\n        Command({\n            name: \"TriggerEffect\", id: 0x40, access: \"M\", conformance: \"O\", direction: \"request\",\n            response: \"status\",\n\n            details: \"This command allows the support of feedback to the user, such as a certain light effect. It is used \" +\n                \"to allow an implementation to provide visual feedback to the user under certain circumstances such \" +\n                \"as a color light turning green when it has successfully connected to a network. The use of this \" +\n                \"command and the effects themselves are entirely up to the implementer to use whenever a visual \" +\n                \"feedback is useful but it is not the same as and does not replace the identify mechanism used \" +\n                \"during commissioning.\",\n\n            xref: { document: \"cluster\", section: \"1.2.6.2\" },\n\n            children: [\n                Field({\n                    name: \"EffectIdentifier\", id: 0x0, type: \"EffectIdentifierEnum\", conformance: \"M\",\n                    constraint: \"desc\",\n\n                    details: \"This field specifies the identify effect to use and shall contain one of the non-reserved values in \" +\n                        \"EffectIdentifierEnum.\" +\n                        \"\\n\" +\n                        \"All values of the EffectIdentifierEnum shall be supported. Implementors may deviate from the \" +\n                        \"example light effects in EffectIdentifierEnum, but they SHOULD indicate during testing how they \" +\n                        \"handle each effect.\",\n\n                    xref: { document: \"cluster\", section: \"1.2.6.2.1\" }\n                }),\n\n                Field({\n                    name: \"EffectVariant\", id: 0x1, type: \"EffectVariantEnum\", conformance: \"M\", constraint: \"desc\",\n                    details: \"This field is used to indicate which variant of the effect, indicated in the EffectIdentifier \" +\n                        \"field, SHOULD be triggered. If a device does not support the given variant, it shall use the \" +\n                        \"default variant. This field shall contain one of the values in EffectVariantEnum.\",\n                    xref: { document: \"cluster\", section: \"1.2.6.2.2\" }\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"IdentifyTypeEnum\", type: \"enum8\",\n            xref: { document: \"cluster\", section: \"1.2.4.1\" },\n\n            children: [\n                Field({ name: \"None\", id: 0x0, conformance: \"M\", description: \"No presentation.\" }),\n                Field({\n                    name: \"LightOutput\", id: 0x1, conformance: \"M\", description: \"Light output of a lighting product.\"\n                }),\n                Field({ name: \"VisibleIndicator\", id: 0x2, conformance: \"M\", description: \"Typically a small LED.\" }),\n                Field({ name: \"AudibleBeep\", id: 0x3, conformance: \"M\" }),\n                Field({\n                    name: \"Display\", id: 0x4, conformance: \"M\",\n                    description: \"Presentation will be visible on display screen.\"\n                }),\n                Field({\n                    name: \"Actuator\", id: 0x5, conformance: \"M\",\n                    description: \"Presentation will be conveyed by actuator functionality such as through a window blind operation or in- wall relay.\"\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"EffectIdentifierEnum\", type: \"enum8\",\n            xref: { document: \"cluster\", section: \"1.2.4.2\" },\n\n            children: [\n                Field({ name: \"Blink\", id: 0x0, conformance: \"M\", description: \"e.g., Light is turned on/off once.\" }),\n                Field({\n                    name: \"Breathe\", id: 0x1, conformance: \"M\",\n                    description: \"e.g., Light is turned on/off over 1 second and repeated 15 times.\"\n                }),\n                Field({\n                    name: \"Okay\", id: 0x2, conformance: \"M\",\n                    description: \"e.g., Colored light turns green for 1 second; non-colored light flashes twice.\"\n                }),\n                Field({\n                    name: \"ChannelChange\", id: 0xb, conformance: \"M\",\n                    description: \"e.g., Colored light turns orange for 8 seconds; non-colored light switches to the maximum brightness for 0.5s and then minimum brightness for 7.5s.\"\n                }),\n                Field({\n                    name: \"FinishEffect\", id: 0xfe, conformance: \"M\",\n                    description: \"Complete the current effect sequence before terminating. e.g., if in the middle of a breathe effect (as above), first complete the current 1s breathe effect and then terminate the effect.\"\n                }),\n                Field({\n                    name: \"StopEffect\", id: 0xff, conformance: \"M\",\n                    description: \"Terminate the effect as soon as possible.\"\n                })\n            ]\n        }),\n\n        Datatype({\n            name: \"EffectVariantEnum\", type: \"enum8\",\n            xref: { document: \"cluster\", section: \"1.2.4.3\" },\n            children: [\n                Field({ name: \"Default\", id: 0x0, conformance: \"M\", description: \"Indicates the default effect is used\" })\n            ]\n        })\n    ]\n});\n\nMatter.children.push(Identify);\n"],
  "mappings": "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",
  "names": []
}
