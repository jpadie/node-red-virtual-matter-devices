{
  "version": 3,
  "sources": ["../../../../src/model/elements/ValueElement.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Access, Conformance, Constraint, Quality } from \"../aspects/index.js\";\nimport { ElementTag, FieldValue } from \"../definitions/index.js\";\nimport { type AnyValueElement } from \"./AnyValueElement.js\";\nimport { BaseElement } from \"./BaseElement.js\";\n\n/**\n * A base element for all elements that represent data values.\n */\nexport type ValueElement = BaseElement & {\n    /**\n     * Derived datatypes as defined by the Matter Specification must specify the name of the base type.  This is every\n     * type that is not global.\n     *\n     * Elements may use the shortcut \"list[EntryType]\" to designate an element as type \"list\" with a single child that\n     * is the entry type.\n     */\n    type?: string;\n\n    /**\n     * Limits on values.\n     */\n    constraint?: Constraint.Definition;\n\n    /**\n     * Optionality control.\n     */\n    conformance?: Conformance.Definition;\n\n    /**\n     * Authorization limits.\n     */\n    access?: Access.Definition;\n\n    /**\n     * Other qualities not covered by conformance or access.\n     */\n    quality?: Quality.Definition;\n\n    /**\n     * Applies to numeric types.\n     */\n    byteSize?: ValueElement.ByteSize;\n\n    /**\n     * The default value for the element.\n     */\n    default?: FieldValue;\n\n    /**\n     * Nested structures that may have data elements include enums, structs and\n     * lists.\n     */\n    children?: AnyValueElement[];\n};\n\nexport function ValueElement(tag: ElementTag, definition: ValueElement) {\n    definition = { ...definition };\n\n    if (definition.constraint?.toString().toLowerCase() === \"all\") {\n        delete definition.constraint;\n    }\n\n    for (const k of [\"conformance\", \"quality\", \"access\", \"quality\"]) {\n        if ((definition as any)[k] === \"\") {\n            delete (definition as any)[k];\n        }\n    }\n\n    return BaseElement(tag, definition) as ValueElement;\n}\n\nexport namespace ValueElement {\n    export type Properties = BaseElement.Properties<ValueElement & { tag: `${ElementTag}` }>;\n\n    /**\n     * The general type of datatype (ignoring size).\n     */\n    export enum Metatype {\n        bool,\n        map,\n    }\n\n    /**\n     * A pool of datatype definitions indexed by name.\n     */\n    export type Datatypes = { [name: string]: ValueElement };\n\n    /**\n     * Valid sizes for ints.\n     */\n    export type ByteSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n\n    /**\n     * Legal bitmap sizes.  The Matter specification defines enums as extensions of int8 or in16 so the size information\n     * is not used for actual enums, just for bitmaps, which are used (somewhat inconsistently) as base types.\n     */\n    export type BitmapSize = 1 | 2 | 4 | 8;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,mBAAmB;AAoDrB,SAAS,aAAa,KAAiB,YAA0B;AACpE,eAAa,EAAE,GAAG,WAAW;AAE7B,MAAI,WAAW,YAAY,SAAS,EAAE,YAAY,MAAM,OAAO;AAC3D,WAAO,WAAW;AAAA,EACtB;AAEA,aAAW,KAAK,CAAC,eAAe,WAAW,UAAU,SAAS,GAAG;AAC7D,QAAK,WAAmB,CAAC,MAAM,IAAI;AAC/B,aAAQ,WAAmB,CAAC;AAAA,IAChC;AAAA,EACJ;AAEA,SAAO,YAAY,KAAK,UAAU;AACtC;AAAA,CAEO,CAAUA,kBAAV;AAMI,MAAK;AAAL,IAAKC,cAAL;AACH,IAAAA,oBAAA;AACA,IAAAA,oBAAA;AAAA,KAFQ,WAAAD,cAAA,aAAAA,cAAA;AAAA,GANC;",
  "names": ["ValueElement", "Metatype"]
}
