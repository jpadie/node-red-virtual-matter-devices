{
  "version": 3,
  "sources": ["../../../../src/model/elements/BaseElement.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ElementTag, Specification } from \"../definitions/index.js\";\nimport type { AnyElement } from \"./AnyElement.js\";\n\n/**\n * Per the Matter specification, an element is a data construct that supports\n * an instance of data.  So, a class.\n *\n * Elements as defined by this package are a static data structure.  Each\n * element has a corresponding \"Model\" that is a proper class with runtime\n * functionality related to the element.\n */\nexport interface BaseElement {\n    /**\n     * The ID of the element per Matter specification, either global or\n     * context-specific.  A \"machine appropriate\" semantic differentiator.\n     */\n    id?: number;\n\n    /**\n     * The key used for storing this element.  A \"human appropriate\" semantic\n     * differentiator.\n     */\n    name: string;\n\n    /**\n     * If an element derives from another element, the name of the parent\n     * element goes here.\n     */\n    type?: string;\n\n    /**\n     * A short summary of the element.\n     */\n    description?: string;\n\n    /**\n     * A paragraph summary of the element.\n     */\n    details?: string;\n\n    /**\n     * Reference to Matter specification document.\n     */\n    xref?: Specification.CrossReference;\n\n    /**\n     * Child elements.\n     */\n    children?: AnyElement[];\n\n    /**\n     * Is this a global element?  Global elements are available in-scope for every cluster.\n     */\n    isGlobal?: boolean;\n\n    /**\n     * Is this a \"seed\" element?  These are global types and cluster elements defined in the core specification, without\n     * which we are fairly incapacitated.\n     */\n    isSeed?: boolean;\n\n    /**\n     * The first Matter specification in which this element appears.\n     */\n    asOf?: Specification.Revision;\n\n    /**\n     * The Matter specification revision in which this element was removed.\n     */\n    until?: Specification.Revision;\n}\n\nexport function BaseElement(tag: ElementTag, definition: BaseElement) {\n    const result: any = { tag: tag };\n    for (const [k, v] of Object.entries(definition)) {\n        if (v !== undefined) {\n            result[k] = v;\n        }\n    }\n    return result as BaseElement;\n}\n\nexport namespace BaseElement {\n    export type ElementForProperties<P> = P extends Properties<infer T> ? T : never;\n\n    /**\n     * Element with optional type; used for factory functions and constructors.\n     */\n    export type Properties<T extends { tag: `${ElementTag}` }> = Omit<T, \"tag\"> & Partial<Pick<T, \"tag\">>;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AA8EO,SAAS,YAAY,KAAiB,YAAyB;AAClE,QAAM,SAAc,EAAE,IAAS;AAC/B,aAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,UAAU,GAAG;AAC7C,QAAI,MAAM,QAAW;AACjB,aAAO,CAAC,IAAI;AAAA,IAChB;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}
