{
  "version": 3,
  "sources": ["../../../src/schema/Base38Schema.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\nimport { ByteArray } from \"../util/ByteArray.js\";\nimport { Schema } from \"./Schema.js\";\n\nconst BASE38_ALPHABET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-.\";\n\n/** See {@link MatterSpecification.v10.Core} \u00A7 5.1.3.1 */\nclass Base38Schema extends Schema<ByteArray, string> {\n    protected encodeInternal(bytes: ByteArray): string {\n        const length = bytes.length;\n        let offset = 0;\n        const result = new Array<string>();\n        while (offset < length) {\n            const remaining = length - offset;\n            if (remaining > 2) {\n                result.push(this.encodeBase38(bytes[offset++] | (bytes[offset++] << 8) | (bytes[offset++] << 16), 5));\n            } else if (remaining == 2) {\n                result.push(this.encodeBase38(bytes[offset++] | (bytes[offset++] << 8), 4));\n                break;\n            } else {\n                result.push(this.encodeBase38(bytes[offset++], 2));\n                break;\n            }\n        }\n        return result.join(\"\");\n    }\n\n    private encodeBase38(value: number, charCount: number) {\n        let result = \"\";\n        for (let i = 0; i < charCount; i++) {\n            const remainder = value % 38;\n            result += BASE38_ALPHABET[remainder];\n            value = (value - remainder) / 38;\n        }\n        return result;\n    }\n\n    protected decodeInternal(encoded: string): ByteArray {\n        const encodedLength = encoded.length;\n        const remainderEncodedLength = encodedLength % 5;\n        let decodeLength = ((encodedLength - remainderEncodedLength) / 5) * 3;\n        switch (remainderEncodedLength) {\n            case 4:\n                decodeLength += 2;\n                break;\n            case 2:\n                decodeLength += 1;\n                break;\n            default:\n                throw new UnexpectedDataError(`Invalid base38 encoded string length: ${encodedLength}`);\n        }\n        const result = new ByteArray(decodeLength);\n        let decodedOffset = 0;\n        let encodedOffset = 0;\n        while (encodedOffset < encodedLength) {\n            const remaining = encodedLength - encodedOffset;\n            if (remaining > 5) {\n                const value = this.decodeBase38(encoded, encodedOffset, 5);\n                result[decodedOffset++] = value & 0xff;\n                result[decodedOffset++] = (value >> 8) & 0xff;\n                result[decodedOffset++] = (value >> 16) & 0xff;\n                encodedOffset += 5;\n            } else if (remaining == 4) {\n                const value = this.decodeBase38(encoded, encodedOffset, 4);\n                result[decodedOffset++] = value & 0xff;\n                result[decodedOffset++] = (value >> 8) & 0xff;\n                break;\n            } else {\n                const value = this.decodeBase38(encoded, encodedOffset, 2);\n                result[decodedOffset++] = value & 0xff;\n                break;\n            }\n        }\n        return result;\n    }\n\n    private decodeBase38(encoded: string, offset: number, charCount: number) {\n        let result = 0;\n        for (let i = charCount - 1; i >= 0; i--) {\n            const char = encoded[offset + i];\n            // TODO: replace this with a lookup table for performance\n            const code = BASE38_ALPHABET.indexOf(char);\n            if (code === -1) throw new UnexpectedDataError(`Unexpected character ${char} at ${offset + i}`);\n            result = result * 38 + code;\n        }\n        return result;\n    }\n}\n\nexport const Base38 = new Base38Schema();\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,2BAA2B;AACpC,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AAEvB,MAAM,kBAAkB;AAGxB,MAAM,qBAAqB,OAA0B;AAAA,EACvC,eAAe,OAA0B;AAC/C,UAAM,SAAS,MAAM;AACrB,QAAI,SAAS;AACb,UAAM,SAAS,IAAI,MAAc;AACjC,WAAO,SAAS,QAAQ;AACpB,YAAM,YAAY,SAAS;AAC3B,UAAI,YAAY,GAAG;AACf,eAAO,KAAK,KAAK,aAAa,MAAM,QAAQ,IAAK,MAAM,QAAQ,KAAK,IAAM,MAAM,QAAQ,KAAK,IAAK,CAAC,CAAC;AAAA,MACxG,WAAW,aAAa,GAAG;AACvB,eAAO,KAAK,KAAK,aAAa,MAAM,QAAQ,IAAK,MAAM,QAAQ,KAAK,GAAI,CAAC,CAAC;AAC1E;AAAA,MACJ,OAAO;AACH,eAAO,KAAK,KAAK,aAAa,MAAM,QAAQ,GAAG,CAAC,CAAC;AACjD;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,OAAO,KAAK,EAAE;AAAA,EACzB;AAAA,EAEQ,aAAa,OAAe,WAAmB;AACnD,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAM,YAAY,QAAQ;AAC1B,gBAAU,gBAAgB,SAAS;AACnC,eAAS,QAAQ,aAAa;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA,EAEU,eAAe,SAA4B;AACjD,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,yBAAyB,gBAAgB;AAC/C,QAAI,gBAAiB,gBAAgB,0BAA0B,IAAK;AACpE,YAAQ,wBAAwB;AAAA,MAC5B,KAAK;AACD,wBAAgB;AAChB;AAAA,MACJ,KAAK;AACD,wBAAgB;AAChB;AAAA,MACJ;AACI,cAAM,IAAI,oBAAoB,yCAAyC,aAAa,EAAE;AAAA,IAC9F;AACA,UAAM,SAAS,IAAI,UAAU,YAAY;AACzC,QAAI,gBAAgB;AACpB,QAAI,gBAAgB;AACpB,WAAO,gBAAgB,eAAe;AAClC,YAAM,YAAY,gBAAgB;AAClC,UAAI,YAAY,GAAG;AACf,cAAM,QAAQ,KAAK,aAAa,SAAS,eAAe,CAAC;AACzD,eAAO,eAAe,IAAI,QAAQ;AAClC,eAAO,eAAe,IAAK,SAAS,IAAK;AACzC,eAAO,eAAe,IAAK,SAAS,KAAM;AAC1C,yBAAiB;AAAA,MACrB,WAAW,aAAa,GAAG;AACvB,cAAM,QAAQ,KAAK,aAAa,SAAS,eAAe,CAAC;AACzD,eAAO,eAAe,IAAI,QAAQ;AAClC,eAAO,eAAe,IAAK,SAAS,IAAK;AACzC;AAAA,MACJ,OAAO;AACH,cAAM,QAAQ,KAAK,aAAa,SAAS,eAAe,CAAC;AACzD,eAAO,eAAe,IAAI,QAAQ;AAClC;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,aAAa,SAAiB,QAAgB,WAAmB;AACrE,QAAI,SAAS;AACb,aAAS,IAAI,YAAY,GAAG,KAAK,GAAG,KAAK;AACrC,YAAM,OAAO,QAAQ,SAAS,CAAC;AAE/B,YAAM,OAAO,gBAAgB,QAAQ,IAAI;AACzC,UAAI,SAAS,GAAI,OAAM,IAAI,oBAAoB,wBAAwB,IAAI,OAAO,SAAS,CAAC,EAAE;AAC9F,eAAS,SAAS,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AACJ;AAEO,MAAM,SAAS,IAAI,aAAa;",
  "names": []
}
