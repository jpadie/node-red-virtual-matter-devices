{
  "version": 3,
  "sources": ["../../../src/schema/Schema.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** Define a schema to encode / decode convert type T to type E. */\nexport abstract class Schema<T, E> {\n    /** Encodes the value using the schema. */\n    encode(value: T): E {\n        this.validate(value);\n        return this.encodeInternal(value);\n    }\n\n    /** Decodes the encoded data using the schema. */\n    decode(encoded: E, validate = true): T {\n        const result = this.decodeInternal(encoded);\n        if (validate) {\n            this.validate(result);\n        }\n        return result;\n    }\n\n    protected abstract encodeInternal(value: T): E;\n    protected abstract decodeInternal(encoded: E): T;\n\n    /** Optional validator that can be used to enforce constraints on the data before encoding / after decoding. */\n    validate(_value: T): void {\n        // Do nothing by default\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAe,OAAa;AAAA;AAAA,EAE/B,OAAO,OAAa;AAChB,SAAK,SAAS,KAAK;AACnB,WAAO,KAAK,eAAe,KAAK;AAAA,EACpC;AAAA;AAAA,EAGA,OAAO,SAAY,WAAW,MAAS;AACnC,UAAM,SAAS,KAAK,eAAe,OAAO;AAC1C,QAAI,UAAU;AACV,WAAK,SAAS,MAAM;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAMA,SAAS,QAAiB;AAAA,EAE1B;AACJ;",
  "names": []
}
