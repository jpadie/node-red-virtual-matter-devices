{
  "version": 3,
  "sources": ["../../../src/util/Introspection.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Utilities for object introspection.\n */\nexport namespace Introspection {\n    /**\n     * Obtain a {@link PropertyDescriptor} from any level in {@link subject}'s\n     * prototype chain.\n     */\n    export function propertyDescriptorOf(subject: object, name: string): PropertyDescriptor | undefined {\n        const descriptor = Reflect.getOwnPropertyDescriptor(subject, name);\n        if (descriptor) {\n            return descriptor;\n        }\n        const prototype = Reflect.getPrototypeOf(subject);\n        if (prototype !== null) {\n            return Introspection.propertyDescriptorOf(prototype, name);\n        }\n    }\n\n    /**\n     * Obtain {@link PropertyDescriptor}s from properties in any level of\n     * {@link subject}'s prototype chain.\n     */\n    export function propertyDescriptorsOf(subject: object) {\n        const descriptors = {} as Record<string, PropertyDescriptor>;\n\n        function addDescriptors(subject: object) {\n            const localDescriptors = Object.getOwnPropertyDescriptors(subject);\n\n            for (const name in localDescriptors) {\n                if (descriptors[name] === undefined) {\n                    descriptors[name] = localDescriptors[name];\n                }\n            }\n\n            const prototype = Reflect.getPrototypeOf(subject);\n            if (prototype !== null) {\n                addDescriptors(prototype);\n            }\n        }\n\n        addDescriptors(subject);\n\n        return descriptors;\n    }\n\n    /**\n     * Determine whether a single property of {@link subject} is readable\n     * and/or writable.\n     */\n    export function propertyAccessibilityOf(subject: object, name: string) {\n        const pd = propertyDescriptorOf(subject, name);\n        if (pd) {\n            return propertyDescriptorToAccessibility(pd);\n        }\n        return { readable: true, writable: true };\n    }\n\n    /**\n     * Obtain properties from {@link subject} and whether they're readable\n     * and/or writable.\n     */\n    export function objectAccessibilityOf(subject: object) {\n        const accessibilty = {} as ObjectAccessibilty;\n\n        const propertyDescriptors = Introspection.propertyDescriptorsOf(subject);\n        for (const name in propertyDescriptors) {\n            accessibilty[name] = propertyDescriptorToAccessibility(propertyDescriptors[name]);\n        }\n\n        return accessibilty;\n    }\n\n    export function propertyDescriptorToAccessibility(pd: PropertyDescriptor): PropertyAccessibility {\n        return {\n            readable: !!(pd.set && !pd.get),\n            writable: !!(pd.set || pd.writable),\n        };\n    }\n\n    export interface PropertyAccessibility {\n        readable: boolean;\n        writable: boolean;\n    }\n\n    export interface ObjectAccessibilty extends Record<string, PropertyAccessibility> {}\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AASO,IAAU;AAAA,CAAV,CAAUA,mBAAV;AAKI,WAAS,qBAAqB,SAAiB,MAA8C;AAChG,UAAM,aAAa,QAAQ,yBAAyB,SAAS,IAAI;AACjE,QAAI,YAAY;AACZ,aAAO;AAAA,IACX;AACA,UAAM,YAAY,QAAQ,eAAe,OAAO;AAChD,QAAI,cAAc,MAAM;AACpB,aAAOA,eAAc,qBAAqB,WAAW,IAAI;AAAA,IAC7D;AAAA,EACJ;AATO,EAAAA,eAAS;AAeT,WAAS,sBAAsB,SAAiB;AACnD,UAAM,cAAc,CAAC;AAErB,aAAS,eAAeC,UAAiB;AACrC,YAAM,mBAAmB,OAAO,0BAA0BA,QAAO;AAEjE,iBAAW,QAAQ,kBAAkB;AACjC,YAAI,YAAY,IAAI,MAAM,QAAW;AACjC,sBAAY,IAAI,IAAI,iBAAiB,IAAI;AAAA,QAC7C;AAAA,MACJ;AAEA,YAAM,YAAY,QAAQ,eAAeA,QAAO;AAChD,UAAI,cAAc,MAAM;AACpB,uBAAe,SAAS;AAAA,MAC5B;AAAA,IACJ;AAEA,mBAAe,OAAO;AAEtB,WAAO;AAAA,EACX;AArBO,EAAAD,eAAS;AA2BT,WAAS,wBAAwB,SAAiB,MAAc;AACnE,UAAM,KAAK,qBAAqB,SAAS,IAAI;AAC7C,QAAI,IAAI;AACJ,aAAO,kCAAkC,EAAE;AAAA,IAC/C;AACA,WAAO,EAAE,UAAU,MAAM,UAAU,KAAK;AAAA,EAC5C;AANO,EAAAA,eAAS;AAYT,WAAS,sBAAsB,SAAiB;AACnD,UAAM,eAAe,CAAC;AAEtB,UAAM,sBAAsBA,eAAc,sBAAsB,OAAO;AACvE,eAAW,QAAQ,qBAAqB;AACpC,mBAAa,IAAI,IAAI,kCAAkC,oBAAoB,IAAI,CAAC;AAAA,IACpF;AAEA,WAAO;AAAA,EACX;AATO,EAAAA,eAAS;AAWT,WAAS,kCAAkC,IAA+C;AAC7F,WAAO;AAAA,MACH,UAAU,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG;AAAA,MAC3B,UAAU,CAAC,EAAE,GAAG,OAAO,GAAG;AAAA,IAC9B;AAAA,EACJ;AALO,EAAAA,eAAS;AAAA,GAtEH;",
  "names": ["Introspection", "subject"]
}
