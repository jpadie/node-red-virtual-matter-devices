{
  "version": 3,
  "sources": ["../../../src/util/DataReader.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ByteArray, Endian } from \"./ByteArray.js\";\n\n/** Reader that auto-increments its offset after each read. */\nexport class DataReader<E extends Endian> {\n    private readonly littleEndian: boolean;\n    private readonly dataView: DataView;\n    private offset = 0;\n\n    constructor(\n        private readonly buffer: ByteArray,\n        endian: E,\n    ) {\n        this.dataView = buffer.getDataView();\n        this.littleEndian = endian === Endian.Little;\n    }\n\n    readUInt8() {\n        return this.dataView.getUint8(this.getOffsetAndAdvance(1));\n    }\n\n    readUInt16() {\n        return this.dataView.getUint16(this.getOffsetAndAdvance(2), this.littleEndian);\n    }\n\n    readUInt32() {\n        return this.dataView.getUint32(this.getOffsetAndAdvance(4), this.littleEndian);\n    }\n\n    readUInt64() {\n        return this.dataView.getBigUint64(this.getOffsetAndAdvance(8), this.littleEndian);\n    }\n\n    readInt8() {\n        return this.dataView.getInt8(this.getOffsetAndAdvance(1));\n    }\n\n    readInt16() {\n        return this.dataView.getInt16(this.getOffsetAndAdvance(2), this.littleEndian);\n    }\n\n    readInt32() {\n        return this.dataView.getInt32(this.getOffsetAndAdvance(4), this.littleEndian);\n    }\n\n    readInt64() {\n        return this.dataView.getBigInt64(this.getOffsetAndAdvance(8), this.littleEndian);\n    }\n\n    readFloat() {\n        return this.dataView.getFloat32(this.getOffsetAndAdvance(4), this.littleEndian);\n    }\n\n    readDouble() {\n        return this.dataView.getFloat64(this.getOffsetAndAdvance(8), this.littleEndian);\n    }\n\n    readUtf8String(length: number) {\n        const offset = this.getOffsetAndAdvance(length);\n        return new TextDecoder().decode(this.buffer.subarray(offset, offset + length));\n    }\n\n    readByteArray(length: number) {\n        const offset = this.getOffsetAndAdvance(length);\n        return this.buffer.subarray(offset, offset + length);\n    }\n\n    getRemainingBytesCount() {\n        return this.dataView.byteLength - this.offset;\n    }\n\n    getRemainingBytes() {\n        return this.buffer.subarray(this.offset);\n    }\n\n    getLength() {\n        return this.dataView.byteLength;\n    }\n\n    setOffset(offset: number) {\n        if (offset > this.dataView.byteLength) {\n            throw new Error(`Offset ${offset} is out of bounds.`);\n        }\n        this.offset = offset;\n    }\n\n    private getOffsetAndAdvance(size: number) {\n        const result = this.offset;\n        this.offset += size;\n        if (this.offset > this.dataView.byteLength) {\n            this.offset = this.dataView.byteLength;\n        }\n        return result;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAoB,cAAc;AAG3B,MAAM,WAA6B;AAAA,EAKtC,YACqB,QACjB,QACF;AAFmB;AAGjB,SAAK,WAAW,OAAO,YAAY;AACnC,SAAK,eAAe,WAAW,OAAO;AAAA,EAC1C;AAAA,EAViB;AAAA,EACA;AAAA,EACT,SAAS;AAAA,EAUjB,YAAY;AACR,WAAO,KAAK,SAAS,SAAS,KAAK,oBAAoB,CAAC,CAAC;AAAA,EAC7D;AAAA,EAEA,aAAa;AACT,WAAO,KAAK,SAAS,UAAU,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EACjF;AAAA,EAEA,aAAa;AACT,WAAO,KAAK,SAAS,UAAU,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EACjF;AAAA,EAEA,aAAa;AACT,WAAO,KAAK,SAAS,aAAa,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EACpF;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,SAAS,QAAQ,KAAK,oBAAoB,CAAC,CAAC;AAAA,EAC5D;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS,SAAS,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EAChF;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS,SAAS,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EAChF;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS,YAAY,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EACnF;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS,WAAW,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EAClF;AAAA,EAEA,aAAa;AACT,WAAO,KAAK,SAAS,WAAW,KAAK,oBAAoB,CAAC,GAAG,KAAK,YAAY;AAAA,EAClF;AAAA,EAEA,eAAe,QAAgB;AAC3B,UAAM,SAAS,KAAK,oBAAoB,MAAM;AAC9C,WAAO,IAAI,YAAY,EAAE,OAAO,KAAK,OAAO,SAAS,QAAQ,SAAS,MAAM,CAAC;AAAA,EACjF;AAAA,EAEA,cAAc,QAAgB;AAC1B,UAAM,SAAS,KAAK,oBAAoB,MAAM;AAC9C,WAAO,KAAK,OAAO,SAAS,QAAQ,SAAS,MAAM;AAAA,EACvD;AAAA,EAEA,yBAAyB;AACrB,WAAO,KAAK,SAAS,aAAa,KAAK;AAAA,EAC3C;AAAA,EAEA,oBAAoB;AAChB,WAAO,KAAK,OAAO,SAAS,KAAK,MAAM;AAAA,EAC3C;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,UAAU,QAAgB;AACtB,QAAI,SAAS,KAAK,SAAS,YAAY;AACnC,YAAM,IAAI,MAAM,UAAU,MAAM,oBAAoB;AAAA,IACxD;AACA,SAAK,SAAS;AAAA,EAClB;AAAA,EAEQ,oBAAoB,MAAc;AACtC,UAAM,SAAS,KAAK;AACpB,SAAK,UAAU;AACf,QAAI,KAAK,SAAS,KAAK,SAAS,YAAY;AACxC,WAAK,SAAS,KAAK,SAAS;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
