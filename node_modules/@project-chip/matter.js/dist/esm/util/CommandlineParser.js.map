{
  "version": 3,
  "sources": ["../../../src/util/CommandlineParser.ts"],
  "sourcesContent": ["/**\n * Quote aware Command line parser\n *\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * This is a Typescript rewrite of https://github.com/cdhowie/shell-parser/\n *\n * Copyright 2019 Chris Howie\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n * Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nclass StringReader {\n    private pos: number;\n    public current: string | undefined;\n\n    constructor(private readonly str: string) {\n        this.pos = -1;\n    }\n\n    next() {\n        if (this.pos < this.str.length) {\n            this.current = this.str[++this.pos];\n        }\n\n        return this.current;\n    }\n}\n\nfunction isWhitespace(c: string) {\n    return c === \" \";\n}\n\nfunction consumeWhitespace(r: StringReader) {\n    while (r.current !== undefined && isWhitespace(r.current)) {\n        r.next();\n    }\n}\n\nfunction escaped(r: StringReader) {\n    const n = r.next();\n    if (n === undefined) {\n        throw new Error(\"Unterminated escape sequence\");\n    }\n\n    return n;\n}\n\nfunction quoted(r: StringReader) {\n    let s = \"\";\n\n    const q = r.current;\n    const e = q === '\"';\n\n    for (let c = r.next(); c !== q; c = r.next()) {\n        if (c === undefined) {\n            throw new Error(`Unterminated quote: ${q}`);\n        }\n\n        if (e && c === \"\\\\\") {\n            s += escaped(r);\n        } else {\n            s += c;\n        }\n    }\n\n    return s;\n}\n\nexport function commandlineParser(line: string) {\n    const args = [];\n    let s = \"\";\n\n    const r = new StringReader(line);\n    r.next();\n    consumeWhitespace(r);\n\n    // Indicates if we saw a quote in the current argument. This is necessary\n    // to allow empty arguments ('' or \"\"), otherwise we have no way to\n    // distinguish this case from nothing.\n    let sawQuote = false;\n\n    while (r.current !== undefined) {\n        if (isWhitespace(r.current)) {\n            args.push(s);\n            sawQuote = false;\n            s = \"\";\n\n            consumeWhitespace(r);\n        } else if (r.current == \"\\\\\") {\n            s += escaped(r);\n            r.next();\n        } else if (r.current === \"'\" || r.current === '\"') {\n            s += quoted(r);\n            sawQuote = true;\n            r.next();\n        } else {\n            s += r.current;\n            r.next();\n        }\n    }\n\n    if (sawQuote || s.length) {\n        args.push(s);\n    }\n\n    return args;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA,MAAM,aAAa;AAAA,EAIf,YAA6B,KAAa;AAAb;AACzB,SAAK,MAAM;AAAA,EACf;AAAA,EALQ;AAAA,EACD;AAAA,EAMP,OAAO;AACH,QAAI,KAAK,MAAM,KAAK,IAAI,QAAQ;AAC5B,WAAK,UAAU,KAAK,IAAI,EAAE,KAAK,GAAG;AAAA,IACtC;AAEA,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,SAAS,aAAa,GAAW;AAC7B,SAAO,MAAM;AACjB;AAEA,SAAS,kBAAkB,GAAiB;AACxC,SAAO,EAAE,YAAY,UAAa,aAAa,EAAE,OAAO,GAAG;AACvD,MAAE,KAAK;AAAA,EACX;AACJ;AAEA,SAAS,QAAQ,GAAiB;AAC9B,QAAM,IAAI,EAAE,KAAK;AACjB,MAAI,MAAM,QAAW;AACjB,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAClD;AAEA,SAAO;AACX;AAEA,SAAS,OAAO,GAAiB;AAC7B,MAAI,IAAI;AAER,QAAM,IAAI,EAAE;AACZ,QAAM,IAAI,MAAM;AAEhB,WAAS,IAAI,EAAE,KAAK,GAAG,MAAM,GAAG,IAAI,EAAE,KAAK,GAAG;AAC1C,QAAI,MAAM,QAAW;AACjB,YAAM,IAAI,MAAM,uBAAuB,CAAC,EAAE;AAAA,IAC9C;AAEA,QAAI,KAAK,MAAM,MAAM;AACjB,WAAK,QAAQ,CAAC;AAAA,IAClB,OAAO;AACH,WAAK;AAAA,IACT;AAAA,EACJ;AAEA,SAAO;AACX;AAEO,SAAS,kBAAkB,MAAc;AAC5C,QAAM,OAAO,CAAC;AACd,MAAI,IAAI;AAER,QAAM,IAAI,IAAI,aAAa,IAAI;AAC/B,IAAE,KAAK;AACP,oBAAkB,CAAC;AAKnB,MAAI,WAAW;AAEf,SAAO,EAAE,YAAY,QAAW;AAC5B,QAAI,aAAa,EAAE,OAAO,GAAG;AACzB,WAAK,KAAK,CAAC;AACX,iBAAW;AACX,UAAI;AAEJ,wBAAkB,CAAC;AAAA,IACvB,WAAW,EAAE,WAAW,MAAM;AAC1B,WAAK,QAAQ,CAAC;AACd,QAAE,KAAK;AAAA,IACX,WAAW,EAAE,YAAY,OAAO,EAAE,YAAY,KAAK;AAC/C,WAAK,OAAO,CAAC;AACb,iBAAW;AACX,QAAE,KAAK;AAAA,IACX,OAAO;AACH,WAAK,EAAE;AACP,QAAE,KAAK;AAAA,IACX;AAAA,EACJ;AAEA,MAAI,YAAY,EAAE,QAAQ;AACtB,SAAK,KAAK,CAAC;AAAA,EACf;AAEA,SAAO;AACX;",
  "names": []
}
