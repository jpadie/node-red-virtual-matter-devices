/**
 * Quote aware Command line parser
 *
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
class StringReader {
  constructor(str) {
    this.str = str;
    this.pos = -1;
  }
  pos;
  current;
  next() {
    if (this.pos < this.str.length) {
      this.current = this.str[++this.pos];
    }
    return this.current;
  }
}
function isWhitespace(c) {
  return c === " ";
}
function consumeWhitespace(r) {
  while (r.current !== void 0 && isWhitespace(r.current)) {
    r.next();
  }
}
function escaped(r) {
  const n = r.next();
  if (n === void 0) {
    throw new Error("Unterminated escape sequence");
  }
  return n;
}
function quoted(r) {
  let s = "";
  const q = r.current;
  const e = q === '"';
  for (let c = r.next(); c !== q; c = r.next()) {
    if (c === void 0) {
      throw new Error(`Unterminated quote: ${q}`);
    }
    if (e && c === "\\") {
      s += escaped(r);
    } else {
      s += c;
    }
  }
  return s;
}
function commandlineParser(line) {
  const args = [];
  let s = "";
  const r = new StringReader(line);
  r.next();
  consumeWhitespace(r);
  let sawQuote = false;
  while (r.current !== void 0) {
    if (isWhitespace(r.current)) {
      args.push(s);
      sawQuote = false;
      s = "";
      consumeWhitespace(r);
    } else if (r.current == "\\") {
      s += escaped(r);
      r.next();
    } else if (r.current === "'" || r.current === '"') {
      s += quoted(r);
      sawQuote = true;
      r.next();
    } else {
      s += r.current;
      r.next();
    }
  }
  if (sawQuote || s.length) {
    args.push(s);
  }
  return args;
}
export {
  commandlineParser
};
//# sourceMappingURL=CommandlineParser.js.map
