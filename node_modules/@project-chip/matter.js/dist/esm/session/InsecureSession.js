/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MessageCodec } from "../codec/MessageCodec.js";
import { MatterFlowError } from "../common/MatterError.js";
import { NodeId } from "../datatype/NodeId.js";
import { MessageReceptionStateUnencryptedWithRollover } from "../protocol/MessageReceptionState.js";
import { NoAssociatedFabricError } from "./SecureSession.js";
import { Session } from "./Session.js";
import { UNICAST_UNSECURE_SESSION_ID } from "./SessionManager.js";
class InsecureSession extends Session {
  #initiatorNodeId;
  closingAfterExchangeFinished = false;
  #context;
  supportsMRP = true;
  constructor(args) {
    const { context, initiatorNodeId, isInitiator } = args;
    super({
      ...args,
      setActiveTimestamp: !isInitiator,
      // When we are the initiator we assume the node is in idle mode
      messageReceptionState: new MessageReceptionStateUnencryptedWithRollover()
    });
    this.#context = context;
    this.#initiatorNodeId = initiatorNodeId ?? NodeId.randomOperationalNodeId();
  }
  get isSecure() {
    return false;
  }
  get isPase() {
    return false;
  }
  decode(packet) {
    return MessageCodec.decodePayload(packet);
  }
  encode(message) {
    return MessageCodec.encodePayload(message);
  }
  get attestationChallengeKey() {
    throw new MatterFlowError("Not supported on an unsecure session");
  }
  setFabric(_fabric) {
    throw new MatterFlowError("Not supported on an unsecure session");
  }
  get name() {
    return `insecure/${this.#initiatorNodeId}`;
  }
  get context() {
    return this.#context;
  }
  get id() {
    return UNICAST_UNSECURE_SESSION_ID;
  }
  get peerSessionId() {
    return UNICAST_UNSECURE_SESSION_ID;
  }
  get nodeId() {
    return this.#initiatorNodeId;
  }
  get peerNodeId() {
    return void 0;
  }
  get associatedFabric() {
    throw new NoAssociatedFabricError("Session needs to be a secure session");
  }
  async destroy() {
    await this.end();
  }
  async end() {
    await this.closeCallback?.();
  }
}
export {
  InsecureSession
};
//# sourceMappingURL=InsecureSession.js.map
