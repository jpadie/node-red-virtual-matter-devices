{
  "version": 3,
  "sources": ["../../../../src/session/case/CaseMessages.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    CRYPTO_AEAD_MIC_LENGTH_BYTES,\n    CRYPTO_GROUP_SIZE_BYTES,\n    CRYPTO_HASH_LEN_BYTES,\n    CRYPTO_PUBLIC_KEY_SIZE_BYTES,\n} from \"../../crypto/CryptoConstants.js\";\nimport { TlvUInt16 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport { TlvSessionParameters } from \"../pase/PaseMessages.js\";\n\nconst CASE_SIGNATURE_LENGTH = CRYPTO_GROUP_SIZE_BYTES * 2;\n\nexport const KDFSR1_KEY_INFO = ByteArray.fromString(\"Sigma1_Resume\");\nexport const KDFSR2_KEY_INFO = ByteArray.fromString(\"Sigma2_Resume\");\nexport const RESUME1_MIC_NONCE = ByteArray.fromString(\"NCASE_SigmaS1\");\nexport const RESUME2_MIC_NONCE = ByteArray.fromString(\"NCASE_SigmaS2\");\nexport const KDFSR2_INFO = ByteArray.fromString(\"Sigma2\");\nexport const KDFSR3_INFO = ByteArray.fromString(\"Sigma3\");\nexport const TBE_DATA2_NONCE = ByteArray.fromString(\"NCASE_Sigma2N\");\nexport const TBE_DATA3_NONCE = ByteArray.fromString(\"NCASE_Sigma3N\");\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.2.3 */\nexport const TlvCaseSigma1 = TlvObject({\n    initiatorRandom: TlvField(1, TlvByteString.bound({ length: 32 })),\n    initiatorSessionId: TlvField(2, TlvUInt16),\n    destinationId: TlvField(3, TlvByteString.bound({ length: CRYPTO_HASH_LEN_BYTES })),\n    initiatorEcdhPublicKey: TlvField(4, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })),\n    initiatorSessionParams: TlvOptionalField(5, TlvSessionParameters),\n    resumptionId: TlvOptionalField(6, TlvByteString.bound({ length: 16 })),\n    initiatorResumeMic: TlvOptionalField(7, TlvByteString.bound({ length: CRYPTO_AEAD_MIC_LENGTH_BYTES })),\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.2.3 */\nexport const TlvCaseSigma2 = TlvObject({\n    responderRandom: TlvField(1, TlvByteString.bound({ length: 32 })),\n    responderSessionId: TlvField(2, TlvUInt16),\n    responderEcdhPublicKey: TlvField(3, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })),\n    encrypted: TlvField(4, TlvByteString),\n    responderSessionParams: TlvOptionalField(5, TlvSessionParameters),\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.2.3 */\nexport const TlvCaseSigma2Resume = TlvObject({\n    resumptionId: TlvField(1, TlvByteString.bound({ length: 16 })),\n    resumeMic: TlvField(2, TlvByteString.bound({ length: 16 })),\n    responderSessionId: TlvField(3, TlvUInt16),\n    responderSessionParams: TlvOptionalField(4, TlvSessionParameters),\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.2.3 */\nexport const TlvCaseSigma3 = TlvObject({\n    encrypted: TlvField(1, TlvByteString),\n});\n\n/** @see {@link MatterSpecification.v10.Core} \u00A7 4.13.2.3 */\nexport const TlvSignedData = TlvObject({\n    nodeOpCert: TlvField(1, TlvByteString),\n    intermediateCACert: TlvOptionalField(2, TlvByteString),\n    ecdhPublicKey: TlvField(3, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })),\n    peerEcdhPublicKey: TlvField(4, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })),\n});\n\n/** @see {@link MatterSpecification.v10.Core} \u00A7 4.13.2.3 */\nexport const TlvEncryptedDataSigma2 = TlvObject({\n    nodeOpCert: TlvField(1, TlvByteString),\n    intermediateCACert: TlvOptionalField(2, TlvByteString),\n    signature: TlvField(3, TlvByteString.bound({ length: CASE_SIGNATURE_LENGTH })),\n    resumptionId: TlvField(4, TlvByteString.bound({ length: 16 })),\n});\n\n/** @see {@link MatterSpecification.v10.Core} \u00A7 4.13.2.3 */\nexport const TlvEncryptedDataSigma3 = TlvObject({\n    nodeOpCert: TlvField(1, TlvByteString),\n    intermediateCACert: TlvOptionalField(2, TlvByteString),\n    signature: TlvField(3, TlvByteString.bound({ length: CASE_SIGNATURE_LENGTH })),\n});\n"],
  "mappings": "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",
  "names": []
}
