/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterController } from "../../MatterController.js";
import { MatterDevice } from "../../MatterDevice.js";
import { SecureChannelMessenger } from "../../protocol/securechannel/SecureChannelMessenger.js";
import { TypeFromSchema } from "../../tlv/TlvSchema.js";
import { TlvCaseSigma1, TlvCaseSigma2, TlvCaseSigma2Resume, TlvCaseSigma3 } from "./CaseMessages.js";
export declare class CaseServerMessenger extends SecureChannelMessenger<MatterDevice> {
    readSigma1(): Promise<{
        sigma1Bytes: Uint8Array;
        sigma1: import("../../tlv/TlvObject.js").TypeFromFields<{
            initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            initiatorSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
            destinationId: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            initiatorEcdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            initiatorSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            }>>;
            resumptionId: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
            initiatorResumeMic: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
        }>;
    }>;
    sendSigma2(sigma2: TypeFromSchema<typeof TlvCaseSigma2>): Promise<Uint8Array>;
    sendSigma2Resume(sigma2Resume: TypeFromSchema<typeof TlvCaseSigma2Resume>): Promise<Uint8Array>;
    readSigma3(): Promise<{
        sigma3Bytes: Uint8Array;
        sigma3: import("../../tlv/TlvObject.js").TypeFromFields<{
            encrypted: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
        }>;
    }>;
}
export declare class CaseClientMessenger extends SecureChannelMessenger<MatterController> {
    sendSigma1(sigma1: TypeFromSchema<typeof TlvCaseSigma1>): Promise<Uint8Array>;
    readSigma2(): Promise<{
        sigma2Bytes: Uint8Array;
        sigma2: import("../../tlv/TlvObject.js").TypeFromFields<{
            responderRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
            responderEcdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            encrypted: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            }>>;
        }>;
        sigma2Resume?: undefined;
    } | {
        sigma2Resume: import("../../tlv/TlvObject.js").TypeFromFields<{
            resumptionId: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            resumeMic: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
            responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            }>>;
        }>;
        sigma2Bytes?: undefined;
        sigma2?: undefined;
    }>;
    sendSigma3(sigma3: TypeFromSchema<typeof TlvCaseSigma3>): Promise<Uint8Array>;
}
//# sourceMappingURL=CaseMessenger.d.ts.map