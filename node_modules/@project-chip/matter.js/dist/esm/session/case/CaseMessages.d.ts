export declare const KDFSR1_KEY_INFO: Uint8Array;
export declare const KDFSR2_KEY_INFO: Uint8Array;
export declare const RESUME1_MIC_NONCE: Uint8Array;
export declare const RESUME2_MIC_NONCE: Uint8Array;
export declare const KDFSR2_INFO: Uint8Array;
export declare const KDFSR3_INFO: Uint8Array;
export declare const TBE_DATA2_NONCE: Uint8Array;
export declare const TBE_DATA3_NONCE: Uint8Array;
/** @see {@link MatterSpecification.v13.Core} § 4.14.2.3 */
export declare const TlvCaseSigma1: import("../../tlv/TlvObject.js").ObjectSchema<{
    initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    initiatorSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
    destinationId: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    initiatorEcdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    initiatorSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
    resumptionId: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
    initiatorResumeMic: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.2.3 */
export declare const TlvCaseSigma2: import("../../tlv/TlvObject.js").ObjectSchema<{
    responderRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
    responderEcdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    encrypted: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.2.3 */
export declare const TlvCaseSigma2Resume: import("../../tlv/TlvObject.js").ObjectSchema<{
    resumptionId: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    resumeMic: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
    responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
        idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
        maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
    }>>;
}>;
/** @see {@link MatterSpecification.v13.Core} § 4.14.2.3 */
export declare const TlvCaseSigma3: import("../../tlv/TlvObject.js").ObjectSchema<{
    encrypted: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v10.Core} § 4.13.2.3 */
export declare const TlvSignedData: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeOpCert: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    intermediateCACert: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
    ecdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    peerEcdhPublicKey: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v10.Core} § 4.13.2.3 */
export declare const TlvEncryptedDataSigma2: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeOpCert: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    intermediateCACert: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
    signature: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    resumptionId: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
/** @see {@link MatterSpecification.v10.Core} § 4.13.2.3 */
export declare const TlvEncryptedDataSigma3: import("../../tlv/TlvObject.js").ObjectSchema<{
    nodeOpCert: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    intermediateCACert: import("../../tlv/TlvObject.js").OptionalFieldType<Uint8Array>;
    signature: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
}>;
//# sourceMappingURL=CaseMessages.d.ts.map