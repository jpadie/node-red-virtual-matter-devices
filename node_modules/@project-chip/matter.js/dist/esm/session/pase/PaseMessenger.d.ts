/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { MatterController } from "../../MatterController.js";
import { MatterDevice } from "../../MatterDevice.js";
import { SecureChannelMessenger } from "../../protocol/securechannel/SecureChannelMessenger.js";
import { TypeFromSchema } from "../../tlv/TlvSchema.js";
import { TlvPasePake1, TlvPasePake2, TlvPasePake3, TlvPbkdfParamRequest, TlvPbkdfParamResponse } from "./PaseMessages.js";
export declare const DEFAULT_PASSCODE_ID = 0;
export declare const SPAKE_CONTEXT: Uint8Array;
type PbkdfParamRequest = TypeFromSchema<typeof TlvPbkdfParamRequest>;
type PbkdfParamResponse = TypeFromSchema<typeof TlvPbkdfParamResponse>;
type PasePake1 = TypeFromSchema<typeof TlvPasePake1>;
type PasePake2 = TypeFromSchema<typeof TlvPasePake2>;
type PasePake3 = TypeFromSchema<typeof TlvPasePake3>;
export declare class PaseServerMessenger extends SecureChannelMessenger<MatterDevice> {
    readPbkdfParamRequest(): Promise<{
        requestPayload: Uint8Array;
        request: import("../../tlv/TlvObject.js").TypeFromFields<{
            initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            initiatorSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
            passcodeId: import("../../tlv/TlvObject.js").FieldType<number>;
            hasPbkdfParameters: import("../../tlv/TlvObject.js").FieldType<boolean>;
            initiatorSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            }>>;
        }>;
    }>;
    sendPbkdfParamResponse(response: PbkdfParamResponse): Promise<Uint8Array>;
    readPasePake1(): Promise<import("../../tlv/TlvObject.js").TypeFromFields<{
        x: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    }>>;
    sendPasePake2(pasePake2: PasePake2): Promise<Uint8Array>;
    readPasePake3(): Promise<import("../../tlv/TlvObject.js").TypeFromFields<{
        verifier: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    }>>;
}
export declare class PaseClientMessenger extends SecureChannelMessenger<MatterController> {
    sendPbkdfParamRequest(request: PbkdfParamRequest): Promise<Uint8Array>;
    readPbkdfParamResponse(): Promise<{
        responsePayload: Uint8Array;
        response: import("../../tlv/TlvObject.js").TypeFromFields<{
            initiatorRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            responderRandom: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            responderSessionId: import("../../tlv/TlvObject.js").FieldType<number>;
            pbkdfParameters: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                iterations: import("../../tlv/TlvObject.js").FieldType<number>;
                salt: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
            }>>;
            responderSessionParams: import("../../tlv/TlvObject.js").OptionalFieldType<import("../../tlv/TlvObject.js").TypeFromFields<{
                idleIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeIntervalMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                activeThresholdMs: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                dataModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                interactionModelRevision: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                specificationVersion: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
                maxPathsPerInvoke: import("../../tlv/TlvObject.js").OptionalFieldType<number>;
            }>>;
        }>;
    }>;
    sendPasePake1(pasePake1: PasePake1): Promise<Uint8Array>;
    readPasePake2(): Promise<import("../../tlv/TlvObject.js").TypeFromFields<{
        y: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
        verifier: import("../../tlv/TlvObject.js").FieldType<Uint8Array>;
    }>>;
    sendPasePake3(pasePake3: PasePake3): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=PaseMessenger.d.ts.map