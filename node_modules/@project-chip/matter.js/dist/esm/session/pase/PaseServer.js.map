{
  "version": 3,
  "sources": ["../../../../src/session/pase/PaseServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../MatterDevice.js\";\nimport { MatterFlowError, UnexpectedDataError } from \"../../common/MatterError.js\";\nimport { Crypto, ec } from \"../../crypto/Crypto.js\";\nimport { PbkdfParameters, Spake2p } from \"../../crypto/Spake2p.js\";\nimport { NodeId } from \"../../datatype/NodeId.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { MessageExchange } from \"../../protocol/MessageExchange.js\";\nimport { ProtocolHandler } from \"../../protocol/ProtocolHandler.js\";\nimport { ProtocolStatusCode, SECURE_CHANNEL_PROTOCOL_ID } from \"../../protocol/securechannel/SecureChannelMessages.js\";\nimport { ChannelStatusResponseError } from \"../../protocol/securechannel/SecureChannelMessenger.js\";\nimport { Time, Timer } from \"../../time/Time.js\";\nimport { ByteArray } from \"../../util/ByteArray.js\";\nimport { DEFAULT_PASSCODE_ID, PaseServerMessenger, SPAKE_CONTEXT } from \"./PaseMessenger.js\";\n\nconst { bytesToNumberBE } = ec;\n\nconst logger = Logger.get(\"PaseServer\");\n\nconst PASE_PAIRING_TIMEOUT_MS = 60_000;\nconst PASE_COMMISSIONING_MAX_ERRORS = 20;\n\nexport class MaximumPasePairingErrorsReachedError extends MatterFlowError {}\n\nexport class PaseServer implements ProtocolHandler<MatterDevice> {\n    private pairingTimer: Timer | undefined;\n    private pairingErrors = 0;\n\n    static async fromPin(setupPinCode: number, pbkdfParameters: PbkdfParameters) {\n        const { w0, L } = await Spake2p.computeW0L(pbkdfParameters, setupPinCode);\n        return new PaseServer(w0, L, pbkdfParameters);\n    }\n\n    static fromVerificationValue(verificationValue: ByteArray, pbkdfParameters?: PbkdfParameters) {\n        const w0 = bytesToNumberBE(verificationValue.slice(0, 32));\n        const L = verificationValue.slice(32, 32 + 65);\n        return new PaseServer(w0, L, pbkdfParameters);\n    }\n\n    constructor(\n        private readonly w0: bigint,\n        private readonly L: ByteArray,\n        private readonly pbkdfParameters?: PbkdfParameters,\n    ) {}\n\n    getId(): number {\n        return SECURE_CHANNEL_PROTOCOL_ID;\n    }\n\n    async onNewExchange(exchange: MessageExchange<MatterDevice>) {\n        const messenger = new PaseServerMessenger(exchange);\n        try {\n            await this.handlePairingRequest(exchange.session.context, messenger);\n        } catch (error) {\n            this.pairingErrors++;\n            logger.error(\n                `An error occurred during the PASE commissioning (${this.pairingErrors}/${PASE_COMMISSIONING_MAX_ERRORS}):`,\n                error,\n            );\n\n            // If we received a ChannelStatusResponseError we do not need to send one back, so just cancel pairing\n            const sendError = !(error instanceof ChannelStatusResponseError);\n            await this.cancelPairing(messenger, sendError);\n\n            if (this.pairingErrors >= PASE_COMMISSIONING_MAX_ERRORS) {\n                throw new MaximumPasePairingErrorsReachedError(\n                    `Pase server: Too many errors during PASE commissioning, aborting commissioning window`,\n                );\n            }\n        } finally {\n            // Destroy the unsecure session used to establish the secure Case session\n            await exchange.session.destroy();\n        }\n    }\n\n    private async handlePairingRequest(server: MatterDevice, messenger: PaseServerMessenger) {\n        // When a Commissioner is either in the process of establishing a PASE session with the Commissionee or has\n        // successfully established a session, the Commissionee SHALL NOT accept any more requests for new PASE\n        // sessions until session establishment fails or the successfully established PASE session is terminated on\n        // the commissioning channel.\n        if (server.existsOpenPaseSession()) {\n            throw new MatterFlowError(\n                \"Pase server: Pairing already in progress (PASE session exists), ignoring new exchange.\",\n            );\n        }\n\n        if (this.pairingTimer !== undefined && this.pairingTimer.isRunning) {\n            throw new MatterFlowError(\n                \"Pase server: Pairing already in progress (PASE establishment Timer running), ignoring new exchange.\",\n            );\n        }\n\n        logger.info(`Received pairing request from ${messenger.getChannelName()}.`);\n\n        this.pairingTimer = Time.getTimer(\"PASE pairing timeout\", PASE_PAIRING_TIMEOUT_MS, () =>\n            this.cancelPairing(messenger),\n        ).start();\n\n        // Read pbkdfRequest and send pbkdfResponse\n        const {\n            requestPayload,\n            request: {\n                initiatorRandom,\n                initiatorSessionParams,\n                passcodeId,\n                hasPbkdfParameters,\n                initiatorSessionId: peerSessionId,\n            },\n        } = await messenger.readPbkdfParamRequest();\n        if (passcodeId !== DEFAULT_PASSCODE_ID) {\n            throw new UnexpectedDataError(`Unsupported passcode ID ${passcodeId}.`);\n        }\n\n        const responderSessionId = await server.getNextAvailableSessionId(); // Responder Session Id\n        const responderRandom = Crypto.getRandom();\n\n        const responsePayload = await messenger.sendPbkdfParamResponse({\n            initiatorRandom,\n            responderRandom,\n            responderSessionId,\n            pbkdfParameters: hasPbkdfParameters ? undefined : this.pbkdfParameters,\n            responderSessionParams: server.sessionParameters, // responder session parameters\n        });\n\n        // Process pake1 and send pake2\n        const spake2p = Spake2p.create(Crypto.hash([SPAKE_CONTEXT, requestPayload, responsePayload]), this.w0);\n        const { x: X } = await messenger.readPasePake1();\n        const Y = spake2p.computeY();\n        const { Ke, hAY, hBX } = await spake2p.computeSecretAndVerifiersFromX(this.L, X, Y);\n        await messenger.sendPasePake2({ y: Y, verifier: hBX });\n\n        // Read and process pake3\n        const { verifier } = await messenger.readPasePake3();\n        if (!verifier.equals(hAY)) {\n            throw new UnexpectedDataError(\"Received incorrect key confirmation from the initiator.\");\n        }\n\n        // All good! Creating the secure PASE session\n        await server.sessionManager.createSecureSession({\n            sessionId: responderSessionId,\n            fabric: undefined,\n            peerNodeId: NodeId.UNSPECIFIED_NODE_ID,\n            peerSessionId,\n            sharedSecret: Ke,\n            salt: new ByteArray(0),\n            isInitiator: false,\n            isResumption: false,\n            peerSessionParameters: initiatorSessionParams,\n        });\n        logger.info(`Session ${responderSessionId} created with ${messenger.getChannelName()}.`);\n\n        await messenger.sendSuccess();\n        await messenger.close();\n\n        this.pairingTimer?.stop();\n        this.pairingTimer = undefined;\n    }\n\n    async cancelPairing(messenger: PaseServerMessenger, sendError = true) {\n        this.pairingTimer?.stop();\n        this.pairingTimer = undefined;\n\n        if (sendError) {\n            await messenger.sendError(ProtocolStatusCode.InvalidParam);\n        }\n        await messenger.close();\n    }\n\n    async close() {\n        // Nothing to do\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
