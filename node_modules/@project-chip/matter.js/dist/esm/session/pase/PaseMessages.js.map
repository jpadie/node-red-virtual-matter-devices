{
  "version": 3,
  "sources": ["../../../../src/session/pase/PaseMessages.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CRYPTO_HASH_LEN_BYTES, CRYPTO_PUBLIC_KEY_SIZE_BYTES } from \"../../crypto/CryptoConstants.js\";\nimport { TlvBoolean } from \"../../tlv/TlvBoolean.js\";\nimport { TlvUInt16, TlvUInt32 } from \"../../tlv/TlvNumber.js\";\nimport { TlvField, TlvObject, TlvOptionalField } from \"../../tlv/TlvObject.js\";\nimport { TlvByteString } from \"../../tlv/TlvString.js\";\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.12.8 */\nexport const TlvSessionParameters = TlvObject({\n    /** Maximum sleep interval of node when in idle mode. */\n    idleIntervalMs: TlvOptionalField(1, TlvUInt32) /* default: SESSION_IDLE_INTERVAL */,\n\n    /** Maximum sleep interval of node when in active mode. */\n    activeIntervalMs: TlvOptionalField(2, TlvUInt32) /* default: SESSION_ACTIVE_INTERVAL */,\n\n    /** Minimum amount of time the node SHOULD stay active after network activity. */\n    activeThresholdMs: TlvOptionalField(3, TlvUInt16) /* default: SESSION_ACTIVE_THRESHOLD */,\n\n    /** Data model revision. */\n    dataModelRevision: TlvOptionalField(4, TlvUInt16) /* default: 16 OR 17, we choose 17 aka Matter 1.2 */,\n\n    /** Interaction model revision. */\n    interactionModelRevision: TlvOptionalField(5, TlvUInt16) /* default 10 OR 11, we choose 11 aka Matter 1.2 */,\n\n    /** Specification version. */\n    specificationVersion: TlvOptionalField(6, TlvUInt32) /* default: STRICTLY SMALLER THAN 0x01030000, we choose 0 */,\n\n    /** Maximum Paths pert Invoke */\n    maxPathsPerInvoke: TlvOptionalField(7, TlvUInt16) /* default: 1 */,\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.1.2 */\nexport const TlvPbkdfParamRequest = TlvObject({\n    initiatorRandom: TlvField(1, TlvByteString.bound({ length: 32 })),\n    initiatorSessionId: TlvField(2, TlvUInt16), // Specs: range: 16bits\n    passcodeId: TlvField(3, TlvUInt16), // Specs: length: 16bits so min is 0x8000?\n    hasPbkdfParameters: TlvField(4, TlvBoolean),\n    initiatorSessionParams: TlvOptionalField(5, TlvSessionParameters),\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.1.2 */\nexport const TlvPbkdfParamResponse = TlvObject({\n    initiatorRandom: TlvField(1, TlvByteString.bound({ length: 32 })),\n    responderRandom: TlvField(2, TlvByteString.bound({ length: 32 })),\n    responderSessionId: TlvField(3, TlvUInt16),\n    pbkdfParameters: TlvOptionalField(\n        4,\n        TlvObject({\n            iterations: TlvField(1, TlvUInt32),\n            salt: TlvField(2, TlvByteString.bound({ minLength: 16, maxLength: 32 })),\n        }),\n    ),\n    responderSessionParams: TlvOptionalField(5, TlvSessionParameters),\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.1.2 */\nexport const TlvPasePake1 = TlvObject({\n    x: TlvField(1, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })), // pA\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.1.2 */\nexport const TlvPasePake2 = TlvObject({\n    y: TlvField(1, TlvByteString.bound({ length: CRYPTO_PUBLIC_KEY_SIZE_BYTES })), // pB\n    verifier: TlvField(2, TlvByteString.bound({ length: CRYPTO_HASH_LEN_BYTES })), // cB\n});\n\n/** @see {@link MatterSpecification.v13.Core} \u00A7 4.14.1.2 */\nexport const TlvPasePake3 = TlvObject({\n    verifier: TlvField(1, TlvByteString.bound({ length: CRYPTO_HASH_LEN_BYTES })), // cA\n});\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,uBAAuB,oCAAoC;AACpE,SAAS,kBAAkB;AAC3B,SAAS,WAAW,iBAAiB;AACrC,SAAS,UAAU,WAAW,wBAAwB;AACtD,SAAS,qBAAqB;AAGvB,MAAM,uBAAuB,UAAU;AAAA;AAAA,EAE1C,gBAAgB,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAG7C,kBAAkB,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAG/C,mBAAmB,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAGhD,mBAAmB,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAGhD,0BAA0B,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAGvD,sBAAsB,iBAAiB,GAAG,SAAS;AAAA;AAAA,EAGnD,mBAAmB,iBAAiB,GAAG,SAAS;AACpD,CAAC;AAGM,MAAM,uBAAuB,UAAU;AAAA,EAC1C,iBAAiB,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,GAAG,CAAC,CAAC;AAAA,EAChE,oBAAoB,SAAS,GAAG,SAAS;AAAA;AAAA,EACzC,YAAY,SAAS,GAAG,SAAS;AAAA;AAAA,EACjC,oBAAoB,SAAS,GAAG,UAAU;AAAA,EAC1C,wBAAwB,iBAAiB,GAAG,oBAAoB;AACpE,CAAC;AAGM,MAAM,wBAAwB,UAAU;AAAA,EAC3C,iBAAiB,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,GAAG,CAAC,CAAC;AAAA,EAChE,iBAAiB,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,GAAG,CAAC,CAAC;AAAA,EAChE,oBAAoB,SAAS,GAAG,SAAS;AAAA,EACzC,iBAAiB;AAAA,IACb;AAAA,IACA,UAAU;AAAA,MACN,YAAY,SAAS,GAAG,SAAS;AAAA,MACjC,MAAM,SAAS,GAAG,cAAc,MAAM,EAAE,WAAW,IAAI,WAAW,GAAG,CAAC,CAAC;AAAA,IAC3E,CAAC;AAAA,EACL;AAAA,EACA,wBAAwB,iBAAiB,GAAG,oBAAoB;AACpE,CAAC;AAGM,MAAM,eAAe,UAAU;AAAA,EAClC,GAAG,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,6BAA6B,CAAC,CAAC;AAAA;AAChF,CAAC;AAGM,MAAM,eAAe,UAAU;AAAA,EAClC,GAAG,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,6BAA6B,CAAC,CAAC;AAAA;AAAA,EAC5E,UAAU,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,sBAAsB,CAAC,CAAC;AAAA;AAChF,CAAC;AAGM,MAAM,eAAe,UAAU;AAAA,EAClC,UAAU,SAAS,GAAG,cAAc,MAAM,EAAE,QAAQ,sBAAsB,CAAC,CAAC;AAAA;AAChF,CAAC;",
  "names": []
}
