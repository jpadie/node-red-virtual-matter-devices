/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { NoProviderError } from "../common/MatterError.js";
import { Diagnostic } from "../log/Diagnostic.js";
import { DiagnosticSource } from "../log/DiagnosticSource.js";
const registry = /* @__PURE__ */ new Set();
class Time {
  static get = () => DefaultTime;
  static now = () => Time.get().now();
  static nowMs = () => Time.get().nowMs();
  static getTimer = (name, durationMs, callback) => Time.get().getTimer(name, durationMs, callback);
  static getPeriodicTimer = (name, intervalMs, callback) => Time.get().getPeriodicTimer(name, intervalMs, callback);
  static sleep = async (name, durationMs) => new Promise((resolve) => Time.get().getTimer(name, durationMs, resolve).start());
  static register(timer) {
    timer.elapsed = Diagnostic.elapsed();
    registry.add(timer);
  }
  static unregister(timer) {
    registry.delete(timer);
  }
}
const DefaultTime = new class extends Time {
  now() {
    return /* @__PURE__ */ new Date();
  }
  nowMs() {
    return this.now().getTime();
  }
  getTimer() {
    throw new NoProviderError("Default time provider does not implement timers");
  }
  getPeriodicTimer() {
    return this.getTimer();
  }
}();
if (typeof MatterHooks !== "undefined") {
  MatterHooks.timeSetup?.(Time);
}
DiagnosticSource.add({
  get [Diagnostic.value]() {
    return Diagnostic.node("\u23F1", "Timers", {
      children: [...registry].map((timer) => [
        timer.name,
        Diagnostic.dict({
          periodic: timer.isPeriodic,
          interval: Diagnostic.interval(timer.intervalMs),
          system: timer.systemId,
          elapsed: timer.elapsed
        })
      ])
    });
  }
});
export {
  Time
};
//# sourceMappingURL=Time.js.map
