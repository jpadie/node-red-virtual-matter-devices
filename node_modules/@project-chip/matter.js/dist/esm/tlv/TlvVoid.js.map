{
  "version": 3,
  "sources": ["../../../src/tlv/TlvVoid.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InternalError } from \"../common/MatterError.js\";\nimport { ValidationDatatypeMismatchError } from \"../common/ValidationError.js\";\nimport { TlvTag, TlvTypeLength } from \"./TlvCodec.js\";\nimport { TlvReader, TlvSchema, TlvStream, TlvWriter } from \"./TlvSchema.js\";\n\n/**\n * Schema to encode void.\n */\nexport class VoidSchema extends TlvSchema<void> {\n    override encodeTlvInternal(_writer: TlvWriter, _value: void, _tag?: TlvTag): void {\n        // Nothing to do\n    }\n\n    override decodeTlv(_encoded: TlvStream): void {\n        // Nothing to do\n    }\n\n    override decodeTlvInternalValue(_reader: TlvReader, _typeLength: TlvTypeLength): void {\n        throw new InternalError(\"decodeTlvInternalValue should never be called\");\n    }\n\n    override validate(data: void): void {\n        if (data !== undefined) throw new ValidationDatatypeMismatchError(`Expected void, got ${typeof data}.`);\n    }\n}\n\n/** Void TLV schema. */\nexport const TlvVoid = new VoidSchema();\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,qBAAqB;AAC9B,SAAS,uCAAuC;AAEhD,SAAoB,iBAAuC;AAKpD,MAAM,mBAAmB,UAAgB;AAAA,EACnC,kBAAkB,SAAoB,QAAc,MAAqB;AAAA,EAElF;AAAA,EAES,UAAU,UAA2B;AAAA,EAE9C;AAAA,EAES,uBAAuB,SAAoB,aAAkC;AAClF,UAAM,IAAI,cAAc,+CAA+C;AAAA,EAC3E;AAAA,EAES,SAAS,MAAkB;AAChC,QAAI,SAAS,OAAW,OAAM,IAAI,gCAAgC,sBAAsB,OAAO,IAAI,GAAG;AAAA,EAC1G;AACJ;AAGO,MAAM,UAAU,IAAI,WAAW;",
  "names": []
}
