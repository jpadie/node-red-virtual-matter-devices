{
  "version": 3,
  "sources": ["../../../src/tlv/TlvCodec.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NotImplementedError, UnexpectedDataError } from \"../common/MatterError.js\";\nimport { BitField, BitFieldEnum, BitmapSchema } from \"../schema/BitmapSchema.js\";\nimport { ByteArray, Endian } from \"../util/ByteArray.js\";\nimport { DataReader } from \"../util/DataReader.js\";\nimport { DataWriter } from \"../util/DataWriter.js\";\nimport {\n    INT16_MAX,\n    INT16_MIN,\n    INT32_MAX,\n    INT32_MIN,\n    INT8_MAX,\n    INT8_MIN,\n    UINT16_MAX,\n    UINT32_MAX,\n    UINT8_MAX,\n} from \"../util/Number.js\";\n\n/**\n * TLV element types.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 A.7.1\n */\nexport enum TlvType {\n    SignedInt = 0x00,\n    UnsignedInt = 0x04,\n    Boolean = 0x08,\n    Float = 0x0a,\n    Utf8String = 0x0c,\n    ByteString = 0x10,\n    Null = 0x14,\n    Structure = 0x15,\n    Array = 0x16,\n    List = 0x17,\n    EndOfContainer = 0x18,\n}\n\n/** Byte length of the encoded value or length. */\nexport enum TlvLength {\n    OneByte = 0,\n    TwoBytes = 1,\n    FourBytes = 2,\n    EightBytes = 3,\n}\n\n/** Type and length or value, when applicable. */\nexport type TlvTypeLength =\n    | { type: TlvType.SignedInt; length: TlvLength }\n    | { type: TlvType.UnsignedInt; length: TlvLength }\n    | { type: TlvType.Boolean; value: boolean }\n    | { type: TlvType.Float; length: TlvLength.FourBytes | TlvLength.EightBytes }\n    | { type: TlvType.Utf8String; length: TlvLength }\n    | { type: TlvType.ByteString; length: TlvLength }\n    | { type: TlvType.Null }\n    | { type: TlvType.Structure }\n    | { type: TlvType.Array }\n    | { type: TlvType.List }\n    | { type: TlvType.EndOfContainer };\n\n/** Converts {@link TlvType} to the js primitive type.  */\nexport type TlvToPrimitive = {\n    [TlvType.SignedInt]: bigint | number;\n    [TlvType.UnsignedInt]: bigint | number;\n    [TlvType.Boolean]: never;\n    [TlvType.Float]: number;\n    [TlvType.Utf8String]: string;\n    [TlvType.ByteString]: ByteArray;\n    [TlvType.Null]: null;\n    [TlvType.Structure]: never;\n    [TlvType.Array]: never;\n    [TlvType.List]: never;\n    [TlvType.EndOfContainer]: never;\n};\n\n/**\n * TLV element tag control.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 A.7.2\n */\nconst enum TagControl {\n    Anonymous = 0,\n    ContextSpecific = 1,\n    CommonProfile16 = 2,\n    CommonProfile32 = 3,\n    ImplicitProfile16 = 4,\n    ImplicitProfile32 = 5,\n    FullyQualified48 = 6,\n    FullyQualified64 = 7,\n}\n\n/**\n * Schema of the ControlByte.\n *\n * @see {@link MatterSpecification.v10.Core} \u00A7 A.7.2\n */\nconst ControlByteSchema = BitmapSchema({\n    typeLength: BitField(0, 5),\n    tagControl: BitFieldEnum<TagControl>(5, 3),\n});\n\n/** {@link MatterSpecification.v10.Core} \u00A7 2.5.2 and \u00A7 A.8.3 */\nconst MATTER_COMMON_PROFILE = 0x00000000;\n\n/** {@link MatterSpecification.v10.Core} \u00A7 A.2 */\nexport type TlvTag = {\n    profile?: number;\n    id?: number;\n};\n\nexport class TlvCodec {\n    public static getUIntTlvLength(value: number | bigint) {\n        if (value <= UINT8_MAX) {\n            return TlvLength.OneByte;\n        } else if (value <= UINT16_MAX) {\n            return TlvLength.TwoBytes;\n        } else if (value <= UINT32_MAX) {\n            return TlvLength.FourBytes;\n        } else {\n            return TlvLength.EightBytes;\n        }\n    }\n\n    public static getIntTlvLength(value: number | bigint) {\n        if (value > 0) {\n            if (value <= INT8_MAX) {\n                return TlvLength.OneByte;\n            } else if (value <= INT16_MAX) {\n                return TlvLength.TwoBytes;\n            } else if (value <= INT32_MAX) {\n                return TlvLength.FourBytes;\n            } else {\n                return TlvLength.EightBytes;\n            }\n        } else {\n            if (value >= INT8_MIN) {\n                return TlvLength.OneByte;\n            } else if (value >= INT16_MIN) {\n                return TlvLength.TwoBytes;\n            } else if (value >= INT32_MIN) {\n                return TlvLength.FourBytes;\n            } else {\n                return TlvLength.EightBytes;\n            }\n        }\n    }\n\n    /** @see {@link MatterSpecification.v10.Core} \u00A7 A.7 */\n    public static readTagType(reader: DataReader<Endian.Little>): { tag?: TlvTag; typeLength: TlvTypeLength } {\n        const { tagControl, typeLength } = ControlByteSchema.decode(reader.readUInt8());\n        return { tag: this.readTag(reader, tagControl), typeLength: this.parseTypeLength(typeLength) };\n    }\n\n    private static readTag(reader: DataReader<Endian.Little>, tagControl: TagControl): TlvTag | undefined {\n        switch (tagControl) {\n            case TagControl.Anonymous:\n                return undefined;\n            case TagControl.ContextSpecific:\n                return { id: reader.readUInt8() };\n            case TagControl.CommonProfile16:\n                return { profile: MATTER_COMMON_PROFILE, id: reader.readUInt16() };\n            case TagControl.CommonProfile32:\n                return { profile: MATTER_COMMON_PROFILE, id: reader.readUInt32() };\n            case TagControl.ImplicitProfile16:\n            case TagControl.ImplicitProfile32:\n                throw new NotImplementedError(`Unsupported implicit profile ${tagControl}`);\n            case TagControl.FullyQualified48:\n                return { profile: reader.readUInt32(), id: reader.readUInt16() };\n            default:\n                throw new NotImplementedError(`Unexpected tagControl ${tagControl}`);\n        }\n    }\n\n    private static parseTypeLength(typeLength: number): TlvTypeLength {\n        const length = (typeLength & 0x03) as TlvLength;\n        const type = typeLength & 0xfc;\n        switch (type) {\n            case TlvType.Utf8String:\n            case TlvType.ByteString:\n            case TlvType.SignedInt:\n            case TlvType.UnsignedInt:\n                return { type, length };\n            case TlvType.Boolean:\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return { type, value: false };\n                    case TlvLength.TwoBytes:\n                        return { type, value: true };\n                    case TlvLength.FourBytes:\n                        return { type: TlvType.Float, length };\n                    case TlvLength.EightBytes:\n                        return { type: TlvType.Float, length };\n                    default:\n                        throw new UnexpectedDataError(`Unexpected Boolean length ${length}`);\n                }\n            default:\n                return { type: typeLength };\n        }\n    }\n\n    public static readPrimitive<T extends TlvTypeLength, V = TlvToPrimitive[T[\"type\"]]>(\n        reader: DataReader<Endian.Little>,\n        typeLength: T,\n    ): V {\n        switch (typeLength.type) {\n            case TlvType.SignedInt: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return reader.readInt8() as V;\n                    case TlvLength.TwoBytes:\n                        return reader.readInt16() as V;\n                    case TlvLength.FourBytes:\n                        return reader.readInt32() as V;\n                    case TlvLength.EightBytes:\n                        return reader.readInt64() as V;\n                    default:\n                        throw new UnexpectedDataError(`Unexpected SignedInt length ${length}`);\n                }\n            }\n            case TlvType.UnsignedInt: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return reader.readUInt8() as V;\n                    case TlvLength.TwoBytes:\n                        return reader.readUInt16() as V;\n                    case TlvLength.FourBytes:\n                        return reader.readUInt32() as V;\n                    case TlvLength.EightBytes:\n                        return reader.readUInt64() as V;\n                    default:\n                        throw new UnexpectedDataError(`Unexpected UnsignedInt length ${length}`);\n                }\n            }\n            case TlvType.Float: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.FourBytes:\n                        return reader.readFloat() as V;\n                    case TlvLength.EightBytes:\n                        return reader.readDouble() as V;\n                    default:\n                        throw new UnexpectedDataError(`Unexpected Float length ${length}`);\n                }\n            }\n            case TlvType.Utf8String: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return reader.readUtf8String(reader.readUInt8()) as V;\n                    case TlvLength.TwoBytes:\n                        return reader.readUtf8String(reader.readUInt16()) as V;\n                    case TlvLength.FourBytes:\n                        return reader.readUtf8String(reader.readUInt32()) as V;\n                    case TlvLength.EightBytes:\n                        return reader.readUtf8String(Number(reader.readUInt64())) as V;\n                    default:\n                        throw new UnexpectedDataError(`Unexpected Utf8String length ${length}`);\n                }\n            }\n            case TlvType.ByteString: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return reader.readByteArray(reader.readUInt8()) as V;\n                    case TlvLength.TwoBytes:\n                        return reader.readByteArray(reader.readUInt16()) as V;\n                    case TlvLength.FourBytes:\n                        return reader.readByteArray(reader.readUInt32()) as V;\n                    case TlvLength.EightBytes:\n                        return reader.readByteArray(Number(reader.readUInt64())) as V;\n                    default:\n                        throw new UnexpectedDataError(`Unexpected ByteString length ${length}`);\n                }\n            }\n            case TlvType.Boolean:\n                return typeLength.value as V;\n            case TlvType.Null:\n                return null as V;\n            default:\n                throw new UnexpectedDataError(`Unexpected TLV type ${typeLength.type}`);\n        }\n    }\n\n    /** @see {@link MatterSpecification.v10.Core} \u00A7 A.7 & A.8 */\n    public static writeTag(writer: DataWriter<Endian.Little>, typeLengthValue: TlvTypeLength, tag?: TlvTag) {\n        const { profile, id } = tag ?? {};\n        let typeLength: number;\n        switch (typeLengthValue.type) {\n            case TlvType.Utf8String:\n            case TlvType.ByteString:\n            case TlvType.SignedInt:\n            case TlvType.UnsignedInt:\n            case TlvType.Float:\n                typeLength = typeLengthValue.type | typeLengthValue.length;\n                break;\n            case TlvType.Boolean:\n                typeLength = typeLengthValue.type + (typeLengthValue.value ? 1 : 0);\n                break;\n            default:\n                typeLength = typeLengthValue.type;\n        }\n\n        if (profile === undefined && id === undefined) {\n            writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.Anonymous, typeLength }));\n        } else if (profile === undefined) {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a context specific tag.\");\n            writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.ContextSpecific, typeLength }));\n            writer.writeUInt8(id);\n        } else if (profile === MATTER_COMMON_PROFILE) {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a datatype profile.\");\n            if ((id & 0xffff0000) === 0) {\n                writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.CommonProfile16, typeLength }));\n                writer.writeUInt16(id);\n            } else {\n                writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.CommonProfile32, typeLength }));\n                writer.writeUInt32(id);\n            }\n        } else {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a custom profile.\");\n            if ((id & 0xffff0000) === 0) {\n                writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.FullyQualified48, typeLength }));\n                writer.writeUInt32(profile);\n                writer.writeUInt16(id);\n            } else {\n                writer.writeUInt8(ControlByteSchema.encode({ tagControl: TagControl.FullyQualified64, typeLength }));\n                writer.writeUInt32(profile);\n                writer.writeUInt32(id);\n            }\n        }\n    }\n\n    public static getTagByteLength(tag?: TlvTag) {\n        const { profile, id } = tag ?? {};\n\n        if (profile === undefined && id === undefined) {\n            return 1;\n        } else if (profile === undefined) {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a context specific tag.\");\n            return 2;\n        } else if (profile === MATTER_COMMON_PROFILE) {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a datatype profile.\");\n            if ((id & 0xffff0000) === 0) {\n                return 3;\n            } else {\n                return 5;\n            }\n        } else {\n            if (id === undefined)\n                throw new UnexpectedDataError(\"Invalid TLV tag: id should be defined for a custom profile.\");\n            if ((id & 0xffff0000) === 0) {\n                return 7;\n            } else {\n                return 9;\n            }\n        }\n    }\n\n    public static writePrimitive<T extends TlvTypeLength>(\n        writer: DataWriter<Endian.Little>,\n        typeLength: T,\n        value: TlvToPrimitive[T[\"type\"]],\n    ) {\n        switch (typeLength.type) {\n            case TlvType.SignedInt:\n                return this.writeUInt(writer, typeLength.length, value as TlvToPrimitive[typeof typeLength.type]);\n            case TlvType.UnsignedInt: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.OneByte:\n                        return writer.writeUInt8(value as TlvToPrimitive[typeof typeLength.type]);\n                    case TlvLength.TwoBytes:\n                        return writer.writeUInt16(value as TlvToPrimitive[typeof typeLength.type]);\n                    case TlvLength.FourBytes:\n                        return writer.writeUInt32(value as TlvToPrimitive[typeof typeLength.type]);\n                    case TlvLength.EightBytes:\n                        return writer.writeUInt64(value as TlvToPrimitive[typeof typeLength.type]);\n                    default:\n                        throw new UnexpectedDataError(`Unexpected UnsignedInt length ${length}`);\n                }\n            }\n            case TlvType.Float: {\n                const length = typeLength.length;\n                switch (length) {\n                    case TlvLength.FourBytes:\n                        return writer.writeFloat(value as TlvToPrimitive[typeof typeLength.type]);\n                    case TlvLength.EightBytes:\n                        return writer.writeDouble(value as TlvToPrimitive[typeof typeLength.type]);\n                    default:\n                        throw new UnexpectedDataError(`Unexpected Float length ${length}`);\n                }\n            }\n            case TlvType.Utf8String: {\n                const string = value as TlvToPrimitive[typeof typeLength.type];\n                const stringData = ByteArray.fromString(string);\n                this.writeUInt(writer, typeLength.length, stringData.length);\n                return writer.writeByteArray(stringData);\n            }\n            case TlvType.ByteString: {\n                const byteArray = value as TlvToPrimitive[typeof typeLength.type];\n                this.writeUInt(writer, typeLength.length, byteArray.length);\n                return writer.writeByteArray(byteArray);\n            }\n            case TlvType.Boolean:\n                return;\n            default:\n                throw new UnexpectedDataError(`Unexpected TLV type ${typeLength.type}`);\n        }\n    }\n\n    public static getPrimitiveByteLength<T extends TlvTypeLength>(typeLength: T, value: TlvToPrimitive[T[\"type\"]]) {\n        switch (typeLength.type) {\n            case TlvType.SignedInt:\n            case TlvType.UnsignedInt:\n            case TlvType.Float:\n                return this.getUIntByteLength(typeLength.length);\n            case TlvType.Utf8String: {\n                const string = value as TlvToPrimitive[typeof typeLength.type];\n                const stringData = ByteArray.fromString(string);\n                return this.getUIntByteLength(typeLength.length) + stringData.length;\n            }\n            case TlvType.ByteString: {\n                const byteArray = value as TlvToPrimitive[typeof typeLength.type];\n                return this.getUIntByteLength(typeLength.length) + byteArray.length;\n            }\n            case TlvType.Boolean:\n                return 0;\n            default:\n                throw new UnexpectedDataError(`Unexpected TLV type ${typeLength.type}`);\n        }\n    }\n\n    private static writeUInt(writer: DataWriter<Endian.Little>, length: TlvLength, value: number | bigint) {\n        switch (length) {\n            case TlvLength.OneByte:\n                return writer.writeInt8(value);\n            case TlvLength.TwoBytes:\n                return writer.writeInt16(value);\n            case TlvLength.FourBytes:\n                return writer.writeInt32(value);\n            case TlvLength.EightBytes:\n                return writer.writeInt64(value);\n        }\n    }\n\n    private static getUIntByteLength(length: TlvLength) {\n        switch (length) {\n            case TlvLength.OneByte:\n                return 1;\n            case TlvLength.TwoBytes:\n                return 2;\n            case TlvLength.FourBytes:\n                return 4;\n            case TlvLength.EightBytes:\n                return 8;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["TlvType", "TlvLength", "TagControl"]
}
