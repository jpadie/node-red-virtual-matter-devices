{
  "version": 3,
  "sources": ["../../../src/tlv/TlvSchema.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Schema } from \"../schema/Schema.js\";\nimport { ByteArray, Endian } from \"../util/ByteArray.js\";\nimport { DataReader } from \"../util/DataReader.js\";\nimport { DataWriter } from \"../util/DataWriter.js\";\nimport { TlvCodec, TlvTag, TlvToPrimitive, TlvTypeLength } from \"./TlvCodec.js\";\n\nexport type TlvEncodingOptions = {\n    /**\n     * When true, the fabricIndex field will be excluded from the TLV encoding for list entries.\n     * This flag must not be set together with the following flag.\n     */\n    forWriteInteraction?: boolean;\n\n    /**\n     * When true, mandatory field validation is skipped when encoding TLV for list entries.\n     * This flag must not be set together with the former flag.\n     */\n    allowMissingFieldsForNonFabricFilteredRead?: boolean;\n};\n\nexport abstract class TlvSchema<T> extends Schema<T, ByteArray> implements TlvSchema<T> {\n    override decodeInternal(encoded: ByteArray): T {\n        return this.decodeTlvInternal(new TlvByteArrayReader(encoded)).value;\n    }\n\n    override encodeInternal(value: T): ByteArray {\n        const writer = new TlvByteArrayWriter();\n        this.encodeTlvInternal(writer, value);\n        return writer.toByteArray();\n    }\n\n    encodeTlv(value: T, options?: TlvEncodingOptions): TlvStream {\n        const writer = new TlvArrayWriter();\n        this.encodeTlvInternal(writer, value, undefined, options);\n        return writer.toTlvArray();\n    }\n\n    decodeTlv(encoded: TlvStream): T {\n        return this.decodeTlvInternal(new TlvArrayReader(encoded)).value;\n    }\n\n    decodeTlvInternal(reader: TlvReader): { value: T; tag?: TlvTag } {\n        const { tag, typeLength } = reader.readTagType();\n        return { tag, value: this.decodeTlvInternalValue(reader, typeLength) };\n    }\n\n    abstract decodeTlvInternalValue(reader: TlvReader, typeLength: TlvTypeLength): T;\n\n    abstract encodeTlvInternal(writer: TlvWriter, value: T, tag?: TlvTag, options?: TlvEncodingOptions): void;\n\n    injectField(value: T, _fieldId: number, _fieldValue: any, _injectChecker: (fieldValue: any) => boolean): T {\n        return value;\n    }\n\n    removeField(value: T, _fieldId: number, _removeChecker: (fieldValue: any) => boolean): T {\n        return value;\n    }\n}\n\nexport type TlvStream = TlvElement<any>[];\n\nexport type TlvElement<T extends TlvTypeLength> = {\n    tag?: TlvTag;\n    typeLength: T;\n    value?: TlvToPrimitive[T[\"type\"]];\n};\n\nexport class TlvArrayWriter implements TlvWriter {\n    private readonly tlvArray = new Array<TlvElement<any>>();\n\n    writeTag(typeLength: TlvTypeLength, tag?: TlvTag) {\n        this.tlvArray.push({ tag, typeLength });\n    }\n\n    writePrimitive<T extends TlvTypeLength>(_typeLength: T, value: TlvToPrimitive[T[\"type\"]]) {\n        this.tlvArray[this.tlvArray.length - 1].value = value;\n    }\n\n    toTlvArray() {\n        return this.tlvArray;\n    }\n}\n\nexport class TlvArrayReader implements TlvReader {\n    private index = -1;\n\n    constructor(private readonly tlvElements: TlvElement<any>[]) {}\n\n    readTagType() {\n        this.index++;\n        return this.tlvElements[this.index];\n    }\n\n    readPrimitive<T extends TlvTypeLength, V = TlvToPrimitive[T[\"type\"]]>(_typeLength: T): V {\n        return this.tlvElements[this.index].value;\n    }\n}\n\n/** Type defined by the TLV schema. */\nexport type TypeFromSchema<S extends TlvSchema<any>> = S extends TlvSchema<infer T> ? T : never;\n\nexport interface TlvReader {\n    readTagType(): { tag?: TlvTag; typeLength: TlvTypeLength };\n\n    readPrimitive<T extends TlvTypeLength, V = TlvToPrimitive[T[\"type\"]]>(typeLength: T): V;\n}\n\nexport interface TlvWriter {\n    writeTag(typeLength: TlvTypeLength, tag?: TlvTag): void;\n\n    writePrimitive<T extends TlvTypeLength>(typeLength: T, value: TlvToPrimitive[T[\"type\"]]): void;\n}\n\nexport class TlvByteArrayWriter implements TlvWriter {\n    private readonly writer = new DataWriter(Endian.Little);\n\n    writeTag(typeLength: TlvTypeLength, tag?: TlvTag) {\n        TlvCodec.writeTag(this.writer, typeLength, tag);\n    }\n\n    writePrimitive<T extends TlvTypeLength>(typeLength: T, value: TlvToPrimitive[T[\"type\"]]) {\n        TlvCodec.writePrimitive(this.writer, typeLength, value);\n    }\n\n    toByteArray() {\n        return this.writer.toByteArray();\n    }\n}\n\nexport class TlvByteArrayReader implements TlvReader {\n    private readonly reader: DataReader<Endian.Little>;\n\n    constructor(byteArray: ByteArray) {\n        this.reader = new DataReader(byteArray, Endian.Little);\n    }\n\n    readTagType() {\n        return TlvCodec.readTagType(this.reader);\n    }\n\n    readPrimitive<T extends TlvTypeLength, V = TlvToPrimitive[T[\"type\"]]>(typeLength: T): V {\n        return TlvCodec.readPrimitive(this.reader, typeLength);\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,cAAc;AACvB,SAAoB,cAAc;AAClC,SAAS,kBAAkB;AAC3B,SAAS,kBAAkB;AAC3B,SAAS,gBAAuD;AAgBzD,MAAe,kBAAqB,OAA6C;AAAA,EAC3E,eAAe,SAAuB;AAC3C,WAAO,KAAK,kBAAkB,IAAI,mBAAmB,OAAO,CAAC,EAAE;AAAA,EACnE;AAAA,EAES,eAAe,OAAqB;AACzC,UAAM,SAAS,IAAI,mBAAmB;AACtC,SAAK,kBAAkB,QAAQ,KAAK;AACpC,WAAO,OAAO,YAAY;AAAA,EAC9B;AAAA,EAEA,UAAU,OAAU,SAAyC;AACzD,UAAM,SAAS,IAAI,eAAe;AAClC,SAAK,kBAAkB,QAAQ,OAAO,QAAW,OAAO;AACxD,WAAO,OAAO,WAAW;AAAA,EAC7B;AAAA,EAEA,UAAU,SAAuB;AAC7B,WAAO,KAAK,kBAAkB,IAAI,eAAe,OAAO,CAAC,EAAE;AAAA,EAC/D;AAAA,EAEA,kBAAkB,QAA+C;AAC7D,UAAM,EAAE,KAAK,WAAW,IAAI,OAAO,YAAY;AAC/C,WAAO,EAAE,KAAK,OAAO,KAAK,uBAAuB,QAAQ,UAAU,EAAE;AAAA,EACzE;AAAA,EAMA,YAAY,OAAU,UAAkB,aAAkB,gBAAiD;AACvG,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,OAAU,UAAkB,gBAAiD;AACrF,WAAO;AAAA,EACX;AACJ;AAUO,MAAM,eAAoC;AAAA,EAC5B,WAAW,IAAI,MAAuB;AAAA,EAEvD,SAAS,YAA2B,KAAc;AAC9C,SAAK,SAAS,KAAK,EAAE,KAAK,WAAW,CAAC;AAAA,EAC1C;AAAA,EAEA,eAAwC,aAAgB,OAAkC;AACtF,SAAK,SAAS,KAAK,SAAS,SAAS,CAAC,EAAE,QAAQ;AAAA,EACpD;AAAA,EAEA,aAAa;AACT,WAAO,KAAK;AAAA,EAChB;AACJ;AAEO,MAAM,eAAoC;AAAA,EAG7C,YAA6B,aAAgC;AAAhC;AAAA,EAAiC;AAAA,EAFtD,QAAQ;AAAA,EAIhB,cAAc;AACV,SAAK;AACL,WAAO,KAAK,YAAY,KAAK,KAAK;AAAA,EACtC;AAAA,EAEA,cAAsE,aAAmB;AACrF,WAAO,KAAK,YAAY,KAAK,KAAK,EAAE;AAAA,EACxC;AACJ;AAiBO,MAAM,mBAAwC;AAAA,EAChC,SAAS,IAAI,WAAW,OAAO,MAAM;AAAA,EAEtD,SAAS,YAA2B,KAAc;AAC9C,aAAS,SAAS,KAAK,QAAQ,YAAY,GAAG;AAAA,EAClD;AAAA,EAEA,eAAwC,YAAe,OAAkC;AACrF,aAAS,eAAe,KAAK,QAAQ,YAAY,KAAK;AAAA,EAC1D;AAAA,EAEA,cAAc;AACV,WAAO,KAAK,OAAO,YAAY;AAAA,EACnC;AACJ;AAEO,MAAM,mBAAwC;AAAA,EAChC;AAAA,EAEjB,YAAY,WAAsB;AAC9B,SAAK,SAAS,IAAI,WAAW,WAAW,OAAO,MAAM;AAAA,EACzD;AAAA,EAEA,cAAc;AACV,WAAO,SAAS,YAAY,KAAK,MAAM;AAAA,EAC3C;AAAA,EAEA,cAAsE,YAAkB;AACpF,WAAO,SAAS,cAAc,KAAK,QAAQ,UAAU;AAAA,EACzD;AACJ;",
  "names": []
}
