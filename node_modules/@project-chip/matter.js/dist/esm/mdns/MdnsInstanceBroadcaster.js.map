{
  "version": 3,
  "sources": ["../../../src/mdns/MdnsInstanceBroadcaster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CommissionerInstanceData,\n    CommissioningModeInstanceData,\n    InstanceBroadcaster,\n} from \"../common/InstanceBroadcaster.js\";\nimport { ImplementationError } from \"../common/MatterError.js\";\nimport { Fabric } from \"../fabric/Fabric.js\";\nimport type { MdnsBroadcaster } from \"./MdnsBroadcaster.js\";\n\n/**\n * This class is handing MDNS Announcements for one instance of a device aka \"port\".\n *\n * Obtain an instance via {@link MdnsBroadcaster.createInstanceBroadcaster}.\n */\nexport class MdnsInstanceBroadcaster implements InstanceBroadcaster {\n    readonly #instancePort: number;\n    readonly #mdnsBroadcaster: MdnsBroadcaster;\n    readonly #onclose: () => void;\n    #isClosed = false;\n\n    constructor(instancePort: number, mdnsBroadcaster: MdnsBroadcaster, onclose: () => void) {\n        this.#instancePort = instancePort;\n        this.#mdnsBroadcaster = mdnsBroadcaster;\n        this.#onclose = onclose;\n    }\n\n    async close() {\n        if (this.#isClosed) {\n            return;\n        }\n        this.#isClosed = true;\n\n        await this.#mdnsBroadcaster.expireAllAnnouncements(this.#instancePort);\n        this.#onclose();\n    }\n\n    async setCommissionMode(mode: number, deviceData: CommissioningModeInstanceData) {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.setCommissionMode(this.#instancePort, mode, deviceData);\n    }\n\n    /** Set the Broadcaster Data to announce a device for operative discovery (aka \"already paired\") */\n    async setFabrics(fabrics: Fabric[], expireCommissioningAnnouncements = false) {\n        this.#assertOpen();\n        if (expireCommissioningAnnouncements) {\n            await this.#mdnsBroadcaster.expireCommissioningAnnouncement(this.#instancePort);\n        }\n        await this.#mdnsBroadcaster.setFabrics(this.#instancePort, fabrics);\n    }\n\n    /** Set the Broadcaster data to announce a Commissioner (aka Commissioner discovery) */\n    async setCommissionerInfo(commissionerData: CommissionerInstanceData) {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.setCommissionerInfo(this.#instancePort, commissionerData);\n    }\n\n    async announce() {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.announce(this.#instancePort);\n    }\n\n    async expireFabricAnnouncement() {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.expireFabricAnnouncement(this.#instancePort);\n    }\n\n    async expireCommissioningAnnouncement() {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.expireCommissioningAnnouncement(this.#instancePort);\n    }\n\n    async expireAllAnnouncements() {\n        this.#assertOpen();\n        await this.#mdnsBroadcaster.expireAllAnnouncements(this.#instancePort);\n    }\n\n    #assertOpen() {\n        if (this.#isClosed) {\n            throw new ImplementationError(\"Illegal operation on closed MdnsInstanceBroadcaster\");\n        }\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,SAAS,2BAA2B;AAS7B,MAAM,wBAAuD;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EACT,YAAY;AAAA,EAEZ,YAAY,cAAsB,iBAAkC,SAAqB;AACrF,SAAK,gBAAgB;AACrB,SAAK,mBAAmB;AACxB,SAAK,WAAW;AAAA,EACpB;AAAA,EAEA,MAAM,QAAQ;AACV,QAAI,KAAK,WAAW;AAChB;AAAA,IACJ;AACA,SAAK,YAAY;AAEjB,UAAM,KAAK,iBAAiB,uBAAuB,KAAK,aAAa;AACrE,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,MAAM,kBAAkB,MAAc,YAA2C;AAC7E,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,kBAAkB,KAAK,eAAe,MAAM,UAAU;AAAA,EACtF;AAAA;AAAA,EAGA,MAAM,WAAW,SAAmB,mCAAmC,OAAO;AAC1E,SAAK,YAAY;AACjB,QAAI,kCAAkC;AAClC,YAAM,KAAK,iBAAiB,gCAAgC,KAAK,aAAa;AAAA,IAClF;AACA,UAAM,KAAK,iBAAiB,WAAW,KAAK,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA,EAGA,MAAM,oBAAoB,kBAA4C;AAClE,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,oBAAoB,KAAK,eAAe,gBAAgB;AAAA,EACxF;AAAA,EAEA,MAAM,WAAW;AACb,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,SAAS,KAAK,aAAa;AAAA,EAC3D;AAAA,EAEA,MAAM,2BAA2B;AAC7B,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,yBAAyB,KAAK,aAAa;AAAA,EAC3E;AAAA,EAEA,MAAM,kCAAkC;AACpC,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,gCAAgC,KAAK,aAAa;AAAA,EAClF;AAAA,EAEA,MAAM,yBAAyB;AAC3B,SAAK,YAAY;AACjB,UAAM,KAAK,iBAAiB,uBAAuB,KAAK,aAAa;AAAA,EACzE;AAAA,EAEA,cAAc;AACV,QAAI,KAAK,WAAW;AAChB,YAAM,IAAI,oBAAoB,qDAAqD;AAAA,IACvF;AAAA,EACJ;AACJ;",
  "names": []
}
