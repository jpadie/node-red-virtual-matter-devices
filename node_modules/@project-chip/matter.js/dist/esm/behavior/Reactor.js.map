{
  "version": 3,
  "sources": ["../../../src/behavior/Reactor.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type { Endpoint } from \"../endpoint/Endpoint.js\";\nimport type { Observable, Observer } from \"../util/Observable.js\";\nimport { MaybePromise } from \"../util/Promises.js\";\nimport type { Behavior } from \"./Behavior.js\";\nimport { Resource } from \"./state/transaction/Resource.js\";\n\n/**\n * A reactor is an {@link Observer} managed by a {@link Behavior}.  You install reactors using {@link Behavior.reactTo}\n * on the behavior that receives the event.\n *\n * A reactor is similar to a normal handler installed with {@link Observable.on}.  It provides several benefits over\n * installing an observer directly:\n *\n *   - The behavior uninstalls {@link reactor} when the {@link Endpoint} is destroyed\n *\n *   - If {@link reactor} is asynchronous, the behavior tracks the resulting promise.  It provides error handling and\n *     ensures the promise completes before {@link Endpoint} destruction\n *\n *   - The behavior ensures reactors run serially even if they are asynchronous\n *\n *   - Matter.js manages the context in which the reactor runs automatically, either joining the emitter's context or\n *     creating a dedicated offline context\n *\n *   - Matter.js ensures that {@link reactor} only registers with {@link Observable} once for a given {@link Endpoint}\n *\n *   - You may optionally designate resources (including {@link Behavior}s) for locking prior to reaction\n *\n * You should not use arrow functions for reactors as this will prevent you from accessing the Behavior in the correct\n * context.\n *\n * If {@link observable} is a high-volume emitter, it would be better to implement synchronous or very fast asynchronous\n * reactors to avoid accumulating too many deferred reactions.\n */\nexport type Reactor<T extends any[] = any[], R = any> = (...args: T) => MaybePromise<R>;\n\nexport namespace Reactor {\n    /**\n     * Configurable settings for {@link Behavior.reactTo}.\n     */\n    export interface Options {\n        /**\n         * Controls the context in which reaction Matter.js invokes a reactor.\n         *\n         *   - If false (the default), the reactor runs in the same context as the emitter, or a dedicated offline\n         *     context if the emitter's context is unavailable.  Errors thrown by the reactor interrupt the emitter.\n         *\n         *   - If true, the reactor runs in a dedicated, offline context.  Errors thrown by the reactor are logged and\n         *     won't affect the emitter\n         */\n        offline?: boolean;\n\n        /**\n         * Designate resources for which this reaction requires exclusive write access.\n         *\n         * You may specify lock as a resource (e.g. a {@link Behavior}) or an array of resources.  Or specify \"true\" to\n         * lock the reacting behavior.\n         *\n         * If set:\n         *\n         *   - The transaction of {@link Behavior.context} for the reacting {@link Behavior} will be exclusive during\n         *     reaction\n         *\n         *   - The transaction will own locks on the designated resources\n         *\n         *   - The reaction will defer until the resource locks become available\n         */\n        lock?: true | Resource | Resource[];\n\n        /**\n         * Only react the next time the event emits.\n         */\n        once?: boolean;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
