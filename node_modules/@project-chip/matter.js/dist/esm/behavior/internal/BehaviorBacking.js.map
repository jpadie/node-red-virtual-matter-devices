{
  "version": 3,
  "sources": ["../../../../src/behavior/internal/BehaviorBacking.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Lifecycle } from \"../../common/Lifecycle.js\";\nimport { ImplementationError } from \"../../common/MatterError.js\";\nimport { type Agent } from \"../../endpoint/Agent.js\";\nimport type { Endpoint } from \"../../endpoint/Endpoint.js\";\nimport { BehaviorInitializationError } from \"../../endpoint/errors.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport { Construction } from \"../../util/Construction.js\";\nimport { EventEmitter, Observable } from \"../../util/Observable.js\";\nimport { MaybePromise } from \"../../util/Promises.js\";\nimport type { Behavior } from \"../Behavior.js\";\nimport { Reactor } from \"../Reactor.js\";\nimport { Datasource } from \"../state/managed/Datasource.js\";\nimport { BackingEvents } from \"./BackingEvents.js\";\nimport { Reactors } from \"./Reactors.js\";\n\nconst logger = Logger.get(\"BehaviorBacking\");\n\n/**\n * The \"backing\" for a behavior manages those portions of behavior that endure for the lifetime of an endpoint.\n */\nexport abstract class BehaviorBacking {\n    #endpoint: Endpoint;\n    #type: Behavior.Type;\n    #internal?: object;\n    #events?: EventEmitter;\n    #options?: Behavior.Options;\n    #datasource?: Datasource;\n    #reactors?: Reactors;\n    #construction: Construction<BehaviorBacking>;\n\n    get construction() {\n        return this.#construction;\n    }\n\n    constructor(endpoint: Endpoint, type: Behavior.Type, options?: Behavior.Options) {\n        this.#endpoint = endpoint;\n        this.#type = type;\n        this.#options = options;\n\n        this.#construction = Construction(this);\n        this.#construction.onError(error => {\n            // The endpoint reports errors during initialization.  For errors occurring later we report the error\n            // ourselves\n            if (endpoint.lifecycle.isReady) {\n                logger.error(`Error initializing ${this}:`, error);\n            }\n        });\n    }\n\n    toString() {\n        return this.path.toString();\n    }\n\n    get path() {\n        return this.#endpoint.path.at(this.type.id);\n    }\n\n    /**\n     * Initialize state by applying values from options and invoking the behavior's initialize() function.\n     *\n     * Initiated via {@link Construction#start} by Behaviors class once the backing is installed.\n     */\n    [Construction.construct](agent: Agent) {\n        const crash = (cause: unknown) => {\n            throw new BehaviorInitializationError(`Error initializing ${this}`, cause);\n        };\n\n        try {\n            // We use this behavior for initialization.  Do not use agent.get() to access the behavior because it\n            // will throw if the behavior isn't initialized\n            const behavior = this.#lifecycleInstance(agent);\n\n            // Perform actual initialization\n            const promise = this.invokeInitializer(behavior, this.#options);\n            if (promise) {\n                return Promise.resolve(promise).catch(crash);\n            }\n        } catch (e) {\n            crash(e);\n        }\n    }\n\n    /**\n     * Destroy the backing.\n     */\n    close(agent: Agent, invokeClose = true) {\n        const initialized = this.construction.status === Lifecycle.Status.Active;\n        if (!initialized) {\n            invokeClose = false;\n        }\n\n        return this.construction.close(() => {\n            let result = MaybePromise.then(\n                () => this.#reactors?.close(),\n                () => {\n                    this.#reactors = undefined;\n                },\n            );\n\n            if (invokeClose) {\n                result = MaybePromise.then(result, () => this.#invokeClose(agent));\n            }\n\n            return result;\n        });\n    }\n\n    /**\n     * Set state from options and invoke {@link Behavior.invokeInitializer}.\n     *\n     * This is an optional extension point for derivatives.  Errors thrown here are recorded and place the behavior into\n     * crashed state.\n     */\n    protected invokeInitializer(behavior: Behavior, options?: Behavior.Options) {\n        return behavior.initialize(options);\n    }\n\n    /**\n     * The {@link Endpoint} that owns the behavior.\n     */\n    get endpoint() {\n        return this.#endpoint;\n    }\n\n    /**\n     * The {@link Behavior.Type} backed.\n     */\n    get type() {\n        return this.#type;\n    }\n\n    /**\n     * Create an instance of the backed {@link Behavior}.\n     *\n     * Derivatives may override to perform additional setup beyond simple instantiation.\n     */\n    createBehavior(agent: Agent, type: Behavior.Type) {\n        const behavior = new this.#type(agent, this);\n        if (behavior instanceof type) {\n            return behavior;\n        }\n\n        throw new ImplementationError(\n            `Cannot create ${this.#endpoint}.${type.id} because installed implementation is incompatible`,\n        );\n    }\n\n    /**\n     * The source of raw data that backs managed state instances.\n     */\n    get datasource() {\n        if (!this.#datasource) {\n            this.#datasource = Datasource(this.datasourceOptions);\n        }\n\n        return this.#datasource;\n    }\n\n    protected get datasourceOptions(): Datasource.Options {\n        return {\n            path: this.#endpoint.path.at(this.#type.id).at(\"state\"),\n            supervisor: this.type.supervisor,\n            type: this.type.State,\n            events: this.events as unknown as Datasource.Events,\n            defaults: this.#endpoint.behaviors.defaultsFor(this.type),\n            store: this.store,\n            owner: this.#endpoint,\n        };\n    }\n\n    /**\n     * The data provider for {@link datasource}.\n     */\n    protected abstract readonly store?: Datasource.Store;\n\n    /**\n     * Obtain internal state for a behavior instance.\n     */\n    getInternal() {\n        if (!this.#internal) {\n            this.#internal = new this.#type.Internal();\n        }\n\n        return this.#internal;\n    }\n\n    /**\n     * Access the event object.  Unlike state, the events object does not vary by instance.\n     */\n    get events() {\n        if (!this.#events) {\n            this.#events = BackingEvents(this);\n        }\n        return this.#events;\n    }\n\n    /**\n     * The status of the behavior.\n     */\n    get status() {\n        return this.construction.status;\n    }\n\n    /**\n     * A read-only offline view of behavior state.\n     */\n    get stateView() {\n        return this.#datasource?.view ?? {};\n    }\n\n    /**\n     * Install a reactor.\n     */\n    reactTo<O extends Observable<any[], any>>(\n        observable: O,\n        reactor: Reactor<Parameters<O[\"emit\"]>, ReturnType<O[\"emit\"]>>,\n        options?: Reactor.Options,\n    ) {\n        if (!this.#reactors) {\n            this.#reactors = new Reactors(this);\n        }\n        this.#reactors.add(observable, reactor, options);\n    }\n\n    /**\n     * Invoke {@link Behavior.destroy} to clean up application logic.\n     */\n    #invokeClose(agent: Agent): MaybePromise {\n        // Do not use Agent.get because backing is in \"destroying\" state\n        const behavior = this.#lifecycleInstance(agent);\n\n        return MaybePromise.finally(\n            () =>\n                MaybePromise.then(\n                    () => behavior?.[Symbol.asyncDispose](),\n                    undefined,\n                    e => logger.error(`Destroying ${this}:`, e),\n                ),\n            () => this.#events?.[Symbol.dispose](),\n        );\n    }\n\n    /**\n     * Obtain a behavior instance for lifecycle methods (initialize and close).\n     *\n     * Under these circumstances we can't use {@link Agent.get} because it will throw if the endpoint is initializing\n     * or closing.\n     *\n     * Instead we use a \"friend\" method of agent to retrieve any existing behavior or create a new one.\n     */\n    #lifecycleInstance(agent: Agent) {\n        if (agent.isLoaded(this.#type)) {\n            return agent.get(this.#type);\n        }\n        const behavior = this.createBehavior(agent, this.#type);\n        return behavior;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
