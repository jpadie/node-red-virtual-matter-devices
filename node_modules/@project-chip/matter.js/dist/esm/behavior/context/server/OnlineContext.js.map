{
  "version": 3,
  "sources": ["../../../../../src/behavior/context/server/OnlineContext.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../../../MatterDevice.js\";\nimport { AccessLevel } from \"../../../cluster/Cluster.js\";\nimport type { Message } from \"../../../codec/MessageCodec.js\";\nimport { ImplementationError, InternalError } from \"../../../common/MatterError.js\";\nimport { FabricIndex } from \"../../../datatype/FabricIndex.js\";\nimport { NodeId } from \"../../../datatype/NodeId.js\";\nimport { SubjectId } from \"../../../datatype/SubjectId.js\";\nimport { Agent } from \"../../../endpoint/Agent.js\";\nimport { Endpoint } from \"../../../endpoint/Endpoint.js\";\nimport { EndpointInterface } from \"../../../endpoint/EndpointInterface.js\";\nimport { RootEndpoint } from \"../../../endpoint/definitions/system/RootEndpoint.js\";\nimport { EndpointType } from \"../../../endpoint/type/EndpointType.js\";\nimport { Diagnostic } from \"../../../log/Diagnostic.js\";\nimport { MessageExchange } from \"../../../protocol/MessageExchange.js\";\nimport { StatusResponseError } from \"../../../protocol/interaction/StatusCode.js\";\nimport { assertSecureSession } from \"../../../session/SecureSession.js\";\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { AccessControl } from \"../../AccessControl.js\";\nimport { AccessControlServer } from \"../../definitions/access-control/AccessControlServer.js\";\nimport { Transaction } from \"../../state/transaction/Transaction.js\";\nimport { ActionContext } from \"../ActionContext.js\";\nimport { ActionTracer } from \"../ActionTracer.js\";\nimport { Contextual } from \"../Contextual.js\";\nimport { NodeActivity } from \"../NodeActivity.js\";\nimport { ContextAgents } from \"./ContextAgents.js\";\n\n/**\n * Operate in online context.  Public Matter API interactions happen in online context.\n */\nexport function OnlineContext(options: OnlineContext.Options) {\n    return {\n        act<T>(actor: (context: ActionContext) => MaybePromise<T>): MaybePromise<T> {\n            let agents: undefined | ContextAgents;\n\n            let fabric: FabricIndex | undefined;\n            let subject: SubjectId;\n\n            const { exchange } = options;\n            const session = exchange?.session;\n\n            if (session) {\n                assertSecureSession(session);\n                fabric = session.fabric?.fabricIndex;\n\n                // TODO - group subject\n                subject = session.peerNodeId;\n            } else {\n                fabric = options.fabric;\n                subject = options.subject as NodeId;\n            }\n\n            if (subject === undefined) {\n                throw new ImplementationError(\"OnlineContext requires an authorized subject\");\n            }\n\n            const { message } = options;\n            const via = Diagnostic.via(\n                `online#${message?.packetHeader?.messageId?.toString(16) ?? \"?\"}@${subject.toString(16)}`,\n            );\n\n            let context: undefined | ActionContext;\n            let trace: undefined | ActionTracer.Action;\n            let activity: undefined | Disposable;\n\n            if (options.tracer && options.actionType) {\n                trace = {\n                    type: options.actionType,\n                };\n            }\n\n            const close = () => {\n                if (trace) {\n                    options.tracer?.record(trace);\n                }\n                if (message) {\n                    Contextual.setContextOf(message, undefined);\n                }\n                if (activity) {\n                    activity[Symbol.dispose]();\n                }\n            };\n\n            const actOnline = (transaction: Transaction) => {\n                context = {\n                    ...options,\n                    session,\n                    exchange,\n                    subject,\n                    fabric,\n                    transaction,\n                    trace,\n\n                    interactionComplete: exchange?.closed,\n\n                    authorizedFor(desiredAccessLevel: AccessLevel, location?: AccessControl.Location) {\n                        if (location === undefined) {\n                            throw new InternalError(\"AccessControl.Location is required\");\n                        }\n\n                        // We already checked access levels in this transaction, so reuse it\n                        if (location.accessLevels !== undefined) {\n                            return location.accessLevels.includes(desiredAccessLevel);\n                        }\n\n                        if (options.root === undefined) {\n                            throw new InternalError(\"Root endpoint is required\");\n                        }\n\n                        const accessControl = options.root.act(agent => agent.get(AccessControlServer));\n                        if (MaybePromise.is(accessControl)) {\n                            throw new InternalError(\"AccessControlServer should already be initialized.\");\n                        }\n                        const accessLevels = accessControl.accessLevelsFor(\n                            context as ActionContext,\n                            location,\n                            options.endpoint,\n                        );\n                        location.accessLevels = accessLevels;\n                        return accessLevels.includes(desiredAccessLevel);\n                    },\n\n                    agentFor<T extends EndpointType>(endpoint: Endpoint<T>): Agent.Instance<T> {\n                        if (!agents) {\n                            agents = ContextAgents(context as ActionContext);\n                        }\n                        return agents.agentFor(endpoint);\n                    },\n\n                    get [Contextual.context](): ActionContext {\n                        return this;\n                    },\n                };\n\n                if (message) {\n                    Contextual.setContextOf(message, context);\n                }\n\n                return actor(context);\n            };\n\n            const traceError = (e: unknown) => {\n                if (trace) {\n                    const status = (e as StatusResponseError).code;\n                    if (typeof status === \"number\") {\n                        trace.status = status;\n                    }\n                }\n                throw e;\n            };\n\n            let isAsync = false;\n            try {\n                activity = options.activity?.frame(via);\n                const result = Transaction.act(via, actOnline);\n                if (MaybePromise.is(result)) {\n                    isAsync = true;\n                    return Promise.resolve(result).catch(traceError).finally(close);\n                }\n                return result;\n            } catch (e) {\n                traceError(e);\n\n                // traceError does this but TS isn't smart enough to notice.  This is never reached\n                throw e;\n            } finally {\n                if (!isAsync && context) {\n                    close();\n                }\n            }\n        },\n\n        [Symbol.toStringTag]: \"OnlineContext\",\n    };\n}\n\nexport namespace OnlineContext {\n    export type Options = {\n        activity?: NodeActivity.Activity;\n        command?: boolean;\n        timed?: boolean;\n        fabricFiltered?: boolean;\n        message?: Message;\n        tracer?: ActionTracer;\n        actionType?: ActionTracer.ActionType;\n        endpoint?: EndpointInterface;\n        root?: Endpoint<RootEndpoint>;\n    } & (\n        | { exchange: MessageExchange<MatterDevice>; fabric?: undefined; subject?: undefined }\n        | { exchange?: undefined; fabric: FabricIndex; subject: SubjectId }\n    );\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,qBAAqB,qBAAqB;AASnD,SAAS,kBAAkB;AAG3B,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAE7B,SAAS,2BAA2B;AACpC,SAAS,mBAAmB;AAG5B,SAAS,kBAAkB;AAE3B,SAAS,qBAAqB;AAKvB,SAAS,cAAc,SAAgC;AAC1D,SAAO;AAAA,IACH,IAAO,OAAqE;AACxE,UAAI;AAEJ,UAAI;AACJ,UAAI;AAEJ,YAAM,EAAE,SAAS,IAAI;AACrB,YAAM,UAAU,UAAU;AAE1B,UAAI,SAAS;AACT,4BAAoB,OAAO;AAC3B,iBAAS,QAAQ,QAAQ;AAGzB,kBAAU,QAAQ;AAAA,MACtB,OAAO;AACH,iBAAS,QAAQ;AACjB,kBAAU,QAAQ;AAAA,MACtB;AAEA,UAAI,YAAY,QAAW;AACvB,cAAM,IAAI,oBAAoB,8CAA8C;AAAA,MAChF;AAEA,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,MAAM,WAAW;AAAA,QACnB,UAAU,SAAS,cAAc,WAAW,SAAS,EAAE,KAAK,GAAG,IAAI,QAAQ,SAAS,EAAE,CAAC;AAAA,MAC3F;AAEA,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,UAAI,QAAQ,UAAU,QAAQ,YAAY;AACtC,gBAAQ;AAAA,UACJ,MAAM,QAAQ;AAAA,QAClB;AAAA,MACJ;AAEA,YAAM,QAAQ,MAAM;AAChB,YAAI,OAAO;AACP,kBAAQ,QAAQ,OAAO,KAAK;AAAA,QAChC;AACA,YAAI,SAAS;AACT,qBAAW,aAAa,SAAS,MAAS;AAAA,QAC9C;AACA,YAAI,UAAU;AACV,mBAAS,OAAO,OAAO,EAAE;AAAA,QAC7B;AAAA,MACJ;AAEA,YAAM,YAAY,CAAC,gBAA6B;AAC5C,kBAAU;AAAA,UACN,GAAG;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UAEA,qBAAqB,UAAU;AAAA,UAE/B,cAAc,oBAAiC,UAAmC;AAC9E,gBAAI,aAAa,QAAW;AACxB,oBAAM,IAAI,cAAc,oCAAoC;AAAA,YAChE;AAGA,gBAAI,SAAS,iBAAiB,QAAW;AACrC,qBAAO,SAAS,aAAa,SAAS,kBAAkB;AAAA,YAC5D;AAEA,gBAAI,QAAQ,SAAS,QAAW;AAC5B,oBAAM,IAAI,cAAc,2BAA2B;AAAA,YACvD;AAEA,kBAAM,gBAAgB,QAAQ,KAAK,IAAI,WAAS,MAAM,IAAI,mBAAmB,CAAC;AAC9E,gBAAI,aAAa,GAAG,aAAa,GAAG;AAChC,oBAAM,IAAI,cAAc,oDAAoD;AAAA,YAChF;AACA,kBAAM,eAAe,cAAc;AAAA,cAC/B;AAAA,cACA;AAAA,cACA,QAAQ;AAAA,YACZ;AACA,qBAAS,eAAe;AACxB,mBAAO,aAAa,SAAS,kBAAkB;AAAA,UACnD;AAAA,UAEA,SAAiC,UAA0C;AACvE,gBAAI,CAAC,QAAQ;AACT,uBAAS,cAAc,OAAwB;AAAA,YACnD;AACA,mBAAO,OAAO,SAAS,QAAQ;AAAA,UACnC;AAAA,UAEA,KAAK,WAAW,OAAO,IAAmB;AACtC,mBAAO;AAAA,UACX;AAAA,QACJ;AAEA,YAAI,SAAS;AACT,qBAAW,aAAa,SAAS,OAAO;AAAA,QAC5C;AAEA,eAAO,MAAM,OAAO;AAAA,MACxB;AAEA,YAAM,aAAa,CAAC,MAAe;AAC/B,YAAI,OAAO;AACP,gBAAM,SAAU,EAA0B;AAC1C,cAAI,OAAO,WAAW,UAAU;AAC5B,kBAAM,SAAS;AAAA,UACnB;AAAA,QACJ;AACA,cAAM;AAAA,MACV;AAEA,UAAI,UAAU;AACd,UAAI;AACA,mBAAW,QAAQ,UAAU,MAAM,GAAG;AACtC,cAAM,SAAS,YAAY,IAAI,KAAK,SAAS;AAC7C,YAAI,aAAa,GAAG,MAAM,GAAG;AACzB,oBAAU;AACV,iBAAO,QAAQ,QAAQ,MAAM,EAAE,MAAM,UAAU,EAAE,QAAQ,KAAK;AAAA,QAClE;AACA,eAAO;AAAA,MACX,SAAS,GAAG;AACR,mBAAW,CAAC;AAGZ,cAAM;AAAA,MACV,UAAE;AACE,YAAI,CAAC,WAAW,SAAS;AACrB,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA,IAEA,CAAC,OAAO,WAAW,GAAG;AAAA,EAC1B;AACJ;",
  "names": []
}
