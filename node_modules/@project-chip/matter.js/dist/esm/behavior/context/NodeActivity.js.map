{
  "version": 3,
  "sources": ["../../../../src/behavior/context/NodeActivity.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Diagnostic } from \"../../log/Diagnostic.js\";\nimport { Observable } from \"../../util/Observable.js\";\n\n/**\n * Tracks activity associated with a node.\n */\nexport class NodeActivity {\n    #actors = new Set<NodeActivity.Activity>();\n    #active = Observable<[]>();\n    #inactive = Observable<[]>();\n\n    get isActive() {\n        return this.#actors.size !== 0;\n    }\n\n    get active() {\n        return this.#active;\n    }\n\n    get inactive() {\n        return this.#inactive;\n    }\n\n    get actors() {\n        return [...this.#actors.values()];\n    }\n\n    begin(description: unknown, onClose?: () => void) {\n        const elapsed = Diagnostic.elapsed();\n        const actor: NodeActivity.Activity = {\n            stack: [description],\n\n            get elapsed() {\n                return elapsed;\n            },\n\n            get [Diagnostic.value]() {\n                const result = Array<unknown>();\n\n                for (const frame of this.stack) {\n                    if (result.length) {\n                        result.push(\"\u25B8\");\n                    }\n                    result.push(frame);\n                }\n\n                return result;\n            },\n\n            frame(description: unknown) {\n                this.stack.push(description);\n                return {\n                    [Symbol.dispose]: () => {\n                        this.stack.pop();\n                    },\n                };\n            },\n\n            close: () => {\n                onClose?.();\n\n                this.#actors.delete(actor);\n\n                if (!this.#actors.size) {\n                    this.#inactive.emit();\n                }\n            },\n\n            [Symbol.dispose]: () => {\n                actor.close();\n            },\n        };\n\n        this.#actors.add(actor);\n\n        if (this.#actors.size === 1) {\n            this.#active.emit();\n        }\n\n        return actor;\n    }\n\n    get [Diagnostic.value]() {\n        if (!this.#actors.size) {\n            return Diagnostic.list([Diagnostic.weak(\"none\")]);\n        }\n\n        return Diagnostic.list(this.actors);\n    }\n}\n\nexport namespace NodeActivity {\n    export interface Activity extends Disposable {\n        readonly stack: unknown[];\n        readonly elapsed: Diagnostic.Elapsed;\n        readonly [Diagnostic.value]: unknown;\n        frame(description: unknown): Disposable;\n        close(): void;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,kBAAkB;AAC3B,SAAS,kBAAkB;AAKpB,MAAM,aAAa;AAAA,EACtB,UAAU,oBAAI,IAA2B;AAAA,EACzC,UAAU,WAAe;AAAA,EACzB,YAAY,WAAe;AAAA,EAE3B,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,SAAS;AACT,WAAO,CAAC,GAAG,KAAK,QAAQ,OAAO,CAAC;AAAA,EACpC;AAAA,EAEA,MAAM,aAAsB,SAAsB;AAC9C,UAAM,UAAU,WAAW,QAAQ;AACnC,UAAM,QAA+B;AAAA,MACjC,OAAO,CAAC,WAAW;AAAA,MAEnB,IAAI,UAAU;AACV,eAAO;AAAA,MACX;AAAA,MAEA,KAAK,WAAW,KAAK,IAAI;AACrB,cAAM,SAAS,MAAe;AAE9B,mBAAW,SAAS,KAAK,OAAO;AAC5B,cAAI,OAAO,QAAQ;AACf,mBAAO,KAAK,QAAG;AAAA,UACnB;AACA,iBAAO,KAAK,KAAK;AAAA,QACrB;AAEA,eAAO;AAAA,MACX;AAAA,MAEA,MAAMA,cAAsB;AACxB,aAAK,MAAM,KAAKA,YAAW;AAC3B,eAAO;AAAA,UACH,CAAC,OAAO,OAAO,GAAG,MAAM;AACpB,iBAAK,MAAM,IAAI;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,MAEA,OAAO,MAAM;AACT,kBAAU;AAEV,aAAK,QAAQ,OAAO,KAAK;AAEzB,YAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,eAAK,UAAU,KAAK;AAAA,QACxB;AAAA,MACJ;AAAA,MAEA,CAAC,OAAO,OAAO,GAAG,MAAM;AACpB,cAAM,MAAM;AAAA,MAChB;AAAA,IACJ;AAEA,SAAK,QAAQ,IAAI,KAAK;AAEtB,QAAI,KAAK,QAAQ,SAAS,GAAG;AACzB,WAAK,QAAQ,KAAK;AAAA,IACtB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,KAAK,WAAW,KAAK,IAAI;AACrB,QAAI,CAAC,KAAK,QAAQ,MAAM;AACpB,aAAO,WAAW,KAAK,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC;AAAA,IACpD;AAEA,WAAO,WAAW,KAAK,KAAK,MAAM;AAAA,EACtC;AACJ;",
  "names": ["description"]
}
