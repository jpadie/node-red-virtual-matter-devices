{
  "version": 3,
  "sources": ["../../../../src/behavior/context/ActionContext.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type { MatterDevice } from \"../../MatterDevice.js\";\nimport type { AccessLevel } from \"../../cluster/Cluster.js\";\nimport type { Message } from \"../../codec/MessageCodec.js\";\nimport type { Agent } from \"../../endpoint/Agent.js\";\nimport type { Endpoint } from \"../../endpoint/Endpoint.js\";\nimport type { EndpointType } from \"../../endpoint/type/EndpointType.js\";\nimport { MessageExchange } from \"../../protocol/MessageExchange.js\";\nimport type { SecureSession } from \"../../session/SecureSession.js\";\nimport type { ValueSupervisor } from \"../supervision/ValueSupervisor.js\";\nimport { NodeActivity } from \"./NodeActivity.js\";\nimport type { OfflineContext } from \"./server/OfflineContext.js\";\nimport type { OnlineContext } from \"./server/OnlineContext.js\";\n\n/**\n * Provides contextual information for Matter actions such as accessing attributes or invoking commands.\n *\n * Matter.js provides an \"online\" ActionContext for you when responding to network requests.  You can also use\n * \"offline\" agents to invoke cluster APIs {@link Endpoint} without an active user session.\n *\n * See {@link OnlineContext} and {@link OfflineContext} for details of these two types of interaction.\n *\n * Context includes:\n *\n *   - Authorization details such as {@link AccessLevel}, {@link subject} and accessing {@link fabric}\n *\n *   - The {@link transaction} required to make state changes\n *\n *   - Factory functions for {@link Agent} instances you can use to interact with {@link Endpoint}s\n *\n *   - When responding to network requests, low-level contextual information such as the wire {@link message}\n *\n * For the formal definition of an \"action\" see {@link MatterSpecification.v12.Core} \u00A7 8.2.4\n */\nexport interface ActionContext extends ValueSupervisor.Session {\n    /**\n     * The Matter session in which an interaction occurs.\n     */\n    session?: SecureSession<MatterDevice>;\n\n    /**\n     * The Matter exchange in which an interaction occurs.\n     */\n    exchange?: MessageExchange<MatterDevice>;\n\n    /**\n     * The wire message that initiated invocation.\n     */\n    message?: Message;\n\n    /**\n     * Activity tracking information.  If present, activity frames are inserted at key points for diagnostic\n     * purposes.\n     */\n    activity?: NodeActivity.Activity;\n\n    /**\n     * Obtain an agent for interacting with an endpoint in this context.\n     */\n    agentFor<const T extends EndpointType>(endpoint: Endpoint<T>): Agent.Instance<T>;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
