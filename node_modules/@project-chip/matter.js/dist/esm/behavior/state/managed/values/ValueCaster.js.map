{
  "version": 3,
  "sources": ["../../../../../../src/behavior/state/managed/values/ValueCaster.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DataModelPath } from \"../../../../model/definitions/DataModelPath.js\";\nimport { ClusterModel, Metatype, UnsupportedCastError, ValueModel } from \"../../../../model/index.js\";\nimport { camelize } from \"../../../../util/String.js\";\nimport { SchemaImplementationError } from \"../../../errors.js\";\nimport { RootSupervisor } from \"../../../supervision/RootSupervisor.js\";\nimport { Schema } from \"../../../supervision/Schema.js\";\nimport { ValueSupervisor } from \"../../../supervision/ValueSupervisor.js\";\nimport { Val } from \"../../Val.js\";\n\n/**\n * Obtain a {@link ValueSupervisor.Caster} function for the given schema.\n */\nexport function ValueCaster(schema: Schema, owner: RootSupervisor) {\n    const metatype = schema.effectiveMetatype ?? Metatype.any;\n\n    switch (metatype) {\n        case Metatype.object:\n            return StructCaster(schema as ValueModel | ClusterModel, owner);\n\n        case Metatype.array:\n            return ListCaster(schema as ValueModel, owner);\n\n        default:\n            return Metatype.cast[metatype];\n    }\n}\n\nfunction StructCaster(schema: ValueModel | ClusterModel, owner: RootSupervisor) {\n    const memberConfigs = {} as Record<string, { name: string; cast: ValueSupervisor.Cast }>;\n    for (const member of schema.activeMembers) {\n        if (member.isDeprecated) {\n            continue;\n        }\n\n        const config = { name: camelize(member.name), cast: owner.get(member).cast };\n\n        // Correct case has priority\n        memberConfigs[config.name] = config;\n\n        // We also support case-insensitive match.  There are no collisions if names are case-insensitive in standard\n        // Matter models but we differentiate anyway just for completeness\n        const lowerName = member.name.toLowerCase();\n        if (!memberConfigs[lowerName]) {\n            memberConfigs[lowerName] = config;\n        }\n    }\n\n    const castToObject = Metatype.cast.object;\n\n    return (value: any) => {\n        const input = castToObject(value);\n        const output = {} as Val.Struct;\n\n        for (const key in input) {\n            let config = memberConfigs[key];\n            if (config === undefined) {\n                config = memberConfigs[key.toLowerCase()];\n            }\n\n            if (config === undefined) {\n                throw new UnsupportedCastError(`Property \"${key}\" is unsupported`);\n            }\n\n            output[config.name] = config.cast(input[key]);\n        }\n\n        return output;\n    };\n}\n\nfunction ListCaster(schema: ValueModel, owner: RootSupervisor) {\n    const entry = schema.listEntry;\n    if (entry === undefined) {\n        throw new SchemaImplementationError(DataModelPath(schema.path), \"List schema has no entry definition\");\n    }\n\n    const castToArray = Metatype.cast.array;\n    const castEntry = owner.get(entry).cast;\n\n    return (value: any) => castToArray(value).map(castEntry);\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,qBAAqB;AAC9B,SAAuB,UAAU,4BAAwC;AACzE,SAAS,gBAAgB;AACzB,SAAS,iCAAiC;AASnC,SAAS,YAAY,QAAgB,OAAuB;AAC/D,QAAM,WAAW,OAAO,qBAAqB,SAAS;AAEtD,UAAQ,UAAU;AAAA,IACd,KAAK,SAAS;AACV,aAAO,aAAa,QAAqC,KAAK;AAAA,IAElE,KAAK,SAAS;AACV,aAAO,WAAW,QAAsB,KAAK;AAAA,IAEjD;AACI,aAAO,SAAS,KAAK,QAAQ;AAAA,EACrC;AACJ;AAEA,SAAS,aAAa,QAAmC,OAAuB;AAC5E,QAAM,gBAAgB,CAAC;AACvB,aAAW,UAAU,OAAO,eAAe;AACvC,QAAI,OAAO,cAAc;AACrB;AAAA,IACJ;AAEA,UAAM,SAAS,EAAE,MAAM,SAAS,OAAO,IAAI,GAAG,MAAM,MAAM,IAAI,MAAM,EAAE,KAAK;AAG3E,kBAAc,OAAO,IAAI,IAAI;AAI7B,UAAM,YAAY,OAAO,KAAK,YAAY;AAC1C,QAAI,CAAC,cAAc,SAAS,GAAG;AAC3B,oBAAc,SAAS,IAAI;AAAA,IAC/B;AAAA,EACJ;AAEA,QAAM,eAAe,SAAS,KAAK;AAEnC,SAAO,CAAC,UAAe;AACnB,UAAM,QAAQ,aAAa,KAAK;AAChC,UAAM,SAAS,CAAC;AAEhB,eAAW,OAAO,OAAO;AACrB,UAAI,SAAS,cAAc,GAAG;AAC9B,UAAI,WAAW,QAAW;AACtB,iBAAS,cAAc,IAAI,YAAY,CAAC;AAAA,MAC5C;AAEA,UAAI,WAAW,QAAW;AACtB,cAAM,IAAI,qBAAqB,aAAa,GAAG,kBAAkB;AAAA,MACrE;AAEA,aAAO,OAAO,IAAI,IAAI,OAAO,KAAK,MAAM,GAAG,CAAC;AAAA,IAChD;AAEA,WAAO;AAAA,EACX;AACJ;AAEA,SAAS,WAAW,QAAoB,OAAuB;AAC3D,QAAM,QAAQ,OAAO;AACrB,MAAI,UAAU,QAAW;AACrB,UAAM,IAAI,0BAA0B,cAAc,OAAO,IAAI,GAAG,qCAAqC;AAAA,EACzG;AAEA,QAAM,cAAc,SAAS,KAAK;AAClC,QAAM,YAAY,MAAM,IAAI,KAAK,EAAE;AAEnC,SAAO,CAAC,UAAe,YAAY,KAAK,EAAE,IAAI,SAAS;AAC3D;",
  "names": []
}
