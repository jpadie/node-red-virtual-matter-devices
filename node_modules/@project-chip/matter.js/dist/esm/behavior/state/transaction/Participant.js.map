{
  "version": 3,
  "sources": ["../../../../../src/behavior/state/transaction/Participant.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\n\n/**\n * Components with support for transactionality implement this interface.\n */\nexport interface Participant {\n    /**\n     * Description used in error messages.\n     */\n    toString(): string;\n\n    /**\n     * The \"role\" of a participant is an optional key you may use to retrieve\n     * a participant from the transaction.\n     */\n    role?: {};\n\n    /**\n     * Pre-commit logic.\n     *\n     * Pre-commit logic returns a boolean indicating whether it performed an action that affects state.  The transaction\n     * will cycle through participants continuously until all participants return false.\n     *\n     * Thus `preCommit` implementations must be stateful and expect to be invoked more than once for a single\n     * transaction.\n     */\n    preCommit?: () => MaybePromise<boolean>;\n\n    /**\n     * Commit phase one.\n     */\n    commit1(): MaybePromise;\n\n    /**\n     * Commit phase two.\n     */\n    commit2(): MaybePromise;\n\n    /**\n     * Post-commit logic.\n     */\n    postCommit?: () => MaybePromise;\n\n    /**\n     * Drop isolated writes and revert to original canonical source.\n     */\n    rollback(): MaybePromise;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
