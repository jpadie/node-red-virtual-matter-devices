{
  "version": 3,
  "sources": ["../../../../src/behavior/state/StateType.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeneratedClass } from \"../../util/GeneratedClass.js\";\nimport { Val } from \"./Val.js\";\n\n/**\n * State is a plain JS object.\n *\n * Any constructor invokable with no arguments may define a state structure.\n */\nexport interface StateType {\n    new (): {};\n}\n\n/**\n * This is used as state in base classes.\n */\nexport const EmptyState = function () {\n    return {};\n} as unknown as new () => {};\n\n/**\n * DerivedState is a programmatic extension of state.\n */\nexport interface DerivedState<Base extends StateType = StateType, Extension extends {} = {}> {\n    new (): InstanceType<Base> & Extension;\n}\n\n/**\n * Extend state with additional values.\n */\nexport function DerivedState<const Base extends StateType, const Extension extends Val.Struct>({\n    base,\n    values,\n    name,\n}: DerivedState.Options<Base, Extension>) {\n    if (base === EmptyState) {\n        base = undefined;\n    }\n    const oldDefaults = (base ? new base() : {}) as Val.Struct;\n\n    let newDefaults: undefined | Val.Struct;\n    for (const key in values) {\n        const value = (values as Val.Struct)[key];\n        if (!Object.prototype.hasOwnProperty.call(oldDefaults, key) || oldDefaults[key] !== value) {\n            if (!newDefaults) {\n                newDefaults = {};\n            }\n            newDefaults[key] = value;\n        }\n    }\n\n    if (!newDefaults) {\n        return (base ?? EmptyState) as DerivedState<Base, Extension>;\n    }\n\n    return GeneratedClass({\n        name: name ?? base?.name ?? \"State\",\n        base: base,\n        instanceProperties: newDefaults,\n    }) as DerivedState<Base, Extension>;\n}\n\nexport namespace DerivedState {\n    export interface Options<Base extends StateType, Values extends Val.Struct> {\n        values: Values;\n        base?: Base;\n        name?: string;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,sBAAsB;AAexB,MAAM,aAAa,WAAY;AAClC,SAAO,CAAC;AACZ;AAYO,SAAS,aAA+E;AAAA,EAC3F;AAAA,EACA;AAAA,EACA;AACJ,GAA0C;AACtC,MAAI,SAAS,YAAY;AACrB,WAAO;AAAA,EACX;AACA,QAAM,cAAe,OAAO,IAAI,KAAK,IAAI,CAAC;AAE1C,MAAI;AACJ,aAAW,OAAO,QAAQ;AACtB,UAAM,QAAS,OAAsB,GAAG;AACxC,QAAI,CAAC,OAAO,UAAU,eAAe,KAAK,aAAa,GAAG,KAAK,YAAY,GAAG,MAAM,OAAO;AACvF,UAAI,CAAC,aAAa;AACd,sBAAc,CAAC;AAAA,MACnB;AACA,kBAAY,GAAG,IAAI;AAAA,IACvB;AAAA,EACJ;AAEA,MAAI,CAAC,aAAa;AACd,WAAQ,QAAQ;AAAA,EACpB;AAEA,SAAO,eAAe;AAAA,IAClB,MAAM,QAAQ,MAAM,QAAQ;AAAA,IAC5B;AAAA,IACA,oBAAoB;AAAA,EACxB,CAAC;AACL;",
  "names": []
}
