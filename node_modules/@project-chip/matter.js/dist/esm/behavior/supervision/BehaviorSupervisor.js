/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Access, ClusterModel, DatatypeModel, FieldModel } from "../../model/index.js";
import { camelize } from "../../util/String.js";
import { RootSupervisor } from "./RootSupervisor.js";
import { Schema } from "./Schema.js";
function BehaviorSupervisor(options) {
  const logical = options.schema ?? Schema.empty;
  const children = logical.children.map((child) => child.clone());
  addExtensionFields(logical, new options.State(), children);
  let schema;
  if (logical instanceof ClusterModel) {
    schema = new ClusterModel({
      ...logical,
      name: `${camelize(options.id, true)}$State`,
      children
    });
  } else {
    schema = new DatatypeModel({
      ...logical,
      type: logical.type ?? "struct",
      name: `${camelize(options.id, true)}$State`,
      children
    });
  }
  schema.freeze();
  return new RootSupervisor(schema);
}
function addExtensionFields(base, defaultState, children) {
  const props = /* @__PURE__ */ new Set();
  for (const field of base.activeMembers) {
    props.add(camelize(field.name));
  }
  function addProperties(object) {
    if (!object || object === Object.prototype) {
      return;
    }
    const descriptors = Object.getOwnPropertyDescriptors(object);
    for (const name in descriptors) {
      if (props.has(name) || name === "constructor") {
        continue;
      }
      if (!props.has(name)) {
        props.add(name);
        const field = new FieldModel({
          name,
          type: "any",
          access: new Access({
            readPriv: Access.Privilege.View,
            writePriv: Access.Privilege.Operate
          })
        });
        const descriptor = descriptors[name];
        if (!descriptor.writable && !descriptor.set) {
          field.quality = "F";
        }
        children.push(field);
      }
    }
    addProperties(Object.getPrototypeOf(object));
  }
  addProperties(defaultState);
}
export {
  BehaviorSupervisor
};
//# sourceMappingURL=BehaviorSupervisor.js.map
