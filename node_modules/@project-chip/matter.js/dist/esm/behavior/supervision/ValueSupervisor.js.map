{
  "version": 3,
  "sources": ["../../../../src/behavior/supervision/ValueSupervisor.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DataModelPath } from \"../../model/definitions/DataModelPath.js\";\nimport { AsyncObservable } from \"../../util/Observable.js\";\nimport type { AccessControl } from \"../AccessControl.js\";\nimport { ActionTracer } from \"../context/ActionTracer.js\";\nimport type { Val } from \"../state/Val.js\";\nimport type { Transaction } from \"../state/transaction/Transaction.js\";\nimport type { ValidationLocation } from \"../state/validation/location.js\";\nimport type { RootSupervisor } from \"./RootSupervisor.js\";\nimport type { Schema } from \"./Schema.js\";\n\n/**\n * Value supervisor implements schema-based supervision of a specific value.\n *\n * Supervision functions include:\n *\n *   - Access controls\n *\n *   - Datatype validation\n *\n *   - Managed instance generation\n *\n * Supervision is implemented via schema-driven runtime compilation.  We\n * perform as much logic as possible at startup to minimize overhead during\n * server operation.\n *\n * This means we typically ingest schema, create a compact form of denormalized\n * metadata, and/or generate functions to perform required operations.\n */\nexport interface ValueSupervisor {\n    /**\n     * The schema manager that owns this ValueSupervisor.\n     */\n    readonly owner: RootSupervisor;\n\n    /**\n     * The logical schema that controls the value's behavior.\n     */\n    readonly schema: Schema;\n\n    /**\n     * Consolidated access control information for the schema.\n     */\n    readonly access: AccessControl;\n\n    /**\n     * Perform validation.\n     */\n    readonly validate: ValueSupervisor.Validate | undefined;\n\n    /**\n     * Create a managed instance of a value.\n     */\n    readonly manage: ValueSupervisor.Manage;\n\n    /**\n     * Apply changes.  Does not validate perform validation.\n     */\n    readonly patch: ValueSupervisor.Patch;\n\n    /**\n     * Convert a JS value to the appropriate JS type for the schema.\n     */\n    readonly cast: ValueSupervisor.Cast;\n}\n\nexport namespace ValueSupervisor {\n    /**\n     * Session information required for value management.\n     */\n    export interface Session extends AccessControl.Session {\n        /**\n         * The transaction used for isolating state changes associated with this session.\n         */\n        transaction: Transaction;\n\n        /**\n         * A target for instrumentation information.  If present, various components will populate with diagnostic\n         * information during the action.\n         */\n        trace?: ActionTracer.Action;\n\n        /**\n         * If this is true, data validation is disabled.  This should only be used in contexts where data validation is\n         * deferred.\n         */\n        acceptInvalid?: boolean;\n\n        /**\n         * If present the session is associated with an online interaction.  Emits when the interaction ends.\n         */\n        interactionComplete?: AsyncObservable<[]>;\n    }\n\n    export type Validate = (value: Val, session: Session, location: ValidationLocation) => void;\n\n    export type Manage = (reference: Val.Reference, session: Session) => Val;\n\n    export type Patch = (changes: Val.Collection, target: Val.Collection, path: DataModelPath) => Val;\n\n    export type Cast = (value: Val) => Val;\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
