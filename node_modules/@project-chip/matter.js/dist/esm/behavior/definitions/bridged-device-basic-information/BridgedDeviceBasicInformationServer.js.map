{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/bridged-device-basic-information/BridgedDeviceBasicInformationServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImplementationError } from \"../../../common/MatterError.js\";\nimport { AggregatorEndpoint } from \"../../../endpoint/definitions/system/AggregatorEndpoint.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport { DescriptorServer } from \"../descriptor/DescriptorServer.js\";\nimport { BridgedDeviceBasicInformationBehavior } from \"./BridgedDeviceBasicInformationBehavior.js\";\n\nconst logger = Logger.get(\"BridgedDeviceBasicInformationServer\");\n\n/**\n * This is the default server implementation of BridgedDeviceBasicInformationBehavior.\n *\n * All attributes are optional except for the \"reachable\" attribute.\n */\nexport class BridgedDeviceBasicInformationServer extends BridgedDeviceBasicInformationBehavior {\n    override async initialize() {\n        if (this.endpoint.lifecycle.isInstalled) {\n            await this.agent.load(DescriptorServer);\n            await this.#configurePart();\n        } else {\n            this.reactTo(this.endpoint.lifecycle.installed, this.#configurePart, { once: true });\n        }\n        this.reactTo(this.events.reachable$Changed, this.#emitReachableChange);\n\n        if (\n            this.state.uniqueId !== undefined &&\n            this.state.serialNumber !== undefined &&\n            this.state.uniqueId === this.state.serialNumber\n        ) {\n            logger.warn(\"uniqueId and serialNumber shall not be the same.\");\n        }\n    }\n\n    /**\n     * Per the specification.  Not sure what this adds vs. subscribing to attribute changes.\n     */\n    #emitReachableChange(reachable: boolean) {\n        this.events.reachableChanged.emit({ reachableNewValue: reachable }, this.context);\n    }\n\n    /**\n     * Per the specification, BridgedDeviceBasicInformation may only appear on bridged nodes, and bridged nodes may only\n     * appear under aggregator nodes.\n     *\n     * Therefore, this default implementation of BridgedDeviceBasicInformation injects the BridgedNode device type on the\n     * associated {@link Endpoint} and asserts that its parent is a {@link AggregatorEndpoint}.\n     */\n    async #configurePart() {\n        // Obtain endpoint's owner.  This method should only be invoked after owner is known\n        const owner = this.agent.owner;\n        if (owner === undefined) {\n            throw new ImplementationError(`Bridged node ${this.endpoint} has no parent`);\n        }\n\n        // Assert owner is an aggregator\n        if (!owner.get(DescriptorServer).hasDeviceType(AggregatorEndpoint.deviceType)) {\n            throw new ImplementationError(`Bridged node ${this.endpoint} owner ${owner} is not an aggregator`);\n        }\n\n        // Ensure endpoint is a bridged node\n        this.agent.get(DescriptorServer).addDeviceTypes(\"BridgedNode\");\n    }\n}\n\nexport namespace BridgedDeviceBasicInformationServer {\n    export class State extends BridgedDeviceBasicInformationBehavior.State {\n        // Assume Device is online when it is added, but developers should set correctly if needed\n        override reachable = true;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,2BAA2B;AACpC,SAAS,0BAA0B;AACnC,SAAS,cAAc;AACvB,SAAS,wBAAwB;AACjC,SAAS,6CAA6C;AAEtD,MAAM,SAAS,OAAO,IAAI,qCAAqC;AAOxD,MAAM,4CAA4C,sCAAsC;AAAA,EAC3F,MAAe,aAAa;AACxB,QAAI,KAAK,SAAS,UAAU,aAAa;AACrC,YAAM,KAAK,MAAM,KAAK,gBAAgB;AACtC,YAAM,KAAK,eAAe;AAAA,IAC9B,OAAO;AACH,WAAK,QAAQ,KAAK,SAAS,UAAU,WAAW,KAAK,gBAAgB,EAAE,MAAM,KAAK,CAAC;AAAA,IACvF;AACA,SAAK,QAAQ,KAAK,OAAO,mBAAmB,KAAK,oBAAoB;AAErE,QACI,KAAK,MAAM,aAAa,UACxB,KAAK,MAAM,iBAAiB,UAC5B,KAAK,MAAM,aAAa,KAAK,MAAM,cACrC;AACE,aAAO,KAAK,kDAAkD;AAAA,IAClE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB,WAAoB;AACrC,SAAK,OAAO,iBAAiB,KAAK,EAAE,mBAAmB,UAAU,GAAG,KAAK,OAAO;AAAA,EACpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,iBAAiB;AAEnB,UAAM,QAAQ,KAAK,MAAM;AACzB,QAAI,UAAU,QAAW;AACrB,YAAM,IAAI,oBAAoB,gBAAgB,KAAK,QAAQ,gBAAgB;AAAA,IAC/E;AAGA,QAAI,CAAC,MAAM,IAAI,gBAAgB,EAAE,cAAc,mBAAmB,UAAU,GAAG;AAC3E,YAAM,IAAI,oBAAoB,gBAAgB,KAAK,QAAQ,UAAU,KAAK,uBAAuB;AAAA,IACrG;AAGA,SAAK,MAAM,IAAI,gBAAgB,EAAE,eAAe,aAAa;AAAA,EACjE;AACJ;AAAA,CAEO,CAAUA,yCAAV;AAAA,EACI,MAAM,cAAc,sCAAsC,MAAM;AAAA;AAAA,IAE1D,YAAY;AAAA,EACzB;AAHO,EAAAA,qCAAM;AAAA,GADA;",
  "names": ["BridgedDeviceBasicInformationServer"]
}
