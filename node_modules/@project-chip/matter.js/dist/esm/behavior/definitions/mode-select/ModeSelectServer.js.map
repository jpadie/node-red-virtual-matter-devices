{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/mode-select/ModeSelectServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ClusterType } from \"../../../cluster/ClusterType.js\";\nimport { GeneralDiagnostics } from \"../../../cluster/definitions/GeneralDiagnosticsCluster.js\";\nimport { ModeSelect } from \"../../../cluster/definitions/ModeSelectCluster.js\";\nimport { OnOff } from \"../../../cluster/definitions/OnOffCluster.js\";\nimport { RootEndpoint } from \"../../../endpoint/definitions/system/RootEndpoint.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport { StatusCode, StatusResponseError } from \"../../../protocol/interaction/StatusCode.js\";\nimport { GeneralDiagnosticsBehavior } from \"../general-diagnostics/GeneralDiagnosticsBehavior.js\";\nimport { OnOffServer } from \"../on-off/OnOffServer.js\";\nimport { ModeSelectBehavior } from \"./ModeSelectBehavior.js\";\n\nconst logger = Logger.get(\"ModeSelectServer\");\n\nconst ModeSelectServerBase = ModeSelectBehavior.with(ModeSelect.Feature.OnOff);\n\n/**\n * This is the default server implementation of {@link ModeSelectBehavior}.\n *\n * This implementation supports StartupMode and OnMode handling, when the OnOff feature is activated. You should use\n * {@link ModeSelectServer.with} to specialize the class for the features your implementation supports. Alternatively\n * you can extend this class and override the methods you need.\n *\n * It should be sufficient to use the class without changes and just react on the currentMode changed events.\n */\nexport class ModeSelectServerLogic extends ModeSelectServerBase {\n    override initialize() {\n        this.#assertCurrentMode();\n        this.#assertStartUpMode();\n        this.#assertOnMode();\n\n        let currentModeOverridden = false;\n        // When OnOff feature is active handle the OnOff dependency and potentially setting OnMode\n        if (this.features.onOff && this.state.onMode !== undefined && this.state.onMode !== null) {\n            const onOffServer = this.agent.get(OnOffServer);\n            if (onOffServer !== undefined) {\n                if (onOffServer.features.lighting && onOffServer.state.startUpOnOff === OnOff.StartUpOnOff.On) {\n                    this.state.currentMode = this.state.onMode;\n                    currentModeOverridden = true;\n                }\n                this.reactTo(onOffServer.events.onOff$Changed, this.#handleOnOffDependency);\n            } else {\n                logger.warn(\"OnOffServer not found on endpoint, but OnMode is set.\");\n            }\n        }\n\n        // If the currentMode is not overridden by OnMode, handle StartUpMode definition if not OTA boot\n        if (\n            !currentModeOverridden &&\n            this.state.startUpMode !== undefined &&\n            this.state.startUpMode !== null &&\n            this.#getBootReason() !== GeneralDiagnostics.BootReason.SoftwareUpdateCompleted\n        ) {\n            this.state.currentMode = this.state.startUpMode;\n        }\n    }\n\n    override changeToMode({ newMode }: ModeSelect.ChangeToModeRequest) {\n        this.#assertModeValue(\"NewMode\", newMode); // Generates INVALID_COMMAND on error\n\n        this.state.currentMode = newMode;\n    }\n\n    #assertCurrentMode(): void {\n        this.#assertModeValue(\"currentMode\", this.state.currentMode);\n    }\n\n    #assertStartUpMode(): void {\n        if (this.state.startUpMode !== undefined && this.state.startUpMode !== null) {\n            this.#assertModeValue(\"startUpMode\", this.state.startUpMode);\n        }\n    }\n\n    #assertOnMode(): void {\n        if (this.state.onMode !== undefined && this.state.onMode !== null) {\n            this.#assertModeValue(\"onMode\", this.state.onMode);\n        }\n    }\n\n    #assertModeValue(fieldName: string, mode: number): void {\n        if (!this.state.supportedModes.some(({ mode: supportedMode }) => supportedMode === mode)) {\n            throw new StatusResponseError(\n                `Mode ${mode} provided in ${fieldName} is not supported`,\n                StatusCode.InvalidCommand,\n            );\n        }\n    }\n\n    #handleOnOffDependency(newValue: boolean, oldValue: boolean): void {\n        if (newValue && !oldValue && this.state.onMode !== undefined && this.state.onMode !== null) {\n            this.state.currentMode = this.state.onMode;\n        }\n    }\n\n    #getBootReason() {\n        const rootEndpoint = this.endpoint.ownerOfType(RootEndpoint);\n        if (rootEndpoint !== undefined && rootEndpoint.behaviors.has(GeneralDiagnosticsBehavior)) {\n            return rootEndpoint.stateOf(GeneralDiagnosticsBehavior).bootReason;\n        }\n    }\n}\n\nexport class ModeSelectServer extends ModeSelectServerLogic.for(ClusterType(ModeSelect.Base)) {}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AACnC,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,oBAAoB;AAC7B,SAAS,cAAc;AACvB,SAAS,YAAY,2BAA2B;AAChD,SAAS,kCAAkC;AAC3C,SAAS,mBAAmB;AAC5B,SAAS,0BAA0B;AAEnC,MAAM,SAAS,OAAO,IAAI,kBAAkB;AAE5C,MAAM,uBAAuB,mBAAmB,KAAK,WAAW,QAAQ,KAAK;AAWtE,MAAM,8BAA8B,qBAAqB;AAAA,EACnD,aAAa;AAClB,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,cAAc;AAEnB,QAAI,wBAAwB;AAE5B,QAAI,KAAK,SAAS,SAAS,KAAK,MAAM,WAAW,UAAa,KAAK,MAAM,WAAW,MAAM;AACtF,YAAM,cAAc,KAAK,MAAM,IAAI,WAAW;AAC9C,UAAI,gBAAgB,QAAW;AAC3B,YAAI,YAAY,SAAS,YAAY,YAAY,MAAM,iBAAiB,MAAM,aAAa,IAAI;AAC3F,eAAK,MAAM,cAAc,KAAK,MAAM;AACpC,kCAAwB;AAAA,QAC5B;AACA,aAAK,QAAQ,YAAY,OAAO,eAAe,KAAK,sBAAsB;AAAA,MAC9E,OAAO;AACH,eAAO,KAAK,uDAAuD;AAAA,MACvE;AAAA,IACJ;AAGA,QACI,CAAC,yBACD,KAAK,MAAM,gBAAgB,UAC3B,KAAK,MAAM,gBAAgB,QAC3B,KAAK,eAAe,MAAM,mBAAmB,WAAW,yBAC1D;AACE,WAAK,MAAM,cAAc,KAAK,MAAM;AAAA,IACxC;AAAA,EACJ;AAAA,EAES,aAAa,EAAE,QAAQ,GAAmC;AAC/D,SAAK,iBAAiB,WAAW,OAAO;AAExC,SAAK,MAAM,cAAc;AAAA,EAC7B;AAAA,EAEA,qBAA2B;AACvB,SAAK,iBAAiB,eAAe,KAAK,MAAM,WAAW;AAAA,EAC/D;AAAA,EAEA,qBAA2B;AACvB,QAAI,KAAK,MAAM,gBAAgB,UAAa,KAAK,MAAM,gBAAgB,MAAM;AACzE,WAAK,iBAAiB,eAAe,KAAK,MAAM,WAAW;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEA,gBAAsB;AAClB,QAAI,KAAK,MAAM,WAAW,UAAa,KAAK,MAAM,WAAW,MAAM;AAC/D,WAAK,iBAAiB,UAAU,KAAK,MAAM,MAAM;AAAA,IACrD;AAAA,EACJ;AAAA,EAEA,iBAAiB,WAAmB,MAAoB;AACpD,QAAI,CAAC,KAAK,MAAM,eAAe,KAAK,CAAC,EAAE,MAAM,cAAc,MAAM,kBAAkB,IAAI,GAAG;AACtF,YAAM,IAAI;AAAA,QACN,QAAQ,IAAI,gBAAgB,SAAS;AAAA,QACrC,WAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,uBAAuB,UAAmB,UAAyB;AAC/D,QAAI,YAAY,CAAC,YAAY,KAAK,MAAM,WAAW,UAAa,KAAK,MAAM,WAAW,MAAM;AACxF,WAAK,MAAM,cAAc,KAAK,MAAM;AAAA,IACxC;AAAA,EACJ;AAAA,EAEA,iBAAiB;AACb,UAAM,eAAe,KAAK,SAAS,YAAY,YAAY;AAC3D,QAAI,iBAAiB,UAAa,aAAa,UAAU,IAAI,0BAA0B,GAAG;AACtF,aAAO,aAAa,QAAQ,0BAA0B,EAAE;AAAA,IAC5D;AAAA,EACJ;AACJ;AAEO,MAAM,yBAAyB,sBAAsB,IAAI,YAAY,WAAW,IAAI,CAAC,EAAE;AAAC;",
  "names": []
}
