{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/keypad-input/KeypadInputInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { KeypadInput } from \"../../../cluster/definitions/KeypadInputCluster.js\";\n\nexport namespace KeypadInputInterface {\n    export interface Base {\n        /**\n         * Upon receipt, this shall process a keycode as input to the media endpoint.\n         *\n         * If a device has multiple media endpoints implementing this cluster, such as a casting video player endpoint\n         * with one or more content app endpoints, then only the endpoint receiving the command shall process the\n         * keycode as input. In other words, a specific content app endpoint shall NOT process a keycode received by a\n         * different content app endpoint.\n         *\n         * If a second SendKey request with the same KeyCode value is received within 200 ms, then the endpoint will\n         * consider the first key press to be a press and hold. When such a repeat KeyCode value is not received within\n         * 200 ms, then the endpoint will consider the last key press to be a release.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.8.6.1\n         */\n        sendKey(request: KeypadInput.SendKeyRequest): MaybePromise<KeypadInput.SendKeyResponse>;\n    }\n}\n\nexport type KeypadInputInterface = { components: [{ flags: {}, methods: KeypadInputInterface.Base }] };\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
