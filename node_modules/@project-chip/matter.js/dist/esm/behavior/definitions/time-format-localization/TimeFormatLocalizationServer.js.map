{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/time-format-localization/TimeFormatLocalizationServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TimeFormatLocalization } from \"../../../cluster/definitions/TimeFormatLocalizationCluster.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport { TimeFormatLocalizationBehavior } from \"./TimeFormatLocalizationBehavior.js\";\n\nconst logger = Logger.get(\"TimeFormatLocalizationServer\");\n\n/**\n * This is the default server implementation of {@link TimeFormatLocalizationBehavior}.\n */\nexport class TimeFormatLocalizationServer extends TimeFormatLocalizationBehavior.with(\"CalendarFormat\") {\n    override initialize() {\n        if (this.state.hourFormat === undefined) {\n            this.state.hourFormat = this.detectedHourFormat;\n        }\n        if (this.state.activeCalendarType === undefined) {\n            this.state.activeCalendarType = this.detectedCalendarType;\n        }\n        if (this.state.supportedCalendarTypes === undefined) {\n            this.state.supportedCalendarTypes = [this.state.activeCalendarType];\n        }\n    }\n\n    /** Override this getter with own implementation to detect the hour format of the system. */\n    get detectedHourFormat() {\n        if (Intl.DateTimeFormat(undefined, { hour: \"numeric\" }).resolvedOptions().hour12) {\n            return TimeFormatLocalization.HourFormat[\"12Hr\"];\n        }\n        return TimeFormatLocalization.HourFormat[\"24Hr\"];\n    }\n\n    /** Override this getter with own implementation to detect the calendar type of the system. */\n    get detectedCalendarType() {\n        const type = Intl.DateTimeFormat().resolvedOptions().calendar;\n        switch (type) {\n            case \"buddhist\":\n                return TimeFormatLocalization.CalendarType.Buddhist;\n\n            case \"chinese\":\n                return TimeFormatLocalization.CalendarType.Chinese;\n\n            case \"coptic\":\n                return TimeFormatLocalization.CalendarType.Coptic;\n\n            case \"ethiopian\":\n                return TimeFormatLocalization.CalendarType.Ethiopian;\n\n            case \"gregory\":\n                return TimeFormatLocalization.CalendarType.Gregorian;\n\n            case \"ethiopic\":\n                return TimeFormatLocalization.CalendarType.Ethiopian;\n\n            case \"hebrew\":\n                return TimeFormatLocalization.CalendarType.Hebrew;\n\n            case \"indian\":\n                return TimeFormatLocalization.CalendarType.Indian;\n\n            case \"islamic\":\n                return TimeFormatLocalization.CalendarType.Islamic;\n\n            case \"japanese\":\n                return TimeFormatLocalization.CalendarType.Japanese;\n\n            case \"dangi\":\n                return TimeFormatLocalization.CalendarType.Korean;\n\n            case \"persian\":\n                return TimeFormatLocalization.CalendarType.Persian;\n\n            default:\n                logger.warn(`Unmapped calendar type \"${type}\"; falling back to Gregorian`);\n                return TimeFormatLocalization.CalendarType.Gregorian;\n        }\n    }\n}\n\nexport namespace TimeFormatLocalizationServer {\n    export declare const ExtensionInterface: {\n        detectedHourFormat: string;\n        detectedCalendarType: string;\n    };\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,8BAA8B;AACvC,SAAS,cAAc;AACvB,SAAS,sCAAsC;AAE/C,MAAM,SAAS,OAAO,IAAI,8BAA8B;AAKjD,MAAM,qCAAqC,+BAA+B,KAAK,gBAAgB,EAAE;AAAA,EAC3F,aAAa;AAClB,QAAI,KAAK,MAAM,eAAe,QAAW;AACrC,WAAK,MAAM,aAAa,KAAK;AAAA,IACjC;AACA,QAAI,KAAK,MAAM,uBAAuB,QAAW;AAC7C,WAAK,MAAM,qBAAqB,KAAK;AAAA,IACzC;AACA,QAAI,KAAK,MAAM,2BAA2B,QAAW;AACjD,WAAK,MAAM,yBAAyB,CAAC,KAAK,MAAM,kBAAkB;AAAA,IACtE;AAAA,EACJ;AAAA;AAAA,EAGA,IAAI,qBAAqB;AACrB,QAAI,KAAK,eAAe,QAAW,EAAE,MAAM,UAAU,CAAC,EAAE,gBAAgB,EAAE,QAAQ;AAC9E,aAAO,uBAAuB,WAAW,MAAM;AAAA,IACnD;AACA,WAAO,uBAAuB,WAAW,MAAM;AAAA,EACnD;AAAA;AAAA,EAGA,IAAI,uBAAuB;AACvB,UAAM,OAAO,KAAK,eAAe,EAAE,gBAAgB,EAAE;AACrD,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C,KAAK;AACD,eAAO,uBAAuB,aAAa;AAAA,MAE/C;AACI,eAAO,KAAK,2BAA2B,IAAI,8BAA8B;AACzE,eAAO,uBAAuB,aAAa;AAAA,IACnD;AAAA,EACJ;AACJ;AAAA,CAEO,CAAUA,kCAAV;AAAA,GAAU;",
  "names": ["TimeFormatLocalizationServer"]
}
