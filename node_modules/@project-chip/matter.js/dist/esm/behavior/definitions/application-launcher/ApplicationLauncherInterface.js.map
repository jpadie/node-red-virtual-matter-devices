{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/application-launcher/ApplicationLauncherInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { ApplicationLauncher } from \"../../../cluster/definitions/ApplicationLauncherCluster.js\";\n\nexport namespace ApplicationLauncherInterface {\n    export interface Base {\n        /**\n         * Upon receipt of this command, the server shall launch the application with optional data. The application\n         * shall be either\n         *\n         *   \u2022 the specified application, if the Application Platform feature is supported;\n         *\n         *   \u2022 otherwise the application corresponding to the endpoint.\n         *\n         * The endpoint shall launch and bring to foreground the requisite application if the application is not\n         * already launched and in foreground. The Status attribute shall be updated to ActiveVisibleFocus on the\n         * Application Basic cluster of the Endpoint corresponding to the launched application. The Status attribute\n         * shall be updated on any other application whose Status may have changed as a result of this command. The\n         * CurrentApp attribute, if supported, shall be updated to reflect the new application in the foreground.\n         *\n         * This command returns a Launcher Response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.4.7.1\n         */\n        launchApp(request: ApplicationLauncher.LaunchAppRequest): MaybePromise<ApplicationLauncher.LauncherResponse>;\n\n        /**\n         * Upon receipt of this command, the server shall stop the application if it is running. The application shall\n         * be either\n         *\n         *   \u2022 the specified application, if the Application Platform feature is supported;\n         *\n         *   \u2022 otherwise the application corresponding to the endpoint.\n         *\n         * The Status attribute shall be updated to Stopped on the Application Basic cluster of the Endpoint\n         * corresponding to the stopped application. The Status attribute shall be updated on any other application\n         * whose Status may have changed as a result of this command.\n         *\n         * This command returns a Launcher Response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.4.7.2\n         */\n        stopApp(request: ApplicationLauncher.StopAppRequest): MaybePromise<ApplicationLauncher.LauncherResponse>;\n\n        /**\n         * Upon receipt of this command, the server shall hide the application. The application shall be either\n         *\n         *   \u2022 the specified application, if the Application Platform feature is supported;\n         *\n         *   \u2022 otherwise the application corresponding to the endpoint.\n         *\n         * The endpoint may decide to stop the application based on manufacturer specific behavior or resource\n         * constraints if any. The Status attribute shall be updated to ActiveHidden or Stopped, depending on the\n         * action taken, on the Application Basic cluster of the Endpoint corresponding to the application on which the\n         * action was taken. The Status attribute shall be updated on any other\n         *\n         * application whose Status may have changed as a result of this command. This command returns a Launcher\n         * Response.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.4.7.3\n         */\n        hideApp(request: ApplicationLauncher.HideAppRequest): MaybePromise<ApplicationLauncher.LauncherResponse>;\n    }\n}\n\nexport type ApplicationLauncherInterface = { components: [{ flags: {}, methods: ApplicationLauncherInterface.Base }] };\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
