{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/group-key-management/GroupKeyManagementInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { GroupKeyManagement } from \"../../../cluster/definitions/GroupKeyManagementCluster.js\";\n\nexport namespace GroupKeyManagementInterface {\n    export interface Base {\n        /**\n         * This command is used by Administrators to set the state of a given Group Key Set, including atomically\n         * updating the state of all epoch keys.\n         *\n         * Effect on Receipt\n         *\n         * The following validations shall be done against the content of the GroupKeySet field:\n         *\n         *   \u2022 If the EpochKey0 field is null or its associated EpochStartTime0 field is null, then this command shall\n         *     fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If the EpochKey0 field\u2019s length is not exactly 16 bytes, then this command shall fail with a\n         *     CONSTRAINT_ERROR status code responded to the client.\n         *\n         *   \u2022 If the EpochStartTime0 is set to 0, then this command shall fail with an INVALID_COMMAND status code\n         *     responded to the client. Note that internally, a GroupKeySetStruct\u2019s EpochStartTime0 may be set to zero,\n         *     due to the behavior of the AddNOC command which synthesizes a GroupKeySetStruct (see IPKValue). However,\n         *     the value 0 is illegal in the GroupKeySet field sent by a client.\n         *\n         *   \u2022 If the EpochKey1 field is not null, then the EpochKey0 field shall NOT be null. Otherwise this command\n         *     shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If the EpochKey1 field is not null, and the field\u2019s length is not exactly 16 bytes, then this command\n         *     shall fail with a CONSTRAINT_ERROR status code responded to the client.\n         *\n         *   \u2022 If the EpochKey1 field is not null, its associated EpochStartTime1 field shall NOT be null and shall\n         *     contain a later epoch start time than the epoch start time found in the EpochStartTime0 field. Otherwise\n         *     this command shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If exactly one of the EpochKey1 or EpochStartTime1 is null, rather than both being null, or neither\n         *     being null, then this command shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If the EpochKey2 field is not null, then the EpochKey1 and EpochKey0 fields shall NOT be null. Otherwise\n         *     this command shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If the EpochKey2 field is not null, and the field\u2019s length is not exactly 16 bytes, then this command\n         *     shall fail with a CONSTRAINT_ERROR status code responded to the client.\n         *\n         *   \u2022 If the EpochKey2 field is not null, its associated EpochStartTime2 field shall NOT be null and shall\n         *     contain a later epoch start time than the epoch start time found in the EpochStartTime1 field. Otherwise\n         *     this command shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         *   \u2022 If exactly one of the EpochKey2 or EpochStartTime2 is null, rather than both being null, or neither\n         *     being null, then this command shall fail with an INVALID_COMMAND status code responded to the client.\n         *\n         * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKeySetID as\n         * that provided in the GroupKeySet field, then the contents of that group key set shall be replaced. A\n         * replacement shall be done by executing the equivalent of entirely removing the previous Group Key Set with\n         * the given GroupKeySetID, followed by an addition of a Group Key Set with the provided configuration.\n         * Otherwise, if the GroupKeySetID did not match an existing entry, a new Group Key Set associated with the\n         * accessing fabric shall be created with the provided data. The Group Key Set shall be written to non-volatile\n         * storage.\n         *\n         * Upon completion, this command shall send a status code back to the initiator:\n         *\n         *   \u2022 If the Group Key Set was properly installed or updated on the Node, the status code shall be\n         *\n         * set to SUCCESS.\n         *\n         *   \u2022 If there are insufficient resources on the receiver to store an additional Group Key Set, the status\n         *     code shall be set to RESOURCE_EXHAUSTED (see group key limits);\n         *\n         *   \u2022 Otherwise, this status code shall be set to FAILURE.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.1\n         */\n        keySetWrite(request: GroupKeyManagement.KeySetWriteRequest): MaybePromise;\n\n        /**\n         * This command is used by Administrators to read the state of a given Group Key Set.\n         *\n         * Effect on Receipt\n         *\n         * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKeySetID as\n         * that provided in the GroupKeySetID field, then the contents of that Group Key Set shall be sent in a\n         * KeySetReadResponse command, but with the EpochKey0, EpochKey1 and EpochKey2 fields replaced by null.\n         *\n         * Otherwise, if the GroupKeySetID does not refer to a Group Key Set associated with the accessing fabric, then\n         * this command shall fail with a NOT_FOUND status code.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.2\n         */\n        keySetRead(request: GroupKeyManagement.KeySetReadRequest): MaybePromise<GroupKeyManagement.KeySetReadResponse>;\n\n        /**\n         * This command is used by Administrators to remove all state of a given Group Key Set.\n         *\n         * Effect on Receipt\n         *\n         * If there exists a Group Key Set associated with the accessing fabric which has the same GroupKey\n         *\n         * SetID as that provided in the GroupKeySetID field, then the contents of that Group Key Set shall be removed,\n         * including all epoch keys it contains.\n         *\n         * If there exist any entries for the accessing fabric within the GroupKeyMap attribute that refer to the\n         * GroupKeySetID just removed, then these entries shall be removed from that list.\n         *\n         * This command shall fail with an INVALID_COMMAND status code back to the initiator if the GroupKeySetID being\n         * removed is 0, which is the Key Set associated with the Identity Protection Key (IPK). The only method to\n         * remove the IPK is usage of the RemoveFabric command or any operation which causes the equivalent of a\n         * RemoveFabric to occur by side-effect.\n         *\n         * This command shall send a SUCCESS status code back to the initiator on success, or NOT_FOUND if the\n         * GroupKeySetID requested did not exist.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.4\n         */\n        keySetRemove(request: GroupKeyManagement.KeySetRemoveRequest): MaybePromise;\n\n        /**\n         * This command is used by Administrators to query a list of all Group Key Sets associated with the accessing\n         * fabric.\n         *\n         * NOTE Field 0 for this command is reserved and shall NOT be used.\n         *\n         * Effect on Receipt\n         *\n         * Upon receipt, this command shall iterate all stored GroupKeySetStruct associated with the accessing fabric\n         * and generate a KeySetReadAllIndicesResponse command containing the list of GroupKeySetID values from those\n         * structs.\n         *\n         * @see {@link MatterSpecification.v13.Core} \u00A7 11.2.7.5\n         */\n        keySetReadAllIndices(): MaybePromise<GroupKeyManagement.KeySetReadAllIndicesResponse>;\n    }\n}\n\nexport type GroupKeyManagementInterface = { components: [{ flags: {}, methods: GroupKeyManagementInterface.Base }] };\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
