/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * ElectricalEnergyMeasurementBehavior is the base class for objects that support interaction with {@link
 * ElectricalEnergyMeasurement.Cluster}.
 *
 * ElectricalEnergyMeasurement.Cluster requires you to enable one or more optional features. You can do so using {@link
 * ElectricalEnergyMeasurementBehavior.with}.
 */
export declare const ElectricalEnergyMeasurementBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 145;
    readonly name: "ElectricalEnergyMeasurement";
    readonly revision: 1;
    readonly features: {
        readonly importedEnergy: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly exportedEnergy: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly cumulativeEnergy: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly periodicEnergy: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly accuracy: import("../../../cluster/Cluster.js").FixedAttribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
            measurementType: import("../../../tlv/TlvObject.js").FieldType<import("../../../cluster/export.js").MeasurementType>;
            measured: import("../../../tlv/TlvObject.js").FieldType<boolean>;
            minMeasuredValue: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
            maxMeasuredValue: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
            accuracyRanges: import("../../../tlv/TlvObject.js").FieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                rangeMin: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                rangeMax: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                percentMax: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                percentMin: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                percentTypical: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                fixedMax: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                fixedMin: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                fixedTypical: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
            }>[]>;
        }>, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly importedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyImported: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyExported: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyImported: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly exportedEnergy: true;
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly periodicEnergyExported: import("../../../cluster/Cluster.js").Attribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                    startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                    startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                }> | null, any>;
            };
        };
    }, {
        readonly flags: {
            readonly cumulativeEnergy: true;
        };
        readonly component: {
            readonly attributes: {
                readonly cumulativeEnergyReset: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    importedResetTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    exportedResetTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number | null>;
                    importedResetSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint | null>;
                    exportedResetSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint | null>;
                }> | null, any>;
            };
            readonly events: {
                readonly cumulativeEnergyMeasured: import("../../../cluster/Cluster.js").Event<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energyImported: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                        startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                        startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly periodicEnergy: true;
        };
        readonly component: {
            readonly events: {
                readonly periodicEnergyMeasured: import("../../../cluster/Cluster.js").Event<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    energyImported: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                        startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    }>>;
                    energyExported: import("../../../tlv/TlvObject.js").OptionalFieldType<import("../../../tlv/TlvObject.js").TypeFromFields<{
                        energy: import("../../../tlv/TlvObject.js").FieldType<number | bigint>;
                        startTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        endTimestamp: import("../../../tlv/TlvObject.js").OptionalFieldType<number>;
                        startSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                        endSystime: import("../../../tlv/TlvObject.js").OptionalFieldType<number | bigint>;
                    }>>;
                }>, any>;
            };
        };
    }, {
        readonly flags: {
            readonly importedEnergy: false;
            readonly exportedEnergy: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly cumulativeEnergy: false;
            readonly periodicEnergy: false;
        };
        readonly component: false;
    }];
}>, typeof ClusterBehavior, {
    components: never[];
}>;
type ElectricalEnergyMeasurementBehaviorType = InstanceType<typeof ElectricalEnergyMeasurementBehavior>;
export interface ElectricalEnergyMeasurementBehavior extends ElectricalEnergyMeasurementBehaviorType {
}
type StateType = InstanceType<typeof ElectricalEnergyMeasurementBehavior.State>;
export declare namespace ElectricalEnergyMeasurementBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=ElectricalEnergyMeasurementBehavior.d.ts.map