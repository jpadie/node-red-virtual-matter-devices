/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterType } from "../../../cluster/ClusterType.js";
import { PowerTopology } from "../../../cluster/definitions/PowerTopologyCluster.js";
import { EndpointNumber } from "../../../datatype/EndpointNumber.js";
declare const PowerTopologyBase: import("../../cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<ClusterType.Of<{
    readonly id: 156;
    readonly name: "PowerTopology";
    readonly revision: 1;
    readonly features: {
        readonly nodeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly treeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly setTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly dynamicPowerFlow: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly setTopology: true;
        };
        readonly component: {
            readonly attributes: {
                readonly availableEndpoints: import("../../../cluster/Cluster.js").FixedAttribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
        };
        readonly component: {
            readonly attributes: {
                readonly activeEndpoints: import("../../../cluster/Cluster.js").Attribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
            readonly setTopology: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly treeTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly treeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: false;
            readonly treeTopology: false;
            readonly setTopology: false;
        };
        readonly component: false;
    }];
}>, readonly [PowerTopology.Feature.SetTopology, PowerTopology.Feature.DynamicPowerFlow]>, import("../../cluster/ClusterBehavior.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 156;
    readonly name: "PowerTopology";
    readonly revision: 1;
    readonly features: {
        readonly nodeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly treeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly setTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly dynamicPowerFlow: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly setTopology: true;
        };
        readonly component: {
            readonly attributes: {
                readonly availableEndpoints: import("../../../cluster/Cluster.js").FixedAttribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
        };
        readonly component: {
            readonly attributes: {
                readonly activeEndpoints: import("../../../cluster/Cluster.js").Attribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
            readonly setTopology: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly treeTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly treeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: false;
            readonly treeTopology: false;
            readonly setTopology: false;
        };
        readonly component: false;
    }];
}>, typeof import("../../cluster/ClusterBehavior.js").ClusterBehavior, {
    components: never[];
}>, {
    components: never[];
}>;
/**
 * This is the default server implementation of {@link PowerTopologyBehavior}.
 *
 * The Matter specification requires the PowerTopology cluster to support features we do not enable by default. You
 * should use {@link PowerTopologyServer.with} to specialize the class for the features your implementation supports.
 *
 * The default implementation verifies that the active endpoints are a subset of the available endpoints when
 * the SetTopology and DynamicPowerFlow features are used.
 */
export declare class PowerTopologyServerLogic extends PowerTopologyBase {
    #private;
    initialize(): void;
}
declare const PowerTopologyServer_base: import("../../cluster/ClusterBehavior.js").ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 156;
    readonly name: "PowerTopology";
    readonly revision: 1;
    readonly features: {
        readonly nodeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly treeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly setTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly dynamicPowerFlow: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly setTopology: true;
        };
        readonly component: {
            readonly attributes: {
                readonly availableEndpoints: import("../../../cluster/Cluster.js").FixedAttribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
        };
        readonly component: {
            readonly attributes: {
                readonly activeEndpoints: import("../../../cluster/Cluster.js").Attribute<EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
            readonly setTopology: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly treeTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly treeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: false;
            readonly treeTopology: false;
            readonly setTopology: false;
        };
        readonly component: false;
    }];
}>, typeof PowerTopologyServerLogic, {
    components: never[];
}>;
export declare class PowerTopologyServer extends PowerTopologyServer_base {
}
export {};
//# sourceMappingURL=PowerTopologyServer.d.ts.map