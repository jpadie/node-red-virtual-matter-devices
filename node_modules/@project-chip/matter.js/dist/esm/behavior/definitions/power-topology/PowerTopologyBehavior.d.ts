/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * PowerTopologyBehavior is the base class for objects that support interaction with {@link PowerTopology.Cluster}.
 *
 * PowerTopology.Cluster requires you to enable one or more optional features. You can do so using {@link
 * PowerTopologyBehavior.with}.
 */
export declare const PowerTopologyBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 156;
    readonly name: "PowerTopology";
    readonly revision: 1;
    readonly features: {
        readonly nodeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly treeTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly setTopology: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly dynamicPowerFlow: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly setTopology: true;
        };
        readonly component: {
            readonly attributes: {
                readonly availableEndpoints: import("../../../cluster/Cluster.js").FixedAttribute<import("../../../datatype/EndpointNumber.js").EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
        };
        readonly component: {
            readonly attributes: {
                readonly activeEndpoints: import("../../../cluster/Cluster.js").Attribute<import("../../../datatype/EndpointNumber.js").EndpointNumber[], any>;
            };
        };
    }, {
        readonly flags: {
            readonly dynamicPowerFlow: true;
            readonly setTopology: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly treeTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly treeTopology: true;
            readonly setTopology: true;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly nodeTopology: false;
            readonly treeTopology: false;
            readonly setTopology: false;
        };
        readonly component: false;
    }];
}>, typeof ClusterBehavior, {
    components: never[];
}>;
type PowerTopologyBehaviorType = InstanceType<typeof PowerTopologyBehavior>;
export interface PowerTopologyBehavior extends PowerTopologyBehaviorType {
}
type StateType = InstanceType<typeof PowerTopologyBehavior.State>;
export declare namespace PowerTopologyBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=PowerTopologyBehavior.d.ts.map