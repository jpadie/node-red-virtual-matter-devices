{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/color-control/ColorConversionUtils.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { cropValueRange } from \"../../../util/Number.js\";\nimport { kelvinToXyLookup } from \"./kelvinToXy.js\";\n\n/**\n * Converts HSV to XY\n *\n * @param hue hue value 0..360\n * @param saturation saturation value 0..1\n * @returns [x, y] x/y value 0..1\n */\nexport function hsvToXy(hue: number, saturation: number): [number, number] {\n    const [r, g, b] = hsvToRgb(hue, saturation);\n    const [x, y] = rgbToXy(r, g, b);\n    return [cropValueRange(x, 0, 1), cropValueRange(y, 0, 1)];\n}\n\n/**\n * Converts XY to HSV\n *\n * @param x x value 0..1\n * @param y y value 0..1\n * @returns [hue, saturation] hue value 0..360, saturation value 0..1\n */\nexport function xyToHsv(x: number, y: number): [number, number] {\n    const [r, g, b] = xyToRgb(x, y);\n    const [h, s] = rgbToHsv(r, g, b);\n    return [h, s];\n}\n\n/**\n * Converts HSV to Mireds\n *\n * @param hue hue value 0..360\n * @param saturation saturation value 0..1\n * @returns mireds value\n */\nexport function hsvToMireds(hue: number, saturation: number): number {\n    const [x, y] = hsvToXy(hue, saturation);\n    return xyToMireds(x, y);\n}\n\n/**\n * Converts Mireds to HSV\n *\n * @param mireds mireds value\n * @returns [hue, saturation] hue value 0..360, saturation value 0..1\n */\nexport function miredsToHsv(mireds: number): [number, number] | undefined {\n    const [x, y] = miredsToXy(mireds) ?? [-1, -1];\n    if (x === -1 || y === -1) {\n        return undefined;\n    }\n    return xyToHsv(x, y);\n}\n\n/**\n * Converts HSV to RGB\n *\n * @param h hue value 0..360\n * @param s saturation value 0..1\n * @param v value 0..1\n * @returns [r, g, b] red, green, blue value 0..1\n */\nexport function hsvToRgb(h: number, s: number, v = 1): [number, number, number] {\n    h = h / 360;\n    let r;\n    let g;\n    let b;\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n        default:\n            r = v;\n            g = p;\n            b = q;\n    }\n    return [r, g, b];\n}\n\n/**\n * Converts RGB to HSV\n *\n * @param r red value 0..1\n * @param g green value 0..1\n * @param b blue value 0..1\n * @returns [h, s, v] hue value 0..360, saturation value 0..1, value 0..1\n */\nexport function rgbToHsv(r: number, g: number, b: number): [number, number, number] {\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const d = max - min;\n    let h;\n    const s = max === 0 ? 0 : d / max;\n    const v = max;\n\n    switch (max) {\n        case min:\n            h = 0;\n            break;\n        case r:\n            h = g - b + d * (g < b ? 6 : 0);\n            h /= 6 * d;\n            break;\n        case g:\n            h = b - r + d * 2;\n            h /= 6 * d;\n            break;\n        case b:\n        default:\n            h = r - g + d * 4;\n            h /= 6 * d;\n            break;\n    }\n\n    return [h * 360, s, v];\n}\n\n/**\n * Converts RGB to XY\n *\n * @param r red value 0..1\n * @param g green value 0..1\n * @param b blue value 0..1\n * @returns [x, y] x/y value 0..1\n */\nexport function rgbToXy(r: number, g: number, b: number): [number, number] {\n    // From: https://github.com/usolved/cie-rgb-converter/blob/master/cie_rgb_converter.js\n\n    //Apply a gamma correction to the RGB values, which makes the color more vivid and more the like the color displayed on the screen of your device\n    r = r > 0.04045 ? Math.pow((r + 0.055) / (1.0 + 0.055), 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / (1.0 + 0.055), 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / (1.0 + 0.055), 2.4) : b / 12.92;\n\n    // RGB values to XYZ using the Wide RGB D65 conversion formula\n    const X = r * 0.664511 + g * 0.154324 + b * 0.162028;\n    const Y = r * 0.283881 + g * 0.668433 + b * 0.047685;\n    const Z = r * 0.000088 + g * 0.07231 + b * 0.986039;\n    const sum = X + Y + Z;\n\n    const retX = sum == 0 ? 0 : X / sum;\n    const retY = sum == 0 ? 0 : Y / sum;\n\n    return [retX, retY];\n}\n\n/**\n * Converts XY to RGB\n *\n * @param x x value 0..1\n * @param y y value 0..1\n * @returns [r, g, b] red, green, blue value 0..1\n */\nexport function xyToRgb(x: number, y: number): [number, number, number] {\n    // From: https://github.com/usolved/cie-rgb-converter/blob/master/cie_rgb_converter.js\n\n    // use maximum brightness\n    const brightness = 254;\n\n    y = y === 0 ? 0.00000000001 : y;\n    const z = 1.0 - x - y;\n    const Y = Number((brightness / 254).toFixed(2));\n    const X = (Y / y) * x;\n    const Z = (Y / y) * z;\n\n    // Convert to RGB using Wide RGB D65 conversion.\n    let rgb = [\n        X * 1.656492 - Y * 0.354851 - Z * 0.255038,\n        -X * 0.707196 + Y * 1.655397 + Z * 0.036152,\n        X * 0.051713 - Y * 0.121364 + Z * 1.01153,\n    ];\n\n    // Apply reverse gamma correction.\n    rgb = rgb.map(x => (x <= 0.0031308 ? 12.92 * x : (1.0 + 0.055) * Math.pow(x, 1.0 / 2.4) - 0.055));\n\n    // Bring all negative components to zero.\n    rgb = rgb.map(x => Math.max(0, x));\n\n    // If one component is greater than 1, weight components by that value.\n    const max = Math.max(...rgb);\n    if (max > 1) {\n        rgb = rgb.map(x => x / max);\n    }\n\n    // This fixes situation when due to computational errors value get slightly below 0, or NaN in case of zero-division.\n    rgb = rgb.map(x => (isNaN(x) || x < 0 ? 0 : x));\n\n    return [rgb[0], rgb[1], rgb[2]];\n}\n\n/**\n * Converts color temp mireds to Kelvins\n *\n * @param mireds - color temp in mireds\n * @returns color temp in Kelvins\n */\nexport function miredsToKelvin(mireds: number): number {\n    return 1_000_000 / mireds;\n}\n\n/**\n * Converts color temp in Kelvins to mireds\n *\n * @param kelvin -color temp in Kelvins\n * @returns color temp in mireds\n */\nexport function kelvinToMireds(kelvin: number): number {\n    return 1_000_000 / kelvin;\n}\n\n/**\n * Converts XY to Mireds\n *\n * @param x x value 0..1\n * @param y y value 0..1\n * @returns mireds value\n */\nexport function xyToMireds(x: number, y: number): number {\n    const n = (x - 0.332) / (0.1858 - y);\n    const kelvin = Math.abs(437 * Math.pow(n, 3) + 3601 * Math.pow(n, 2) + 6861 * n + 5517);\n    return kelvinToMireds(kelvin);\n}\n\n/**\n * Converts Mireds to XY\n *\n * @param mireds mireds value\n * @returns [x, y] x/y value 0..1\n */\nexport function miredsToXy(mireds: number): [number, number] | undefined {\n    const kelvin = miredsToKelvin(mireds);\n    const detailedValue = kelvinToXyLookup(Math.round(kelvin));\n    if (detailedValue !== undefined) {\n        return [detailedValue.x, detailedValue.y];\n    }\n}\n"],
  "mappings": "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",
  "names": ["x"]
}
