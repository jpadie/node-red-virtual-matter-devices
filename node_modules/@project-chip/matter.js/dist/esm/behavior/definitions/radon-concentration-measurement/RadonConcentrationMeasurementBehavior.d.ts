/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * RadonConcentrationMeasurementBehavior is the base class for objects that support interaction with {@link
 * RadonConcentrationMeasurement.Cluster}.
 *
 * RadonConcentrationMeasurement.Cluster requires you to enable one or more optional features. You can do so using
 * {@link RadonConcentrationMeasurementBehavior.with}.
 */
export declare const RadonConcentrationMeasurementBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 1071;
    readonly name: "RadonConcentrationMeasurement";
    readonly features: {
        readonly numericMeasurement: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly levelIndication: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly mediumLevel: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly criticalLevel: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly peakMeasurement: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly averageMeasurement: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly revision: 3;
    readonly attributes: {
        readonly measurementMedium: import("../../../cluster/Cluster.js").FixedAttribute<import("../../../cluster/export.js").ConcentrationMeasurement.MeasurementMedium, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly numericMeasurement: true;
        };
        readonly component: {
            readonly attributes: {
                readonly measuredValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly minMeasuredValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly maxMeasuredValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly uncertainty: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
                readonly measurementUnit: import("../../../cluster/Cluster.js").FixedAttribute<import("../../../cluster/export.js").ConcentrationMeasurement.MeasurementUnit, any>;
            };
        };
    }, {
        readonly flags: {
            readonly peakMeasurement: true;
        };
        readonly component: {
            readonly attributes: {
                readonly peakMeasuredValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly peakMeasuredValueWindow: import("../../../cluster/Cluster.js").Attribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly averageMeasurement: true;
        };
        readonly component: {
            readonly attributes: {
                readonly averageMeasuredValue: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly averageMeasuredValueWindow: import("../../../cluster/Cluster.js").Attribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly levelIndication: true;
        };
        readonly component: {
            readonly attributes: {
                readonly levelValue: import("../../../cluster/Cluster.js").Attribute<import("../../../cluster/export.js").ConcentrationMeasurement.LevelValue, any>;
            };
        };
    }, {
        readonly flags: {
            readonly mediumLevel: true;
            readonly levelIndication: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly criticalLevel: true;
            readonly levelIndication: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly peakMeasurement: true;
            readonly numericMeasurement: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly averageMeasurement: true;
            readonly numericMeasurement: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly numericMeasurement: false;
            readonly levelIndication: false;
        };
        readonly component: false;
    }];
}>, typeof ClusterBehavior, {
    components: never[];
}>;
type RadonConcentrationMeasurementBehaviorType = InstanceType<typeof RadonConcentrationMeasurementBehavior>;
export interface RadonConcentrationMeasurementBehavior extends RadonConcentrationMeasurementBehaviorType {
}
type StateType = InstanceType<typeof RadonConcentrationMeasurementBehavior.State>;
export declare namespace RadonConcentrationMeasurementBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=RadonConcentrationMeasurementBehavior.d.ts.map