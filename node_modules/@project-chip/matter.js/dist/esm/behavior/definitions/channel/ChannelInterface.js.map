{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/channel/ChannelInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { Channel } from \"../../../cluster/definitions/ChannelCluster.js\";\n\nexport namespace ChannelInterface {\n    export interface Base {\n        /**\n         * Change the channel to the channel with the given Number in the ChannelList attribute.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.3\n         */\n        changeChannelByNumber(request: Channel.ChangeChannelByNumberRequest): MaybePromise;\n\n        /**\n         * This command provides channel up and channel down functionality, but allows channel index jumps of size\n         * Count.\n         *\n         * When the value of the increase or decrease is larger than the number of channels remaining in the given\n         * direction, then the behavior shall be to return to the beginning (or end) of the channel list and continue.\n         * For example, if the current channel is at index 0 and count value of -1 is given, then the current channel\n         * should change to the last channel.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.4\n         */\n        skipChannel(request: Channel.SkipChannelRequest): MaybePromise;\n    }\n\n    export interface ChannelListOrLineupInfo {\n        /**\n         * Change the channel to the channel case-insensitive exact matching the value passed as an argument.\n         *\n         * The match priority order shall be: Identifier, AffiliateCallSign, CallSign, Name, Number. In the match\n         * string, the Channel number should be presented in the \"Major.Minor\" format, such as \"13.1\".\n         *\n         * Upon receipt, this shall generate a ChangeChannelResponse command.\n         *\n         * Upon success, the CurrentChannel attribute, if supported, shall be updated to reflect the change.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.1\n         */\n        changeChannel(request: Channel.ChangeChannelRequest): MaybePromise<Channel.ChangeChannelResponse>;\n    }\n\n    export interface ElectronicGuide {\n        /**\n         * This command retrieves the program guide. It accepts several filter parameters to return specific schedule\n         * and program information from a content app. The command shall receive in response a ProgramGuideResponse.\n         * Standard error codes shall be used when arguments provided are not\n         *\n         * valid. For example, if StartTime is greater than EndTime, the status code INVALID_ACTION shall be returned.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.5\n         */\n        getProgramGuide(request: Channel.GetProgramGuideRequest): MaybePromise<Channel.ProgramGuideResponse>;\n    }\n\n    export interface RecordProgramAndElectronicGuide {\n        /**\n         * Record a specific program or series when it goes live. This functionality enables DVR recording features.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.7\n         */\n        recordProgram(request: Channel.RecordProgramRequest): MaybePromise;\n\n        /**\n         * Cancel recording for a specific program or series.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 6.6.7.8\n         */\n        cancelRecordProgram(request: Channel.CancelRecordProgramRequest): MaybePromise;\n    }\n}\n\nexport type ChannelInterface = {\n    components: [\n        { flags: {}, methods: ChannelInterface.Base },\n        { flags: { channelList: true }, methods: ChannelInterface.ChannelListOrLineupInfo },\n        { flags: { lineupInfo: true }, methods: ChannelInterface.ChannelListOrLineupInfo },\n        { flags: { electronicGuide: true }, methods: ChannelInterface.ElectronicGuide },\n        {\n            flags: { recordProgram: true, electronicGuide: true },\n            methods: ChannelInterface.RecordProgramAndElectronicGuide\n        }\n    ]\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
