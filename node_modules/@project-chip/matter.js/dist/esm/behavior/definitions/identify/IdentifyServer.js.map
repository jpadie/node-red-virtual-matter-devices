{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/identify/IdentifyServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Identify } from \"../../../cluster/definitions/IdentifyCluster.js\";\nimport { Time, Timer } from \"../../../time/Time.js\";\nimport { Observable } from \"../../../util/Observable.js\";\nimport { IdentifyBehavior } from \"./IdentifyBehavior.js\";\n\n/**\n * This is the default server implementation of {@link IdentifyBehavior}.\n *\n * This implementation includes all features of {@link Identify.Cluster} and implements all mandatory commands. You should use\n * {@link IdentifyServer.with} to specialize the class for the features your implementation supports. Alternatively\n * you can extend this class and override the methods you need to change or add mandatory commands.\n *\n * Beside the standard state values the following additional state values are available:\n * * `isIdentifying` - Indicates if the device is currently identifying.\n *\n * Beside the standard events the following additional events are available:\n * * `startIdentifying` - Emitted when the device starts identifying. Use it e.g to start your own identifying logic.\n * * `stopIdentifying` - Emitted when the device stops identifying.\n */\nexport class IdentifyServer extends IdentifyBehavior {\n    protected declare internal: IdentifyServer.Internal;\n    declare state: IdentifyServer.State;\n    declare events: IdentifyServer.Events;\n\n    override initialize() {\n        if (this.state.identifyType === undefined) {\n            this.state.identifyType = Identify.IdentifyType.None;\n        }\n\n        this.internal.identifyTimer = Time.getPeriodicTimer(\n            \"Identify time update\",\n            1000,\n            this.callback(this.#identifyTick),\n        );\n\n        // So whenever the attribute OR the identify command was invoked we react to it.\n        this.reactTo(this.events.identifyTime$Changed, this.#identifyTimeChangedHandler);\n    }\n\n    #startIdentifying() {\n        if (!this.internal.identifyTimer?.isRunning) {\n            this.internal.identifyTimer?.start();\n            this.state.isIdentifying = true;\n            this.events.startIdentifying.emit();\n        }\n    }\n\n    #stopIdentifying() {\n        if (this.internal.identifyTimer?.isRunning) {\n            this.internal.identifyTimer?.stop();\n            this.state.isIdentifying = false;\n            this.events.stopIdentifying.emit();\n        }\n    }\n\n    #identifyTimeChangedHandler() {\n        if (this.state.identifyTime === 0) {\n            this.#stopIdentifying();\n        } else {\n            this.#startIdentifying();\n        }\n    }\n\n    override async [Symbol.asyncDispose]() {\n        this.#stopIdentifying();\n        await super[Symbol.asyncDispose]?.();\n    }\n\n    #identifyTick() {\n        let time = (this.state.identifyTime ?? 0) - 1;\n        if (time <= 0) {\n            time = 0;\n        }\n        this.state.identifyTime = time;\n    }\n\n    override identify({ identifyTime }: Identify.IdentifyRequest) {\n        this.state.identifyTime = identifyTime;\n    }\n}\n\nexport namespace IdentifyServer {\n    export class Internal {\n        identifyTimer?: Timer;\n    }\n\n    export class State extends IdentifyBehavior.State {\n        isIdentifying: boolean = false;\n    }\n\n    export class Events extends IdentifyBehavior.Events {\n        startIdentifying = Observable();\n        stopIdentifying = Observable();\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,gBAAgB;AACzB,SAAS,YAAmB;AAC5B,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AAgB1B,MAAM,uBAAuB,iBAAiB;AAAA,EAKxC,aAAa;AAClB,QAAI,KAAK,MAAM,iBAAiB,QAAW;AACvC,WAAK,MAAM,eAAe,SAAS,aAAa;AAAA,IACpD;AAEA,SAAK,SAAS,gBAAgB,KAAK;AAAA,MAC/B;AAAA,MACA;AAAA,MACA,KAAK,SAAS,KAAK,aAAa;AAAA,IACpC;AAGA,SAAK,QAAQ,KAAK,OAAO,sBAAsB,KAAK,2BAA2B;AAAA,EACnF;AAAA,EAEA,oBAAoB;AAChB,QAAI,CAAC,KAAK,SAAS,eAAe,WAAW;AACzC,WAAK,SAAS,eAAe,MAAM;AACnC,WAAK,MAAM,gBAAgB;AAC3B,WAAK,OAAO,iBAAiB,KAAK;AAAA,IACtC;AAAA,EACJ;AAAA,EAEA,mBAAmB;AACf,QAAI,KAAK,SAAS,eAAe,WAAW;AACxC,WAAK,SAAS,eAAe,KAAK;AAClC,WAAK,MAAM,gBAAgB;AAC3B,WAAK,OAAO,gBAAgB,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA,EAEA,8BAA8B;AAC1B,QAAI,KAAK,MAAM,iBAAiB,GAAG;AAC/B,WAAK,iBAAiB;AAAA,IAC1B,OAAO;AACH,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEA,OAAgB,OAAO,YAAY,IAAI;AACnC,SAAK,iBAAiB;AACtB,UAAM,MAAM,OAAO,YAAY,IAAI;AAAA,EACvC;AAAA,EAEA,gBAAgB;AACZ,QAAI,QAAQ,KAAK,MAAM,gBAAgB,KAAK;AAC5C,QAAI,QAAQ,GAAG;AACX,aAAO;AAAA,IACX;AACA,SAAK,MAAM,eAAe;AAAA,EAC9B;AAAA,EAES,SAAS,EAAE,aAAa,GAA6B;AAC1D,SAAK,MAAM,eAAe;AAAA,EAC9B;AACJ;AAAA,CAEO,CAAUA,oBAAV;AAAA,EACI,MAAM,SAAS;AAAA,IAClB;AAAA,EACJ;AAFO,EAAAA,gBAAM;AAAA,EAIN,MAAM,cAAc,iBAAiB,MAAM;AAAA,IAC9C,gBAAyB;AAAA,EAC7B;AAFO,EAAAA,gBAAM;AAAA,EAIN,MAAM,eAAe,iBAAiB,OAAO;AAAA,IAChD,mBAAmB,WAAW;AAAA,IAC9B,kBAAkB,WAAW;AAAA,EACjC;AAHO,EAAAA,gBAAM;AAAA,GATA;",
  "names": ["IdentifyServer"]
}
