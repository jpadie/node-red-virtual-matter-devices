/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { WindowCovering } from "../../../cluster/definitions/WindowCoveringCluster.js";
import { ClusterBehavior } from "../../cluster/ClusterBehavior.js";
import { WindowCoveringInterface } from "./WindowCoveringInterface.js";
import { ClusterType } from "../../../cluster/ClusterType.js";
/**
 * WindowCoveringBehavior is the base class for objects that support interaction with {@link WindowCovering.Cluster}.
 *
 * WindowCovering.Cluster requires you to enable one or more optional features. You can do so using {@link
 * WindowCoveringBehavior.with}.
 */
export declare const WindowCoveringBehavior: ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 258;
    readonly name: "WindowCovering";
    readonly revision: 5;
    readonly features: {
        readonly lift: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly tilt: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly positionAwareLift: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly absolutePosition: import("../../../schema/BitmapSchema.js").BitFlag;
        readonly positionAwareTilt: import("../../../schema/BitmapSchema.js").BitFlag;
    };
    readonly attributes: {
        readonly type: import("../../../cluster/Cluster.js").FixedAttribute<WindowCovering.WindowCoveringType, any>;
        readonly configStatus: import("../../../cluster/Cluster.js").Attribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            operational: import("../../../schema/BitmapSchema.js").BitFlag;
            onlineReserved: import("../../../schema/BitmapSchema.js").BitFlag;
            liftMovementReversed: import("../../../schema/BitmapSchema.js").BitFlag;
            liftPositionAware: import("../../../schema/BitmapSchema.js").BitFlag;
            tiltPositionAware: import("../../../schema/BitmapSchema.js").BitFlag;
            liftEncoderControlled: import("../../../schema/BitmapSchema.js").BitFlag;
            tiltEncoderControlled: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly operationalStatus: import("../../../cluster/Cluster.js").Attribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            global: import("../../../schema/BitmapSchema.js").BitFieldEnum<WindowCovering.MovementStatus>;
            lift: import("../../../schema/BitmapSchema.js").BitFieldEnum<WindowCovering.MovementStatus>;
            tilt: import("../../../schema/BitmapSchema.js").BitFieldEnum<WindowCovering.MovementStatus>;
        }>, any>;
        readonly endProductType: import("../../../cluster/Cluster.js").FixedAttribute<WindowCovering.EndProductType, any>;
        readonly mode: import("../../../cluster/Cluster.js").WritableAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            motorDirectionReversed: import("../../../schema/BitmapSchema.js").BitFlag;
            calibrationMode: import("../../../schema/BitmapSchema.js").BitFlag;
            maintenanceMode: import("../../../schema/BitmapSchema.js").BitFlag;
            ledFeedback: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
        readonly safetyStatus: import("../../../cluster/Cluster.js").OptionalAttribute<import("../../../schema/BitmapSchema.js").TypeFromPartialBitSchema<{
            remoteLockout: import("../../../schema/BitmapSchema.js").BitFlag;
            tamperDetection: import("../../../schema/BitmapSchema.js").BitFlag;
            failedCommunication: import("../../../schema/BitmapSchema.js").BitFlag;
            positionFailure: import("../../../schema/BitmapSchema.js").BitFlag;
            thermalProtection: import("../../../schema/BitmapSchema.js").BitFlag;
            obstacleDetected: import("../../../schema/BitmapSchema.js").BitFlag;
            power: import("../../../schema/BitmapSchema.js").BitFlag;
            stopInput: import("../../../schema/BitmapSchema.js").BitFlag;
            motorJammed: import("../../../schema/BitmapSchema.js").BitFlag;
            hardwareFailure: import("../../../schema/BitmapSchema.js").BitFlag;
            manualOperation: import("../../../schema/BitmapSchema.js").BitFlag;
            protection: import("../../../schema/BitmapSchema.js").BitFlag;
        }>, any>;
    };
    readonly commands: {
        readonly upOrOpen: import("../../../cluster/Cluster.js").Command<void, void, any>;
        readonly downOrClose: import("../../../cluster/Cluster.js").Command<void, void, any>;
        readonly stopMotion: import("../../../cluster/Cluster.js").Command<void, void, any>;
    };
    readonly extensions: readonly [{
        readonly flags: {
            readonly lift: true;
            readonly positionAwareLift: true;
            readonly absolutePosition: true;
        };
        readonly component: {
            readonly attributes: {
                readonly physicalClosedLimitLift: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly currentPositionLift: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                readonly installedOpenLimitLift: import("../../../cluster/Cluster.js").Attribute<number, any>;
                readonly installedClosedLimitLift: import("../../../cluster/Cluster.js").Attribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly tilt: true;
            readonly positionAwareTilt: true;
            readonly absolutePosition: true;
        };
        readonly component: {
            readonly attributes: {
                readonly physicalClosedLimitTilt: import("../../../cluster/Cluster.js").OptionalFixedAttribute<number, any>;
                readonly currentPositionTilt: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                readonly installedOpenLimitTilt: import("../../../cluster/Cluster.js").Attribute<number, any>;
                readonly installedClosedLimitTilt: import("../../../cluster/Cluster.js").Attribute<number, any>;
            };
        };
    }, {
        readonly flags: {
            readonly lift: true;
        };
        readonly component: {
            readonly attributes: {
                readonly numberOfActuationsLift: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
            };
            readonly commands: {
                readonly goToLiftPercentage: import("../../../cluster/Cluster.js").OptionalCommand<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    liftPercent100thsValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly tilt: true;
        };
        readonly component: {
            readonly attributes: {
                readonly numberOfActuationsTilt: import("../../../cluster/Cluster.js").OptionalAttribute<number, any>;
            };
            readonly commands: {
                readonly goToTiltPercentage: import("../../../cluster/Cluster.js").OptionalCommand<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    tiltPercent100thsValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly lift: true;
            readonly positionAwareLift: true;
        };
        readonly component: {
            readonly attributes: {
                readonly currentPositionLiftPercentage: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                readonly targetPositionLiftPercent100ths: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly currentPositionLiftPercent100ths: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
            };
            readonly commands: {
                readonly goToLiftPercentage: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    liftPercent100thsValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly tilt: true;
            readonly positionAwareTilt: true;
        };
        readonly component: {
            readonly attributes: {
                readonly currentPositionTiltPercentage: import("../../../cluster/Cluster.js").OptionalAttribute<number | null, any>;
                readonly targetPositionTiltPercent100ths: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
                readonly currentPositionTiltPercent100ths: import("../../../cluster/Cluster.js").Attribute<number | null, any>;
            };
            readonly commands: {
                readonly goToTiltPercentage: import("../../../cluster/Cluster.js").Command<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    tiltPercent100thsValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly lift: true;
            readonly absolutePosition: true;
        };
        readonly component: {
            readonly commands: {
                readonly goToLiftValue: import("../../../cluster/Cluster.js").OptionalCommand<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    liftValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly tilt: true;
            readonly absolutePosition: true;
        };
        readonly component: {
            readonly commands: {
                readonly goToTiltValue: import("../../../cluster/Cluster.js").OptionalCommand<import("../../../tlv/TlvObject.js").TypeFromFields<{
                    tiltValue: import("../../../tlv/TlvObject.js").FieldType<number>;
                }>, void, any>;
            };
        };
    }, {
        readonly flags: {
            readonly positionAwareLift: true;
            readonly lift: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly positionAwareTilt: true;
            readonly tilt: false;
        };
        readonly component: false;
    }, {
        readonly flags: {
            readonly lift: false;
            readonly tilt: false;
        };
        readonly component: false;
    }];
}>, ClusterBehavior.Type<ClusterType.Of<{
    readonly id: 0;
    readonly revision: 0;
    readonly name: "Unknown";
    readonly attributes: {};
    readonly commands: {};
    readonly events: {};
}>, typeof ClusterBehavior, WindowCoveringInterface>, WindowCoveringInterface>;
type WindowCoveringBehaviorType = InstanceType<typeof WindowCoveringBehavior>;
export interface WindowCoveringBehavior extends WindowCoveringBehaviorType {
}
type StateType = InstanceType<typeof WindowCoveringBehavior.State>;
export declare namespace WindowCoveringBehavior {
    interface State extends StateType {
    }
}
export {};
//# sourceMappingURL=WindowCoveringBehavior.d.ts.map