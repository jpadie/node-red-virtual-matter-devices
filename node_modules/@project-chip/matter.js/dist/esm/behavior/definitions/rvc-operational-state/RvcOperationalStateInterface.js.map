{
  "version": 3,
  "sources": ["../../../../../src/behavior/definitions/rvc-operational-state/RvcOperationalStateInterface.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { MaybePromise } from \"../../../util/Promises.js\";\nimport { OperationalState as OperationalStateNamespace } from \"../../../cluster/definitions/OperationalStateCluster.js\";\n\nexport namespace RvcOperationalStateInterface {\n    export interface Base {\n        /**\n         * On receipt of this command, the device shall start seeking the charging dock, if possible in the current\n         * state of the device.\n         *\n         * If this command is received when already in the SeekingCharger state the device shall respond with an\n         * OperationalCommandResponse command with an ErrorStateID of NoError but the command shall have no other\n         * effect.\n         *\n         * A device that receives this command in any state which does not allow seeking the charger, such as Charging\n         * or Docked, shall respond with an OperationalCommandResponse command with an ErrorStateID of\n         * CommandInvalidInState and shall have no other effect.\n         *\n         * Otherwise, on success:\n         *\n         *   \u2022 The OperationalState attribute shall be set to SeekingCharger.\n         *\n         *   \u2022 The device shall respond with an OperationalCommandResponse command with an ErrorStateID of NoError.\n         *\n         * @see {@link MatterSpecification.v13.Cluster} \u00A7 7.4.5.1\n         */\n        goHome(): MaybePromise<OperationalStateNamespace.OperationalCommandResponse>;\n    }\n}\n\nexport type RvcOperationalStateInterface = { components: [{ flags: {}, methods: RvcOperationalStateInterface.Base }] };\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
