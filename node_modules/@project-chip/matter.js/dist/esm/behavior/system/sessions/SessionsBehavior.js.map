{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/sessions/SessionsBehavior.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NodeId } from \"../../../datatype/NodeId.js\";\nimport { ExposedFabricInformation } from \"../../../fabric/Fabric.js\";\nimport type { ServerNode } from \"../../../node/ServerNode.js\";\nimport { SecureSession } from \"../../../session/SecureSession.js\";\nimport { SessionManager } from \"../../../session/SessionManager.js\";\nimport { EventEmitter, Observable } from \"../../../util/Observable.js\";\nimport { Behavior } from \"../../Behavior.js\";\n\n/**\n * Active {@link ServerNode} client sessions.\n */\nexport class SessionsBehavior extends Behavior {\n    static override readonly id = \"sessions\";\n\n    declare state: SessionsBehavior.State;\n    declare events: SessionsBehavior.Events;\n\n    override initialize() {\n        const env = this.endpoint.env;\n        if (env.has(SessionManager)) {\n            this.#enterOnlineMode(env.get(SessionManager));\n        }\n\n        const sessionManagerEvents = env.eventsFor(SessionManager);\n        this.reactTo(sessionManagerEvents.added, this.#enterOnlineMode);\n        this.reactTo(sessionManagerEvents.deleted, this.#enterOfflineMode);\n    }\n\n    #convertToExposedSession(session: SecureSession<any>): SessionsBehavior.Session {\n        return {\n            name: session.name,\n            nodeId: session.nodeId,\n            peerNodeId: session.peerNodeId,\n            fabric: session.fabric?.externalInformation,\n            isPeerActive: session.isPeerActive(),\n            lastInteractionTimestamp: session.timestamp,\n            lastActiveTimestamp: session.activeTimestamp,\n            numberOfActiveSubscriptions: session.numberOfActiveSubscriptions,\n        };\n    }\n\n    #enterOnlineMode(sessions: SessionManager<any>) {\n        this.reactTo(sessions.sessionOpened, this.#sessionOpened);\n\n        this.reactTo(sessions.sessionClosed, this.#sessionClosed);\n\n        this.reactTo(sessions.subscriptionsChanged, this.#subscriptionsChanged);\n    }\n\n    #sessionOpened(session: SecureSession<any>) {\n        if (session.isPase) {\n            return;\n        }\n        const exposedSession = this.#convertToExposedSession(session);\n        this.state.sessions[session.id] = exposedSession;\n        this.events.opened.emit(exposedSession);\n    }\n\n    #sessionClosed(session: SecureSession<any>) {\n        if (!(session.id in this.state.sessions)) {\n            return;\n        }\n\n        delete this.state.sessions[session.id];\n        this.events.closed.emit(this.#convertToExposedSession(session));\n    }\n\n    #subscriptionsChanged(session: SecureSession<any>) {\n        if (session.isPase) {\n            return;\n        }\n        const sessionEntry = this.state.sessions[session.id];\n        if (sessionEntry === undefined) {\n            return;\n        }\n\n        sessionEntry.numberOfActiveSubscriptions = session.numberOfActiveSubscriptions;\n        this.state.sessions[session.id] = sessionEntry;\n        this.events.subscriptionsChanged.emit(sessionEntry);\n    }\n\n    #enterOfflineMode() {\n        this.state.sessions = {};\n    }\n}\n\nexport namespace SessionsBehavior {\n    export interface Session {\n        name: string;\n        nodeId: NodeId;\n        peerNodeId: NodeId;\n        fabric?: ExposedFabricInformation;\n        isPeerActive: boolean;\n        lastInteractionTimestamp: number | undefined;\n        lastActiveTimestamp: number | undefined;\n        numberOfActiveSubscriptions: number;\n    }\n\n    export class State {\n        sessions: Record<number, Session> = {};\n    }\n\n    export class Events extends EventEmitter {\n        opened = Observable<[session: Session]>();\n        closed = Observable<[session: Session]>();\n        subscriptionsChanged = Observable<[session: Session]>();\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,SAAS,sBAAsB;AAC/B,SAAS,cAAc,kBAAkB;AACzC,SAAS,gBAAgB;AAKlB,MAAM,yBAAyB,SAAS;AAAA,EAC3C,OAAyB,KAAK;AAAA,EAKrB,aAAa;AAClB,UAAM,MAAM,KAAK,SAAS;AAC1B,QAAI,IAAI,IAAI,cAAc,GAAG;AACzB,WAAK,iBAAiB,IAAI,IAAI,cAAc,CAAC;AAAA,IACjD;AAEA,UAAM,uBAAuB,IAAI,UAAU,cAAc;AACzD,SAAK,QAAQ,qBAAqB,OAAO,KAAK,gBAAgB;AAC9D,SAAK,QAAQ,qBAAqB,SAAS,KAAK,iBAAiB;AAAA,EACrE;AAAA,EAEA,yBAAyB,SAAuD;AAC5E,WAAO;AAAA,MACH,MAAM,QAAQ;AAAA,MACd,QAAQ,QAAQ;AAAA,MAChB,YAAY,QAAQ;AAAA,MACpB,QAAQ,QAAQ,QAAQ;AAAA,MACxB,cAAc,QAAQ,aAAa;AAAA,MACnC,0BAA0B,QAAQ;AAAA,MAClC,qBAAqB,QAAQ;AAAA,MAC7B,6BAA6B,QAAQ;AAAA,IACzC;AAAA,EACJ;AAAA,EAEA,iBAAiB,UAA+B;AAC5C,SAAK,QAAQ,SAAS,eAAe,KAAK,cAAc;AAExD,SAAK,QAAQ,SAAS,eAAe,KAAK,cAAc;AAExD,SAAK,QAAQ,SAAS,sBAAsB,KAAK,qBAAqB;AAAA,EAC1E;AAAA,EAEA,eAAe,SAA6B;AACxC,QAAI,QAAQ,QAAQ;AAChB;AAAA,IACJ;AACA,UAAM,iBAAiB,KAAK,yBAAyB,OAAO;AAC5D,SAAK,MAAM,SAAS,QAAQ,EAAE,IAAI;AAClC,SAAK,OAAO,OAAO,KAAK,cAAc;AAAA,EAC1C;AAAA,EAEA,eAAe,SAA6B;AACxC,QAAI,EAAE,QAAQ,MAAM,KAAK,MAAM,WAAW;AACtC;AAAA,IACJ;AAEA,WAAO,KAAK,MAAM,SAAS,QAAQ,EAAE;AACrC,SAAK,OAAO,OAAO,KAAK,KAAK,yBAAyB,OAAO,CAAC;AAAA,EAClE;AAAA,EAEA,sBAAsB,SAA6B;AAC/C,QAAI,QAAQ,QAAQ;AAChB;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,MAAM,SAAS,QAAQ,EAAE;AACnD,QAAI,iBAAiB,QAAW;AAC5B;AAAA,IACJ;AAEA,iBAAa,8BAA8B,QAAQ;AACnD,SAAK,MAAM,SAAS,QAAQ,EAAE,IAAI;AAClC,SAAK,OAAO,qBAAqB,KAAK,YAAY;AAAA,EACtD;AAAA,EAEA,oBAAoB;AAChB,SAAK,MAAM,WAAW,CAAC;AAAA,EAC3B;AACJ;AAAA,CAEO,CAAUA,sBAAV;AAAA,EAYI,MAAM,MAAM;AAAA,IACf,WAAoC,CAAC;AAAA,EACzC;AAFO,EAAAA,kBAAM;AAAA,EAIN,MAAM,eAAe,aAAa;AAAA,IACrC,SAAS,WAA+B;AAAA,IACxC,SAAS,WAA+B;AAAA,IACxC,uBAAuB,WAA+B;AAAA,EAC1D;AAJO,EAAAA,kBAAM;AAAA,GAhBA;",
  "names": ["SessionsBehavior"]
}
