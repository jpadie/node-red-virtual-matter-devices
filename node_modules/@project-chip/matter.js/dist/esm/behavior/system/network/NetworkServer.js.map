{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/network/NetworkServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Ble } from \"../../../ble/Ble.js\";\nimport { ImplementationError } from \"../../../common/MatterError.js\";\nimport { Logger } from \"../../../log/Logger.js\";\nimport { SubscriptionOptions } from \"../../../protocol/interaction/SubscriptionOptions.js\";\nimport { TypeFromPartialBitSchema } from \"../../../schema/BitmapSchema.js\";\nimport { DiscoveryCapabilitiesBitmap } from \"../../../schema/PairingCodeSchema.js\";\nimport { CommissioningBehavior } from \"../commissioning/CommissioningBehavior.js\";\nimport { NetworkBehavior } from \"./NetworkBehavior.js\";\nimport { ServerNetworkRuntime } from \"./ServerNetworkRuntime.js\";\n\nconst logger = Logger.get(\"NetworkingServer\");\n\n/**\n * Server implementation of {@link NetworkBehavior}.\n *\n * This behavior mostly deals with configuration and events.  {@link NetworkServer} provides the actual network\n * implementation.\n */\nexport class NetworkServer extends NetworkBehavior {\n    declare state: NetworkServer.State;\n    declare internal: NetworkServer.Internal;\n\n    override initialize() {\n        if (this.state.ble === undefined) {\n            this.state.ble = Ble.enabled;\n        } else if (this.state.ble && !Ble.enabled) {\n            logger.warn(\"Disabling Bluetooth commissioning because BLE support is not installed\");\n            this.state.ble = false;\n        }\n\n        const discoveryCaps = this.state.discoveryCapabilities;\n        switch (discoveryCaps.ble) {\n            case undefined:\n                discoveryCaps.ble = this.state.ble;\n                break;\n\n            case true:\n                if (!this.state.ble) {\n                    discoveryCaps.ble = false;\n                }\n                break;\n        }\n\n        if (discoveryCaps.onIpNetwork === undefined) {\n            discoveryCaps.onIpNetwork = true;\n        }\n\n        this.reactTo(this.agent.get(CommissioningBehavior).events.commissioned, this.#endUncommissionedMode);\n\n        return super.initialize();\n    }\n\n    /**\n     * Advertise and continue advertising at regular intervals until timeout per Matter specification.  If already\n     * advertising, the advertisement timeout resets.\n     *\n     * If the node is uncommissioned it announces as commissionable on all available transports. Commissioned devices\n     * only advertise for operational discovery via DNS-SD.\n     *\n     * Advertisement begins at startup.\n     */\n    openAdvertisementWindow() {\n        if (!this.internal.runtime) {\n            throw new ImplementationError(\"Cannot advertise offline server\");\n        }\n\n        this.internal.runtime\n            .openAdvertisementWindow()\n            .catch(error => logger.error(\"Failed to open advertisement window\", error));\n    }\n\n    /**\n     * Immediately broadcast presence to the network regardless of whether the advertisement window is open.\n     */\n    advertiseNow() {\n        if (!this.internal.runtime) {\n            throw new ImplementationError(\"Cannot advertise offline server\");\n        }\n        this.endpoint.env.runtime.add(this.internal.runtime.announceNow());\n    }\n\n    async endCommissioning() {\n        if (this.internal.runtime) {\n            return this.internal.runtime.endCommissioning();\n        }\n    }\n\n    #endUncommissionedMode() {\n        if (this.internal.runtime) {\n            this.internal.runtime.endUncommissionedMode();\n        }\n    }\n}\n\nexport namespace NetworkServer {\n    export class Internal extends NetworkBehavior.Internal {\n        declare runtime: ServerNetworkRuntime;\n    }\n\n    export class State extends NetworkBehavior.State {\n        listeningAddressIpv4?: string = undefined;\n        listeningAddressIpv6?: string = undefined;\n        ipv4 = true;\n        ble?: boolean = undefined;\n        discoveryCapabilities: TypeFromPartialBitSchema<typeof DiscoveryCapabilitiesBitmap> = {\n            onIpNetwork: true,\n        };\n        subscriptionOptions?: SubscriptionOptions = undefined;\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,WAAW;AACpB,SAAS,2BAA2B;AACpC,SAAS,cAAc;AAIvB,SAAS,6BAA6B;AACtC,SAAS,uBAAuB;AAGhC,MAAM,SAAS,OAAO,IAAI,kBAAkB;AAQrC,MAAM,sBAAsB,gBAAgB;AAAA,EAItC,aAAa;AAClB,QAAI,KAAK,MAAM,QAAQ,QAAW;AAC9B,WAAK,MAAM,MAAM,IAAI;AAAA,IACzB,WAAW,KAAK,MAAM,OAAO,CAAC,IAAI,SAAS;AACvC,aAAO,KAAK,wEAAwE;AACpF,WAAK,MAAM,MAAM;AAAA,IACrB;AAEA,UAAM,gBAAgB,KAAK,MAAM;AACjC,YAAQ,cAAc,KAAK;AAAA,MACvB,KAAK;AACD,sBAAc,MAAM,KAAK,MAAM;AAC/B;AAAA,MAEJ,KAAK;AACD,YAAI,CAAC,KAAK,MAAM,KAAK;AACjB,wBAAc,MAAM;AAAA,QACxB;AACA;AAAA,IACR;AAEA,QAAI,cAAc,gBAAgB,QAAW;AACzC,oBAAc,cAAc;AAAA,IAChC;AAEA,SAAK,QAAQ,KAAK,MAAM,IAAI,qBAAqB,EAAE,OAAO,cAAc,KAAK,sBAAsB;AAEnG,WAAO,MAAM,WAAW;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,0BAA0B;AACtB,QAAI,CAAC,KAAK,SAAS,SAAS;AACxB,YAAM,IAAI,oBAAoB,iCAAiC;AAAA,IACnE;AAEA,SAAK,SAAS,QACT,wBAAwB,EACxB,MAAM,WAAS,OAAO,MAAM,uCAAuC,KAAK,CAAC;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACX,QAAI,CAAC,KAAK,SAAS,SAAS;AACxB,YAAM,IAAI,oBAAoB,iCAAiC;AAAA,IACnE;AACA,SAAK,SAAS,IAAI,QAAQ,IAAI,KAAK,SAAS,QAAQ,YAAY,CAAC;AAAA,EACrE;AAAA,EAEA,MAAM,mBAAmB;AACrB,QAAI,KAAK,SAAS,SAAS;AACvB,aAAO,KAAK,SAAS,QAAQ,iBAAiB;AAAA,IAClD;AAAA,EACJ;AAAA,EAEA,yBAAyB;AACrB,QAAI,KAAK,SAAS,SAAS;AACvB,WAAK,SAAS,QAAQ,sBAAsB;AAAA,IAChD;AAAA,EACJ;AACJ;AAAA,CAEO,CAAUA,mBAAV;AAAA,EACI,MAAM,iBAAiB,gBAAgB,SAAS;AAAA,EAEvD;AAFO,EAAAA,eAAM;AAAA,EAIN,MAAM,cAAc,gBAAgB,MAAM;AAAA,IAC7C,uBAAgC;AAAA,IAChC,uBAAgC;AAAA,IAChC,OAAO;AAAA,IACP,MAAgB;AAAA,IAChB,wBAAsF;AAAA,MAClF,aAAa;AAAA,IACjB;AAAA,IACA,sBAA4C;AAAA,EAChD;AATO,EAAAA,eAAM;AAAA,GALA;",
  "names": ["NetworkServer"]
}
