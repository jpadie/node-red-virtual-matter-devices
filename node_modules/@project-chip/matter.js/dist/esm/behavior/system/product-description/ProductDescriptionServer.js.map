{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/product-description/ProductDescriptionServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DeviceTypeId } from \"../../../datatype/DeviceTypeId.js\";\nimport { VendorId } from \"../../../datatype/VendorId.js\";\nimport { DeviceClasses } from \"../../../device/DeviceTypes.js\";\nimport { Agent } from \"../../../endpoint/Agent.js\";\nimport { AggregatorEndpoint } from \"../../../endpoint/definitions/system/AggregatorEndpoint.js\";\nimport { BridgedNodeEndpoint } from \"../../../endpoint/definitions/system/BridgedNodeEndpoint.js\";\nimport { RootEndpoint } from \"../../../endpoint/definitions/system/RootEndpoint.js\";\nimport { Behavior } from \"../../Behavior.js\";\nimport { BasicInformationBehavior } from \"../../definitions/basic-information/BasicInformationBehavior.js\";\nimport { DescriptorBehavior } from \"../../definitions/descriptor/DescriptorBehavior.js\";\nimport { ProductDescription } from \"./ProductDescription.js\";\n\n/**\n * Supplies key product information used in advertisements and commissioning.\n */\nexport class ProductDescriptionServer extends Behavior {\n    static override readonly id = \"productDescription\";\n\n    declare state: ProductDescriptionServer.State;\n\n    override initialize() {\n        const pd = this.state;\n\n        const bi = this.agent.get(BasicInformationBehavior).state;\n\n        if (pd.name === \"\") {\n            pd.name = bi.productName;\n        }\n\n        if (pd.vendorId === -1) {\n            pd.vendorId = bi.vendorId;\n        }\n\n        if (pd.productId === -1) {\n            pd.productId = bi.productId;\n        }\n\n        this.#setDeviceType();\n    }\n\n    #setDeviceType() {\n        if (this.state.deviceType !== ProductDescriptionServer.UNKNOWN_DEVICE_TYPE) {\n            return;\n        }\n\n        const deviceType = inferDeviceType(this.agent);\n\n        if (deviceType !== undefined) {\n            this.state.deviceType = deviceType;\n            return;\n        }\n\n        // Continually react to tree mutations until we discover a device endpoint\n        this.reactTo(\n            this.endpoint.lifecycle.changed,\n\n            this.#setDeviceType,\n\n            { once: true },\n        );\n    }\n}\n\nexport namespace ProductDescriptionServer {\n    export const UNKNOWN_DEVICE_TYPE = DeviceTypeId(-1, false);\n\n    export class State implements ProductDescription {\n        /**\n         * The device name for commissioning announcements.\n         */\n        name = \"\";\n\n        /**\n         * The device type for commissioning announcements.\n         */\n        deviceType: DeviceTypeId = UNKNOWN_DEVICE_TYPE;\n\n        /**\n         * The vendor ID for commissioning announcements.\n         */\n        vendorId = VendorId(-1, false);\n\n        /**\n         * The product ID for commissioning announcements.\n         */\n        productId = -1;\n    }\n}\n\nfunction inferDeviceType(agent: Agent): DeviceTypeId | undefined {\n    if (!agent.endpoint.behaviors.isActive(DescriptorBehavior)) {\n        return;\n    }\n\n    let recurse = false;\n    for (const dt of agent.get(DescriptorBehavior).state.deviceTypeList) {\n        switch (dt.deviceType) {\n            case RootEndpoint.deviceType:\n            case BridgedNodeEndpoint.deviceType:\n            case AggregatorEndpoint.deviceType:\n                recurse = true;\n                break;\n\n            default:\n                if (agent.endpoint.type.deviceClass === DeviceClasses.Simple) {\n                    return dt.deviceType;\n                }\n        }\n    }\n\n    if (!recurse || !agent.endpoint.hasParts) {\n        return;\n    }\n\n    for (const child of agent.endpoint.parts) {\n        const deviceType = inferDeviceType(agent.context.agentFor(child));\n        if (deviceType !== undefined) {\n            return deviceType;\n        }\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAE9B,SAAS,0BAA0B;AACnC,SAAS,2BAA2B;AACpC,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AACzB,SAAS,gCAAgC;AACzC,SAAS,0BAA0B;AAM5B,MAAM,iCAAiC,SAAS;AAAA,EACnD,OAAyB,KAAK;AAAA,EAIrB,aAAa;AAClB,UAAM,KAAK,KAAK;AAEhB,UAAM,KAAK,KAAK,MAAM,IAAI,wBAAwB,EAAE;AAEpD,QAAI,GAAG,SAAS,IAAI;AAChB,SAAG,OAAO,GAAG;AAAA,IACjB;AAEA,QAAI,GAAG,aAAa,IAAI;AACpB,SAAG,WAAW,GAAG;AAAA,IACrB;AAEA,QAAI,GAAG,cAAc,IAAI;AACrB,SAAG,YAAY,GAAG;AAAA,IACtB;AAEA,SAAK,eAAe;AAAA,EACxB;AAAA,EAEA,iBAAiB;AACb,QAAI,KAAK,MAAM,eAAe,yBAAyB,qBAAqB;AACxE;AAAA,IACJ;AAEA,UAAM,aAAa,gBAAgB,KAAK,KAAK;AAE7C,QAAI,eAAe,QAAW;AAC1B,WAAK,MAAM,aAAa;AACxB;AAAA,IACJ;AAGA,SAAK;AAAA,MACD,KAAK,SAAS,UAAU;AAAA,MAExB,KAAK;AAAA,MAEL,EAAE,MAAM,KAAK;AAAA,IACjB;AAAA,EACJ;AACJ;AAAA,CAEO,CAAUA,8BAAV;AACI,EAAMA,0BAAA,sBAAsB,aAAa,IAAI,KAAK;AAAA,EAElD,MAAM,MAAoC;AAAA;AAAA;AAAA;AAAA,IAI7C,OAAO;AAAA;AAAA;AAAA;AAAA,IAKP,aAA2BA,0BAAA;AAAA;AAAA;AAAA;AAAA,IAK3B,WAAW,SAAS,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA,IAK7B,YAAY;AAAA,EAChB;AApBO,EAAAA,0BAAM;AAAA,GAHA;AA0BjB,SAAS,gBAAgB,OAAwC;AAC7D,MAAI,CAAC,MAAM,SAAS,UAAU,SAAS,kBAAkB,GAAG;AACxD;AAAA,EACJ;AAEA,MAAI,UAAU;AACd,aAAW,MAAM,MAAM,IAAI,kBAAkB,EAAE,MAAM,gBAAgB;AACjE,YAAQ,GAAG,YAAY;AAAA,MACnB,KAAK,aAAa;AAAA,MAClB,KAAK,oBAAoB;AAAA,MACzB,KAAK,mBAAmB;AACpB,kBAAU;AACV;AAAA,MAEJ;AACI,YAAI,MAAM,SAAS,KAAK,gBAAgB,cAAc,QAAQ;AAC1D,iBAAO,GAAG;AAAA,QACd;AAAA,IACR;AAAA,EACJ;AAEA,MAAI,CAAC,WAAW,CAAC,MAAM,SAAS,UAAU;AACtC;AAAA,EACJ;AAEA,aAAW,SAAS,MAAM,SAAS,OAAO;AACtC,UAAM,aAAa,gBAAgB,MAAM,QAAQ,SAAS,KAAK,CAAC;AAChE,QAAI,eAAe,QAAW;AAC1B,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;",
  "names": ["ProductDescriptionServer"]
}
