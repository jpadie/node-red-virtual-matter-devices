{
  "version": 3,
  "sources": ["../../../../../src/behavior/system/index/IndexBehavior.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport type { Endpoint } from \"../../../endpoint/Endpoint.js\";\nimport { EndpointLifecycle } from \"../../../endpoint/properties/EndpointLifecycle.js\";\nimport { IdentityService } from \"../../../node/server/IdentityService.js\";\nimport { Timer } from \"../../../time/Time.js\";\nimport { EventEmitter, Observable } from \"../../../util/Observable.js\";\nimport { Behavior } from \"../../Behavior.js\";\n\n/**\n * This behavior indexes all descendents of a {@link Endpoint} by number.\n *\n * IndexBehavior should only be present on root and aggregator parts as its presence causes the endpoint's PartsList\n * attribute to reflect a flat namespace as required by the Matter standard.\n */\nexport class IndexBehavior extends Behavior {\n    static override readonly id = \"index\";\n\n    declare internal: IndexBehavior.Internal;\n    declare events: IndexBehavior.Events;\n\n    static override readonly early = true;\n\n    override initialize() {\n        this.reactTo(this.endpoint.lifecycle.changed, this.#handleChange);\n    }\n\n    override [Symbol.asyncDispose]() {\n        this.internal.changeBroadcaster?.stop();\n        delete this.internal.changeBroadcaster;\n    }\n\n    get partsById() {\n        return this.internal.partsById;\n    }\n\n    get partsByNumber() {\n        return this.internal.partsByNumber;\n    }\n\n    /**\n     * Retrieve a {@link Endpoint} by number.\n     *\n     * Note that {@link state.partsByNumber} does not include {@link endpoint} but this method will return it if the number\n     * matches.\n     */\n    forNumber(number: number) {\n        if (this.endpoint.lifecycle.hasNumber && number === this.endpoint.number) {\n            return this.endpoint;\n        }\n        return this.internal.partsByNumber[number];\n    }\n\n    #handleChange(type: EndpointLifecycle.Change, endpoint: Endpoint) {\n        switch (type) {\n            case EndpointLifecycle.Change.IdAssigned:\n            case EndpointLifecycle.Change.NumberAssigned:\n            case EndpointLifecycle.Change.Installed:\n                this.#add(endpoint);\n                this.#change();\n                break;\n\n            case EndpointLifecycle.Change.Destroyed:\n                this.#remove(endpoint);\n                this.#change();\n                break;\n        }\n    }\n\n    #add(endpoint: Endpoint) {\n        // This assertion is a sanity check; if there is a conflict then state is already corrupted\n        if (endpoint.lifecycle.hasNumber) {\n            this.endpoint.env.get(IdentityService).assertNumberAvailable(endpoint.number, endpoint);\n            this.internal.partsByNumber[endpoint.number] = endpoint;\n        }\n\n        for (const child of endpoint.parts) {\n            this.#add(child);\n        }\n    }\n\n    #remove(endpoint: Endpoint) {\n        if (endpoint.id && this.internal.partsById[endpoint.id] === endpoint) {\n            delete this.internal.partsById[endpoint.id];\n        }\n\n        if (endpoint.number !== undefined && this.internal.partsByNumber[endpoint.number] === endpoint) {\n            delete this.internal.partsByNumber[endpoint.number];\n        }\n\n        for (const child of endpoint.parts) {\n            this.#remove(child);\n        }\n\n        this.#change();\n    }\n\n    /**\n     * Trigger change event lazily so transactions complete and we can coalesce into fewer events.\n     */\n    #change() {\n        if (this.internal.changeBroadcaster) {\n            return;\n        }\n\n        void Promise.resolve().then(() => {\n            this.events.change.emit();\n        });\n    }\n}\n\nexport namespace IndexBehavior {\n    export class Internal {\n        changeBroadcaster?: Timer;\n\n        /**\n         * Map of ID to {@link Endpoint}.\n         */\n        partsById = {} as Record<string, Endpoint | undefined>;\n\n        /**\n         * Map of number to {@link Endpoint}.\n         */\n        partsByNumber = {} as Record<number, Endpoint | undefined>;\n    }\n\n    export class Events extends EventEmitter {\n        /**\n         * Emitted when the index changes.\n         */\n        change = Observable<[]>();\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,SAAS,yBAAyB;AAClC,SAAS,uBAAuB;AAEhC,SAAS,cAAc,kBAAkB;AACzC,SAAS,gBAAgB;AAQlB,MAAM,sBAAsB,SAAS;AAAA,EACxC,OAAyB,KAAK;AAAA,EAK9B,OAAyB,QAAQ;AAAA,EAExB,aAAa;AAClB,SAAK,QAAQ,KAAK,SAAS,UAAU,SAAS,KAAK,aAAa;AAAA,EACpE;AAAA,EAEA,CAAU,OAAO,YAAY,IAAI;AAC7B,SAAK,SAAS,mBAAmB,KAAK;AACtC,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,IAAI,gBAAgB;AAChB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,QAAgB;AACtB,QAAI,KAAK,SAAS,UAAU,aAAa,WAAW,KAAK,SAAS,QAAQ;AACtE,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,SAAS,cAAc,MAAM;AAAA,EAC7C;AAAA,EAEA,cAAc,MAAgC,UAAoB;AAC9D,YAAQ,MAAM;AAAA,MACV,KAAK,kBAAkB,OAAO;AAAA,MAC9B,KAAK,kBAAkB,OAAO;AAAA,MAC9B,KAAK,kBAAkB,OAAO;AAC1B,aAAK,KAAK,QAAQ;AAClB,aAAK,QAAQ;AACb;AAAA,MAEJ,KAAK,kBAAkB,OAAO;AAC1B,aAAK,QAAQ,QAAQ;AACrB,aAAK,QAAQ;AACb;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,KAAK,UAAoB;AAErB,QAAI,SAAS,UAAU,WAAW;AAC9B,WAAK,SAAS,IAAI,IAAI,eAAe,EAAE,sBAAsB,SAAS,QAAQ,QAAQ;AACtF,WAAK,SAAS,cAAc,SAAS,MAAM,IAAI;AAAA,IACnD;AAEA,eAAW,SAAS,SAAS,OAAO;AAChC,WAAK,KAAK,KAAK;AAAA,IACnB;AAAA,EACJ;AAAA,EAEA,QAAQ,UAAoB;AACxB,QAAI,SAAS,MAAM,KAAK,SAAS,UAAU,SAAS,EAAE,MAAM,UAAU;AAClE,aAAO,KAAK,SAAS,UAAU,SAAS,EAAE;AAAA,IAC9C;AAEA,QAAI,SAAS,WAAW,UAAa,KAAK,SAAS,cAAc,SAAS,MAAM,MAAM,UAAU;AAC5F,aAAO,KAAK,SAAS,cAAc,SAAS,MAAM;AAAA,IACtD;AAEA,eAAW,SAAS,SAAS,OAAO;AAChC,WAAK,QAAQ,KAAK;AAAA,IACtB;AAEA,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACN,QAAI,KAAK,SAAS,mBAAmB;AACjC;AAAA,IACJ;AAEA,SAAK,QAAQ,QAAQ,EAAE,KAAK,MAAM;AAC9B,WAAK,OAAO,OAAO,KAAK;AAAA,IAC5B,CAAC;AAAA,EACL;AACJ;AAAA,CAEO,CAAUA,mBAAV;AAAA,EACI,MAAM,SAAS;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAKA,YAAY,CAAC;AAAA;AAAA;AAAA;AAAA,IAKb,gBAAgB,CAAC;AAAA,EACrB;AAZO,EAAAA,eAAM;AAAA,EAcN,MAAM,eAAe,aAAa;AAAA;AAAA;AAAA;AAAA,IAIrC,SAAS,WAAe;AAAA,EAC5B;AALO,EAAAA,eAAM;AAAA,GAfA;",
  "names": ["IndexBehavior"]
}
