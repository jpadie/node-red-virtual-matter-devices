{
  "version": 3,
  "sources": ["../../../src/device/LegacyInteractionServer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MatterDevice } from \"../MatterDevice.js\";\nimport { AccessLevel } from \"../cluster/Cluster.js\";\nimport { AccessControlCluster } from \"../cluster/definitions/index.js\";\nimport { AnyAttributeServer, AttributeServer, FabricScopedAttributeServer } from \"../cluster/server/AttributeServer.js\";\nimport { CommandServer } from \"../cluster/server/CommandServer.js\";\nimport { AnyEventServer } from \"../cluster/server/EventServer.js\";\nimport { Message } from \"../codec/MessageCodec.js\";\nimport { InternalError } from \"../common/MatterError.js\";\nimport { EndpointNumber } from \"../datatype/EndpointNumber.js\";\nimport { EndpointInterface } from \"../endpoint/EndpointInterface.js\";\nimport { Diagnostic } from \"../log/Diagnostic.js\";\nimport { Logger } from \"../log/Logger.js\";\nimport { MessageExchange } from \"../protocol/MessageExchange.js\";\nimport { AccessControlManager, AccessDeniedError } from \"../protocol/interaction/AccessControlManager.js\";\nimport { EventStorageData } from \"../protocol/interaction/EventHandler.js\";\nimport { InteractionEndpointStructure } from \"../protocol/interaction/InteractionEndpointStructure.js\";\nimport { TlvEventFilter } from \"../protocol/interaction/InteractionProtocol.js\";\nimport { AttributePath, CommandPath, EventPath, InteractionServer } from \"../protocol/interaction/InteractionServer.js\";\nimport { SecureSession } from \"../session/SecureSession.js\";\nimport { Session } from \"../session/Session.js\";\nimport { TypeFromSchema } from \"../tlv/TlvSchema.js\";\nimport { Endpoint } from \"./Endpoint.js\";\n\nconst logger = Logger.get(\"LegacyInteractionServer\");\n\n/**\n * Interactionserver for the legacy API code paths which includes ACL checks before calling the actual\n * attribute/command handlers.\n */\nexport class LegacyInteractionServer extends InteractionServer {\n    #endpointStructure: InteractionEndpointStructure;\n    #aclManager?: AccessControlManager;\n\n    constructor(config: InteractionServer.Configuration) {\n        const { endpointStructure } = config;\n        super(config);\n        this.#endpointStructure = endpointStructure;\n    }\n\n    #getAclManager(session: Session<MatterDevice>) {\n        if (this.#aclManager !== undefined) {\n            return this.#aclManager;\n        }\n        const rootEndpoint = this.#endpointStructure.getEndpoint(EndpointNumber(0)) as Endpoint;\n        if (rootEndpoint === undefined) {\n            throw new InternalError(\"Root endpoint must exist.\");\n        }\n        const aclCluster = rootEndpoint.getClusterServer(AccessControlCluster);\n        if (aclCluster === undefined) {\n            throw new InternalError(\"Access control cluster must exist on root endpoint.\");\n        }\n        const aclManager = (this.#aclManager = new AccessControlManager(aclCluster.attributes.acl.get(session, false)));\n        aclCluster.subscribeAclAttribute(() => {\n            const completeVal = aclCluster.attributes.acl.get(session, false);\n            logger.info(\"ACL updated\", completeVal);\n            aclManager.updateAccessControlList(completeVal);\n        });\n        return aclManager;\n    }\n\n    #assertAccess(\n        path: AttributePath | EventPath | CommandPath,\n        exchange: MessageExchange<MatterDevice>,\n        desiredAccessLevel: AccessLevel,\n    ) {\n        const { endpointId, clusterId } = path;\n        const endpoint = this.#endpointStructure.getEndpoint(endpointId);\n        if (endpoint === undefined) {\n            throw new InternalError(\"Endpoint not found for ACL check. This should never happen.\");\n        }\n        const aclManager = this.#getAclManager(exchange.session);\n        if (\n            !aclManager.allowsPrivilege(exchange.session as SecureSession<any>, endpoint, clusterId, desiredAccessLevel)\n        ) {\n            throw new AccessDeniedError(\n                `Access to ${endpointId}/${Diagnostic.hex(clusterId)} denied on ${exchange.session.name}.`,\n            );\n        }\n    }\n\n    protected override async readAttribute(\n        path: AttributePath,\n        attribute: AnyAttributeServer<any>,\n        exchange: MessageExchange<MatterDevice>,\n        isFabricFiltered: boolean,\n        message: Message,\n        endpoint: EndpointInterface,\n    ) {\n        this.#assertAccess(path, exchange, attribute.readAcl);\n        const data = await super.readAttribute(path, attribute, exchange, isFabricFiltered, message, endpoint);\n        if (attribute instanceof FabricScopedAttributeServer && !isFabricFiltered) {\n            const { value, version } = data;\n            return {\n                value: attribute.sanitizeFabricSensitiveFields(\n                    value,\n                    (exchange.session as SecureSession<MatterDevice>).fabric,\n                ),\n                version,\n            };\n        }\n        return data;\n    }\n\n    protected override async readEvent(\n        path: EventPath,\n        eventFilters: TypeFromSchema<typeof TlvEventFilter>[] | undefined,\n        event: AnyEventServer<any, any>,\n        exchange: MessageExchange<MatterDevice>,\n        isFabricFiltered: boolean,\n        message: Message,\n        endpoint: EndpointInterface,\n    ): Promise<EventStorageData<any>[]> {\n        this.#assertAccess(path, exchange, event.readAcl);\n        return super.readEvent(path, eventFilters, event, exchange, isFabricFiltered, message, endpoint);\n    }\n\n    protected override async writeAttribute(\n        path: AttributePath,\n        attribute: AttributeServer<any>,\n        value: any,\n        exchange: MessageExchange<MatterDevice>,\n        message: Message,\n        endpoint: EndpointInterface,\n        receivedWithinTimedInteraction?: boolean,\n        isListWrite?: boolean,\n    ) {\n        this.#assertAccess(path, exchange, attribute.writeAcl);\n        return super.writeAttribute(\n            path,\n            attribute,\n            value,\n            exchange,\n            message,\n            endpoint,\n            receivedWithinTimedInteraction,\n            isListWrite,\n        );\n    }\n\n    protected override async invokeCommand(\n        path: CommandPath,\n        command: CommandServer<any, any>,\n        exchange: MessageExchange<MatterDevice>,\n        commandFields: any,\n        message: Message,\n        endpoint: EndpointInterface,\n        receivedWithinTimedInteraction = false,\n    ) {\n        this.#assertAccess(path, exchange, command.invokeAcl);\n        return super.invokeCommand(\n            path,\n            command,\n            exchange,\n            commandFields,\n            message,\n            endpoint,\n            receivedWithinTimedInteraction,\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
