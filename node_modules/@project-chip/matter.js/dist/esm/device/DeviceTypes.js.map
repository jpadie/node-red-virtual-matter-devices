{
  "version": 3,
  "sources": ["../../../src/device/DeviceTypes.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as MatterClusters from \"../cluster/definitions/index.js\";\nimport { ClusterId } from \"../datatype/ClusterId.js\";\nimport { DeviceTypeId } from \"../datatype/DeviceTypeId.js\";\n\n/**\n * This represents a Root Node for devices.\n *\n * @see {@link MatterSpecification.v10.Device} \u00A7 1.1.5\n */\nexport enum DeviceClasses {\n    /** Node device type. */\n    Node = \"Node\",\n\n    /**\n     * Utility device type.\n     * A Utility device type supports configuration and settings.\n     */\n    Utility = \"Utility\",\n\n    /**\n     * Application device type.\n     * Application devices types are typically the most datatype endpoints on a node and in the network.\n     */\n    App = \"App\",\n\n    /**\n     * Simple device type.\n     * A Simple device type supports local control that is persistent, independent, and unsupervised.\n     */\n    Simple = \"Simple\",\n\n    /**\n     * Dynamic device type.\n     * A Dynamic device type supports intelligent and supervisory services, such as commissioning,\n     * monitoring, trend analysis, scheduling and central management. A dynamic device type is an\n     * application device type.\n     */\n    Dynamic = \"Dynamic\",\n\n    /** There exists a client application cluster on the endpoint. */\n    Client = \"Client\",\n\n    /** There exists a server application cluster on the endpoint. */\n    Server = \"Server\",\n\n    /** The device type is composed of 2 or more device types. */\n    Composed = \"Composed\",\n\n    /** Composed device type that is composed of 2 or more endpoints with the same device type. */\n    Multiple = \"Multiple\",\n\n    /** The endpoint is an Initiator for Zigbee EZ-Mode Finding & Binding. */\n    \"EZInitiator\" = \"EZ-Initiator\",\n\n    /** The endpoint is a Target for Zigbee EZ-Mode Finding & Binding. */\n    \"EZTarget\" = \"EZ-Target\",\n\n    /**\n     * The endpoint represents a Bridged Device, for which information about the state of\n     * its power source is available to the Bridge\n     */\n    BridgedPowerSourceInfo = \"BridgedPowerSourceInfo\",\n}\n\nexport interface DeviceTypeDefinition {\n    name: string;\n    code: DeviceTypeId;\n    deviceClass: DeviceClasses;\n    superSet?: string;\n    revision: number;\n    requiredServerClusters: ClusterId[];\n    optionalServerClusters: ClusterId[];\n    requiredClientClusters: ClusterId[];\n    optionalClientClusters: ClusterId[];\n    unknown: boolean;\n}\n\nexport const DeviceTypeDefinition = ({\n    name,\n    code,\n    deviceClass,\n    superSet,\n    revision,\n    requiredServerClusters = [],\n    optionalServerClusters = [],\n    requiredClientClusters = [],\n    optionalClientClusters = [],\n    unknown = false,\n}: {\n    name: string;\n    code: number;\n    deviceClass: DeviceClasses;\n    superSet?: string;\n    revision: number;\n    requiredServerClusters?: ClusterId[];\n    optionalServerClusters?: ClusterId[];\n    requiredClientClusters?: ClusterId[];\n    optionalClientClusters?: ClusterId[];\n    unknown?: boolean;\n}): DeviceTypeDefinition => ({\n    name,\n    code: DeviceTypeId(code),\n    deviceClass,\n    superSet,\n    revision,\n    requiredServerClusters,\n    optionalServerClusters,\n    requiredClientClusters,\n    optionalClientClusters,\n    unknown,\n});\n\n/**\n * @deprecated These definitions will not be updated beyond Matter 1.1, please instead use definitions in ../endpoint.\n */\nexport const DeviceTypes: { [key: string]: DeviceTypeDefinition } = {\n    // Utility Device Types\n    // A Utility device type supports configuration and settings.\n    /**\n     * This represents a Root Node for devices.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.1\n     */\n    ROOT: DeviceTypeDefinition({\n        name: \"MA-rootdevice\",\n        code: 0x0016,\n        deviceClass: DeviceClasses.Node,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.BasicInformationCluster.id,\n            MatterClusters.AccessControlCluster.id,\n            MatterClusters.GroupKeyManagementCluster.id,\n            MatterClusters.GeneralCommissioningCluster.id,\n            MatterClusters.AdministratorCommissioningCluster.id,\n            MatterClusters.OperationalCredentialsCluster.id,\n            MatterClusters.GeneralDiagnosticsCluster.id,\n        ],\n        optionalServerClusters: [\n            MatterClusters.PowerSourceConfigurationCluster.id,\n            MatterClusters.TimeSynchronizationCluster.id,\n            MatterClusters.NetworkCommissioningCluster.id, // mandatory if !CustomNetworkConfig\n            MatterClusters.LocalizationConfigurationCluster.id, // mandatory if LanguageLocale\n            MatterClusters.TimeFormatLocalizationCluster.id, // mandatory if TimeLocale\n            MatterClusters.UnitLocalizationCluster.id, // mandatory if UnitLocale\n            MatterClusters.DiagnosticLogsCluster.id,\n            MatterClusters.SoftwareDiagnosticsCluster.id,\n            MatterClusters.EthernetNetworkDiagnosticsCluster.id, // optional if Ethernet\n            MatterClusters.WiFiNetworkDiagnosticsCluster.id, // optional if WiFi\n            MatterClusters.ThreadNetworkDiagnosticsCluster.id, // optional if Thread\n        ],\n    }),\n\n    /**\n     * This represents a Power Source Node for devices.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.2\n     */\n    POWER_SOURCE: DeviceTypeDefinition({\n        name: \"MA-powersource\",\n        code: 0x011,\n        deviceClass: DeviceClasses.Node, // ???\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.PowerSourceCluster.id, // any cluster features allowed\n        ],\n    }),\n\n    /**\n     * An OTA Requestor is a device that is capable of receiving an OTA software\n     * update.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.3\n     */\n    OTA_REQUESTOR: DeviceTypeDefinition({\n        name: \"MA-otarequestor\",\n        code: 0x012,\n        deviceClass: DeviceClasses.Node, // ???\n        revision: 1,\n        requiredServerClusters: [\n            //OtaSoftwareUpdateRequestorCluster.id\n        ],\n        requiredClientClusters: [\n            //OtaSoftwareUpdateProviderCluster.id\n        ],\n    }),\n\n    /**\n     * An OTA Provider is a node that is capable of providing an OTA software\n     * update to other nodes on the same fabric.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.4\n     */\n    OTA_PROVIDER: DeviceTypeDefinition({\n        name: \"MA-otaprovider\",\n        code: 0x0014,\n        deviceClass: DeviceClasses.Node, // ???\n        revision: 1,\n        requiredServerClusters: [\n            //OtaSoftwareUpdateProviderCluster.id\n        ],\n        optionalClientClusters: [\n            //OtaSoftwareUpdateRequestorCluster.id\n        ],\n    }),\n\n    /**\n     * This represents a Aggregator Node.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.5\n     */\n    AGGREGATOR: DeviceTypeDefinition({\n        name: \"MA-aggregator\",\n        code: 0x000e,\n        deviceClass: DeviceClasses.Dynamic, // ???\n        revision: 1,\n        optionalServerClusters: [MatterClusters.ActionsCluster.id],\n    }),\n\n    /**\n     * This represents a Bridged Node to identify a bridged device without Power Source information.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.6\n     */\n    BRIDGED_NODE: DeviceTypeDefinition({\n        name: \"MA-bridgednode\",\n        code: 0x0013,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [MatterClusters.BridgedDeviceBasicInformationCluster.id],\n    }),\n\n    /**\n     * This represents a Bridged Node to identify a bridged device with Power Source information.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 2.6\n     */\n    BRIDGED_DEVICE_WITH_POWERSOURCE_INFO: DeviceTypeDefinition({\n        name: \"MA-bridgeddevice\",\n        code: 0x0013,\n        deviceClass: DeviceClasses.BridgedPowerSourceInfo,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.BridgedDeviceBasicInformationCluster.id,\n            MatterClusters.PowerSourceConfigurationCluster.id,\n            MatterClusters.PowerSourceCluster.id, // any cluster features allowed\n        ],\n    }),\n\n    /* Application Device Types */\n    /* Application devices types are typically the most datatype endpoints on a node and in the network. */\n    /* ------------------------- Lighting ------------------------------- */\n    /**\n     * The On/Off Light is a lighting device that is capable of being switched\n     * on or off by means of a bound controller device such as anOn/Off Light\n     * Switch or a Dimmer Switch. In addition, an on/off light is also capable\n     * of being switched by means of a bound occupancy sensor.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 4.1\n     */\n    ON_OFF_LIGHT: DeviceTypeDefinition({\n        name: \"MA-onofflight\",\n        code: 0x0100,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n        ],\n        optionalServerClusters: [MatterClusters.LevelControlCluster.id],\n        optionalClientClusters: [MatterClusters.OccupancySensingCluster.id],\n    }),\n\n    /**\n     * A Dimmable Light is a lighting device that is capable of being switched\n     * on or off and the intensity of its light adjusted by means of a bound\n     * controller device such as a Dimmer Switch or a Color Dimmer Switch.\n     * In addition, a Dimmable Light device is also capable of being switched\n     * by means of a bound occupancy sensor or other device(s).\n     * @see {@link MatterSpecification.v10.Device} \u00A7 4.2\n     */\n    DIMMABLE_LIGHT: DeviceTypeDefinition({\n        name: \"MA-dimmablelight\",\n        code: 0x0101,\n        deviceClass: DeviceClasses.Simple,\n        superSet: \"ON_OFF_LIGHT\",\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n        ],\n        optionalClientClusters: [MatterClusters.OccupancySensingCluster.id],\n    }),\n\n    /**\n     * A Color Temperature Light is a lighting device that is capable of being\n     * switched on or off, the intensity of its light adjusted, and its\n     * color temperature adjusted by means of a bound controller device such\n     * as a Color Dimmer Switch.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 4.3\n     */\n    COLOR_TEMPERATURE_LIGHT: DeviceTypeDefinition({\n        name: \"MA-colortemperaturelight\",\n        code: 0x010c,\n        deviceClass: DeviceClasses.Simple,\n        superSet: \"DIMMABLE_LIGHT\",\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.ColorControlCluster.id,\n        ],\n    }),\n\n    /**\n     * An Extended Color Light is a lighting device that is capable of being\n     * switched on or off, the intensity of its light adjusted, and its color\n     * adjusted by means of a bound controller device such as a Color Dimmer\n     * Switch or Control Bridge. The device supports adjustment of color by\n     * means of hue/saturation, enhanced hue, color looping, XY coordinates,\n     * and color temperature. In addition, the extended color light is also\n     * capable of being switched by means of a bound occupancy sensor.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 4.4\n     */\n    EXTENDED_COLOR_LIGHT: DeviceTypeDefinition({\n        name: \"MA-extendedcolorlight\",\n        code: 0x010d,\n        deviceClass: DeviceClasses.Simple,\n        superSet: \"COLOR_TEMPERATURE_LIGHT\",\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.ColorControlCluster.id,\n        ],\n    }),\n\n    /* ------------ Smart Plugs/outlets and other actuators ----------------- */\n    /**\n     * An On/Off Plug-in Unit is a device that is capable of being switched on\n     * or off by means of a bound controller device such as an On/Off Light\n     * Switch or a Dimmer Switch. The On/Off Plug-in Unit is typically used\n     * to control a conventional non-communicating light by switching its mains\n     * connection. Other appliances can be controlled this way as well.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 5.1\n     */\n    ON_OFF_PLUGIN_UNIT: DeviceTypeDefinition({\n        name: \"MA-onoffpluginunit\",\n        code: 0x010a,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n        ],\n        optionalServerClusters: [MatterClusters.LevelControlCluster.id],\n    }),\n\n    /**\n     * A Dimmable Plug-In Unit is a device that is capable of being switched on\n     * or off and have its level adjusted by means of a bound controller device\n     * such as a Dimmer Switch or a Color Dimmer Switch. The Dimmable Plug-in\n     * Unit is typically used to control a conventional non-communicating light\n     * through its mains connection using phase cutting.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 5.2\n     */\n    DIMMABLE_PLUGIN_UNIT: DeviceTypeDefinition({\n        name: \"MA-dimmablepluginunit\",\n        code: 0x010b,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n        ],\n    }),\n\n    /**\n     * A Pump device is a pump that may have variable speed. It may have\n     * optional built-in sensors and a regulation mechanism. It is typically\n     * used for pumping fluids like water.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 5.3\n     */\n    PUMP: DeviceTypeDefinition({\n        name: \"MA-pump\",\n        code: 0x0303,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.PumpConfigurationAndControlCluster.id,\n            MatterClusters.IdentifyCluster.id,\n        ],\n        optionalServerClusters: [\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.TemperatureMeasurementCluster.id,\n            MatterClusters.PressureMeasurementCluster.id,\n            MatterClusters.FlowMeasurementCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.TemperatureMeasurementCluster.id,\n            MatterClusters.PressureMeasurementCluster.id,\n            MatterClusters.FlowMeasurementCluster.id,\n            MatterClusters.OccupancySensingCluster.id,\n        ],\n    }),\n\n    /* ---------------- Switches and Controls ----------------------- */\n    /**\n     * An On/Off Light Switch is a controller device that, when bound to a\n     * lighting device such as an On/Off Light, is capable of being used to\n     * switch the device on or off.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.1\n     */\n    ON_OFF_LIGHT_SWITCH: DeviceTypeDefinition({\n        name: \"MA-onofflightswitch\",\n        code: 0x0103,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.OnOffCluster.id],\n        optionalClientClusters: [MatterClusters.GroupsCluster.id],\n    }),\n\n    /**\n     * A Dimmer Switch is a controller device that, when bound to a lighting\n     * device such as a Dimmable Light, is capable of being used to switch the\n     * device on or off and adjust the intensity of the light being emitted.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.2\n     */\n    DIMMER_SWITCH: DeviceTypeDefinition({\n        name: \"MA-dimmerswitch\",\n        code: 0x0104,\n        deviceClass: DeviceClasses.Simple,\n        superSet: \"ON_OFF_LIGHT_SWITCH\",\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n        ],\n        optionalClientClusters: [MatterClusters.GroupsCluster.id],\n    }),\n\n    /**\n     * A Color Dimmer Switch is a controller device that, when bound to a\n     * lighting device such as an Extended Color Light, is capable of being\n     * used to adjust the color of the light being emitted.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.3\n     */\n    COLOR_DIMMER_SWITCH: DeviceTypeDefinition({\n        name: \"MA-colordimmerswitch\",\n        code: 0x0105,\n        deviceClass: DeviceClasses.Simple,\n        superSet: \"DIMMER_SWITCH\",\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.ColorControlCluster.id,\n        ],\n        optionalClientClusters: [MatterClusters.GroupsCluster.id],\n    }),\n\n    /**\n     * A Control Bridge is a controller device that, when bound to a lighting\n     * device such as an Extended Color Light, is capable of being used to\n     * switch the device on or off, adjust the intensity of the light being\n     * emitted and adjust the color of the light being emitted. In addition, a\n     * Control Bridge device is capable of being used for setting scenes.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.4\n     */\n    CONTROL_BRIDGE: DeviceTypeDefinition({\n        name: \"MA-controlbridge\",\n        code: 0x0840,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.ColorControlCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.IlluminanceMeasurementCluster.id,\n            MatterClusters.OccupancySensingCluster.id,\n        ],\n    }),\n\n    /**\n     * A Pump Controller device is capable of configuring and controlling a\n     * Pump device.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.5\n     */\n    PUMP_CONTROLLER: DeviceTypeDefinition({\n        name: \"MA-pumpcontroller\",\n        code: 0x0304,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [\n            MatterClusters.BindingCluster.id,\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.PumpConfigurationAndControlCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.TemperatureMeasurementCluster.id,\n            MatterClusters.PressureMeasurementCluster.id,\n            MatterClusters.FlowMeasurementCluster.id,\n        ],\n    }),\n\n    /**\n     * This defines conformance for the Generic Switch device type.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 6.6\n     */\n    GENERIC_SWITCH: DeviceTypeDefinition({\n        name: \"MA-genericswitch\",\n        code: 0x000f,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.SwitchCluster.id],\n        optionalServerClusters: [MatterClusters.FixedLabelCluster.id],\n    }),\n\n    /* ---------------------------- Sensors --------------------------- */\n    /**\n     * This defines conformance to the Contact Sensor device type.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.1\n     */\n    CONTACT_SENSOR: DeviceTypeDefinition({\n        name: \"MA-contactsensor\",\n        code: 0x0015,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.BooleanStateCluster.id],\n    }),\n\n    /**\n     * A Light Sensor device is a measurement and sensing device that is capable\n     * of measuring and reporting the intensity of light (illuminance) to which\n     * the sensor is being subjected.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.2\n     */\n    LIGHT_SENSOR: DeviceTypeDefinition({\n        name: \"MA-lightsensor\",\n        code: 0x0106,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.IlluminanceMeasurementCluster.id],\n        optionalClientClusters: [MatterClusters.GroupsCluster.id],\n    }),\n\n    /**\n     * An Occupancy Sensor is a measurement and sensing device that is capable\n     * of measuring and reporting the occupancy state in a designated area.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.3\n     */\n    OCCUPANCY_SENSOR: DeviceTypeDefinition({\n        name: \"MA-occupancysensor\",\n        code: 0x0107,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.OccupancySensingCluster.id],\n        optionalClientClusters: [MatterClusters.GroupsCluster.id],\n    }),\n\n    /**\n     * A Temperature Sensor device reports measurements of temperature.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.4\n     */\n    TEMPERATURE_SENSOR: DeviceTypeDefinition({\n        name: \"MA-tempsensor\",\n        code: 0x0302,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.TemperatureMeasurementCluster.id, MatterClusters.IdentifyCluster.id],\n    }),\n\n    /**\n     * A Pressure Sensor device measures and reports the pressure of a fluid.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.5\n     */\n    PRESSURE_SENSOR: DeviceTypeDefinition({\n        name: \"MA-pressuresensor\",\n        code: 0x0305,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.PressureMeasurementCluster.id, MatterClusters.IdentifyCluster.id],\n    }),\n\n    /**\n     * A Flow Sensor device measures and reports the flow rate of a fluid.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.6\n     */\n    FLOW_SENSOR: DeviceTypeDefinition({\n        name: \"MA-flowsensor\",\n        code: 0x0306,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.FlowMeasurementCluster.id, MatterClusters.IdentifyCluster.id],\n    }),\n\n    /**\n     * A humidity sensor (in most cases a Relative humidity sensor) reports humidity measurements.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.7\n     */\n    HUMIDITY_SENSOR: DeviceTypeDefinition({\n        name: \"MA-humiditysensor\",\n        code: 0x0307,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.RelativeHumidityMeasurementCluster.id,\n        ],\n    }),\n\n    /**\n     * An On/Off Sensor is a measurement and sensing device that, when bound to\n     * a lighting device such as a Dimmable Light, is capable of being used to\n     * switch the device on or off.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 7.8\n     */\n    ON_OFF_SENSOR: DeviceTypeDefinition({\n        name: \"MA-onoffsensor\",\n        code: 0x0850,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.OnOffCluster.id],\n        optionalClientClusters: [\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.ColorControlCluster.id,\n        ],\n    }),\n\n    /* ---------------------------- Closures --------------------------- */\n    /**\n     * A Door Lock is a device used to secure a door. It is possible to actuate\n     * a door lock either by means of a manual or a remote method.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 8.1\n     */\n    DOOR_LOCK: DeviceTypeDefinition({\n        name: \"MA-doorlock\",\n        code: 0x000a,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.DoorLockCluster.id],\n        optionalServerClusters: [\n            //MatterClusters.PollControlCluster.id, //0x20 Not existing in Specs 1.1\n        ],\n        optionalClientClusters: [MatterClusters.TimeSynchronizationCluster.id],\n    }),\n\n    /**\n     * A Door Lock Controller is a device capable of controlling a door lock.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 8.2\n     */\n    DOOR_LOCK_CONTROLLER: DeviceTypeDefinition({\n        name: \"MA-doorlockcontroller\",\n        code: 0x000b,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        optionalServerClusters: [\n            MatterClusters.IdentifyCluster.id, // Optional if EZ-Target\n            MatterClusters.TimeSynchronizationCluster.id,\n        ],\n        requiredClientClusters: [MatterClusters.DoorLockCluster.id],\n        optionalClientClusters: [\n            MatterClusters.IdentifyCluster.id, // Optional if EZ-Initiator\n            MatterClusters.GroupsCluster.id, // Required if Zigbee\n        ],\n    }),\n\n    /**\n     * This defines conformance to the Window Covering device type.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 8.3\n     */\n    WINDOW_COVERING: DeviceTypeDefinition({\n        name: \"MA-windowcovering\",\n        code: 0x0202,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.WindowCoveringCluster.id],\n        optionalServerClusters: [\n            MatterClusters.GroupsCluster.id, // Required when Awake, else optional\n        ],\n    }),\n\n    /**\n     * A Window Covering Controller is a device that controls an automatic\n     * window covering.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 8.4\n     */\n    WINDOW_COVERING_CONTROLLER: DeviceTypeDefinition({\n        name: \"MA-windowcoveringcontroller\",\n        code: 0x0203,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        optionalServerClusters: [MatterClusters.IdentifyCluster.id],\n        requiredClientClusters: [MatterClusters.WindowCoveringCluster.id],\n        optionalClientClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id, // Required when Awake, else optional\n        ],\n    }),\n\n    /* ---------------------------- HVAC --------------------------- */\n    /**\n     * A Heating/Cooling Unit is a device capable of heating or cooling a space\n     * in a house. It is not mandatory to provide both functionalities (for\n     * example, the device may just heat but not cool). It may be an indoor air\n     * handler.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 9.1\n     */\n    HEATING_COOLING_UNIT: DeviceTypeDefinition({\n        name: \"MA-heatcool\",\n        code: 0x0300,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.OnOffCluster.id,\n        ],\n        optionalServerClusters: [MatterClusters.LevelControlCluster.id, MatterClusters.FanControlCluster.id],\n        requiredClientClusters: [MatterClusters.ThermostatCluster.id],\n    }),\n\n    /**\n     * A Thermostat device is capable of having either built-in or separate\n     * sensors for temperature, humidity or occupancy. It allows the desired\n     * temperature to be set either remotely or locally. The thermostat is\n     * capable of sending heating and/or cooling requirement notifications to a\n     * heating/cooling unit (for example, an indoor air handler) or is\n     * capable of including a mechanism to control a heating or cooling unit\n     * directly.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 9.2\n     */\n    THERMOSTAT: DeviceTypeDefinition({\n        name: \"MA-thermostat\",\n        code: 0x0301,\n        deviceClass: DeviceClasses.Simple,\n        revision: 2,\n        requiredServerClusters: [MatterClusters.IdentifyCluster.id, MatterClusters.ThermostatCluster.id],\n        optionalServerClusters: [\n            MatterClusters.GroupsCluster.id, // Required when Awake\n            MatterClusters.ThermostatUserInterfaceConfigurationCluster.id,\n            MatterClusters.TimeSynchronizationCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.RelativeHumidityMeasurementCluster.id,\n            MatterClusters.TimeSynchronizationCluster.id,\n            MatterClusters.FanControlCluster.id,\n            MatterClusters.TemperatureMeasurementCluster.id,\n            MatterClusters.OccupancySensingCluster.id,\n        ],\n    }),\n\n    /**\n     * This defines conformance to the Fan device type.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 9.3\n     */\n    FAN: DeviceTypeDefinition({\n        name: \"MA-fan\",\n        code: 0x002b,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.IdentifyCluster.id,\n            MatterClusters.GroupsCluster.id,\n            MatterClusters.FanControlCluster.id,\n        ],\n    }),\n\n    /* ---------------------------- Media --------------------------- */\n    /**\n     * A Video Player (either Basic or Casting) represents a device that is able\n     * to play media to a physical output or to a display screen which is part\n     * of the device.\n     * A Basic Video Player has playback controls (play, pause, etc.) and keypad\n     * remote controls (up, down, number input), but is not able to launch\n     * content and is not a content app platform (the Casting Video Player\n     * device type is used for these functions).\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.2\n     */\n    BASIC_VIDEO_PLAYER: DeviceTypeDefinition({\n        name: \"MA-basic-videoplayer\",\n        code: 0x0028,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.MediaPlaybackCluster.id,\n            MatterClusters.KeypadInputCluster.id,\n        ],\n        optionalServerClusters: [\n            MatterClusters.WakeOnLanCluster.id,\n            MatterClusters.ChannelCluster.id,\n            MatterClusters.TargetNavigatorCluster.id,\n            MatterClusters.MediaInputCluster.id, // Required if PhysicalInputs\n            MatterClusters.LowPowerCluster.id,\n            MatterClusters.AudioOutputCluster.id,\n        ],\n    }),\n\n    /**\n     * A Casting Video Player has basic controls for playback (play, pause,\n     * etc.) and keypad input (up, down, number input), and is able to launch\n     * content.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.3\n     */\n    CASTING_VIDEO_PLAYER: DeviceTypeDefinition({\n        name: \"MA-casting-videoplayer\",\n        code: 0x0023,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.MediaPlaybackCluster.id,\n            MatterClusters.KeypadInputCluster.id,\n            MatterClusters.ContentLauncherCluster.id,\n        ],\n        optionalServerClusters: [\n            MatterClusters.WakeOnLanCluster.id,\n            MatterClusters.ChannelCluster.id,\n            MatterClusters.TargetNavigatorCluster.id,\n            MatterClusters.MediaInputCluster.id, // Required if PhysicalInputs\n            MatterClusters.LowPowerCluster.id,\n            MatterClusters.AudioOutputCluster.id,\n            MatterClusters.ApplicationLauncherCluster.id, // Required if ContentAppPlatform\n            MatterClusters.AccountLoginCluster.id,\n        ],\n    }),\n\n    /**\n     * This feature controls the speaker volume of the device.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.4\n     */\n    SPEAKER: DeviceTypeDefinition({\n        name: \"MA-speaker\",\n        code: 0x0022,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [MatterClusters.OnOffCluster.id, MatterClusters.LevelControlCluster.id],\n    }),\n\n    /**\n     * A Content App is usually an application built by a Content Provider. A\n     * Casting Video Player with a Content App Platform is able to launch\n     * Content Apps and represent these apps as separate endpoints.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.5\n     */\n    CONTENT_APP: DeviceTypeDefinition({\n        name: \"MA-contentapp\",\n        code: 0x0024,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [\n            MatterClusters.KeypadInputCluster.id,\n            MatterClusters.ApplicationLauncherCluster.id,\n            MatterClusters.ApplicationBasicCluster.id,\n        ],\n        optionalServerClusters: [\n            MatterClusters.ChannelCluster.id,\n            MatterClusters.TargetNavigatorCluster.id,\n            MatterClusters.MediaPlaybackCluster.id,\n            MatterClusters.ContentLauncherCluster.id,\n            MatterClusters.AccountLoginCluster.id,\n        ],\n    }),\n\n    /**\n     * A Casting Video Client is a client that can launch content on a Casting\n     * Video Player, for example, a Smart Speaker or a Content Provider phone\n     * app.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.6\n     */\n    CASTING_VIDEO_CLIENT: DeviceTypeDefinition({\n        name: \"MA-casting-videoclient\",\n        code: 0x0029,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredClientClusters: [\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.KeypadInputCluster.id,\n            MatterClusters.ContentLauncherCluster.id,\n            MatterClusters.ApplicationBasicCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.WakeOnLanCluster.id,\n            MatterClusters.ChannelCluster.id,\n            MatterClusters.TargetNavigatorCluster.id,\n            MatterClusters.MediaPlaybackCluster.id,\n            MatterClusters.MediaInputCluster.id,\n            MatterClusters.LowPowerCluster.id,\n            MatterClusters.AudioOutputCluster.id,\n            MatterClusters.ApplicationLauncherCluster.id,\n            MatterClusters.AccountLoginCluster.id,\n        ],\n    }),\n\n    /**\n     * A Video Remote Control is a client that can control a Video Player, for\n     * example, a traditional universal remote control.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 10.7\n     */\n    VIDEO_REMOTE_CONTROL: DeviceTypeDefinition({\n        name: \"MA-video-remotecontrol\",\n        code: 0x002a,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredClientClusters: [\n            MatterClusters.OnOffCluster.id,\n            MatterClusters.MediaPlaybackCluster.id,\n            MatterClusters.KeypadInputCluster.id,\n        ],\n        optionalClientClusters: [\n            MatterClusters.LevelControlCluster.id,\n            MatterClusters.WakeOnLanCluster.id,\n            MatterClusters.ChannelCluster.id,\n            MatterClusters.TargetNavigatorCluster.id,\n            MatterClusters.MediaInputCluster.id,\n            MatterClusters.LowPowerCluster.id,\n            MatterClusters.ContentLauncherCluster.id,\n            MatterClusters.AudioOutputCluster.id,\n            MatterClusters.ApplicationLauncherCluster.id,\n            MatterClusters.AccountLoginCluster.id,\n        ],\n    }),\n\n    /* ---------------------------- Generic --------------------------- */\n    /**\n     * This defines conformance to the Mode device type.\n     * @see {@link MatterSpecification.v10.Device} \u00A7 11.1\n     */\n    MODE_SELECT: DeviceTypeDefinition({\n        name: \"MA-modeselect\",\n        code: 0x0027,\n        deviceClass: DeviceClasses.Simple,\n        revision: 1,\n        requiredServerClusters: [MatterClusters.ModeSelectCluster.id],\n    }),\n};\n\nexport const UnknownDeviceType = (code: number) =>\n    DeviceTypeDefinition({\n        code,\n        name: `Unknown Device Type ${code}`,\n        deviceClass: DeviceClasses.Simple,\n        revision: 0,\n        unknown: true,\n    });\n\nexport function getDeviceTypeDefinitionByCode(code: number): DeviceTypeDefinition | undefined {\n    for (const key in DeviceTypes) {\n        if (DeviceTypes[key].code === code) {\n            return DeviceTypes[key];\n        }\n    }\n    return undefined;\n}\n"],
  "mappings": "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",
  "names": ["DeviceClasses"]
}
