/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { VendorId } from "../datatype/VendorId.js";
import { ByteArray } from "../util/ByteArray.js";
export interface BtpHandshakeRequest {
    versions: number[];
    attMtu: number;
    clientWindowSize: number;
}
export interface BtpHandshakeResponse {
    version: number;
    attMtu: number;
    windowSize: number;
}
export interface BtpPacketPayload {
    ackNumber?: number;
    sequenceNumber: number;
    messageLength?: number;
    segmentPayload?: ByteArray;
}
export interface DecodedBtpPacketPayload extends BtpPacketPayload {
    segmentPayload: ByteArray;
}
export interface BtpHeader {
    isHandshakeRequest: boolean;
    hasManagementOpcode: boolean;
    hasAckNumber: boolean;
    isEndingSegment: boolean;
    isContinuingSegment: boolean;
    isBeginningSegment: boolean;
}
export interface BtpPacket {
    header: BtpHeader;
    payload: BtpPacketPayload;
}
export interface DecodedBtpPacket {
    header: BtpHeader;
    payload: DecodedBtpPacketPayload;
}
export declare enum BtpHeaderBits {
    HandshakeBit = 64,
    ManagementMsg = 32,
    AckMsg = 8,
    EndSegment = 4,
    ContinuingSegment = 2,
    BeginSegment = 1
}
export declare enum BtpOpcode {
    HandshakeManagementOpcode = 108
}
export declare class BtpCodec {
    static decodeBtpHandshakeRequest(data: ByteArray): BtpHandshakeRequest;
    static decodeBtpPacket(data: ByteArray): DecodedBtpPacket;
    static encodeBtpPacket({ header, payload }: BtpPacket): ByteArray;
    static encodeBtpHandshakeRequest({ versions, attMtu, clientWindowSize }: BtpHandshakeRequest): ByteArray;
    static encodeBtpHandshakeResponse({ version, attMtu, windowSize }: BtpHandshakeResponse): ByteArray;
    private static decodeBtpPacketPayload;
    private static encodeBtpPacketPayload;
    private static decodeHandshakeRequestPayload;
    static decodeBtpHandshakeResponsePayload(data: ByteArray): BtpHandshakeResponse;
    private static decodeBtpPacketHeader;
    private static encodeBtpPacketHeader;
    static encodeBleAdvertisementData(discriminator: number, vendorId: VendorId, productId: number, hasAdditionalAdvertisementData?: boolean): Uint8Array;
    static decodeBleAdvertisementData(data: ByteArray): {
        discriminator: number;
        vendorId: number;
        productId: number;
        hasAdditionalAdvertisementData: boolean;
    };
    static decodeBleAdvertisementServiceData(data: ByteArray): {
        discriminator: number;
        vendorId: number;
        productId: number;
        hasAdditionalAdvertisementData: boolean;
    };
}
//# sourceMappingURL=BtpCodec.d.ts.map