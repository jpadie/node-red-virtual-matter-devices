{
  "version": 3,
  "sources": ["../../../src/codec/DerCodec.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { UnexpectedDataError } from \"../common/MatterError.js\";\nimport { ByteArray, Endian } from \"../util/ByteArray.js\";\nimport { DataReader } from \"../util/DataReader.js\";\nimport { toHex } from \"../util/Number.js\";\nimport { isObject } from \"../util/Type.js\";\n\nexport const OBJECT_ID_KEY = \"_objectId\";\nexport const TAG_ID_KEY = \"_tag\";\nexport const BYTES_KEY = \"_bytes\";\nexport const ELEMENTS_KEY = \"_elements\";\nexport const BITS_PADDING = \"_padding\";\nexport const TYPE_OVERRIDE_KEY = \"_type\";\nexport const RAW_DATA_KEY = \"_raw\";\n\nexport enum DerType {\n    Boolean = 0x01,\n    Integer = 0x02,\n    BitString = 0x03,\n    OctetString = 0x04,\n    Null = 0x05,\n    ObjectIdentifier = 0x06,\n    UTF8String = 0x0c,\n    Sequence = 0x10,\n    Set = 0x11,\n    PrintableString = 0x13,\n    T16String = 0x14,\n    IA5String = 0x16,\n    UtcDate = 0x17,\n    GeneralizedTime = 0x18,\n}\n\nconst CONSTRUCTED = 0x20;\n\nconst enum DerClass {\n    Universal = 0x00,\n    Application = 0x40,\n    ContextSpecific = 0x80,\n    Private = 0xc0,\n}\nexport const ObjectId = (objectId: string) => ({\n    [TAG_ID_KEY]: DerType.ObjectIdentifier as number,\n    [BYTES_KEY]: ByteArray.fromHex(objectId),\n});\nexport const DerObject = (objectId: string, content: any = {}) => ({ [OBJECT_ID_KEY]: ObjectId(objectId), ...content });\nexport const BitByteArray = (data: ByteArray, padding = 0) => ({\n    [TAG_ID_KEY]: DerType.BitString as number,\n    [BYTES_KEY]: data,\n    [BITS_PADDING]: padding,\n});\nexport const ContextTagged = (tagId: number, value?: any) => ({\n    [TAG_ID_KEY]: tagId | DerClass.ContextSpecific | CONSTRUCTED,\n    [BYTES_KEY]: value === undefined ? new ByteArray(0) : DerCodec.encode(value),\n});\nexport const ContextTaggedBytes = (tagId: number, value: ByteArray) => ({\n    [TAG_ID_KEY]: tagId | DerClass.ContextSpecific,\n    [BYTES_KEY]: value,\n});\nexport const DatatypeOverride = (type: DerType, value: any) => ({\n    [TYPE_OVERRIDE_KEY]: type,\n    [RAW_DATA_KEY]: value,\n});\nexport const RawBytes = (bytes: ByteArray) => ({\n    [BYTES_KEY]: bytes,\n});\n\nexport type DerNode = {\n    [TAG_ID_KEY]: number;\n    [BYTES_KEY]: ByteArray;\n    [ELEMENTS_KEY]?: DerNode[];\n    [BITS_PADDING]?: number;\n};\n\nexport class DerCodec {\n    static encode(value: any): ByteArray {\n        if (Array.isArray(value)) {\n            return this.encodeArray(value);\n        } else if (value instanceof ByteArray) {\n            return this.encodeOctetString(value);\n        } else if (value instanceof Date) {\n            return this.encodeDate(value);\n        } else if (typeof value === \"string\") {\n            return this.encodeString(value);\n        } else if (typeof value === \"number\" || typeof value === \"bigint\") {\n            return this.encodeInteger(value);\n        } else if (typeof value === \"boolean\") {\n            return this.encodeBoolean(value);\n        } else if (value === undefined) {\n            return new ByteArray(0);\n        } else if (isObject(value)) {\n            if (value[TAG_ID_KEY] !== undefined) {\n                const { [TAG_ID_KEY]: tagId, [BITS_PADDING]: bitsPadding, [BYTES_KEY]: bytes } = value;\n                if (typeof tagId !== \"number\") {\n                    throw new UnexpectedDataError(\"Tag ID is non-numeric\");\n                }\n                if (bitsPadding !== undefined && typeof bitsPadding !== \"number\") {\n                    throw new UnexpectedDataError(\"Bits padding is not a numeric byte value\");\n                }\n                if (bytes === undefined || !ArrayBuffer.isView(bytes)) {\n                    throw new UnexpectedDataError(\"DER bytes is not a byte array\");\n                }\n                return this.encodeAsn1(\n                    tagId,\n                    bitsPadding === undefined\n                        ? (bytes as Uint8Array)\n                        : ByteArray.concat(ByteArray.of(bitsPadding), bytes as Uint8Array),\n                );\n            } else if (value[TYPE_OVERRIDE_KEY] !== undefined && value[RAW_DATA_KEY] !== undefined) {\n                if (value[TYPE_OVERRIDE_KEY] === DerType.Integer && value[RAW_DATA_KEY] instanceof ByteArray) {\n                    return this.encodeInteger(value[RAW_DATA_KEY]);\n                } else if (value[TYPE_OVERRIDE_KEY] === DerType.BitString && typeof value[RAW_DATA_KEY] === \"number\") {\n                    return this.encodeBitString(value[RAW_DATA_KEY]);\n                } else if (\n                    value[TYPE_OVERRIDE_KEY] === DerType.PrintableString &&\n                    typeof value[RAW_DATA_KEY] === \"string\"\n                ) {\n                    return this.encodePrintableString(value[RAW_DATA_KEY]);\n                } else if (value[TYPE_OVERRIDE_KEY] === DerType.IA5String && typeof value[RAW_DATA_KEY] === \"string\") {\n                    return this.encodeIA5String(value[RAW_DATA_KEY]);\n                } else {\n                    throw new UnexpectedDataError(`Unsupported override type ${value[TYPE_OVERRIDE_KEY]}`);\n                }\n            } else if (\n                value[BYTES_KEY] !== undefined &&\n                value[BYTES_KEY] instanceof ByteArray &&\n                Object.keys(value).length === 1\n            ) {\n                // Raw Data\n                return value[BYTES_KEY];\n            } else if (value[TYPE_OVERRIDE_KEY] === undefined && value[BYTES_KEY] === undefined) {\n                return this.encodeObject(value);\n            } else {\n                throw new UnexpectedDataError(`Unsupported object type ${typeof value}`);\n            }\n        } else {\n            throw new UnexpectedDataError(`Unsupported type ${typeof value}`);\n        }\n    }\n\n    private static encodeDate(date: Date) {\n        if (date.getFullYear() > 2049) {\n            // Dates 2050+ are encoded as GeneralizedTime. This includes the special Non Well Defined date 9999-12-31.\n            return this.encodeAsn1(\n                DerType.GeneralizedTime,\n                ByteArray.fromString(\n                    date\n                        .toISOString()\n                        .replace(/[-:.T]/g, \"\")\n                        .slice(0, 14) + \"Z\",\n                ),\n            );\n        } else\n            return this.encodeAsn1(\n                DerType.UtcDate,\n                ByteArray.fromString(\n                    date\n                        .toISOString()\n                        .replace(/[-:.T]/g, \"\")\n                        .slice(2, 14) + \"Z\",\n                ),\n            );\n    }\n\n    private static encodeBoolean(bool: boolean) {\n        return this.encodeAsn1(DerType.Boolean, ByteArray.of(bool ? 0xff : 0));\n    }\n\n    private static encodeArray(array: Array<any>) {\n        return this.encodeAsn1(\n            DerType.Set | CONSTRUCTED,\n            ByteArray.concat(...array.map(element => this.encode(element))),\n        );\n    }\n\n    private static encodeOctetString(value: ByteArray) {\n        return this.encodeAsn1(DerType.OctetString, value);\n    }\n\n    private static encodeObject(object: any) {\n        const attributes = new Array<ByteArray>();\n        for (const key in object) {\n            attributes.push(this.encode(object[key]));\n        }\n        return this.encodeAsn1(DerType.Sequence | CONSTRUCTED, ByteArray.concat(...attributes));\n    }\n\n    private static encodeString(value: string) {\n        return this.encodeAsn1(DerType.UTF8String, ByteArray.fromString(value));\n    }\n\n    private static encodePrintableString(value: string) {\n        if (!/^[A-Za-z0-9 '()+,-./:=?]*$/g.test(value)) {\n            throw new UnexpectedDataError(`String ${value} is not a printable string.`);\n        }\n        return this.encodeAsn1(DerType.PrintableString, ByteArray.fromString(value));\n    }\n\n    private static encodeIA5String(value: string) {\n        /*eslint-disable-next-line no-control-regex */\n        if (!/^[\\x00-\\x7F]*$/.test(value)) {\n            throw new UnexpectedDataError(`String ${value} is not an IA5 string.`);\n        }\n        return this.encodeAsn1(DerType.IA5String, ByteArray.fromString(value));\n    }\n\n    private static encodeInteger(value: number | bigint | ByteArray) {\n        const isByteArray = ArrayBuffer.isView(value);\n        let valueBytes: ByteArray;\n        if (isByteArray) {\n            valueBytes = value;\n        } else {\n            valueBytes = ByteArray.fromHex(toHex(value));\n        }\n        const byteArray = ByteArray.concat(new ByteArray(1), valueBytes);\n        const dataView = byteArray.getDataView();\n        let start = 0;\n        while (true) {\n            if (dataView.getUint8(start) !== 0) break;\n            if (dataView.getUint8(start + 1) >= 0x80) break;\n            start++;\n            if (start === byteArray.length - 1) break;\n        }\n        return this.encodeAsn1(DerType.Integer, byteArray.slice(start));\n    }\n\n    private static encodeBitString(value: number) {\n        const reversedBits = value.toString(2).padStart(8, \"0\");\n        const unusedBits = reversedBits.indexOf(\"1\");\n        const bitByteArray = ByteArray.of(parseInt(reversedBits.split(\"\").reverse().join(\"\"), 2));\n        return this.encode(BitByteArray(bitByteArray, unusedBits === -1 ? 8 : unusedBits));\n    }\n\n    private static encodeLengthBytes(value: number) {\n        const byteArray = new ByteArray(5);\n        const dataView = byteArray.getDataView();\n        dataView.setUint32(1, value);\n        let start = 0;\n        while (true) {\n            if (dataView.getUint8(start) !== 0) break;\n            start++;\n            if (start === 4) break;\n        }\n        const lengthLength = byteArray.length - start;\n        if (lengthLength > 1 || dataView.getUint8(start) >= 0x80) {\n            start--;\n            dataView.setUint8(start, 0x80 + lengthLength);\n        }\n        return byteArray.slice(start);\n    }\n\n    private static encodeAsn1(tag: number, data: ByteArray) {\n        return ByteArray.concat(ByteArray.of(tag), this.encodeLengthBytes(data.length), data);\n    }\n\n    static decode(data: ByteArray): DerNode {\n        return this.decodeRec(new DataReader(data, Endian.Big));\n    }\n\n    private static decodeRec(reader: DataReader<Endian.Big>): DerNode {\n        const { tag, bytes } = this.decodeAsn1(reader);\n        if (tag === DerType.BitString)\n            return { [TAG_ID_KEY]: tag, [BYTES_KEY]: bytes.slice(1), [BITS_PADDING]: bytes[0] };\n        if ((tag & CONSTRUCTED) === 0) return { [TAG_ID_KEY]: tag, [BYTES_KEY]: bytes };\n        const elementsReader = new DataReader(bytes, Endian.Big);\n        const elements: DerNode[] = [];\n        while (elementsReader.getRemainingBytesCount() > 0) {\n            elements.push(this.decodeRec(elementsReader));\n        }\n        return { [TAG_ID_KEY]: tag, [BYTES_KEY]: bytes, [ELEMENTS_KEY]: elements };\n    }\n\n    private static decodeAsn1(reader: DataReader<Endian.Big>): { tag: number; bytes: ByteArray } {\n        const tag = reader.readUInt8();\n        let length = reader.readUInt8();\n        if ((length & 0x80) !== 0) {\n            let lengthLength = length & 0x7f;\n            length = 0;\n            while (lengthLength > 0) {\n                length = (length << 8) + reader.readUInt8();\n                lengthLength--;\n            }\n        }\n        const bytes = reader.readByteArray(length);\n        return { tag, bytes };\n    }\n}\n"],
  "mappings": "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",
  "names": ["DerType", "DerClass"]
}
