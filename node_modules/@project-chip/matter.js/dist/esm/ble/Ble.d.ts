/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { Channel, ChannelType } from "../common/Channel.js";
import { InstanceBroadcaster } from "../common/InstanceBroadcaster.js";
import { MatterError } from "../common/MatterError.js";
import { Scanner } from "../common/Scanner.js";
import { TransportInterface } from "../common/TransportInterface.js";
import { NetInterface } from "../net/NetInterface.js";
import { ByteArray } from "../util/ByteArray.js";
export declare class BleError extends MatterError {
}
declare function BleDisabled(): Ble;
export declare abstract class Ble {
    static get: typeof BleDisabled;
    static get enabled(): boolean;
    abstract getBlePeripheralInterface(): TransportInterface;
    abstract getBleCentralInterface(): NetInterface;
    abstract getBleBroadcaster(additionalAdvertisementData?: ByteArray): InstanceBroadcaster;
    abstract getBleScanner(): Scanner;
}
export declare abstract class BleChannel<T> implements Channel<T> {
    readonly maxPayloadSize: number;
    readonly isReliable = true;
    readonly type = ChannelType.BLE;
    abstract name: string;
    abstract send(data: T): Promise<void>;
    abstract close(): Promise<void>;
}
export {};
//# sourceMappingURL=Ble.d.ts.map