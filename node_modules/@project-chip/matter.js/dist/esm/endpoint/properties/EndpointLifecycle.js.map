{
  "version": 3,
  "sources": ["../../../../src/endpoint/properties/EndpointLifecycle.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Lifecycle } from \"../../common/Lifecycle.js\";\nimport { ImplementationError } from \"../../common/MatterError.js\";\nimport { Diagnostic } from \"../../log/Diagnostic.js\";\nimport { Logger } from \"../../log/Logger.js\";\nimport type { Node } from \"../../node/Node.js\";\nimport { AsyncObservable, Observable } from \"../../util/Observable.js\";\nimport type { Endpoint } from \"../Endpoint.js\";\n\nconst logger = Logger.get(\"PartLifecycle\");\n\n/**\n * State related to a {@link Endpoint}'s lifecycle.\n */\nexport class EndpointLifecycle {\n    #endpoint: Endpoint;\n    #isEssential: boolean;\n    #isInstalled = false;\n    #isReady = false;\n    #isPartsReady = false;\n    #hasId = false;\n    #hasNumber = false;\n    #installed = Observable<[]>(error => this.emitError(\"installed\", error));\n    #ready = Observable<[]>(error => this.emitError(\"ready\", error));\n    #partsReady = Observable<[]>(error => this.emitError(\"partsReady\", error));\n    #destroyed = Observable<[]>(error => this.emitError(\"destroyed\", error));\n    #changed = Observable<[type: EndpointLifecycle.Change, endpoint: Endpoint]>(error =>\n        this.emitError(\"changed\", error),\n    );\n    #reset = AsyncObservable<[]>();\n    #queuedUpdates?: Array<EndpointLifecycle.Change>;\n\n    /**\n     * Emitted when an endpoint is installed into an initialized owner.\n     */\n    get installed() {\n        return this.#installed;\n    }\n\n    /**\n     * Emitted when an endpoint is fully initialized excepting children.\n     */\n    get ready() {\n        return this.#ready;\n    }\n\n    /**\n     * Emitted when an endpoint is fully initialized including children.\n     */\n    get partsReady() {\n        return this.#partsReady;\n    }\n\n    /**\n     * @deprecated use {@link partsReady}\n     */\n    get treeReady() {\n        return this.partsReady;\n    }\n\n    /**\n     * Emitted when the endpoint is destroyed.\n     */\n    get destroyed() {\n        return this.#destroyed;\n    }\n\n    /**\n     * Bubbling event indicating changes to endpoint structure.\n     */\n    get changed() {\n        return this.#changed;\n    }\n\n    /**\n     * Emitted on factory reset.\n     */\n    get reset() {\n        return this.#reset;\n    }\n\n    /**\n     * Is the {@link Endpoint} installed in a {@link Node}?\n     */\n    get isInstalled() {\n        return this.#isInstalled;\n    }\n\n    /**\n     * Is the {@link Endpoint} fully initialized, excepting children?\n     */\n    get isReady() {\n        return this.#isReady;\n    }\n\n    /**\n     * Is the {@link Endpoint} fully initialized, including children?\n     */\n    get isPartsReady() {\n        return this.#isPartsReady;\n    }\n\n    /**\n     * @deprecated use {@link isPartsReady}\n     */\n    get isTreeReady() {\n        return this.isPartsReady;\n    }\n\n    /**\n     * Designates endpoint as essential.\n     *\n     * By default endpoints are considered \"essential\".  An essential endpoint must initialize successfully or an error\n     * is thrown.  Non-essential endpoints may be installed even if they have errors.\n     *\n     * You may configure this property via {@link Endpoint.Configuration#isEssential}.\n     */\n    get isEssential() {\n        return this.#isEssential;\n    }\n\n    /**\n     * Does the endpoint have an ID?\n     */\n    get hasId() {\n        return this.#hasId;\n    }\n\n    /**\n     * Does the endpoint have an endpoint number?\n     */\n    get hasNumber() {\n        return this.#hasNumber;\n    }\n\n    constructor(endpoint: Endpoint, isEssential?: boolean) {\n        this.#endpoint = endpoint;\n        this.#isEssential = isEssential ?? true;\n\n        // Bubble crash events\n        endpoint.construction.change.on(status => {\n            if (status === Lifecycle.Status.Crashed) {\n                this.change(EndpointLifecycle.Change.Crashed);\n            }\n        });\n    }\n\n    /**\n     * Bubble a lifecycle change event from a child.\n     */\n    bubble(type: EndpointLifecycle.Change, endpoint: Endpoint) {\n        this.#changed.emit(type, endpoint);\n    }\n\n    /**\n     * Inform the Lifecycle of a change in lifecycle.\n     */\n    change(type: EndpointLifecycle.Change) {\n        // Update state\n        switch (type) {\n            case EndpointLifecycle.Change.Installed:\n                this.#isInstalled = true;\n                break;\n\n            case EndpointLifecycle.Change.Ready:\n                // Sanity checks\n                if (!this.#hasId) {\n                    throw new ImplementationError(\"Endpoint reports as ready but has no ID assigned\");\n                }\n                if (!this.#hasNumber) {\n                    throw new ImplementationError(\"Endpoint reports as ready but has no number assigned\");\n                }\n                this.#isReady = true;\n                break;\n\n            case EndpointLifecycle.Change.PartsReady:\n                // Sanity checks\n                if (!this.#isReady) {\n                    throw new ImplementationError(\"Endpoint reports as parts-ready but is not itself ready\");\n                }\n                this.#isPartsReady = true;\n                break;\n\n            case EndpointLifecycle.Change.IdAssigned:\n                this.#hasId = true;\n                break;\n\n            case EndpointLifecycle.Change.NumberAssigned:\n                this.#hasNumber = true;\n                break;\n        }\n\n        // We want events to trigger in correct order but some of them cascade.\n        // So if we're currently emitting, enqueue\n        if (this.#queuedUpdates) {\n            this.#queuedUpdates?.push(type);\n            return;\n        }\n\n        // Emit events\n        this.#queuedUpdates = [type];\n        try {\n            while (this.#queuedUpdates.length) {\n                const type = this.#queuedUpdates[0];\n                this.#queuedUpdates.shift();\n\n                // Emit change event\n                this.#changed.emit(type, this.#endpoint);\n\n                // Emit endpoint-specific events\n                const observable = (this as unknown as Record<string, Observable>)[type];\n                if (observable !== undefined) {\n                    observable.emit();\n                }\n            }\n        } finally {\n            this.#queuedUpdates = undefined;\n        }\n    }\n\n    protected emitError(name: string, error: Error) {\n        logger.error(\"Unhandled error in\", Diagnostic.strong(`${this.#endpoint}.lifecycle.${name}`), \"handler:\", error);\n    }\n\n    /**\n     * Revert to uninstalled state.\n     */\n    resetting() {\n        this.#isInstalled = this.#isReady = this.#isPartsReady = false;\n    }\n}\n\nexport namespace EndpointLifecycle {\n    export enum Change {\n        Installed = \"installed\",\n        Ready = \"ready\",\n        PartsReady = \"partsReady\",\n        Crashed = \"crashed\",\n        Destroyed = \"destroyed\",\n        ServersChanged = \"serversChanged\",\n        ClientsChanged = \"clientsChanged\",\n        IdAssigned = \"idAssigned\",\n        NumberAssigned = \"numberAssigned\",\n    }\n}\n"],
  "mappings": "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",
  "names": ["type", "EndpointLifecycle", "Change"]
}
