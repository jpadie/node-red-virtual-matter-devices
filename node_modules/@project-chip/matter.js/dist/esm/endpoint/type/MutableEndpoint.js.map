{
  "version": 3,
  "sources": ["../../../../src/endpoint/type/MutableEndpoint.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Behavior } from \"../../behavior/Behavior.js\";\nimport { SupportedBehaviors } from \"../properties/SupportedBehaviors.js\";\nimport { EndpointType } from \"./EndpointType.js\";\n\n/**\n * A MutableEndpoint is an EndpointType with factory functions that make it convenient to reconfigure the endpoint.\n */\nexport interface MutableEndpoint extends EndpointType {\n    /**\n     * Access default state values.\n     */\n    defaults: {};\n\n    /**\n     * Define an endpoint like this one with different defaults.  Only updates values present in the input object.\n     */\n    set(defaults: {}): MutableEndpoint;\n\n    /**\n     * Define an endpoint like this one with additional and/or replacement server behaviors.\n     */\n    with(...behaviors: SupportedBehaviors.List): MutableEndpoint;\n}\n\n/**\n * Define a new type of endpoint with factory functions.\n */\nexport function MutableEndpoint<const T extends EndpointType.Options>(options: T) {\n    const type = EndpointType(options);\n    let defaults: undefined | Record<string, object>;\n\n    return {\n        ...type,\n\n        get defaults() {\n            if (!defaults) {\n                defaults = {} as Record<string, object>;\n\n                for (const name in type.behaviors) {\n                    defaults[name] = (type.behaviors[name] as Behavior.Type).defaults;\n                }\n            }\n\n            return defaults;\n        },\n\n        set(this: MutableEndpoint, defaults: SupportedBehaviors.InputStateOf<typeof type.behaviors>) {\n            const newBehaviors = Array<Behavior.Type>();\n\n            for (const name in this.behaviors) {\n                const updates = (defaults as any)[name];\n                const behavior = this.behaviors[name];\n                if (updates) {\n                    newBehaviors.push(behavior.set(updates));\n                }\n            }\n\n            return this.with(...newBehaviors);\n        },\n\n        with(this: MutableEndpoint, ...behaviors: Behavior.Type[]) {\n            return MutableEndpoint({\n                ...options,\n                behaviors: SupportedBehaviors.extend(this.behaviors, behaviors),\n            });\n        },\n    } as unknown as MutableEndpoint.With<\n        EndpointType.For<T>,\n        T[\"behaviors\"] extends SupportedBehaviors ? T[\"behaviors\"] : {}\n    >;\n}\n\nexport namespace MutableEndpoint {\n    export type With<B extends EndpointType, SB extends SupportedBehaviors> = Omit<\n        B,\n        \"behaviors\" | \"defaults\" | \"set\" | \"with\"\n    > & {\n        behaviors: B[\"behaviors\"] & SB;\n\n        /**\n         * Access default state values.\n         */\n        defaults: SupportedBehaviors.StateOf<SB>;\n\n        /**\n         * Define an endpoint like this one with different defaults.  Only updates values present in the input object.\n         */\n        set(defaults: SupportedBehaviors.InputStateOf<SB>): With<B, SB>;\n\n        /**\n         * Define an endpoint like this one with additional and/or replacement server behaviors.\n         */\n        with<const BL extends SupportedBehaviors.List>(...behaviors: BL): With<B, SupportedBehaviors.With<SB, BL>>;\n    };\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,SAAS,0BAA0B;AACnC,SAAS,oBAAoB;AAyBtB,SAAS,gBAAsD,SAAY;AAC9E,QAAM,OAAO,aAAa,OAAO;AACjC,MAAI;AAEJ,SAAO;AAAA,IACH,GAAG;AAAA,IAEH,IAAI,WAAW;AACX,UAAI,CAAC,UAAU;AACX,mBAAW,CAAC;AAEZ,mBAAW,QAAQ,KAAK,WAAW;AAC/B,mBAAS,IAAI,IAAK,KAAK,UAAU,IAAI,EAAoB;AAAA,QAC7D;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA,IAEA,IAA2BA,WAAkE;AACzF,YAAM,eAAe,MAAqB;AAE1C,iBAAW,QAAQ,KAAK,WAAW;AAC/B,cAAM,UAAWA,UAAiB,IAAI;AACtC,cAAM,WAAW,KAAK,UAAU,IAAI;AACpC,YAAI,SAAS;AACT,uBAAa,KAAK,SAAS,IAAI,OAAO,CAAC;AAAA,QAC3C;AAAA,MACJ;AAEA,aAAO,KAAK,KAAK,GAAG,YAAY;AAAA,IACpC;AAAA,IAEA,QAA+B,WAA4B;AACvD,aAAO,gBAAgB;AAAA,QACnB,GAAG;AAAA,QACH,WAAW,mBAAmB,OAAO,KAAK,WAAW,SAAS;AAAA,MAClE,CAAC;AAAA,IACL;AAAA,EACJ;AAIJ;",
  "names": ["defaults"]
}
