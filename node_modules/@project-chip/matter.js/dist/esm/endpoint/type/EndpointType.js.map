{
  "version": 3,
  "sources": ["../../../../src/endpoint/type/EndpointType.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DeviceTypeId } from \"../../datatype/DeviceTypeId.js\";\nimport { DeviceClasses } from \"../../device/DeviceTypes.js\";\nimport { SupportedBehaviors } from \"../properties/SupportedBehaviors.js\";\n\n/**\n * An EndpointType defines functionality for an endpoint.\n */\nexport interface EndpointType {\n    name: string;\n    deviceType: DeviceTypeId;\n    deviceRevision: number;\n    deviceClass: DeviceClasses;\n    behaviors: SupportedBehaviors;\n    requirements: EndpointType.Requirements;\n}\n\n/**\n * Define a new type of endpoint.\n */\nexport function EndpointType<const T extends EndpointType.Options>(options: T) {\n    return {\n        ...options,\n        deviceClass: options.deviceClass ?? DeviceClasses.Simple,\n        behaviors: options.behaviors ?? {},\n        requirements: options.requirements ?? {},\n    } as unknown as EndpointType.For<T>;\n}\n\nexport namespace EndpointType {\n    /**\n     * An endpoint type with no behaviors or requirements.\n     */\n    export interface Empty extends Omit<EndpointType, \"behaviors\" | \"requirements\"> {\n        behaviors: {};\n        requirements: {};\n    }\n\n    /**\n     * A fully typed {@link EndpointType} defined by {@link EndpointType.Options}.\n     */\n    export type For<T extends EndpointType.Options> = {\n        name: T[\"name\"];\n        deviceType: DeviceTypeId;\n        deviceRevision: number;\n        deviceClass: DeviceClasses;\n        behaviors: T[\"behaviors\"] extends SupportedBehaviors ? T[\"behaviors\"] : {};\n        requirements: T[\"requirements\"] extends Requirements ? T[\"requirements\"] : {};\n    };\n\n    /**\n     * Endpoint configuration.\n     */\n    export interface Options {\n        name: string;\n        deviceType: number;\n        deviceRevision: number;\n        deviceClass?: DeviceClasses;\n        behaviors?: SupportedBehaviors;\n        requirements?: Requirements;\n    }\n\n    /**\n     * Standard dependencies for an endpoint per the Matter specification.\n     */\n    export interface Requirements {\n        server?: {\n            mandatory?: SupportedBehaviors;\n            optional?: SupportedBehaviors;\n        };\n\n        client?: {\n            mandatory?: SupportedBehaviors;\n            optional?: SupportedBehaviors;\n        };\n    }\n}\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,SAAS,qBAAqB;AAkBvB,SAAS,aAAmD,SAAY;AAC3E,SAAO;AAAA,IACH,GAAG;AAAA,IACH,aAAa,QAAQ,eAAe,cAAc;AAAA,IAClD,WAAW,QAAQ,aAAa,CAAC;AAAA,IACjC,cAAc,QAAQ,gBAAgB,CAAC;AAAA,EAC3C;AACJ;",
  "names": []
}
