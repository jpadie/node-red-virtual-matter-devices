{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/system/RootEndpoint.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { PartsBehavior } from \"../../../behavior/system/parts/PartsBehavior.js\";\nimport { IndexBehavior } from \"../../../behavior/system/index/IndexBehavior.js\";\nimport {\n    BasicInformationServer as BaseBasicInformationServer\n} from \"../../../behavior/definitions/basic-information/BasicInformationServer.js\";\nimport {\n    AccessControlServer as BaseAccessControlServer\n} from \"../../../behavior/definitions/access-control/AccessControlServer.js\";\nimport {\n    GroupKeyManagementServer as BaseGroupKeyManagementServer\n} from \"../../../behavior/definitions/group-key-management/GroupKeyManagementServer.js\";\nimport {\n    GeneralCommissioningServer as BaseGeneralCommissioningServer\n} from \"../../../behavior/definitions/general-commissioning/GeneralCommissioningServer.js\";\nimport {\n    AdministratorCommissioningServer as BaseAdministratorCommissioningServer\n} from \"../../../behavior/definitions/administrator-commissioning/AdministratorCommissioningServer.js\";\nimport {\n    OperationalCredentialsServer as BaseOperationalCredentialsServer\n} from \"../../../behavior/definitions/operational-credentials/OperationalCredentialsServer.js\";\nimport {\n    GeneralDiagnosticsServer as BaseGeneralDiagnosticsServer\n} from \"../../../behavior/definitions/general-diagnostics/GeneralDiagnosticsServer.js\";\nimport {\n    PowerSourceConfigurationServer as BasePowerSourceConfigurationServer\n} from \"../../../behavior/definitions/power-source-configuration/PowerSourceConfigurationServer.js\";\nimport {\n    TimeSynchronizationServer as BaseTimeSynchronizationServer\n} from \"../../../behavior/definitions/time-synchronization/TimeSynchronizationServer.js\";\nimport {\n    NetworkCommissioningServer as BaseNetworkCommissioningServer\n} from \"../../../behavior/definitions/network-commissioning/NetworkCommissioningServer.js\";\nimport {\n    LocalizationConfigurationServer as BaseLocalizationConfigurationServer\n} from \"../../../behavior/definitions/localization-configuration/LocalizationConfigurationServer.js\";\nimport {\n    TimeFormatLocalizationServer as BaseTimeFormatLocalizationServer\n} from \"../../../behavior/definitions/time-format-localization/TimeFormatLocalizationServer.js\";\nimport {\n    UnitLocalizationServer as BaseUnitLocalizationServer\n} from \"../../../behavior/definitions/unit-localization/UnitLocalizationServer.js\";\nimport {\n    DiagnosticLogsServer as BaseDiagnosticLogsServer\n} from \"../../../behavior/definitions/diagnostic-logs/DiagnosticLogsServer.js\";\nimport {\n    SoftwareDiagnosticsServer as BaseSoftwareDiagnosticsServer\n} from \"../../../behavior/definitions/software-diagnostics/SoftwareDiagnosticsServer.js\";\nimport {\n    EthernetNetworkDiagnosticsServer as BaseEthernetNetworkDiagnosticsServer\n} from \"../../../behavior/definitions/ethernet-network-diagnostics/EthernetNetworkDiagnosticsServer.js\";\nimport {\n    WiFiNetworkDiagnosticsServer as BaseWiFiNetworkDiagnosticsServer\n} from \"../../../behavior/definitions/wi-fi-network-diagnostics/WiFiNetworkDiagnosticsServer.js\";\nimport {\n    ThreadNetworkDiagnosticsServer as BaseThreadNetworkDiagnosticsServer\n} from \"../../../behavior/definitions/thread-network-diagnostics/ThreadNetworkDiagnosticsServer.js\";\nimport {\n    IcdManagementServer as BaseIcdManagementServer\n} from \"../../../behavior/definitions/icd-management/IcdManagementServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { DeviceClasses } from \"../../../device/DeviceTypes.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * This defines conformance for a root node endpoint (see System Model specification). This endpoint is akin to a \"read\n * me first\" endpoint that describes itself and the other endpoints that make up the node.\n *\n *   \u2022 Device types with Endpoint scope shall NOT be supported on the same endpoint as this device type.\n *\n *   \u2022 Clusters with an Application role shall NOT be supported on the same endpoint as this device type.\n *\n *   \u2022 Other device types with Node scope may be supported on the same endpoint as this device type.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 2.1\n */\nexport interface RootEndpoint extends Identity<typeof RootEndpointDefinition> {}\n\nexport namespace RootRequirements {\n    /**\n     * The BasicInformation cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link BasicInformationServer} for convenience.\n     */\n    export const BasicInformationServer = BaseBasicInformationServer;\n\n    /**\n     * The AccessControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link AccessControlServer} for convenience.\n     */\n    export const AccessControlServer = BaseAccessControlServer;\n\n    /**\n     * The GroupKeyManagement cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupKeyManagementServer} for convenience.\n     */\n    export const GroupKeyManagementServer = BaseGroupKeyManagementServer;\n\n    /**\n     * The GeneralCommissioning cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GeneralCommissioningServer} for convenience.\n     */\n    export const GeneralCommissioningServer = BaseGeneralCommissioningServer;\n\n    /**\n     * The AdministratorCommissioning cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link AdministratorCommissioningServer} for convenience.\n     */\n    export const AdministratorCommissioningServer = BaseAdministratorCommissioningServer;\n\n    /**\n     * The OperationalCredentials cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OperationalCredentialsServer} for convenience.\n     */\n    export const OperationalCredentialsServer = BaseOperationalCredentialsServer;\n\n    /**\n     * The GeneralDiagnostics cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GeneralDiagnosticsServer} for convenience.\n     */\n    export const GeneralDiagnosticsServer = BaseGeneralDiagnosticsServer;\n\n    /**\n     * The PowerSourceConfiguration cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link PowerSourceConfigurationServer} for convenience.\n     */\n    export const PowerSourceConfigurationServer = BasePowerSourceConfigurationServer;\n\n    /**\n     * The TimeSynchronization cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TimeSynchronizationServer} for convenience.\n     */\n    export const TimeSynchronizationServer = BaseTimeSynchronizationServer;\n\n    /**\n     * The NetworkCommissioning cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link NetworkCommissioningServer} for convenience.\n     */\n    export const NetworkCommissioningServer = BaseNetworkCommissioningServer;\n\n    /**\n     * The LocalizationConfiguration cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link LocalizationConfigurationServer} for convenience.\n     */\n    export const LocalizationConfigurationServer = BaseLocalizationConfigurationServer;\n\n    /**\n     * The TimeFormatLocalization cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TimeFormatLocalizationServer} for convenience.\n     */\n    export const TimeFormatLocalizationServer = BaseTimeFormatLocalizationServer;\n\n    /**\n     * The UnitLocalization cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link UnitLocalizationServer} for convenience.\n     */\n    export const UnitLocalizationServer = BaseUnitLocalizationServer;\n\n    /**\n     * The DiagnosticLogs cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link DiagnosticLogsServer} for convenience.\n     */\n    export const DiagnosticLogsServer = BaseDiagnosticLogsServer;\n\n    /**\n     * The SoftwareDiagnostics cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link SoftwareDiagnosticsServer} for convenience.\n     */\n    export const SoftwareDiagnosticsServer = BaseSoftwareDiagnosticsServer;\n\n    /**\n     * The EthernetNetworkDiagnostics cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link EthernetNetworkDiagnosticsServer} for convenience.\n     */\n    export const EthernetNetworkDiagnosticsServer = BaseEthernetNetworkDiagnosticsServer;\n\n    /**\n     * The WiFiNetworkDiagnostics cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link WiFiNetworkDiagnosticsServer} for convenience.\n     */\n    export const WiFiNetworkDiagnosticsServer = BaseWiFiNetworkDiagnosticsServer;\n\n    /**\n     * The ThreadNetworkDiagnostics cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ThreadNetworkDiagnosticsServer} for convenience.\n     */\n    export const ThreadNetworkDiagnosticsServer = BaseThreadNetworkDiagnosticsServer;\n\n    /**\n     * The IcdManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IcdManagementServer} for convenience.\n     */\n    export const IcdManagementServer = BaseIcdManagementServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: {\n            Parts: PartsBehavior,\n            Index: IndexBehavior,\n            BasicInformation: BasicInformationServer,\n            AccessControl: AccessControlServer,\n            GroupKeyManagement: GroupKeyManagementServer,\n            GeneralCommissioning: GeneralCommissioningServer,\n            AdministratorCommissioning: AdministratorCommissioningServer,\n            OperationalCredentials: OperationalCredentialsServer,\n            GeneralDiagnostics: GeneralDiagnosticsServer\n        },\n\n        optional: {\n            PowerSourceConfiguration: PowerSourceConfigurationServer,\n            TimeSynchronization: TimeSynchronizationServer,\n            NetworkCommissioning: NetworkCommissioningServer,\n            LocalizationConfiguration: LocalizationConfigurationServer,\n            TimeFormatLocalization: TimeFormatLocalizationServer,\n            UnitLocalization: UnitLocalizationServer,\n            DiagnosticLogs: DiagnosticLogsServer,\n            SoftwareDiagnostics: SoftwareDiagnosticsServer,\n            EthernetNetworkDiagnostics: EthernetNetworkDiagnosticsServer,\n            WiFiNetworkDiagnostics: WiFiNetworkDiagnosticsServer,\n            ThreadNetworkDiagnostics: ThreadNetworkDiagnosticsServer,\n            IcdManagement: IcdManagementServer\n        }\n    };\n}\n\nexport const RootEndpointDefinition = MutableEndpoint({\n    name: \"RootNode\",\n    deviceType: 0x16,\n    deviceRevision: 2,\n    deviceClass: DeviceClasses.Node,\n    requirements: RootRequirements,\n\n    behaviors: SupportedBehaviors(\n        RootRequirements.server.mandatory.Parts,\n        RootRequirements.server.mandatory.Index,\n        RootRequirements.server.mandatory.BasicInformation,\n        RootRequirements.server.mandatory.AccessControl,\n        RootRequirements.server.mandatory.GroupKeyManagement,\n        RootRequirements.server.mandatory.GeneralCommissioning,\n        RootRequirements.server.mandatory.AdministratorCommissioning,\n        RootRequirements.server.mandatory.OperationalCredentials,\n        RootRequirements.server.mandatory.GeneralDiagnostics\n    )\n});\n\nexport const RootEndpoint: RootEndpoint = RootEndpointDefinition;\n"],
  "mappings": "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",
  "names": ["RootRequirements"]
}
