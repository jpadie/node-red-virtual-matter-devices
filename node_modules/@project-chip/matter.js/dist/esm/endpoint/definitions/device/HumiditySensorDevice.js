/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import {
  RelativeHumidityMeasurementServer as BaseRelativeHumidityMeasurementServer
} from "../../../behavior/definitions/relative-humidity-measurement/RelativeHumidityMeasurementServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { SupportedBehaviors } from "../../properties/SupportedBehaviors.js";
var HumiditySensorRequirements;
((HumiditySensorRequirements2) => {
  HumiditySensorRequirements2.IdentifyServer = BaseIdentifyServer;
  HumiditySensorRequirements2.RelativeHumidityMeasurementServer = BaseRelativeHumidityMeasurementServer;
  HumiditySensorRequirements2.server = {
    mandatory: { Identify: HumiditySensorRequirements2.IdentifyServer, RelativeHumidityMeasurement: HumiditySensorRequirements2.RelativeHumidityMeasurementServer }
  };
})(HumiditySensorRequirements || (HumiditySensorRequirements = {}));
const HumiditySensorDeviceDefinition = MutableEndpoint({
  name: "HumiditySensor",
  deviceType: 775,
  deviceRevision: 2,
  requirements: HumiditySensorRequirements,
  behaviors: SupportedBehaviors(
    HumiditySensorRequirements.server.mandatory.Identify,
    HumiditySensorRequirements.server.mandatory.RelativeHumidityMeasurement
  )
});
const HumiditySensorDevice = HumiditySensorDeviceDefinition;
export {
  HumiditySensorDevice,
  HumiditySensorDeviceDefinition,
  HumiditySensorRequirements
};
//# sourceMappingURL=HumiditySensorDevice.js.map
