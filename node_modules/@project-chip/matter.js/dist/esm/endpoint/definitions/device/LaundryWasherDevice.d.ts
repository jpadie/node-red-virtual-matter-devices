/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OperationalStateServer as BaseOperationalStateServer } from "../../../behavior/definitions/operational-state/OperationalStateServer.js";
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import { LaundryWasherModeServer as BaseLaundryWasherModeServer } from "../../../behavior/definitions/laundry-washer-mode/LaundryWasherModeServer.js";
import { OnOffServer as BaseOnOffServer } from "../../../behavior/definitions/on-off/OnOffServer.js";
import { LaundryWasherControlsServer as BaseLaundryWasherControlsServer } from "../../../behavior/definitions/laundry-washer-controls/LaundryWasherControlsServer.js";
import { TemperatureControlServer as BaseTemperatureControlServer } from "../../../behavior/definitions/temperature-control/TemperatureControlServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { Identity } from "../../../util/Type.js";
/**
 * A Laundry Washer represents a device that is capable of laundering consumer items. Any laundry washer product may
 * utilize this device type.
 *
 * A Laundry Washer shall be composed of at least one endpoint with the Laundry Washer device type.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 13.1
 */
export interface LaundryWasherDevice extends Identity<typeof LaundryWasherDeviceDefinition> {
}
export declare namespace LaundryWasherRequirements {
    /**
     * The OperationalState cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OperationalStateServer} for convenience.
     */
    const OperationalStateServer: typeof BaseOperationalStateServer;
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The LaundryWasherMode cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link LaundryWasherModeServer} for convenience.
     */
    const LaundryWasherModeServer: typeof BaseLaundryWasherModeServer;
    /**
     * The OnOff cluster is optional per the Matter specification.
     *
     * This version of {@link OnOffServer} is specialized per the specification.
     */
    const OnOffServer: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
    /**
     * The LaundryWasherControls cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link LaundryWasherControlsServer} for convenience.
     */
    const LaundryWasherControlsServer: typeof BaseLaundryWasherControlsServer;
    /**
     * The TemperatureControl cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link TemperatureControlServer} for convenience.
     */
    const TemperatureControlServer: typeof BaseTemperatureControlServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OperationalState: typeof BaseOperationalStateServer;
        };
        optional: {
            Identify: typeof BaseIdentifyServer;
            LaundryWasherMode: typeof BaseLaundryWasherModeServer;
            OnOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["DeadFrontBehavior"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
            LaundryWasherControls: typeof BaseLaundryWasherControlsServer;
            TemperatureControl: typeof BaseTemperatureControlServer;
        };
    };
}
export declare const LaundryWasherDeviceDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "LaundryWasher";
    readonly deviceType: 115;
    readonly deviceRevision: 1;
    readonly requirements: typeof LaundryWasherRequirements;
    readonly behaviors: {
        readonly operationalState: typeof BaseOperationalStateServer;
    };
}>, {
    readonly operationalState: typeof BaseOperationalStateServer;
}>;
export declare const LaundryWasherDevice: LaundryWasherDevice;
//# sourceMappingURL=LaundryWasherDevice.d.ts.map