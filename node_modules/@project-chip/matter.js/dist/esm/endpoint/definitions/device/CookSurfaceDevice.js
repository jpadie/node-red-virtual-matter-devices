/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
import {
  TemperatureControlServer as BaseTemperatureControlServer
} from "../../../behavior/definitions/temperature-control/TemperatureControlServer.js";
import {
  TemperatureMeasurementServer as BaseTemperatureMeasurementServer
} from "../../../behavior/definitions/temperature-measurement/TemperatureMeasurementServer.js";
import { OnOffServer as BaseOnOffServer } from "../../../behavior/definitions/on-off/OnOffServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { SupportedBehaviors } from "../../properties/SupportedBehaviors.js";
var CookSurfaceRequirements;
((CookSurfaceRequirements2) => {
  CookSurfaceRequirements2.TemperatureControlServer = BaseTemperatureControlServer;
  CookSurfaceRequirements2.TemperatureMeasurementServer = BaseTemperatureMeasurementServer;
  CookSurfaceRequirements2.OnOffServer = BaseOnOffServer.with("OffOnly");
  CookSurfaceRequirements2.server = {
    optional: {
      TemperatureControl: CookSurfaceRequirements2.TemperatureControlServer,
      TemperatureMeasurement: CookSurfaceRequirements2.TemperatureMeasurementServer,
      OnOff: CookSurfaceRequirements2.OnOffServer
    },
    mandatory: {}
  };
})(CookSurfaceRequirements || (CookSurfaceRequirements = {}));
const CookSurfaceDeviceDefinition = MutableEndpoint({
  name: "CookSurface",
  deviceType: 119,
  deviceRevision: 1,
  requirements: CookSurfaceRequirements,
  behaviors: SupportedBehaviors()
});
const CookSurfaceDevice = CookSurfaceDeviceDefinition;
export {
  CookSurfaceDevice,
  CookSurfaceDeviceDefinition,
  CookSurfaceRequirements
};
//# sourceMappingURL=CookSurfaceDevice.js.map
