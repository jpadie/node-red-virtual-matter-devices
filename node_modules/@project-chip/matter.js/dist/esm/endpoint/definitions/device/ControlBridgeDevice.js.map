{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/ControlBridgeDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { IdentifyBehavior as BaseIdentifyBehavior } from \"../../../behavior/definitions/identify/IdentifyBehavior.js\";\nimport { GroupsBehavior as BaseGroupsBehavior } from \"../../../behavior/definitions/groups/GroupsBehavior.js\";\nimport { OnOffBehavior as BaseOnOffBehavior } from \"../../../behavior/definitions/on-off/OnOffBehavior.js\";\nimport {\n    LevelControlBehavior as BaseLevelControlBehavior\n} from \"../../../behavior/definitions/level-control/LevelControlBehavior.js\";\nimport {\n    ColorControlBehavior as BaseColorControlBehavior\n} from \"../../../behavior/definitions/color-control/ColorControlBehavior.js\";\nimport {\n    ScenesManagementBehavior as BaseScenesManagementBehavior\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementBehavior.js\";\nimport {\n    IlluminanceMeasurementBehavior as BaseIlluminanceMeasurementBehavior\n} from \"../../../behavior/definitions/illuminance-measurement/IlluminanceMeasurementBehavior.js\";\nimport {\n    OccupancySensingBehavior as BaseOccupancySensingBehavior\n} from \"../../../behavior/definitions/occupancy-sensing/OccupancySensingBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Control Bridge is a controller device that, when bound to a lighting device such as an Extended Color Light, is\n * capable of being used to switch the device on or off, adjust the intensity of the light being emitted and adjust the\n * color of the light being emitted. In addition, a Control Bridge device is capable of being used for setting scenes.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 6.4\n */\nexport interface ControlBridgeDevice extends Identity<typeof ControlBridgeDeviceDefinition> {}\n\nexport namespace ControlBridgeRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.\n     */\n    export const IdentifyBehavior = BaseIdentifyBehavior;\n\n    /**\n     * The Groups cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.\n     */\n    export const GroupsBehavior = BaseGroupsBehavior;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.\n     */\n    export const OnOffBehavior = BaseOnOffBehavior;\n\n    /**\n     * The LevelControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.\n     */\n    export const LevelControlBehavior = BaseLevelControlBehavior;\n\n    /**\n     * The ColorControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ColorControlBehavior} for convenience.\n     */\n    export const ColorControlBehavior = BaseColorControlBehavior;\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.\n     */\n    export const ScenesManagementBehavior = BaseScenesManagementBehavior;\n\n    /**\n     * The IlluminanceMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IlluminanceMeasurementBehavior} for convenience.\n     */\n    export const IlluminanceMeasurementBehavior = BaseIlluminanceMeasurementBehavior;\n\n    /**\n     * The OccupancySensing cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.\n     */\n    export const OccupancySensingBehavior = BaseOccupancySensingBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = { mandatory: { Identify: IdentifyServer } };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = {\n        mandatory: {\n            Identify: IdentifyBehavior,\n            Groups: GroupsBehavior,\n            OnOff: OnOffBehavior,\n            LevelControl: LevelControlBehavior,\n            ColorControl: ColorControlBehavior\n        },\n\n        optional: {\n            ScenesManagement: ScenesManagementBehavior,\n            IlluminanceMeasurement: IlluminanceMeasurementBehavior,\n            OccupancySensing: OccupancySensingBehavior\n        }\n    };\n}\n\nexport const ControlBridgeDeviceDefinition = MutableEndpoint({\n    name: \"ControlBridge\",\n    deviceType: 0x840,\n    deviceRevision: 3,\n    requirements: ControlBridgeRequirements,\n    behaviors: SupportedBehaviors(ControlBridgeRequirements.server.mandatory.Identify)\n});\n\nexport const ControlBridgeDevice: ControlBridgeDevice = ControlBridgeDeviceDefinition;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,oBAAoB,4BAA4B;AACzD,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,iBAAiB,yBAAyB;AACnD;AAAA,EACI,wBAAwB;AAAA,OACrB;AACP;AAAA,EACI,wBAAwB;AAAA,OACrB;AACP;AAAA,EACI,4BAA4B;AAAA,OACzB;AACP;AAAA,EACI,kCAAkC;AAAA,OAC/B;AACP;AAAA,EACI,4BAA4B;AAAA,OACzB;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAY5B,IAAU;AAAA,CAAV,CAAUA,+BAAV;AAMI,EAAMA,2BAAA,iBAAiB;AAOvB,EAAMA,2BAAA,mBAAmB;AAOzB,EAAMA,2BAAA,iBAAiB;AAOvB,EAAMA,2BAAA,gBAAgB;AAOtB,EAAMA,2BAAA,uBAAuB;AAO7B,EAAMA,2BAAA,uBAAuB;AAO7B,EAAMA,2BAAA,2BAA2B;AAOjC,EAAMA,2BAAA,iCAAiC;AAOvC,EAAMA,2BAAA,2BAA2B;AAKjC,EAAMA,2BAAA,SAAS,EAAE,WAAW,EAAE,UAAUA,2BAAA,eAAe,EAAE;AAKzD,EAAMA,2BAAA,SAAS;AAAA,IAClB,WAAW;AAAA,MACP,UAAUA,2BAAA;AAAA,MACV,QAAQA,2BAAA;AAAA,MACR,OAAOA,2BAAA;AAAA,MACP,cAAcA,2BAAA;AAAA,MACd,cAAcA,2BAAA;AAAA,IAClB;AAAA,IAEA,UAAU;AAAA,MACN,kBAAkBA,2BAAA;AAAA,MAClB,wBAAwBA,2BAAA;AAAA,MACxB,kBAAkBA,2BAAA;AAAA,IACtB;AAAA,EACJ;AAAA,GAtFa;AAyFV,MAAM,gCAAgC,gBAAgB;AAAA,EACzD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,WAAW,mBAAmB,0BAA0B,OAAO,UAAU,QAAQ;AACrF,CAAC;AAEM,MAAM,sBAA2C;",
  "names": ["ControlBridgeRequirements"]
}
