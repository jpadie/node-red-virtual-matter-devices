/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { OnOffServer as BaseOnOffServer } from "../../../behavior/definitions/on-off/OnOffServer.js";
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { Identity } from "../../../util/Type.js";
/**
 * A cooktop is a cooking surface that heats food either by transferring currents from an electromagnetic field located
 * below the glass surface directly to the magnetic induction cookware placed above or through traditional gas or
 * electric burners.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 13.8
 */
export interface CooktopDevice extends Identity<typeof CooktopDeviceDefinition> {
}
export declare namespace CooktopRequirements {
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * This version of {@link OnOffServer} is specialized per the specification.
     */
    const OnOffServer: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["OffOnly"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
    /**
     * The Identify cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            OnOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["OffOnly"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
        };
        optional: {
            Identify: typeof BaseIdentifyServer;
        };
    };
}
export declare const CooktopDeviceDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "Cooktop";
    readonly deviceType: 120;
    readonly deviceRevision: 1;
    readonly requirements: typeof CooktopRequirements;
    readonly behaviors: {
        readonly onOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["OffOnly"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
    };
}>, {
    readonly onOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").ClusterComposer.WithFeatures<import("../../../cluster/export.js").OnOff.Cluster, readonly [import("../../../cluster/export.js").OnOff.Feature.Lighting]>, readonly ["OffOnly"]>, typeof BaseOnOffServer, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
}>;
export declare const CooktopDevice: CooktopDevice;
//# sourceMappingURL=CooktopDevice.d.ts.map