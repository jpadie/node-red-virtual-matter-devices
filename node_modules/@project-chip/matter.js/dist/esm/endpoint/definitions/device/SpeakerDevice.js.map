{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/SpeakerDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { OnOffServer as BaseOnOffServer } from \"../../../behavior/definitions/on-off/OnOffServer.js\";\nimport {\n    LevelControlServer as BaseLevelControlServer\n} from \"../../../behavior/definitions/level-control/LevelControlServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * This defines conformance to the Speaker device type. This feature controls the speaker volume of the device.\n *\n * To control unmute/mute, the On/Off cluster shall be used. A value of TRUE for the OnOff attribute shall represent\n * the volume on (not muted) state, while a value of FALSE shall represent the volume off (muted) state. For volume\n * level control, the Level cluster shall be used.\n *\n * A dedicated endpoint is needed because the On/Off cluster can also be used for other purposes, such as for power\n * control.\n *\n * The decision to use Level and On/Off clusters for volume (rather than defining a new audio control cluster) was made\n * in order to treat volume in a fashion consistent with lighting which also uses these clusters and has matching\n * functional requirements.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 10.4\n */\nexport interface SpeakerDevice extends Identity<typeof SpeakerDeviceDefinition> {}\n\nexport namespace SpeakerRequirements {\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OnOffServer} for convenience.\n     */\n    export const OnOffServer = BaseOnOffServer;\n\n    /**\n     * The LevelControl cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link LevelControlServer} for convenience.\n     */\n    export const LevelControlServer = BaseLevelControlServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = { mandatory: { OnOff: OnOffServer, LevelControl: LevelControlServer } };\n}\n\nexport const SpeakerDeviceDefinition = MutableEndpoint({\n    name: \"Speaker\",\n    deviceType: 0x22,\n    deviceRevision: 1,\n    requirements: SpeakerRequirements,\n    behaviors: SupportedBehaviors(\n        SpeakerRequirements.server.mandatory.OnOff,\n        SpeakerRequirements.server.mandatory.LevelControl\n    )\n});\n\nexport const SpeakerDevice: SpeakerDevice = SpeakerDeviceDefinition;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,eAAe,uBAAuB;AAC/C;AAAA,EACI,sBAAsB;AAAA,OACnB;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAqB5B,IAAU;AAAA,CAAV,CAAUA,yBAAV;AAMI,EAAMA,qBAAA,cAAc;AAOpB,EAAMA,qBAAA,qBAAqB;AAK3B,EAAMA,qBAAA,SAAS,EAAE,WAAW,EAAE,OAAOA,qBAAA,aAAa,cAAcA,qBAAA,mBAAmB,EAAE;AAAA,GAlB/E;AAqBV,MAAM,0BAA0B,gBAAgB;AAAA,EACnD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,WAAW;AAAA,IACP,oBAAoB,OAAO,UAAU;AAAA,IACrC,oBAAoB,OAAO,UAAU;AAAA,EACzC;AACJ,CAAC;AAEM,MAAM,gBAA+B;",
  "names": ["SpeakerRequirements"]
}
