/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */
/*** THIS FILE IS GENERATED, DO NOT EDIT ***/
import { IdentifyServer as BaseIdentifyServer } from "../../../behavior/definitions/identify/IdentifyServer.js";
import { MutableEndpoint } from "../../type/MutableEndpoint.js";
import { Identity } from "../../../util/Type.js";
/**
 * A Control Bridge is a controller device that, when bound to a lighting device such as an Extended Color Light, is
 * capable of being used to switch the device on or off, adjust the intensity of the light being emitted and adjust the
 * color of the light being emitted. In addition, a Control Bridge device is capable of being used for setting scenes.
 *
 * @see {@link MatterSpecification.v13.Device} ยง 6.4
 */
export interface ControlBridgeDevice extends Identity<typeof ControlBridgeDeviceDefinition> {
}
export declare namespace ControlBridgeRequirements {
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.
     */
    const IdentifyServer: typeof BaseIdentifyServer;
    /**
     * The Identify cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link IdentifyBehavior} for convenience.
     */
    const IdentifyBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Identify.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>;
    /**
     * The Groups cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link GroupsBehavior} for convenience.
     */
    const GroupsBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Groups.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>;
    /**
     * The OnOff cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link OnOffBehavior} for convenience.
     */
    const OnOffBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OnOff.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
    /**
     * The LevelControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link LevelControlBehavior} for convenience.
     */
    const LevelControlBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").LevelControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>;
    /**
     * The ColorControl cluster is required by the Matter specification.
     *
     * We provide this alias to the default implementation {@link ColorControlBehavior} for convenience.
     */
    const ColorControlBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ColorControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/color-control/ColorControlInterface.js").ColorControlInterface>, import("../../../behavior/definitions/color-control/ColorControlInterface.js").ColorControlInterface>;
    /**
     * The ScenesManagement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link ScenesManagementBehavior} for convenience.
     */
    const ScenesManagementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ScenesManagement.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
        readonly id: 0;
        readonly revision: 0;
        readonly name: "Unknown";
        readonly attributes: {};
        readonly commands: {};
        readonly events: {};
    }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>;
    /**
     * The IlluminanceMeasurement cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link IlluminanceMeasurementBehavior} for convenience.
     */
    const IlluminanceMeasurementBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").IlluminanceMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * The OccupancySensing cluster is optional per the Matter specification.
     *
     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.
     */
    const OccupancySensingBehavior: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OccupancySensing.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
        components: never[];
    }>;
    /**
     * An implementation for each server cluster supported by the endpoint per the Matter specification.
     */
    const server: {
        mandatory: {
            Identify: typeof BaseIdentifyServer;
        };
    };
    /**
     * A definition for each client cluster supported by the endpoint per the Matter specification.
     */
    const client: {
        mandatory: {
            Identify: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Identify.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>, import("../../../behavior/definitions/identify/IdentifyInterface.js").IdentifyInterface>;
            Groups: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").Groups.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>, import("../../../behavior/definitions/groups/GroupsInterface.js").GroupsInterface>;
            OnOff: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OnOff.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>, import("../../../behavior/definitions/on-off/OnOffInterface.js").OnOffInterface>;
            LevelControl: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").LevelControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>, import("../../../behavior/definitions/level-control/LevelControlInterface.js").LevelControlInterface>;
            ColorControl: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ColorControl.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/color-control/ColorControlInterface.js").ColorControlInterface>, import("../../../behavior/definitions/color-control/ColorControlInterface.js").ColorControlInterface>;
        };
        optional: {
            ScenesManagement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").ScenesManagement.Cluster, import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/ClusterType.js").ClusterType.Of<{
                readonly id: 0;
                readonly revision: 0;
                readonly name: "Unknown";
                readonly attributes: {};
                readonly commands: {};
                readonly events: {};
            }>, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>, import("../../../behavior/definitions/scenes-management/ScenesManagementInterface.js").ScenesManagementInterface>;
            IlluminanceMeasurement: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").IlluminanceMeasurement.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
            OccupancySensing: import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior.Type<import("../../../cluster/export.js").OccupancySensing.Cluster, typeof import("../../../behavior/cluster/ClusterBehavior.js").ClusterBehavior, {
                components: never[];
            }>;
        };
    };
}
export declare const ControlBridgeDeviceDefinition: MutableEndpoint.With<import("../../type/EndpointType.js").EndpointType.For<{
    readonly name: "ControlBridge";
    readonly deviceType: 2112;
    readonly deviceRevision: 3;
    readonly requirements: typeof ControlBridgeRequirements;
    readonly behaviors: {
        readonly identify: typeof BaseIdentifyServer;
    };
}>, {
    readonly identify: typeof BaseIdentifyServer;
}>;
export declare const ControlBridgeDevice: ControlBridgeDevice;
//# sourceMappingURL=ControlBridgeDevice.d.ts.map