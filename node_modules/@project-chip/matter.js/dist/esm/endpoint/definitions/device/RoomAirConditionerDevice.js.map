{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/RoomAirConditionerDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { OnOffServer as BaseOnOffServer } from \"../../../behavior/definitions/on-off/OnOffServer.js\";\nimport { ThermostatServer as BaseThermostatServer } from \"../../../behavior/definitions/thermostat/ThermostatServer.js\";\nimport { GroupsServer as BaseGroupsServer } from \"../../../behavior/definitions/groups/GroupsServer.js\";\nimport {\n    ScenesManagementServer as BaseScenesManagementServer\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementServer.js\";\nimport { FanControlServer as BaseFanControlServer } from \"../../../behavior/definitions/fan-control/FanControlServer.js\";\nimport {\n    ThermostatUserInterfaceConfigurationServer as BaseThermostatUserInterfaceConfigurationServer\n} from \"../../../behavior/definitions/thermostat-user-interface-configuration/ThermostatUserInterfaceConfigurationServer.js\";\nimport {\n    TemperatureMeasurementServer as BaseTemperatureMeasurementServer\n} from \"../../../behavior/definitions/temperature-measurement/TemperatureMeasurementServer.js\";\nimport {\n    RelativeHumidityMeasurementServer as BaseRelativeHumidityMeasurementServer\n} from \"../../../behavior/definitions/relative-humidity-measurement/RelativeHumidityMeasurementServer.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * This defines conformance to the Room Air Conditioner device type.\n *\n * A Room Air Conditioner is a device with the primary function of controlling the air temperature in a single room.\n *\n * RoomAirConditionerDevice requires Thermostat cluster but Thermostat is not added by default because you must select\n * the features your device supports. You can add manually using RoomAirConditionerDevice.with().\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 13.3\n */\nexport interface RoomAirConditionerDevice extends Identity<typeof RoomAirConditionerDeviceDefinition> {}\n\nexport namespace RoomAirConditionerRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * This version of {@link OnOffServer} is specialized per the specification.\n     */\n    export const OnOffServer = BaseOnOffServer.with(\"DeadFrontBehavior\");\n\n    /**\n     * The Thermostat cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ThermostatServer} for convenience.\n     */\n    export const ThermostatServer = BaseThermostatServer;\n\n    /**\n     * The Groups cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsServer} for convenience.\n     */\n    export const GroupsServer = BaseGroupsServer;\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.\n     */\n    export const ScenesManagementServer = BaseScenesManagementServer;\n\n    /**\n     * The FanControl cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link FanControlServer} for convenience.\n     */\n    export const FanControlServer = BaseFanControlServer;\n\n    /**\n     * The ThermostatUserInterfaceConfiguration cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ThermostatUserInterfaceConfigurationServer} for\n     * convenience.\n     */\n    export const ThermostatUserInterfaceConfigurationServer = BaseThermostatUserInterfaceConfigurationServer;\n\n    /**\n     * The TemperatureMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TemperatureMeasurementServer} for convenience.\n     */\n    export const TemperatureMeasurementServer = BaseTemperatureMeasurementServer;\n\n    /**\n     * The RelativeHumidityMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link RelativeHumidityMeasurementServer} for convenience.\n     */\n    export const RelativeHumidityMeasurementServer = BaseRelativeHumidityMeasurementServer;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: { Identify: IdentifyServer, OnOff: OnOffServer, Thermostat: ThermostatServer },\n\n        optional: {\n            Groups: GroupsServer,\n            ScenesManagement: ScenesManagementServer,\n            FanControl: FanControlServer,\n            ThermostatUserInterfaceConfiguration: ThermostatUserInterfaceConfigurationServer,\n            TemperatureMeasurement: TemperatureMeasurementServer,\n            RelativeHumidityMeasurement: RelativeHumidityMeasurementServer\n        }\n    };\n}\n\nexport const RoomAirConditionerDeviceDefinition = MutableEndpoint({\n    name: \"RoomAirConditioner\",\n    deviceType: 0x72,\n    deviceRevision: 2,\n    requirements: RoomAirConditionerRequirements,\n    behaviors: SupportedBehaviors(\n        RoomAirConditionerRequirements.server.mandatory.Identify,\n        RoomAirConditionerRequirements.server.mandatory.OnOff\n    )\n});\n\nexport const RoomAirConditionerDevice: RoomAirConditionerDevice = RoomAirConditionerDeviceDefinition;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,eAAe,uBAAuB;AAC/C,SAAS,oBAAoB,4BAA4B;AACzD,SAAS,gBAAgB,wBAAwB;AACjD;AAAA,EACI,0BAA0B;AAAA,OACvB;AACP,SAAS,oBAAoB,4BAA4B;AACzD;AAAA,EACI,8CAA8C;AAAA,OAC3C;AACP;AAAA,EACI,gCAAgC;AAAA,OAC7B;AACP;AAAA,EACI,qCAAqC;AAAA,OAClC;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAe5B,IAAU;AAAA,CAAV,CAAUA,oCAAV;AAMI,EAAMA,gCAAA,iBAAiB;AAOvB,EAAMA,gCAAA,cAAc,gBAAgB,KAAK,mBAAmB;AAO5D,EAAMA,gCAAA,mBAAmB;AAOzB,EAAMA,gCAAA,eAAe;AAOrB,EAAMA,gCAAA,yBAAyB;AAO/B,EAAMA,gCAAA,mBAAmB;AAQzB,EAAMA,gCAAA,6CAA6C;AAOnD,EAAMA,gCAAA,+BAA+B;AAOrC,EAAMA,gCAAA,oCAAoC;AAK1C,EAAMA,gCAAA,SAAS;AAAA,IAClB,WAAW,EAAE,UAAUA,gCAAA,gBAAgB,OAAOA,gCAAA,aAAa,YAAYA,gCAAA,iBAAiB;AAAA,IAExF,UAAU;AAAA,MACN,QAAQA,gCAAA;AAAA,MACR,kBAAkBA,gCAAA;AAAA,MAClB,YAAYA,gCAAA;AAAA,MACZ,sCAAsCA,gCAAA;AAAA,MACtC,wBAAwBA,gCAAA;AAAA,MACxB,6BAA6BA,gCAAA;AAAA,IACjC;AAAA,EACJ;AAAA,GA/Ea;AAkFV,MAAM,qCAAqC,gBAAgB;AAAA,EAC9D,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,WAAW;AAAA,IACP,+BAA+B,OAAO,UAAU;AAAA,IAChD,+BAA+B,OAAO,UAAU;AAAA,EACpD;AACJ,CAAC;AAEM,MAAM,2BAAqD;",
  "names": ["RoomAirConditionerRequirements"]
}
