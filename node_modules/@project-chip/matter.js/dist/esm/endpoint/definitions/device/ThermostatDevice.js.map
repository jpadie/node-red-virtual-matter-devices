{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/ThermostatDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { ThermostatServer as BaseThermostatServer } from \"../../../behavior/definitions/thermostat/ThermostatServer.js\";\nimport { GroupsServer as BaseGroupsServer } from \"../../../behavior/definitions/groups/GroupsServer.js\";\nimport {\n    ScenesManagementServer as BaseScenesManagementServer\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementServer.js\";\nimport {\n    ThermostatUserInterfaceConfigurationServer as BaseThermostatUserInterfaceConfigurationServer\n} from \"../../../behavior/definitions/thermostat-user-interface-configuration/ThermostatUserInterfaceConfigurationServer.js\";\nimport {\n    EnergyPreferenceServer as BaseEnergyPreferenceServer\n} from \"../../../behavior/definitions/energy-preference/EnergyPreferenceServer.js\";\nimport {\n    TimeSynchronizationServer as BaseTimeSynchronizationServer\n} from \"../../../behavior/definitions/time-synchronization/TimeSynchronizationServer.js\";\nimport {\n    RelativeHumidityMeasurementBehavior as BaseRelativeHumidityMeasurementBehavior\n} from \"../../../behavior/definitions/relative-humidity-measurement/RelativeHumidityMeasurementBehavior.js\";\nimport {\n    TimeSynchronizationBehavior as BaseTimeSynchronizationBehavior\n} from \"../../../behavior/definitions/time-synchronization/TimeSynchronizationBehavior.js\";\nimport {\n    FanControlBehavior as BaseFanControlBehavior\n} from \"../../../behavior/definitions/fan-control/FanControlBehavior.js\";\nimport {\n    TemperatureMeasurementBehavior as BaseTemperatureMeasurementBehavior\n} from \"../../../behavior/definitions/temperature-measurement/TemperatureMeasurementBehavior.js\";\nimport {\n    OccupancySensingBehavior as BaseOccupancySensingBehavior\n} from \"../../../behavior/definitions/occupancy-sensing/OccupancySensingBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Thermostat device is capable of having either built-in or separate sensors for temperature, humidity or occupancy.\n * It allows the desired temperature to be set either remotely or locally. The thermostat is capable of sending heating\n * and/or cooling requirement notifications to a heating/cooling unit (for example, an indoor air handler) or is\n * capable of including a mechanism to control a heating or cooling unit directly.\n *\n * ThermostatDevice requires Thermostat cluster but Thermostat is not added by default because you must select the\n * features your device supports. You can add manually using ThermostatDevice.with().\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 9.1\n */\nexport interface ThermostatDevice extends Identity<typeof ThermostatDeviceDefinition> {}\n\nexport namespace ThermostatRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link IdentifyServer} for convenience.\n     */\n    export const IdentifyServer = BaseIdentifyServer;\n\n    /**\n     * The Thermostat cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ThermostatServer} for convenience.\n     */\n    export const ThermostatServer = BaseThermostatServer;\n\n    /**\n     * The Groups cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsServer} for convenience.\n     */\n    export const GroupsServer = BaseGroupsServer;\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.\n     */\n    export const ScenesManagementServer = BaseScenesManagementServer;\n\n    /**\n     * The ThermostatUserInterfaceConfiguration cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ThermostatUserInterfaceConfigurationServer} for\n     * convenience.\n     */\n    export const ThermostatUserInterfaceConfigurationServer = BaseThermostatUserInterfaceConfigurationServer;\n\n    /**\n     * The EnergyPreference cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link EnergyPreferenceServer} for convenience.\n     */\n    export const EnergyPreferenceServer = BaseEnergyPreferenceServer;\n\n    /**\n     * The TimeSynchronization cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TimeSynchronizationServer} for convenience.\n     */\n    export const TimeSynchronizationServer = BaseTimeSynchronizationServer;\n\n    /**\n     * The RelativeHumidityMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link RelativeHumidityMeasurementBehavior} for convenience.\n     */\n    export const RelativeHumidityMeasurementBehavior = BaseRelativeHumidityMeasurementBehavior;\n\n    /**\n     * The TimeSynchronization cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TimeSynchronizationBehavior} for convenience.\n     */\n    export const TimeSynchronizationBehavior = BaseTimeSynchronizationBehavior;\n\n    /**\n     * The FanControl cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link FanControlBehavior} for convenience.\n     */\n    export const FanControlBehavior = BaseFanControlBehavior;\n\n    /**\n     * The TemperatureMeasurement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link TemperatureMeasurementBehavior} for convenience.\n     */\n    export const TemperatureMeasurementBehavior = BaseTemperatureMeasurementBehavior;\n\n    /**\n     * The OccupancySensing cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.\n     */\n    export const OccupancySensingBehavior = BaseOccupancySensingBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: { Identify: IdentifyServer, Thermostat: ThermostatServer },\n\n        optional: {\n            Groups: GroupsServer,\n            ScenesManagement: ScenesManagementServer,\n            ThermostatUserInterfaceConfiguration: ThermostatUserInterfaceConfigurationServer,\n            EnergyPreference: EnergyPreferenceServer,\n            TimeSynchronization: TimeSynchronizationServer\n        }\n    };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = {\n        optional: {\n            RelativeHumidityMeasurement: RelativeHumidityMeasurementBehavior,\n            TimeSynchronization: TimeSynchronizationBehavior,\n            FanControl: FanControlBehavior,\n            TemperatureMeasurement: TemperatureMeasurementBehavior,\n            OccupancySensing: OccupancySensingBehavior\n        },\n\n        mandatory: {}\n    };\n}\n\nexport const ThermostatDeviceDefinition = MutableEndpoint({\n    name: \"Thermostat\",\n    deviceType: 0x301,\n    deviceRevision: 3,\n    requirements: ThermostatRequirements,\n    behaviors: SupportedBehaviors(ThermostatRequirements.server.mandatory.Identify)\n});\n\nexport const ThermostatDevice: ThermostatDevice = ThermostatDeviceDefinition;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,oBAAoB,4BAA4B;AACzD,SAAS,gBAAgB,wBAAwB;AACjD;AAAA,EACI,0BAA0B;AAAA,OACvB;AACP;AAAA,EACI,8CAA8C;AAAA,OAC3C;AACP;AAAA,EACI,0BAA0B;AAAA,OACvB;AACP;AAAA,EACI,6BAA6B;AAAA,OAC1B;AACP;AAAA,EACI,uCAAuC;AAAA,OACpC;AACP;AAAA,EACI,+BAA+B;AAAA,OAC5B;AACP;AAAA,EACI,sBAAsB;AAAA,OACnB;AACP;AAAA,EACI,kCAAkC;AAAA,OAC/B;AACP;AAAA,EACI,4BAA4B;AAAA,OACzB;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAgB5B,IAAU;AAAA,CAAV,CAAUA,4BAAV;AAMI,EAAMA,wBAAA,iBAAiB;AAOvB,EAAMA,wBAAA,mBAAmB;AAOzB,EAAMA,wBAAA,eAAe;AAOrB,EAAMA,wBAAA,yBAAyB;AAQ/B,EAAMA,wBAAA,6CAA6C;AAOnD,EAAMA,wBAAA,yBAAyB;AAO/B,EAAMA,wBAAA,4BAA4B;AAOlC,EAAMA,wBAAA,sCAAsC;AAO5C,EAAMA,wBAAA,8BAA8B;AAOpC,EAAMA,wBAAA,qBAAqB;AAO3B,EAAMA,wBAAA,iCAAiC;AAOvC,EAAMA,wBAAA,2BAA2B;AAKjC,EAAMA,wBAAA,SAAS;AAAA,IAClB,WAAW,EAAE,UAAUA,wBAAA,gBAAgB,YAAYA,wBAAA,iBAAiB;AAAA,IAEpE,UAAU;AAAA,MACN,QAAQA,wBAAA;AAAA,MACR,kBAAkBA,wBAAA;AAAA,MAClB,sCAAsCA,wBAAA;AAAA,MACtC,kBAAkBA,wBAAA;AAAA,MAClB,qBAAqBA,wBAAA;AAAA,IACzB;AAAA,EACJ;AAKO,EAAMA,wBAAA,SAAS;AAAA,IAClB,UAAU;AAAA,MACN,6BAA6BA,wBAAA;AAAA,MAC7B,qBAAqBA,wBAAA;AAAA,MACrB,YAAYA,wBAAA;AAAA,MACZ,wBAAwBA,wBAAA;AAAA,MACxB,kBAAkBA,wBAAA;AAAA,IACtB;AAAA,IAEA,WAAW,CAAC;AAAA,EAChB;AAAA,GAlHa;AAqHV,MAAM,6BAA6B,gBAAgB;AAAA,EACtD,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EACd,WAAW,mBAAmB,uBAAuB,OAAO,UAAU,QAAQ;AAClF,CAAC;AAEM,MAAM,mBAAqC;",
  "names": ["ThermostatRequirements"]
}
