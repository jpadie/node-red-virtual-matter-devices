{
  "version": 3,
  "sources": ["../../../../../src/endpoint/definitions/device/ColorTemperatureLightDevice.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*** THIS FILE IS GENERATED, DO NOT EDIT ***/\n\nimport { IdentifyServer as BaseIdentifyServer } from \"../../../behavior/definitions/identify/IdentifyServer.js\";\nimport { GroupsServer as BaseGroupsServer } from \"../../../behavior/definitions/groups/GroupsServer.js\";\nimport { OnOffServer as BaseOnOffServer } from \"../../../behavior/definitions/on-off/OnOffServer.js\";\nimport {\n    LevelControlServer as BaseLevelControlServer\n} from \"../../../behavior/definitions/level-control/LevelControlServer.js\";\nimport {\n    ColorControlServer as BaseColorControlServer\n} from \"../../../behavior/definitions/color-control/ColorControlServer.js\";\nimport {\n    ScenesManagementServer as BaseScenesManagementServer\n} from \"../../../behavior/definitions/scenes-management/ScenesManagementServer.js\";\nimport {\n    OccupancySensingBehavior as BaseOccupancySensingBehavior\n} from \"../../../behavior/definitions/occupancy-sensing/OccupancySensingBehavior.js\";\nimport { MutableEndpoint } from \"../../type/MutableEndpoint.js\";\nimport { SupportedBehaviors } from \"../../properties/SupportedBehaviors.js\";\nimport { Identity } from \"../../../util/Type.js\";\n\n/**\n * A Color Temperature Light is a lighting device that is capable of being switched on or off, the intensity of its\n * light adjusted, and its color temperature adjusted by means of a bound controller device such as a Color Dimmer\n * Switch.\n *\n * @see {@link MatterSpecification.v13.Device} \u00A7 4.3\n */\nexport interface ColorTemperatureLightDevice extends Identity<typeof ColorTemperatureLightDeviceDefinition> {}\n\nexport namespace ColorTemperatureLightRequirements {\n    /**\n     * The Identify cluster is required by the Matter specification.\n     *\n     * This version of {@link IdentifyServer} is specialized per the specification.\n     */\n    export const IdentifyServer = BaseIdentifyServer.alter({ commands: { triggerEffect: { optional: false } } });\n\n    /**\n     * The Groups cluster is required by the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link GroupsServer} for convenience.\n     */\n    export const GroupsServer = BaseGroupsServer;\n\n    /**\n     * The OnOff cluster is required by the Matter specification.\n     *\n     * This version of {@link OnOffServer} is specialized per the specification.\n     */\n    export const OnOffServer = BaseOnOffServer.with(\"Lighting\");\n\n    /**\n     * The LevelControl cluster is required by the Matter specification.\n     *\n     * This version of {@link LevelControlServer} is specialized per the specification.\n     */\n    export const LevelControlServer = BaseLevelControlServer\n        .with(\"OnOff\", \"Lighting\")\n        .alter({\n            attributes: {\n                currentLevel: { min: 1, max: 254 },\n                minLevel: { default: 1, min: 1, max: 2 },\n                maxLevel: { default: 254, min: 254, max: 255 }\n            }\n        });\n\n    /**\n     * The ColorControl cluster is required by the Matter specification.\n     *\n     * This version of {@link ColorControlServer} is specialized per the specification.\n     */\n    export const ColorControlServer = BaseColorControlServer\n        .with(\"ColorTemperature\")\n        .alter({ attributes: { remainingTime: { optional: false } } });\n\n    /**\n     * The ScenesManagement cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link ScenesManagementServer} for convenience.\n     */\n    export const ScenesManagementServer = BaseScenesManagementServer;\n\n    /**\n     * The OccupancySensing cluster is optional per the Matter specification.\n     *\n     * We provide this alias to the default implementation {@link OccupancySensingBehavior} for convenience.\n     */\n    export const OccupancySensingBehavior = BaseOccupancySensingBehavior;\n\n    /**\n     * An implementation for each server cluster supported by the endpoint per the Matter specification.\n     */\n    export const server = {\n        mandatory: {\n            Identify: IdentifyServer,\n            Groups: GroupsServer,\n            OnOff: OnOffServer,\n            LevelControl: LevelControlServer,\n            ColorControl: ColorControlServer\n        },\n\n        optional: { ScenesManagement: ScenesManagementServer }\n    };\n\n    /**\n     * A definition for each client cluster supported by the endpoint per the Matter specification.\n     */\n    export const client = { optional: { OccupancySensing: OccupancySensingBehavior }, mandatory: {} };\n}\n\nexport const ColorTemperatureLightDeviceDefinition = MutableEndpoint({\n    name: \"ColorTemperatureLight\",\n    deviceType: 0x10c,\n    deviceRevision: 4,\n    requirements: ColorTemperatureLightRequirements,\n\n    behaviors: SupportedBehaviors(\n        ColorTemperatureLightRequirements.server.mandatory.Identify,\n        ColorTemperatureLightRequirements.server.mandatory.Groups,\n        ColorTemperatureLightRequirements.server.mandatory.OnOff,\n        ColorTemperatureLightRequirements.server.mandatory.LevelControl,\n        ColorTemperatureLightRequirements.server.mandatory.ColorControl\n    )\n});\n\nexport const ColorTemperatureLightDevice: ColorTemperatureLightDevice = ColorTemperatureLightDeviceDefinition;\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAAS,kBAAkB,0BAA0B;AACrD,SAAS,gBAAgB,wBAAwB;AACjD,SAAS,eAAe,uBAAuB;AAC/C;AAAA,EACI,sBAAsB;AAAA,OACnB;AACP;AAAA,EACI,sBAAsB;AAAA,OACnB;AACP;AAAA,EACI,0BAA0B;AAAA,OACvB;AACP;AAAA,EACI,4BAA4B;AAAA,OACzB;AACP,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAY5B,IAAU;AAAA,CAAV,CAAUA,uCAAV;AAMI,EAAMA,mCAAA,iBAAiB,mBAAmB,MAAM,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,MAAM,EAAE,EAAE,CAAC;AAOpG,EAAMA,mCAAA,eAAe;AAOrB,EAAMA,mCAAA,cAAc,gBAAgB,KAAK,UAAU;AAOnD,EAAMA,mCAAA,qBAAqB,uBAC7B,KAAK,SAAS,UAAU,EACxB,MAAM;AAAA,IACH,YAAY;AAAA,MACR,cAAc,EAAE,KAAK,GAAG,KAAK,IAAI;AAAA,MACjC,UAAU,EAAE,SAAS,GAAG,KAAK,GAAG,KAAK,EAAE;AAAA,MACvC,UAAU,EAAE,SAAS,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IACjD;AAAA,EACJ,CAAC;AAOE,EAAMA,mCAAA,qBAAqB,uBAC7B,KAAK,kBAAkB,EACvB,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,UAAU,MAAM,EAAE,EAAE,CAAC;AAO1D,EAAMA,mCAAA,yBAAyB;AAO/B,EAAMA,mCAAA,2BAA2B;AAKjC,EAAMA,mCAAA,SAAS;AAAA,IAClB,WAAW;AAAA,MACP,UAAUA,mCAAA;AAAA,MACV,QAAQA,mCAAA;AAAA,MACR,OAAOA,mCAAA;AAAA,MACP,cAAcA,mCAAA;AAAA,MACd,cAAcA,mCAAA;AAAA,IAClB;AAAA,IAEA,UAAU,EAAE,kBAAkBA,mCAAA,uBAAuB;AAAA,EACzD;AAKO,EAAMA,mCAAA,SAAS,EAAE,UAAU,EAAE,kBAAkBA,mCAAA,yBAAyB,GAAG,WAAW,CAAC,EAAE;AAAA,GA9EnF;AAiFV,MAAM,wCAAwC,gBAAgB;AAAA,EACjE,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,cAAc;AAAA,EAEd,WAAW;AAAA,IACP,kCAAkC,OAAO,UAAU;AAAA,IACnD,kCAAkC,OAAO,UAAU;AAAA,IACnD,kCAAkC,OAAO,UAAU;AAAA,IACnD,kCAAkC,OAAO,UAAU;AAAA,IACnD,kCAAkC,OAAO,UAAU;AAAA,EACvD;AACJ,CAAC;AAEM,MAAM,8BAA2D;",
  "names": ["ColorTemperatureLightRequirements"]
}
